-- MySQL dump 10.13  Distrib 8.0.21, for macos10.15 (x86_64)
--
-- Host: localhost    Database: doracms
-- ------------------------------------------------------
-- Server version	8.0.21

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Current Database: `doracms`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `doracms` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;

USE `doracms`;

--
-- Table structure for table `doracms_admin_group`
--

DROP TABLE IF EXISTS `doracms_admin_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_admin_group` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(100) DEFAULT NULL,
  `power` longtext,
  `comments` varchar(100) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_admin_group`
--

LOCK TABLES `doracms_admin_group` WRITE;
/*!40000 ALTER TABLE `doracms_admin_group` DISABLE KEYS */;
INSERT INTO `doracms_admin_group` VALUES (1,'超级管理员','30,41,57,34,49,64,31,51,58,27,36,43,66,75,24,53,62,67,76,25,52,56,23,39,65,69,77,22,48,59,70,73,79,80,81,82,38,47,55,26,45,61,68,72,29,42,37,50,28,46,63,35,40,33,44,60,71,74,78,32,54,89,109,110,92,96,100,105,106,107,108,90,93,98,99,104,87,94,95,101,103,88,91,97,102,112,113,114,115,120,122,125,128,130,133,119,123,126,129,131,132','超级管理员1','2020-08-13 18:01:00','2020-10-04 14:11:03'),(3,'测试管理1','112,113,114,115','测试管理12','2020-08-14 16:01:55','2020-10-04 14:11:13');
/*!40000 ALTER TABLE `doracms_admin_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_admin_resource`
--

DROP TABLE IF EXISTS `doracms_admin_resource`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_admin_resource` (
  `id` int NOT NULL AUTO_INCREMENT,
  `label` varchar(100) DEFAULT NULL,
  `source_type` varchar(100) DEFAULT NULL,
  `route_path` varchar(100) DEFAULT NULL,
  `icon` varchar(100) DEFAULT NULL,
  `component_path` varchar(100) DEFAULT NULL,
  `api` varchar(100) DEFAULT NULL,
  `type_id` varchar(100) DEFAULT NULL,
  `parent_id` varchar(100) DEFAULT NULL,
  `is_ext` tinyint(1) DEFAULT NULL,
  `enable` tinyint(1) DEFAULT NULL,
  `comments` longtext,
  `sort_id` char(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=149 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_admin_resource`
--

LOCK TABLES `doracms_admin_resource` WRITE;
/*!40000 ALTER TABLE `doracms_admin_resource` DISABLE KEYS */;
INSERT INTO `doracms_admin_resource` VALUES (1,'systemManage','0','systemManage','icon_work_fill','','',NULL,'0',0,1,'系统管理','1','2020-08-13 12:47:45','2020-08-13 12:47:45'),(2,'','0','contentManage','icon_doc_fill','','',NULL,'0',0,1,'文档管理','2','2020-08-13 12:47:45','2020-08-13 12:47:45'),(3,'','0','userManage','icon_people_fill','','',NULL,'0',0,1,'会员管理','3','2020-08-13 12:47:45','2020-08-13 12:47:45'),(4,'emailManage','0','emailManage','icon_cmail','','',NULL,'0',0,1,'邮件管理','4','2020-08-13 12:47:45','2020-08-13 12:47:45'),(6,'systemNotifyManage','0','systemNotify','icon_system_notic','systemNotify/index','',NULL,'1',1,1,'系统消息','0','2020-08-13 12:51:59','2020-08-13 12:51:59'),(7,'systemOptionLogManage','0','systemOptionLog','icon_logs','systemOptionLog/index','',NULL,'1',1,1,'系统日志','0','2020-08-13 12:51:59','2020-08-13 12:51:59'),(8,'backUpDataManage','0','backUpData','icon_cspace','backUpData/index','',NULL,'1',1,1,'数据管理','0','2020-08-13 12:51:59','2020-08-13 12:51:59'),(9,'adminUser','0','adminUser','icon_patriarch','adminUser/index','',NULL,'1',0,1,'用户管理','1','2020-08-13 12:51:59','2020-08-13 12:51:59'),(10,'roleManager','0','adminGroup','icon_subordinate','adminGroup/index','',NULL,'1',0,1,'角色管理','2','2020-08-13 12:51:59','2020-08-13 12:51:59'),(11,'resourceManage','0','adminResource','icon_power','adminResource/index','',NULL,'1',0,1,'资源管理','3','2020-08-13 12:51:59','2020-08-13 12:51:59'),(12,'sysTermConfig','0','systemConfig','icon_setting','systemConfig/index','',NULL,'1',0,1,'系统配置','4','2020-08-13 12:51:59','2020-08-13 12:51:59'),(13,'adsManage','0','ads','icon_shakehands_fill','ads/index','',NULL,'1',1,1,'广告管理','10','2020-08-13 12:51:59','2020-08-13 12:51:59'),(14,'helpCenterManage','0','helpCenter','icon_service','helpCenter/index','',NULL,'1',1,1,'帮助中心','12','2020-08-13 12:51:59','2020-08-13 12:51:59'),(15,'contentTempManage','0','contentTemp','icon_compile','contentTemp/index','',NULL,'1',1,1,'模板编辑','12','2020-08-13 12:51:59','2020-08-13 12:51:59'),(16,'templateConfigManage','0','templateConfig','icon_skin','templateConfig/index','',NULL,'1',1,1,'模板配置','13','2020-08-13 12:51:59','2020-08-13 12:51:59'),(17,'sysTemMain','0','main','','main/index','',NULL,'1',0,0,'系统主页','14','2020-08-13 12:51:59','2020-08-13 12:51:59'),(18,'uploadFile','0','uploadFile','icon_file_upload','','',NULL,'1',0,1,'文件上传','20','2020-08-13 12:51:59','2020-08-13 12:51:59'),(19,'versionManageManage','0','versionManage','icon_app','versionManage/index','',NULL,'1',1,1,'app版本','21','2020-08-13 12:51:59','2020-08-13 12:51:59'),(21,'announceManage','0','announce','icon_horn','announce/index','',NULL,'1',1,1,'系统公告','22','2020-08-13 12:51:59','2020-08-13 12:51:59'),(22,'templateConfigGetMyTemplateList','1','','','','template/getMyTemplateList',NULL,'16',1,1,'获取已安装的模板列表','1','2020-08-13 13:03:17','2020-08-13 13:03:17'),(23,'helpCenterList','1','','','','helpCenter/getList',NULL,'14',1,1,'获取帮助列表','1','2020-08-13 13:03:17','2020-08-13 13:03:17'),(24,'adsList','1','','','','ads/getList',NULL,'13',1,1,'获取广告列表','1','2020-08-13 13:03:17','2020-08-13 13:03:17'),(25,'contentTempGetContentDefaultTemplate','1','','','','template/getTemplateForderList',NULL,'15',1,1,'获取模板文件列表','1','2020-08-13 13:03:17','2020-08-13 13:03:17'),(26,'getRoleList','1','','','','adminGroup/getList',NULL,'10',0,1,'获取角色列表','1','2020-08-13 13:03:17','2020-08-13 13:03:17'),(27,'addNewAdminUser','1','','','','adminUser/addOne',NULL,'9',0,1,'添加新用户','1','2020-08-13 13:03:17','2020-08-13 13:03:17'),(28,'announceList','1','','','','systemAnnounce/getList',NULL,'21',1,1,'获取系统公告列表','1','2020-08-13 13:03:17','2020-08-13 13:03:17'),(29,'','1','','','','uploadFile/getList',NULL,'18',0,1,'获取上传配置','1','2020-08-13 13:03:17','2020-08-13 13:03:17'),(30,'backUpDataList','1','','','','backupDataManage/getBakList',NULL,'8',1,1,'获取备份数据列表','1','2020-08-13 13:03:17','2020-08-13 13:03:17'),(31,'systemNotifyList','1','','','','systemNotify/getList',NULL,'6',1,1,'获取系统消息列表','1','2020-08-13 13:03:17','2020-08-13 13:03:17'),(32,'getSystemConfig','1','','','','systemConfig/getConfig',NULL,'12',0,1,'获取系统信息','1','2020-08-13 13:03:17','2020-08-13 13:03:17'),(33,'getResourceList','1','','','','adminResource/getList',NULL,'11',0,1,'获取资源列表','1','2020-08-13 13:03:17','2020-08-13 13:03:17'),(34,'systemOptionLogList','1','','','','systemOptionLog/getList',NULL,'7',1,1,'获取日志列表','1','2020-08-13 13:03:17','2020-08-13 13:03:17'),(36,'updateAdminUser','1','','','','adminUser/updateOne',NULL,'9',0,1,'用户更新操作','1','2020-08-13 13:03:17','2020-08-13 13:03:17'),(37,'versionManageList','1','','','','versionManage/getList',NULL,'19',1,1,'获取版本配置','1','2020-08-13 13:03:17','2020-08-13 13:03:17'),(38,'getSysTermBaseInfo','1','','','','getSitBasicInfo',NULL,'17',0,1,'获取站点基础信息','1','2020-08-13 13:03:17','2020-08-13 13:03:17'),(39,'helpCenterGetOne','1','','','','helpCenter/getOne',NULL,'14',1,1,'获取单条帮助信息','2','2020-08-13 13:03:17','2020-08-13 13:03:17'),(41,'backUpDataBackUpData','1','','','','backupDataManage/backUp',NULL,'8',1,1,'执行数据备份','2','2020-08-13 13:03:17','2020-08-13 13:03:17'),(42,'','1','','','','uploadFile/updateOne',NULL,'18',0,1,'更新上传配置','2','2020-08-13 13:03:17','2020-08-13 13:03:17'),(43,'getAdminUserList','1','','','','adminUser/getList',NULL,'9',0,1,'查询用户列表','2','2020-08-13 13:03:17','2020-08-13 13:03:17'),(44,'addResources','1','','','','adminResource/addOne',NULL,'11',0,1,'添加资源信息','2','2020-08-13 13:03:17','2020-08-13 13:03:17'),(45,'addRoles','1','','','','adminGroup/addOne',NULL,'10',0,1,'新增角色功能','2','2020-08-13 13:03:17','2020-08-13 13:03:17'),(46,'announceCreate','1','','','','systemAnnounce/addOne',NULL,'21',1,1,'新增公告','2','2020-08-13 13:03:17','2020-08-13 13:03:17'),(47,'adminLogOut','1','','','','logout',NULL,'17',0,1,'退出登录','2','2020-08-13 13:03:17','2020-08-13 13:03:17'),(48,'templateConfigAddTemplateItem','1','','','','template/addTemplateItem',NULL,'16',1,1,'新增模板单元','2','2020-08-13 13:03:17','2020-08-13 13:03:17'),(49,'systemOptionLogRemoves','1','','','','systemOptionLog/deleteLogItem',NULL,'7',1,1,'删除单条日志','2','2020-08-13 13:03:17','2020-08-13 13:03:17'),(50,'versionManageUpdate','1','','','','versionManage/updateOne',NULL,'19',1,1,'更新版本信息','2','2020-08-13 13:03:17','2020-08-13 13:03:17'),(51,'systemNotifySetMessageHasRead','1','','','','systemNotify/setHasRead',NULL,'6',1,1,'设为已读消息','2','2020-08-13 13:03:17','2020-08-13 13:03:17'),(52,'contentTempGetFileInfo','1','','','','template/getTemplateFileText',NULL,'15',1,1,'读取文件内容','2','2020-08-13 13:03:17','2020-08-13 13:03:17'),(53,'adsGetOne','1','','','','ads/getOne',NULL,'13',1,1,'获取单条广告信息','2','2020-08-13 13:03:17','2020-08-13 13:03:17'),(54,'updateSystemConfig','1','','','','systemConfig/updateConfig',NULL,'12',0,1,'更新系统信息','2','2020-08-13 13:03:17','2020-08-13 13:03:17'),(55,'getUserSession','1','','','','getUserSession',NULL,'17',0,1,'获取用户session','3','2020-08-13 13:03:17','2020-08-13 13:03:17'),(56,'contentTempUpdateFileInfo','1','','','','template/updateTemplateFileText',NULL,'15',1,1,'更新文件内容','3','2020-08-13 13:03:17','2020-08-13 13:03:17'),(57,'backUpDataRemoves','1','','','','backupDataManage/deleteDataItem',NULL,'8',1,1,'删除备份数据','3','2020-08-13 13:03:17','2020-08-13 13:03:17'),(58,'systemNotifyRemoves','1','','','','systemNotify/deleteNotifyItem',NULL,'6',1,1,'删除操作日志','3','2020-08-13 13:03:17','2020-08-13 13:03:17'),(59,'templateConfigDelTemplateItem','1','','','','template/delTemplateItem',NULL,'16',1,1,'删除模板单元','3','2020-08-13 13:03:17','2020-08-13 13:03:17'),(60,'updateResources','1','','','','adminResource/updateOne',NULL,'11',0,1,'编辑资源信息','3','2020-08-13 13:03:17','2020-08-13 13:03:17'),(61,'updateRoles','1','','','','adminGroup/updateOne',NULL,'10',0,1,'更新角色信息','3','2020-08-13 13:03:17','2020-08-13 13:03:17'),(62,'adsCreate','1','','','','ads/addOne',NULL,'13',1,1,'添加单个广告','3','2020-08-13 13:03:17','2020-08-13 13:03:17'),(63,'announceRemoves','1','','','','systemAnnounce/deleteItem',NULL,'21',1,1,'删除公告','3','2020-08-13 13:03:17','2020-08-13 13:03:17'),(64,'systemOptionLogRemoveAll','1','','','','systemOptionLog/deleteAllLogItem',NULL,'7',1,1,'清空日志','3','2020-08-13 13:03:17','2020-08-13 13:03:17'),(65,'helpCenterCreate','1','','','','helpCenter/addOne',NULL,'14',1,1,'添加单个帮助','3','2020-08-13 13:03:17','2020-08-13 13:03:17'),(66,'delAdminUser','1','','','','adminUser/deleteUser',NULL,'9',0,1,'删除用户功能','4','2020-08-13 13:03:17','2020-08-13 13:03:17'),(67,'adsUpdate','1','','','','ads/updateOne',NULL,'13',1,1,'更新广告信息','4','2020-08-13 13:03:17','2020-08-13 13:03:17'),(68,'delRoles','1','','','','adminGroup/deleteGroup',NULL,'10',0,1,'删除角色功能','4','2020-08-13 13:03:17','2020-08-13 13:03:17'),(69,'helpCenterUpdate','1','','','','helpCenter/updateOne',NULL,'14',1,1,'更新帮助信息','4','2020-08-13 13:03:17','2020-08-13 13:03:17'),(70,'templateConfigGetTempItemForderList','1','','','','template/getTemplateItemlist',NULL,'16',1,1,'获取默认模板的模板单元列表','4','2020-08-13 13:03:17','2020-08-13 13:03:17'),(71,'getOneResource','1','','','','adminResource/getOne',NULL,'11',0,1,'获取单个资源','5','2020-08-13 13:03:17','2020-08-13 13:03:17'),(72,'getOneRole','1','','','','adminGroup/getOne',NULL,'10',0,1,'获取单个角色','5','2020-08-13 13:03:17','2020-08-13 13:03:17'),(73,'templateConfigGetTempsFromShop','1','','','','template/getTempsFromShop',NULL,'16',1,1,'获取模板市场中的模板列表','5','2020-08-13 13:03:17','2020-08-13 13:03:17'),(74,'delResources','1','','','','adminResource/deleteResource',NULL,'11',0,1,'删除资源信息','5','2020-08-13 13:03:17','2020-08-13 13:03:17'),(75,'getOneAdminUser','1','','','','adminUser/getOne',NULL,'9',0,1,'查询单个用户','5','2020-08-13 13:03:17','2020-08-13 13:03:17'),(76,'adsRemoves','1','','','','ads/delete',NULL,'13',1,1,'删除广告','5','2020-08-13 13:03:18','2020-08-13 13:03:18'),(77,'helpCenterRemoves','1','','','','helpCenter/delete',NULL,'14',1,1,'删除帮助','5','2020-08-13 13:03:18','2020-08-13 13:03:18'),(78,'','1','','','','adminResource/updateParentId',NULL,'11',0,1,'更新资源父级目录','6','2020-08-13 13:03:18','2020-08-13 13:03:18'),(79,'templateConfigInstallTemp','1','','','','template/installTemp',NULL,'16',1,1,'安装模板','6','2020-08-13 13:03:18','2020-08-13 13:03:18'),(80,'templateConfigUploadCMSTemplate','1','','','','template/uploadCMSTemplate',NULL,'16',1,1,'上传自定义模板','7','2020-08-13 13:03:18','2020-08-13 13:03:18'),(81,'templateConfigEnableTemp','1','','','','template/enableTemp',NULL,'16',1,1,'上传自定义模板','8','2020-08-13 13:03:18','2020-08-13 13:03:18'),(82,'templateConfigUninstallTemp','1','','','','template/uninstallTemp',NULL,'16',1,1,'卸载模板','9','2020-08-13 13:03:18','2020-08-13 13:03:18'),(83,'contentManage','0','content','icon_doc','content/index','',NULL,'2',1,1,'文档管理','1','2020-08-13 13:05:38','2020-08-13 13:05:38'),(84,'contentCategory','0','contentCategory','icon_category','','',NULL,'2',0,1,'文档类别','2','2020-08-13 13:05:38','2020-08-13 13:05:38'),(85,'contentTagsManage','0','contentTags','icon_tags','contentTags/index','',NULL,'2',1,1,'文档标签','3','2020-08-13 13:05:38','2020-08-13 13:05:38'),(86,'contentMessage','0','contentMessage','icon_sms','','',NULL,'2',0,1,'文档留言','4','2020-08-13 13:05:38','2020-08-13 13:05:38'),(87,'contentTagsList','1','','','','contentTag/getList',NULL,'85',1,1,'获取标签列表','1','2020-08-13 13:08:31','2020-08-13 13:08:31'),(88,'','1','','','','contentMessage/getList',NULL,'86',0,1,'获取留言列表','1','2020-08-13 13:08:31','2020-08-13 13:08:31'),(89,'contentList','1','','','','content/getList',NULL,'83',1,1,'获取文档列表','1','2020-08-13 13:08:31','2020-08-13 13:08:31'),(90,'','1','','','','contentCategory/getList',NULL,'84',0,1,'获取类别列表','1','2020-08-13 13:08:31','2020-08-13 13:08:31'),(91,'','1','','','','contentMessage/getOne',NULL,'86',0,1,'获取单条留言信息','2','2020-08-13 13:08:31','2020-08-13 13:08:31'),(92,'contentGetOne','1','','','','content/getContent',NULL,'83',1,1,'获取单条文档信息','2','2020-08-13 13:08:31','2020-08-13 13:08:31'),(93,'','1','','','','contentCategory/getOne',NULL,'84',0,1,'获取单条类别信息','2','2020-08-13 13:08:31','2020-08-13 13:08:31'),(94,'contentTagsGetOne','1','','','','contentTag/getOne',NULL,'85',1,1,'获取单条标签信息','2','2020-08-13 13:08:31','2020-08-13 13:08:31'),(95,'contentTagsCreate','1','','','','contentTag/addOne',NULL,'85',1,1,'添加单个标签','3','2020-08-13 13:08:31','2020-08-13 13:08:31'),(96,'contentCreate','1','','','','content/addOne',NULL,'83',1,1,'添加单个文档','3','2020-08-13 13:08:31','2020-08-13 13:08:31'),(97,'','1','','','','contentMessage/addOne',NULL,'86',0,1,'添加留言','3','2020-08-13 13:08:31','2020-08-13 13:08:31'),(98,'','1','','','','contentCategory/addOne',NULL,'84',0,1,'添加单个类别','3','2020-08-13 13:08:31','2020-08-13 13:08:31'),(99,'','1','','','','contentCategory/updateOne',NULL,'84',0,1,'更新单个类别','4','2020-08-13 13:08:31','2020-08-13 13:08:31'),(100,'contentUpdate','1','','','','content/updateOne',NULL,'83',1,1,'更新文档信息','4','2020-08-13 13:08:31','2020-08-13 13:08:31'),(101,'contentTagsUpdate','1','','','','contentTag/updateOne',NULL,'85',1,1,'更新标签信息','4','2020-08-13 13:08:31','2020-08-13 13:08:31'),(102,'','1','','','','contentMessage/deleteMessage',NULL,'86',0,1,'删除留言','4','2020-08-13 13:08:31','2020-08-13 13:08:31'),(103,'contentTagsRemoves','1','','','','contentTag/deleteTag',NULL,'85',1,1,'删除标签','5','2020-08-13 13:08:31','2020-08-13 13:08:31'),(104,'','1','','','','contentCategory/deleteCategory',NULL,'84',0,1,'删除类别','5','2020-08-13 13:08:31','2020-08-13 13:08:31'),(105,'contentRemoves','1','','','','content/deleteContent',NULL,'83',1,1,'删除文档','5','2020-08-13 13:08:31','2020-08-13 13:08:31'),(106,'contentUpdateContentToTop','1','','','','content/topContent',NULL,'83',1,1,'文档推荐','6','2020-08-13 13:08:31','2020-08-13 13:08:31'),(107,'contentRoofPlacement','1','','','','content/roofContent',NULL,'83',1,1,'文档置顶','7','2020-08-13 13:08:31','2020-08-13 13:08:31'),(108,'contentRedictContentToUsers','1','','','','content/updateContentEditor',NULL,'83',1,1,'绑定编辑','8','2020-08-13 13:08:31','2020-08-13 13:08:31'),(109,'','1','','','','content/moveCate',NULL,'83',0,1,'批量移动','11','2020-08-13 13:08:31','2020-08-13 13:08:31'),(110,'','1','','','','content/updateContents',NULL,'83',0,1,'文档批量更新(回收站)','11','2020-08-13 13:08:31','2020-08-13 13:08:31'),(111,'regUserManage','0','regUser','icon_signal','regUser/index','',NULL,'3',1,1,'会员管理','1','2020-08-13 13:10:19','2020-08-13 13:10:19'),(112,'regUserList','1','','','','regUser/getList',NULL,'111',1,1,'获取会员列表','1','2020-08-13 13:11:15','2020-08-13 13:11:15'),(113,'regUserGetOne','1','','','','regUser/getOne',NULL,'111',1,1,'获取单条会员信息','2','2020-08-13 13:11:15','2020-08-13 13:11:15'),(114,'regUserUpdate','1','','','','regUser/updateOne',NULL,'111',1,1,'更新会员信息','3','2020-08-13 13:11:15','2020-08-13 13:11:15'),(115,'regUserRemoves','1','','','','regUser/deleteUser',NULL,'111',1,1,'删除会员','4','2020-08-13 13:11:15','2020-08-13 13:11:15'),(117,'mailTemplate','0','mailTemplate','icon_dmail','','',NULL,'4',0,1,'邮件模板','1','2020-08-13 13:13:03','2020-08-13 13:13:03'),(118,'mailDelivery','0','mailDelivery','icon_email','','',NULL,'4',0,0,'邮件发送','2','2020-08-13 13:13:03','2020-10-04 14:11:48'),(119,'','1','','','','mailDelivery/getList',NULL,'118',0,1,'获取发送列表','1','2020-08-13 13:16:43','2020-08-13 13:16:43'),(120,'','1','','','','mailTemplate/getList',NULL,'117',0,1,'获取邮件模板','1','2020-08-13 13:16:43','2020-08-13 13:16:43'),(122,'','1','','','','mailTemplate/getOne',NULL,'117',0,1,'获取单个邮件模板','2','2020-08-13 13:16:43','2020-08-13 13:16:43'),(123,'','1','','','','mailDelivery/getOne',NULL,'118',0,1,'获取单个发送信息','2','2020-08-13 13:16:43','2020-08-13 13:16:43'),(125,'','1','','','','mailTemplate/addOne',NULL,'117',0,1,'新增邮件模板','3','2020-08-13 13:16:43','2020-08-13 13:16:43'),(126,'','1','','','','mailDelivery/addOne',NULL,'118',0,1,'新增发送任务','3','2020-08-13 13:16:43','2020-08-13 13:16:43'),(128,'','1','','','','mailTemplate/updateOne',NULL,'117',0,1,'修改邮件模板','4','2020-08-13 13:16:43','2020-08-13 13:16:43'),(129,'','1','','','','mailDelivery/updateOne',NULL,'118',0,1,'修改发送任务','4','2020-08-13 13:16:43','2020-08-13 13:16:43'),(130,'','1','','','','mailTemplate/delete',NULL,'117',0,1,'删除邮件模板','5','2020-08-13 13:16:43','2020-08-13 13:16:43'),(131,'','1','','','','mailDelivery/delete',NULL,'118',0,1,'删除发送任务','5','2020-08-13 13:16:43','2020-08-13 13:16:43'),(132,'','1','','','','mailDelivery/getSendLogList',NULL,'118',0,1,'查询发送日志','6','2020-08-13 13:16:44','2020-08-13 13:16:44'),(133,'','1','','','','mailTemplate/getTypeList',NULL,'117',0,1,'获取模板类型列表','6','2020-08-13 13:16:44','2020-08-13 13:16:44'),(137,'','1','','','','plugin/getList',NULL,'135',0,1,'获取插件列表','1','2020-08-13 13:21:26','2020-08-13 13:21:26'),(138,'','1','','','','hook/getList',NULL,'134',0,1,'获取列表','1','2020-08-13 13:21:26','2020-08-13 13:21:26'),(139,'','1','','','','valine/getList',NULL,'136',0,1,'获取配置信息','1','2020-08-13 13:21:26','2020-08-13 13:21:26'),(140,'','1','','','','plugin/installPlugin',NULL,'135',0,1,'安装插件','2','2020-08-13 13:21:26','2020-08-13 13:21:26'),(141,'','1','','','','valine/updateOne',NULL,'136',0,1,'更新配置信息','2','2020-08-13 13:21:26','2020-08-13 13:21:26'),(142,'','1','','','','hook/getOne',NULL,'134',0,1,'获取单个信息','2','2020-08-13 13:21:26','2020-08-13 13:21:26'),(143,'','1','','','','plugin/unInstallPlugin',NULL,'135',0,1,'卸载插件','3','2020-08-13 13:21:26','2020-08-13 13:21:26'),(144,'','1','','','','hook/addOne',NULL,'134',0,1,'添加钩子','3','2020-08-13 13:21:26','2020-08-13 13:21:26'),(145,'','1','','','','plugin/enablePlugin',NULL,'135',0,1,'启用插件','4','2020-08-13 13:21:26','2020-08-13 13:21:26'),(146,'','1','','','','hook/updateOne',NULL,'134',0,1,'更新钩子','4','2020-08-13 13:21:26','2020-08-13 13:21:26'),(147,'','1','','','','hook/deleteUser',NULL,'134',0,1,'删除钩子','5','2020-08-13 13:21:26','2020-08-13 13:21:26');
/*!40000 ALTER TABLE `doracms_admin_resource` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_admin_user`
--

DROP TABLE IF EXISTS `doracms_admin_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_admin_user` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(100) DEFAULT NULL,
  `user_name` varchar(100) DEFAULT NULL,
  `password` varchar(100) DEFAULT NULL,
  `email` varchar(100) DEFAULT NULL,
  `country_code` varchar(100) DEFAULT NULL,
  `logo` varchar(100) DEFAULT NULL,
  `enable` tinyint(1) DEFAULT NULL,
  `state` tinyint DEFAULT NULL,
  `auth` tinyint DEFAULT NULL,
  `group_id` int DEFAULT NULL,
  `target_editor` varchar(100) DEFAULT NULL,
  `comments` longtext,
  `phone_num` char(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `editor_id` int DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_admin_user`
--

LOCK TABLES `doracms_admin_user` WRITE;
/*!40000 ALTER TABLE `doracms_admin_user` DISABLE KEYS */;
INSERT INTO `doracms_admin_user` VALUES (1,'生哥','doramart','U2FsdGVkX19IjfA+NqcS+oCtlVKA8Oy+ALTW6vlN5CY=','doramart@qq.com','86','https://cdn.html-js.cn/cms/upload/images/defaultlogo.png',1,1,1,1,NULL,'This is a test','17665365092','2020-08-13 08:15:01','2020-11-09 14:56:33',39),(2,'测试用户','doracms','9f02efb20bf07a9a910ae7a8099c758a','admin@html-js.cn','86','https://cdn.html-js.cn/cms/upload/images/defaultlogo.png',1,1,1,3,NULL,'测试用户信息','15220033662','2020-08-13 08:19:34','2020-11-09 14:56:12',NULL);
/*!40000 ALTER TABLE `doracms_admin_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_ads`
--

DROP TABLE IF EXISTS `doracms_ads`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_ads` (
  `id` int NOT NULL AUTO_INCREMENT,
  `ads_type` varchar(255) DEFAULT '0',
  `carousel` tinyint(1) DEFAULT '1',
  `state` tinyint(1) DEFAULT '1',
  `height` int DEFAULT '50',
  `comments` varchar(255) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_ads`
--

LOCK TABLES `doracms_ads` WRITE;
/*!40000 ALTER TABLE `doracms_ads` DISABLE KEYS */;
INSERT INTO `doracms_ads` VALUES (1,'1',0,0,140,'小图广告（320*140）','2020-08-22 15:21:07','2020-10-17 12:49:58','indexTop1Right'),(2,'1',1,0,50,'文档详情页头部广告','2020-08-22 15:21:07','2020-08-22 15:21:07','文档详情页头部广告'),(3,'1',0,1,NULL,'展示使用doracms建站案例','2020-08-22 15:21:07','2020-08-22 15:21:07','anli'),(4,'1',1,0,50,'右侧最下部广告','2020-08-22 15:21:07','2020-08-22 15:21:07','文档列表页右侧最下部广告'),(5,'1',0,0,NULL,'indexTop1Right','2020-08-22 15:21:07','2020-10-17 12:52:00','indexTop2Right'),(6,'1',0,1,65,'doracms沟通群','2020-08-22 15:21:07','2020-08-22 15:21:07','qrCode'),(7,'1',0,0,NULL,'首页右侧广告1','2020-08-22 15:21:07','2020-08-22 15:21:07','publishCms'),(8,'0',1,1,NULL,'友情链接广告','2020-08-22 15:21:07','2020-08-22 15:21:07','frendlink'),(9,'1',0,0,NULL,'indexTop2Left','2020-08-22 15:21:07','2020-10-17 12:51:41','indexTop2Left'),(10,'1',0,0,140,'首页大图广告(left)','2020-08-22 15:21:07','2020-10-17 12:38:05','indexTop1Left'),(11,'1',0,1,NULL,'detailLeft1','2020-08-22 15:21:07','2020-08-22 15:21:07','detailLeft1'),(12,'1',1,1,298,'首页顶部轮播图广告','2020-08-22 15:21:07','2020-08-22 15:21:07','recommend');
/*!40000 ALTER TABLE `doracms_ads` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_ads_items`
--

DROP TABLE IF EXISTS `doracms_ads_items`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_ads_items` (
  `id` int NOT NULL AUTO_INCREMENT,
  `title` varchar(255) DEFAULT NULL,
  `link` varchar(500) DEFAULT NULL,
  `ads_id` int DEFAULT NULL,
  `app_link` varchar(500) DEFAULT NULL,
  `app_link_type` varchar(255) DEFAULT NULL,
  `width` int DEFAULT NULL,
  `height` int DEFAULT '1',
  `target` varchar(255) DEFAULT '_blank',
  `s_img` varchar(500) DEFAULT NULL,
  `alt` varchar(255) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `ads_id` (`ads_id`),
  CONSTRAINT `doracms_ads_items_ibfk_1` FOREIGN KEY (`ads_id`) REFERENCES `doracms_ads` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=34 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_ads_items`
--

LOCK TABLES `doracms_ads_items` WRITE;
/*!40000 ALTER TABLE `doracms_ads_items` DISABLE KEYS */;
INSERT INTO `doracms_ads_items` VALUES (3,NULL,'http://doracms.com/',12,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/20191221/1576920709770270694','DoraCMS 开发文档','2020-08-22 15:49:20','2020-08-22 15:49:20'),(4,NULL,'https://c6.cx/',3,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/20191225/1577286661605422243.png','中陆美妆','2020-08-22 15:49:20','2020-08-22 15:49:20'),(5,NULL,'http://yangmingpsy.org.cn/',3,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/img1560309417503.png','湖北阳明心理研究院','2020-08-22 15:49:20','2020-08-22 15:49:20'),(6,NULL,'http://www.ahjdyy.com/',3,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/img1560319363649.png','旌德县人民医院','2020-08-22 15:49:20','2020-08-22 15:49:20'),(7,NULL,'http://www.estockchart.com/',3,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/img1560309341608.png','estockchart','2020-08-22 15:49:20','2020-08-22 15:49:20'),(8,NULL,'http://www.hmkqnb.com/',3,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/img1560309271740.png','恒美口腔','2020-08-22 15:49:20','2020-08-22 15:49:20'),(9,NULL,'http://uservice.landray.com.cn/',3,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/img1560309218270.fb14cfc','蓝凌UX设计服务平台','2020-08-22 15:49:20','2020-08-22 15:49:20'),(10,NULL,'http://bzsy.cn/',3,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/img1560309332983.png','滨州实验中学','2020-08-22 15:49:20','2020-08-22 15:49:20'),(11,NULL,'http://help.ktvme.com/',3,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/img1560309206376.aebd2e6','k米帮助中心','2020-08-22 15:49:20','2020-08-22 15:49:20'),(12,NULL,'http://www.jumh.cn',3,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/20191225/1577286541549081192.png','思柏瑞聚门户','2020-08-22 15:49:20','2020-08-22 15:49:20'),(13,NULL,'https://article.bestmath.cn',3,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/img1565275444636.png','精锐教育','2020-08-22 15:49:20','2020-08-22 15:49:20'),(14,NULL,'https://www.html-js.cn/static/apidoc/index.html',12,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/20191221/1576917830566766297','doracms api','2020-08-22 15:49:20','2020-08-22 15:49:20'),(15,NULL,'http://www.tjctruth.com',3,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/img1565189370877.png','真耶稣教会','2020-08-22 15:49:20','2020-08-22 15:49:20'),(16,NULL,'https://masterchain.media/',3,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/img1560309313434.png','大师链','2020-08-22 15:49:20','2020-08-22 15:49:20'),(17,NULL,'http://gl.51ddhua.com/',3,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/img1560309350784.png','点点花','2020-08-22 15:49:20','2020-08-22 15:49:20'),(18,NULL,'http://www.dailyads.cn/',3,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/img1560309429926.jpg','每日一广告','2020-08-22 15:49:20','2020-08-22 15:49:20'),(19,NULL,'https://blog.newbanker.cn/',3,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/img1560309398284.png','牛投邦','2020-08-22 15:49:20','2020-08-22 15:49:20'),(20,NULL,'https://www.huahan-gene.com/',3,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/img1560309322818.png','华翰基因','2020-08-22 15:49:20','2020-08-22 15:49:20'),(21,'小白接口','http://www.yesapi.cn/?from=html-js',8,NULL,NULL,NULL,NULL,'_blank','','','2020-08-22 15:49:20','2020-08-22 15:49:20'),(22,NULL,'http://gwitedu.com/',3,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/img1560309385062.jpg','广东外语外贸大学','2020-08-22 15:49:20','2020-08-22 15:49:20'),(23,NULL,'http://www.vapedeals.top/',3,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/img1560309191678.png','vapedeals','2020-08-22 15:49:20','2020-08-22 15:49:20'),(24,NULL,'https://fixes.cn/',3,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/20200117/1579270620703734779.png','fixes','2020-08-22 15:49:20','2020-08-22 15:49:20'),(25,NULL,'https://www.html-js.cn/details/VmnGNiF4S.html',7,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/img1564672069877.jpg','doracms 2.1.3发布','2020-08-22 15:49:20','2020-08-22 15:49:20'),(26,NULL,'https://ac.aliyun.com/pages/bkshare?userCode=fk15o5au',1,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/1570938194710.jpg','买软件、选服务，就上阿里云应用中心','2020-08-22 15:49:20','2020-10-17 12:49:58'),(27,NULL,'http://cms.sics.ac.cn',3,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/1570897278288.png','深圳计算科学研究院','2020-08-22 15:49:20','2020-08-22 15:49:20'),(28,NULL,'https://www.aliyun.com/acts/limit-buy?userCode=fk15o5au',11,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/1570972325325.png','阿里云应用中心','2020-08-22 15:49:20','2020-08-22 15:49:20'),(29,NULL,'https://promotion.aliyun.com/ntms/act/enterprise-discount.html?userCode=fk15o5au',9,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/1570973390929.jpg','indexTop2Left','2020-08-22 15:49:20','2020-10-17 12:51:41'),(30,NULL,'https://www.gdrunshi.com',3,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/img1560309362308.png','广东润石','2020-08-22 15:49:20','2020-08-22 15:49:20'),(31,NULL,'http://47.74.39.199:8080/',3,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/img1560309159053.png','日本数字财经','2020-08-22 15:49:20','2020-08-22 15:49:20'),(32,'每日一广告','http://www.dailyads.cn',8,NULL,NULL,NULL,NULL,'_blank','','','2020-08-22 15:49:20','2020-08-22 15:49:20'),(33,NULL,'http://www.51ylk.com',3,NULL,NULL,NULL,NULL,'_blank','https://cdn.html-js.cn/cms/upload/images/img1560309372344.png','无线云溯','2020-08-22 15:49:20','2020-08-22 15:49:20');
/*!40000 ALTER TABLE `doracms_ads_items` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_announce`
--

DROP TABLE IF EXISTS `doracms_announce`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_announce` (
  `id` int NOT NULL AUTO_INCREMENT,
  `title` varchar(500) DEFAULT NULL,
  `content` varchar(500) DEFAULT NULL,
  `announce_type` enum('1','2','3') DEFAULT NULL,
  `target_content` int DEFAULT NULL,
  `target_type` varchar(255) DEFAULT NULL,
  `action` varchar(255) DEFAULT NULL,
  `sender_id` int DEFAULT NULL,
  `admin_sender_id` int DEFAULT NULL,
  `system_sender_id` varchar(255) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `admin_sender_id` (`admin_sender_id`),
  CONSTRAINT `doracms_announce_ibfk_1` FOREIGN KEY (`admin_sender_id`) REFERENCES `doracms_admin_user` (`id`) ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_announce`
--

LOCK TABLES `doracms_announce` WRITE;
/*!40000 ALTER TABLE `doracms_announce` DISABLE KEYS */;
/*!40000 ALTER TABLE `doracms_announce` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_backupdata`
--

DROP TABLE IF EXISTS `doracms_backupdata`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_backupdata` (
  `id` int DEFAULT NULL,
  `file_name` varchar(100) DEFAULT NULL,
  `path` varchar(500) DEFAULT NULL,
  `logs` varchar(500) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_backupdata`
--

LOCK TABLES `doracms_backupdata` WRITE;
/*!40000 ALTER TABLE `doracms_backupdata` DISABLE KEYS */;
INSERT INTO `doracms_backupdata` VALUES (0,'20201003230545/doracms.sql','/Users/dora/Documents/dora/coding.net/eggcms/databak/20201003230545','Data backup','2020-10-03 15:05:45','2020-10-03 15:05:45');
/*!40000 ALTER TABLE `doracms_backupdata` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_content`
--

DROP TABLE IF EXISTS `doracms_content`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_content` (
  `id` int NOT NULL AUTO_INCREMENT,
  `title` varchar(255) DEFAULT NULL,
  `stitle` varchar(255) DEFAULT NULL,
  `from` varchar(255) DEFAULT NULL,
  `content_type` varchar(255) DEFAULT '1',
  `sort_path` varchar(255) DEFAULT NULL,
  `keywords` varchar(255) DEFAULT NULL,
  `s_img_type` varchar(255) DEFAULT '2',
  `cover` varchar(255) DEFAULT NULL,
  `video_img` varchar(500) DEFAULT NULL,
  `discription` varchar(255) DEFAULT NULL,
  `app_show_type` varchar(255) DEFAULT '1',
  `image_arr` longtext,
  `video_arr` longtext,
  `duration` varchar(255) DEFAULT '0:01',
  `author_id` int DEFAULT NULL,
  `state` varchar(255) DEFAULT '0',
  `draft` varchar(255) DEFAULT '0',
  `dismiss_reason` varchar(255) DEFAULT '',
  `is_top` int DEFAULT NULL,
  `roof_placement` varchar(255) DEFAULT NULL,
  `click_num` int DEFAULT NULL,
  `comments` longtext,
  `simple_comments` longtext,
  `mark_down_comments` longtext,
  `s_img` varchar(500) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `author_id` (`author_id`),
  CONSTRAINT `doracms_content_ibfk_1` FOREIGN KEY (`author_id`) REFERENCES `doracms_user` (`id`) ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=368 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_content`
--

LOCK TABLES `doracms_content` WRITE;
/*!40000 ALTER TABLE `doracms_content` DISABLE KEYS */;
INSERT INTO `doracms_content` VALUES (163,'DoraCMS 2.1.4 （发布版非源码） 抢先体验','DoraCMS 2.1.4 （发布版非源码） 抢先体验',NULL,'1','','doracms,nodejs,eggjs,vue','2',NULL,'','千呼万唤始出来，DoraCMS 2.1.4 即将和大家见面，鉴于DoraCMS以后的发展，从2.1.4 版本之后，服务端使用eggjs作为框架','2','/static/plugins/ueditor/themes/default/images/spacer.gif,http://www.html-js.cn/static/upload/ueditor/image/20191112/1573543974872990643.png','','0:01',762,'2','0',NULL,0,'0',149477,'<p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">&nbsp;&nbsp;千呼万唤始出来，DoraCMS&nbsp;2.1.4&nbsp;即将和大家见面，鉴于DoraCMS以后的发展，从2.1.4&nbsp;版本之后，服务端使用eggjs (</span><a href=\"https://eggjs.org/zh-cn/intro/quickstart.html\" target=\"_blank\" title=\"https://eggjs.org/zh-cn/intro/quickstart.html\" style=\"text-decoration: underline; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">https://eggjs.org/zh-cn/intro/quickstart.html</span></a><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">) 作为框架。所以在使用新版DoraCMS之前，您需要通读eggjs相关文档，这样有助于您在DoraCMS&nbsp;做二次开发，另外也需要一定的&nbsp;vue&nbsp;以及&nbsp;mongodb&nbsp;的基础知识。目前在完全开源之前放出<strong><span style=\"font-size: 18px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(192, 0, 0);\">发布版</span></strong>，您可以选择性的使用发布版，<span style=\"font-size: 18px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(192, 0, 0);\"><strong>发布版</strong></span>具有以下特点：</span></p><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\"><br/></span></p><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">&nbsp;&nbsp;1、无需编译</span></p><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">&nbsp;&nbsp;2、少量修改配置可用于生产</span></p><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">&nbsp;&nbsp;3、通过重装依赖的方式可以保持整个项目更新与官网同步&nbsp;</span></p><p><br/></p><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">&nbsp;&nbsp;通俗一点说，如果您没有精力做二次开发（注意包括后台界面和接口调整），只想单纯使用新版本功能，建议您使用<strong><span style=\"font-size: 18px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(192, 0, 0);\">DoraCMS</span></strong><strong><span style=\"font-size: 18px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; color: rgb(192, 0, 0);\">发布版（与官网同步更新）</span></strong>。另外，我们将在近期发布源码，敬请期待。</span></p><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">&nbsp;&nbsp;DoraCMS&nbsp;2.1.4&nbsp;发布版下载： </span><a href=\"https://cdn.html-js.cn/cms/release/2.1.4/DoraCMS.zip\" target=\"_blank\" title=\"DoraCMS 2.1.4\" style=\"text-decoration: underline; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">DoraCMS 2.1.4</span></a><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">&nbsp; 安装方式和之前的版本无太大差异.</span></p><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\"><br/></span></p><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">视频介绍：</span></p><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\"><br/></span></p><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\"></span></p><p><br/></p><p style=\"line-height: 1.5em;\"><span style=\"font-weight: bold; color: rgb(0, 112, 192); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">开发环境准备工作:</span></p><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">&nbsp;&nbsp;</span></p><p style=\"line-height: 1.5em;\"><span style=\"color: rgb(191, 158, 238); font-weight: bold; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">安装NodeJS&nbsp;(目前支持到 12.10.0 ):</span></p><pre class=\"brush:js;toolbar:false\"><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">https://nodejs.org/zh-cn/<br/></span></p></pre><p><br/></p><p style=\"line-height: 1.5em;\"><span style=\"color: rgb(191, 158, 238); font-weight: bold; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">设置环境变量（以mac为例，修改&nbsp;.bash_profile文件）</span></p><pre class=\"brush:js;toolbar:false\"><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">vi&nbsp;~/.bash_profile<br/><br/>export&nbsp;NODE_ENV=development<br/>export&nbsp;EGG_SERVER_ENV=local<br/>MONGODBPATH=/Users/Dora/Documents/dora/soft/mongodb/bin<br/>PATH=&quot;${MONGODBPATH}:${PATH}&quot;<br/>export&nbsp;PATH<br/><br/>source&nbsp;~/.bash_profile<br/></span></p></pre><p><br/></p><p style=\"line-height: 1.5em;\"><span style=\"font-style: italic; color: rgb(192, 0, 0); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">&gt;&nbsp;以上步骤做了两件事情：&nbsp;&nbsp;</span></p><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">1、设置nodejs环境变量为&nbsp;development (生产环境记得改为&nbsp;production)&nbsp;&nbsp;</span></p><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">2、将mongodb&nbsp;bin&nbsp;目录添加到全局变量中，便于在终端的任何位置执行mongo脚本,注意改成自己安装mongodb的实际路径&nbsp;&nbsp;</span></p><p><br/><br/></p><p style=\"line-height: 1.5em;\"><span style=\"color: rgb(191, 158, 238); font-weight: bold; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">###&nbsp;安装并启动&nbsp;Mongodb&nbsp;(<span style=\"font-size: 18px; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-weight: bold; color: rgb(192, 0, 0);\">本地mongodb不要设置密码访问</span>)</span></p><pre class=\"brush:js;toolbar:false\"><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">https://www.mongodb.com/download-center#community<br/></span></p></pre><p><br/></p><p style=\"line-height: 1.5em;\"><span style=\"color: rgb(191, 158, 238); font-weight: bold; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">###&nbsp;安装全局依赖</span></p><pre class=\"brush:js;toolbar:false\"><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">npm&nbsp;install&nbsp;egg-scripts&nbsp;-g&nbsp;&nbsp;&nbsp;//&nbsp;eggjs&nbsp;脚本执行<br/>npm&nbsp;install&nbsp;gulp&nbsp;-g&nbsp;&nbsp;//&nbsp;静态资源构建<br/>npm install apidoc -g &nbsp;// api文档生成<br/></span></p></pre><p><br/></p><p style=\"line-height: 1.5em;\"><span style=\"color: rgb(191, 158, 238); font-weight: bold; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">安装本系统依赖（代码根目录）</span></p><pre class=\"brush:js;toolbar:false\"><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">npm&nbsp;install<br/></span></p></pre><p><br/></p><p style=\"line-height: 1.5em;\"><span style=\"color: rgb(191, 158, 238); font-weight: bold; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">初始化数据</span></p><pre class=\"brush:js;toolbar:false\"><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">npm&nbsp;run&nbsp;init<br/></span></p></pre><p><span style=\"font-style: italic; color: rgb(192, 0, 0);\">&gt; 网站图片资源可从这里获取&nbsp;</span></p><p>下载链接: <a href=\"https://pan.baidu.com/s/1th7Qlz4eJGNN3w_Tacl9AQ\" target=\"_blank\" title=\"图片资源\">https://pan.baidu.com/s/1th7Qlz4eJGNN3w_Tacl9AQ</a> 提取码: jczt &nbsp;，解压后放到项目根目录下 app/public/upload (替换)。</p><p><br/></p><p style=\"line-height: 1.5em;\"><span style=\"color: rgb(191, 158, 238); font-weight: bold; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">&nbsp;开发模式启动</span></p><pre class=\"brush:js;toolbar:false\"><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">npm&nbsp;run&nbsp;dev<br/></span></p></pre><p><br/></p><p style=\"line-height: 1.5em;\"><span style=\"color: rgb(191, 158, 238); font-weight: bold; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">生产模式启动</span></p><pre class=\"brush:js;toolbar:false\"><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">npm&nbsp;start<br/></span></p></pre><p><br/></p><p style=\"line-height: 1.5em;\"><span style=\"color: rgb(191, 158, 238); font-weight: bold; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">生产模式停止</span></p><pre class=\"brush:js;toolbar:false\"><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">npm&nbsp;run&nbsp;stop<br/></span></p></pre><p><br/></p><p style=\"line-height: 1.5em;\"><span style=\"color: rgb(191, 158, 238); font-weight: bold; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">首页</span></p><pre class=\"brush:js;toolbar:false\"><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">http://localhost:8080<br/></span></p></pre><p><br/></p><p style=\"line-height: 1.5em;\"><span style=\"color: rgb(191, 158, 238); font-weight: bold; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">后台登录</span></p><pre class=\"brush:js;toolbar:false\"><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">http://localhost:8080/dr-admin<br/>登录账号：doramart/123456&nbsp;&nbsp;&nbsp;&nbsp;doracms/123456<br/></span></p></pre><p><br/></p><p style=\"line-height: 1.5em;\"><span style=\"color: rgb(192, 0, 0); font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">PS: 青于蓝模板(个人版权) 限时 <strong>1分钱</strong>，源码发布后恢复原价，要体验的尽快哟！</span></p><p style=\"text-align: center; line-height: 1.5em;\"><img src=\"https://cdn.html-js.cn/cms/upload/ueditor/image/20191112/1573543974872990643.png\" title=\"1573543974872990643.png\" alt=\"1573543974872990643.png\" width=\"350\" height=\"366\"/></p><p><br/></p><p><br/></p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"  千呼万唤始出来，DoraCMS 2.1.4 即将和大家见面，鉴于DoraCMS以后的发展，从2.1.4 版本之后，服务端使用eggjs (https://eggjs.org/zh-cn/intro/quickstart.html) 作为框架。所以在使用新版DoraCMS之前，您需要通读eggjs相关文档，这样有助于您在DoraCMS 做二次开发，另外也需要一定的 vue 以及 mongodb 的基础知识。目前在完全开源之前放出发布版，您可以选择性的使用发布版，发布版具有以下特点：\\n\\n\\n  1、无需编译\\n  2、少量修改配置可用于生产\\n  3、通过重装依赖的方式可以保持整个项目更新与官网同步 \\n\\n  通俗一点说，如果您没有精力做二次开发（注意包括后台界面和接口调整），只想单纯使用新版本功能，建议您使用DoraCMS发布版（与官网同步更新）。另外，我们将在近期发布源码，敬请期待。\\n  DoraCMS 2.1.4 发布版下载： DoraCMS 2.1.4  安装方式和之前的版本无太大差异.\\n\\n\\n视频介绍：\\n\\n\\n\"},{\"type\":\"image\",\"content\":\"/static/plugins/ueditor/themes/default/images/spacer.gif\"},{\"type\":\"contents\",\"content\":\"\\n\\n开发环境准备工作:\\n  \\n安装NodeJS (目前支持到 12.10.0 ):\\nhttps://nodejs.org/zh-cn/\\n\\n\\n\\n设置环境变量（以mac为例，修改 .bash_profile文件）\\nvi ~/.bash_profile\\n\\nexport NODE_ENV=development\\nexport EGG_SERVER_ENV=local\\nMONGODBPATH=/Users/Dora/Documents/dora/soft/mongodb/bin\\nPATH=\\\"${MONGODBPATH}:${PATH}\\\"\\nexport PATH\\n\\nsource ~/.bash_profile\\n\\n\\n\\n&gt; 以上步骤做了两件事情：  \\n1、设置nodejs环境变量为 development (生产环境记得改为 production)  \\n2、将mongodb bin 目录添加到全局变量中，便于在终端的任何位置执行mongo脚本,注意改成自己安装mongodb的实际路径  \\n\\n\\n### 安装并启动 Mongodb (本地mongodb不要设置密码访问)\\nhttps://www.mongodb.com/download-center#community\\n\\n\\n\\n### 安装全局依赖\\nnpm install egg-scripts -g   // eggjs 脚本执行\\nnpm install gulp -g  // 静态资源构建\\nnpm install apidoc -g  // api文档生成\\n\\n\\n\\n安装本系统依赖（代码根目录）\\nnpm install\\n\\n\\n\\n初始化数据\\nnpm run init\\n\\n\\n&gt; 网站图片资源可从这里获取 \\n下载链接: https://pan.baidu.com/s/1th7Qlz4eJGNN3w_Tacl9AQ 提取码: jczt  ，解压后放到项目根目录下 app/public/upload (替换)。\\n\\n 开发模式启动\\nnpm run dev\\n\\n\\n\\n生产模式启动\\nnpm start\\n\\n\\n\\n生产模式停止\\nnpm run stop\\n\\n\\n\\n首页\\nhttp://localhost:8080\\n\\n\\n\\n后台登录\\nhttp://localhost:8080/dr-admin\\n登录账号：doramart/123456    doracms/123456\\n\\n\\n\\nPS: 青于蓝模板(个人版权) 限时 1分钱，源码发布后恢复原价，要体验的尽快哟！\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/ueditor/image/20191112/1573543974872990643.png\"},{\"type\":\"contents\",\"content\":\"\\n\\n\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/1573543217560.png','2019-11-12 07:34:52','2020-11-07 13:18:04'),(164,'Visual Studio Online 更新！更好支持Docker、Python、Go、C++','Visual Studio Online 更新--更好支持Docker、Python、Go、C++',NULL,'1','','vscode,vscode online','1','7AvJ8Dnp','','在 2019 年 11 月，公开预览版的 Visual Studio Online 正式上线。时隔多月，微软又发布了 Visual Studio Online 的最新更新','2','https://cdn.html-js.cn/cms/upload/images/20200308/1583679017726460493.gif,https://cdn.html-js.cn/cms/upload/images/20200308/1583679030458335314.gif,https://cdn.html-js.cn/cms/upload/images/20200308/1583679054834834903.gif','','0:01',762,'2','0',NULL,1,'0',67061,'<section data-darkmode-bgcolor=\"rgb(36, 36, 36)\" data-darkmode-color=\"rgb(204, 204, 204)\" data-style=\"margin-bottom: 1.4em; color: rgb(26, 26, 26); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-size: medium; text-align: start; white-space: normal; background-color: rgb(255, 255, 255); margin-top: 10px;\" class=\"js_darkmode__0\" style=\"margin: 10px 0px 1.4em; padding: 0px; max-width: 100%; background-color: rgb(255, 255, 255); color: rgb(26, 26, 26); letter-spacing: 0.544px; white-space: normal; font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-size: medium; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;\">&nbsp; &nbsp; &nbsp; 在 2019 年 11 月，<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MzU1NjgwNTExNQ==&mid=2247484455&idx=1&sn=f669e200f2fca2ec5c1ee1c12c4b9d40&chksm=fc3e3ab3cb49b3a5273ce15cab18e137f001466cf682fed965b9a40c635015d2e7118929289d&scene=21#wechat_redirect\" textvalue=\"公开预览版的 Visual Studio Online 正式上线\" data-itemshowtype=\"0\" tab=\"innerlink\" data-linktype=\"2\" data-darkmode-bgcolor=\"rgb(36, 36, 36)\" data-darkmode-color=\"rgb(204, 204, 204)\" hasload=\"1\" style=\"margin: 0px; padding: 0px; color: rgb(125, 144, 169); text-decoration-line: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); cursor: pointer; max-width: 100%; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;\">公开预览版的 Visual Studio Online 正式上线</a>。时隔多月，微软又发布了 Visual Studio Online 的最新更新，从增强的环境配置和自定义 Dockerfile 支持、到启用对环境的设置更改等方面，一应俱全。</section><p></p><section data-darkmode-bgcolor=\"rgb(36, 36, 36)\" data-darkmode-color=\"rgb(204, 204, 204)\" data-style=\"margin-bottom: 1.4em; color: rgb(26, 26, 26); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-size: medium; text-align: start; white-space: normal; background-color: rgb(255, 255, 255); margin-top: 10px;\" class=\"js_darkmode__1\" style=\"margin: 10px 0px 1.4em; padding: 0px; max-width: 100%; background-color: rgb(255, 255, 255); color: rgb(26, 26, 26); letter-spacing: 0.544px; white-space: normal; font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-size: medium; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;\">为了更好地控制环境设置并提高可重复性，该团队启用了对 Docker 镜像和 Dockerfile 的支持，并通过新的 progress screen 提供了对环境创建的更多见解。用户还可以指定 GitHub 拉取请求或分支 URL，从而实现快速访问。</section><p style=\"text-align:center\"><img src=\"https://cdn.html-js.cn/cms/upload/images/20200308/1583679017726460493.gif\" title=\"\" _src=\"https://cdn.html-js.cn/cms/upload/images/20200308/1583679017726460493.gif\" alt=\"\"/></p><p style=\"margin: 10px 0px 1.4em; padding: 0px; max-width: 100%; background-color: rgb(255, 255, 255); color: rgb(26, 26, 26); letter-spacing: 0.544px; white-space: normal; font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-size: medium; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;\">&nbsp; &nbsp; &nbsp; 同时，根据用户反馈，开发团队已经扩展了默认环境配置，以包括 PowerShell、Azure CLI、Go 和 C ++ 的本机调试，还有更新的 .NET Core SDK 和改进的 Python 支持。 微软方面还表示，他们在此版本中启用了在创建后更改环境设置的功能。从而允许开发人员从用于编辑代码的标准实例开始，并能够在需要更多功能时升级到高级实例。用户还可以更改 suspension policy，以在环境的整个生命周期内更灵活地进行控制。 用户可以从门户网站更改环境设置，也可以使用 Visual Studio Code 命令面板进行更改：</p><p></p><p style=\"text-align:center\"><img src=\"https://cdn.html-js.cn/cms/upload/images/20200308/1583679030458335314.gif\" title=\"\" _src=\"https://cdn.html-js.cn/cms/upload/images/20200308/1583679030458335314.gif\" alt=\"\"/></p><p><br/></p><p style=\"text-align:center\"><img src=\"https://cdn.html-js.cn/cms/upload/images/20200308/1583679054834834903.gif\" title=\"\" _src=\"https://cdn.html-js.cn/cms/upload/images/20200308/1583679054834834903.gif\" alt=\"\"/></p><p>&nbsp; &nbsp; &nbsp;&nbsp;</p><section data-darkmode-bgcolor=\"rgb(36, 36, 36)\" data-darkmode-color=\"rgb(204, 204, 204)\" data-style=\"margin-bottom: 1.4em; color: rgb(26, 26, 26); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-size: medium; text-align: start; white-space: normal; background-color: rgb(255, 255, 255); margin-top: 10px;\" class=\"js_darkmode__5\" style=\"margin: 10px 0px 1.4em; padding: 0px; max-width: 100%; background-color: rgb(255, 255, 255); color: rgb(26, 26, 26); letter-spacing: 0.544px; white-space: normal; font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-size: medium; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;\">&nbsp; &nbsp; 而针对用户曾经创立了但现在又不再需要的计划，其除了可以转到 Azure 页面进行计划删除外，还可以通过浏览器和 Visual Studio Code 删除计划。<span style=\"font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; letter-spacing: 0.544px;\">此外，该团队目前已经在浏览器中启用了 Visual Studio Code Insiders，因此用户已可以在浏览器或本地计算机上试用 Visual Studio Code 的最新功能。</span></section><p><br/></p>','[{\"type\":\"contents\",\"content\":\"      在 2019 年 11 月，公开预览版的 Visual Studio Online 正式上线。时隔多月，微软又发布了 Visual Studio Online 的最新更新，从增强的环境配置和自定义 Dockerfile 支持、到启用对环境的设置更改等方面，一应俱全。\\n为了更好地控制环境设置并提高可重复性，该团队启用了对 Docker 镜像和 Dockerfile 的支持，并通过新的 progress screen 提供了对环境创建的更多见解。用户还可以指定 GitHub 拉取请求或分支 URL，从而实现快速访问。\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/20200308/1583679017726460493.gif\"},{\"type\":\"contents\",\"content\":\"\\n      同时，根据用户反馈，开发团队已经扩展了默认环境配置，以包括 PowerShell、Azure CLI、Go 和 C ++ 的本机调试，还有更新的 .NET Core SDK 和改进的 Python 支持。 微软方面还表示，他们在此版本中启用了在创建后更改环境设置的功能。从而允许开发人员从用于编辑代码的标准实例开始，并能够在需要更多功能时升级到高级实例。用户还可以更改 suspension policy，以在环境的整个生命周期内更灵活地进行控制。 用户可以从门户网站更改环境设置，也可以使用 Visual Studio Code 命令面板进行更改：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/20200308/1583679030458335314.gif\"},{\"type\":\"contents\",\"content\":\"\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/20200308/1583679054834834903.gif\"},{\"type\":\"contents\",\"content\":\"\\n      \\n    而针对用户曾经创立了但现在又不再需要的计划，其除了可以转到 Azure 页面进行计划删除外，还可以通过浏览器和 Visual Studio Code 删除计划。此外，该团队目前已经在浏览器中启用了 Visual Studio Code Insiders，因此用户已可以在浏览器或本地计算机上试用 Visual Studio Code 的最新功能。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/20200308/1583679210618190547.png','2020-03-08 14:52:52','2020-11-07 13:17:47'),(165,'我是测试呢修改版','我是测试呢修改版',NULL,'1',NULL,'','2',NULL,'','我是测试呢我是测试呢修改版','1','','','0:01',762,'2','1','',1,'0',42,'<p>嘻嘻哈哈我是测试呢修改版</p>','[{\"type\":\"contents\",\"content\":\"嘻嘻哈哈我是测试呢修改版\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/20200703/1593764812482421164.png','2020-07-03 08:26:57','2020-10-24 08:04:29'),(166,'Express 4.8.x—路由详解','express路由详解','2','1','','express路由','2',NULL,NULL,'无论调用 app.use 、app.all、app.get、app.post 都是一样的，按编码顺序执行。还需强调一点，这个顺序执行的前提是，一致的路由；这个路由的一致，体现在相同的方法和相同的路径。','1','','','0:01',762,'2','0',NULL,1,'0',227053,'<h3>路由详解</h3><h4>路由处理器执行顺序</h4><p>编码的顺序决定了路由处理器执行顺序。</p><pre>app.get(“/test”,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(“router&nbsp;A”);\n&nbsp;&nbsp;&nbsp;&nbsp;next();\n})\n\napp.get(“/test”,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(“router&nbsp;B”);\n&nbsp;&nbsp;&nbsp;&nbsp;next();\n})</pre><p>这个顺序编码，浏览器访问/test 时，终端会打印出:</p><pre>router&nbsp;A\nrouter&nbsp;B</pre><p>无论调用 app.use 、app.all、app.get、app.post 都是一样的，按编码顺序执行。还需强调一点，这个顺序执行的前提是，一致的路由；这个路由的一致，体现在相同的方法和相同的路径。</p><pre>app.get(“/test”,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(“router&nbsp;A”);\n&nbsp;&nbsp;&nbsp;&nbsp;next();\n})\n\napp.post(“/test”,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(“router&nbsp;B”);\n&nbsp;&nbsp;&nbsp;&nbsp;next();\n})</pre><p>这样就没有顺序可言，因为顺序的前提必须要是一致的路由。<code>next</code> 这个方法调用之前，不会调用之后的路由处理器。</p><pre>app.get(“/test”,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(“router&nbsp;A”);\n})\n\napp.get(“/test”,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(“router&nbsp;B”);\n&nbsp;&nbsp;&nbsp;&nbsp;next();\n})</pre><p>这个只会打印出 router A ，因为第一个路由处理器没有调用next() 方法。</p><p>始终我们在浏览器都没看到响应，是因为从来没调用过响应方法，比如 &nbsp;res.send 或 res.render 方法。</p><pre>app.get(“/test”,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(“router&nbsp;A”);\n&nbsp;&nbsp;&nbsp;&nbsp;next()\n})\n\napp.get(“/test”,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(“router&nbsp;B”);\n&nbsp;&nbsp;&nbsp;&nbsp;res.send(“router&nbsp;B”);\n})</pre><p>这样浏览器会显示出 router B 字符串，我们发现第二个路由处理器没有调用next ，因为调用next() 的目的是执行之后的路由处理器，如果后面没有就无需调用。另外要注意一点，调用了任何响应方法，都表示响应的任务完成。比如下面代码：</p><pre>app.get(“/test”,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(“router&nbsp;A”);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.send(“router&nbsp;A”)\n&nbsp;&nbsp;&nbsp;&nbsp;next();\n})\n\napp.get(“/test”,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(“router&nbsp;B”);\n&nbsp;&nbsp;&nbsp;&nbsp;res.send(“router&nbsp;B”);\n&nbsp;&nbsp;&nbsp;&nbsp;next();\n})\n\napp.get(“/test”,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(“router&nbsp;C”);\n&nbsp;&nbsp;&nbsp;&nbsp;res.send(“router&nbsp;C”);\n&nbsp;&nbsp;&nbsp;&nbsp;next();\n})</pre><p>调用后浏览器只会显示出router A，因为 “ 调用了任何响应方法，都表示响应的任务完成。 ” ，当然第二个路由响应器还是会执行，只不过所有的响应方法都不再起作用。</p><p>而其他代码还会起作用，终端会打印出：</p><pre>router&nbsp;A\nrouter&nbsp;B\nrouter&nbsp;C</pre><h4>app.all</h4><p><code>app.all</code> 表示响应所有http方法。</p><pre>app.all(“/test”,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(“app.all&nbsp;method”);\n&nbsp;&nbsp;&nbsp;&nbsp;next();\n})\n\napp.get(&quot;/test&quot;,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;res.send(&quot;app.get&nbsp;method&quot;)\n})\n\napp.post(&quot;/test&quot;,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;res.send(&quot;app.post&nbsp;method&quot;)\n})</pre><p>无论我们通过 get 或 post http方法访问，终端都会打印app.all method。 用 app.use 代替 app.all 效果也一样，但use不支持多路由处理器，比如下面代码：</p><pre>app.all(&quot;/test&quot;,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;app.all&nbsp;method&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;next();\n},function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;app&nbsp;2&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;next();\n})\n\napp.get(&quot;/test&quot;,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;res.send(&quot;app.get&nbsp;method&quot;)\n})\n\napp.post(&quot;/test&quot;,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;res.send(&quot;app.post&nbsp;method&quot;)\n})</pre><p>终端会打印出</p><pre>app.all&nbsp;method\napp&nbsp;2</pre><p>但用use代替all方法，只打印出</p><pre>app.all&nbsp;method</pre><p><code>app.all / app.get / app.post</code> 方法支持多路由处理器链 &nbsp; ,<code>app.use</code> 方法不支持，但它支持express.Router的实例，下面就来探讨 express.Router 类。</p><h4>express.Router</h4><p>一个express.Router 对象，可以理解为是一个独立的 mini app，它也可以调用use方法加入中间件，但只作用于自身。</p><p>通过 <code>var router &nbsp;= express.Router([可选参数])</code> 创建一个路由器对象。</p><p>可选参数对象有两个可选值，caseSensitive 区分大小写，例如/Foo 和 /foo ，默认false关闭。strict 严格路由，例如 /foo 和 /foo/ ，默认false关闭。</p><p>它是个mini app，所以它的行为方式和app一致，下面是个例子：</p><pre>var&nbsp;router&nbsp;=&nbsp;express.Router();\nrouter.get(&quot;/abc&quot;,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;res.send(&quot;abc&nbsp;abc&quot;);\n})\n\napp.use(&quot;/user&quot;,router);</pre><p>通过 /user/abc 可以访问，通过app.use方法加入到应用程序的路由链上。</p><p>比如我们系统中有一些子系统，user 、book和 forum：</p><pre>app.use(&quot;/user&quot;,require(“./user”));\napp.use(&quot;/book&quot;,require(“./user”));\napp.use(&quot;/forum&quot;,require(“./user”));</pre><p>模块化很方便，便于管理和维护。既然它是mini app，它自身的use方法也可以应用其他router。例如：</p><pre>var&nbsp;sub&nbsp;=&nbsp;express.Router();\nsub.get(&quot;/sub&quot;,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;res.send(&quot;sub&nbsp;is&nbsp;me&quot;);\n})\n\nvar&nbsp;router&nbsp;=&nbsp;express.Router();\nrouter.use(&quot;/abc&quot;,sub);\n\napp.use(&quot;/user&quot;,router);</pre><p>通过 /user/abc/sub 可以访问到，实际开发不会这么写，这里只是举个例子。</p><p>另外， 无论app还是mini app的Router对象，都支持下面的糖衣写法：</p><pre>//&nbsp;也可以用于&nbsp;app.route\nrouter.route(&#39;/users/:user_id&#39;)\n.all(function(req,&nbsp;res,&nbsp;next)&nbsp;{\n})\n\n.get(function(req,&nbsp;res,&nbsp;next)&nbsp;{\n&nbsp;},function(req,res,next){})\n\n.put(function(req,&nbsp;res,&nbsp;next)&nbsp;{\n\n&nbsp;})\n.post(function(req,&nbsp;res,&nbsp;next)&nbsp;{\n\n})\n.delete(function(req,&nbsp;res,&nbsp;next)&nbsp;{\n\n})</pre><h4>泛式路由</h4><p><code>/user/id0001</code> 这是明确路由，泛式路由在“web框架开发实战”部分已经介绍过了，这里不做说明。</p><p><code>/user/:id</code> 和 &nbsp;<code>/user/*</code> 都属于泛式路由，在express如何获得路由参数的呢？这个放在下一节<code>Request请求</code>来讲。</p><p>这个部分我们要探讨express泛式路由的写法。</p><ul class=\" list-paddingleft-2\"><li><p><code>/user/:id</code> 这个路由通过，<code>user/id</code> 都可访问到。</p></li><li><p><code>/user/:id?</code> 这个路由通过，<code>/user</code> 和 <code>user/id</code> 都可访问到。</p></li><li><p><code>/user/*</code> 这个路由通过，<code>/user</code> 和 <code>user/id</code> 都可访问到。</p></li><li><p><code>/user/*/id?</code> &nbsp;这个路由通过，<code>/user</code> 和 <code>user/id001</code> 和 <code>user/xxx/id001</code>都可访问到。</p></li><li><p><code>/user/*/:id</code> &nbsp;这个路由通过， <code>user/id001</code> 和 <code>user/xxx/id001</code>都可访问到。</p></li></ul><p>这两个写法的差异在于，定义了:id 就可通过 req.params.id 得到改参数。</p><p>通过正则可以写复杂些的路由器。例如：</p><pre>router.get(/^\\/commits\\/(\\w+)(?:\\.\\.(\\w+))?$/,&nbsp;function(req,&nbsp;res){\n&nbsp;&nbsp;var&nbsp;from&nbsp;=&nbsp;req.params[0];\n&nbsp;&nbsp;var&nbsp;to&nbsp;=&nbsp;req.params[1]&nbsp;||&nbsp;&#39;HEAD&#39;;\n&nbsp;&nbsp;res.send(&#39;commit&nbsp;range&nbsp;&#39;&nbsp;+&nbsp;from&nbsp;+&nbsp;&#39;..&#39;&nbsp;+&nbsp;to);\n});</pre><p>通过 <code>/commits/71dbb9c..4c084f9</code> 可以访问到，params[0] 对应的是 71dbb9c ， params[1] 对应的是 4c084f9</p>','[{\"type\":\"contents\",\"content\":\"路由详解\\n路由处理器执行顺序\\n编码的顺序决定了路由处理器执行顺序。\\napp.get(“/test”,function(req,res,next){\\n    console.log(“router A”);\\n    next();\\n})\\n\\napp.get(“/test”,function(req,res,next){\\n    console.log(“router B”);\\n    next();\\n})\\n这个顺序编码，浏览器访问/test 时，终端会打印出:\\nrouter A\\nrouter B\\n无论调用 app.use 、app.all、app.get、app.post 都是一样的，按编码顺序执行。还需强调一点，这个顺序执行的前提是，一致的路由；这个路由的一致，体现在相同的方法和相同的路径。\\napp.get(“/test”,function(req,res,next){\\n    console.log(“router A”);\\n    next();\\n})\\n\\napp.post(“/test”,function(req,res,next){\\n    console.log(“router B”);\\n    next();\\n})\\n这样就没有顺序可言，因为顺序的前提必须要是一致的路由。next 这个方法调用之前，不会调用之后的路由处理器。\\napp.get(“/test”,function(req,res,next){\\n    console.log(“router A”);\\n})\\n\\napp.get(“/test”,function(req,res,next){\\n    console.log(“router B”);\\n    next();\\n})\\n这个只会打印出 router A ，因为第一个路由处理器没有调用next() 方法。\\n始终我们在浏览器都没看到响应，是因为从来没调用过响应方法，比如  res.send 或 res.render 方法。\\napp.get(“/test”,function(req,res,next){\\n    console.log(“router A”);\\n    next()\\n})\\n\\napp.get(“/test”,function(req,res,next){\\n    console.log(“router B”);\\n    res.send(“router B”);\\n})\\n这样浏览器会显示出 router B 字符串，我们发现第二个路由处理器没有调用next ，因为调用next() 的目的是执行之后的路由处理器，如果后面没有就无需调用。另外要注意一点，调用了任何响应方法，都表示响应的任务完成。比如下面代码：\\napp.get(“/test”,function(req,res,next){\\n    console.log(“router A”);\\n            res.send(“router A”)\\n    next();\\n})\\n\\napp.get(“/test”,function(req,res,next){\\n    console.log(“router B”);\\n    res.send(“router B”);\\n    next();\\n})\\n\\napp.get(“/test”,function(req,res,next){\\n    console.log(“router C”);\\n    res.send(“router C”);\\n    next();\\n})\\n调用后浏览器只会显示出router A，因为 “ 调用了任何响应方法，都表示响应的任务完成。 ” ，当然第二个路由响应器还是会执行，只不过所有的响应方法都不再起作用。\\n而其他代码还会起作用，终端会打印出：\\nrouter A\\nrouter B\\nrouter C\\napp.all\\napp.all 表示响应所有http方法。\\napp.all(“/test”,function(req,res,next){\\n    console.log(“app.all method”);\\n    next();\\n})\\n\\napp.get(\\\"/test\\\",function(req,res,next){\\n    res.send(\\\"app.get method\\\")\\n})\\n\\napp.post(\\\"/test\\\",function(req,res,next){\\n    res.send(\\\"app.post method\\\")\\n})\\n无论我们通过 get 或 post http方法访问，终端都会打印app.all method。 用 app.use 代替 app.all 效果也一样，但use不支持多路由处理器，比如下面代码：\\napp.all(\\\"/test\\\",function(req,res,next){\\n    console.log(\\\"app.all method\\\");\\n    next();\\n},function(req,res,next){\\n    console.log(\\\"app 2\\\");\\n    next();\\n})\\n\\napp.get(\\\"/test\\\",function(req,res,next){\\n    res.send(\\\"app.get method\\\")\\n})\\n\\napp.post(\\\"/test\\\",function(req,res,next){\\n    res.send(\\\"app.post method\\\")\\n})\\n终端会打印出\\napp.all method\\napp 2\\n但用use代替all方法，只打印出\\napp.all method\\napp.all / app.get / app.post 方法支持多路由处理器链   ,app.use 方法不支持，但它支持express.Router的实例，下面就来探讨 express.Router 类。\\nexpress.Router\\n一个express.Router 对象，可以理解为是一个独立的 mini app，它也可以调用use方法加入中间件，但只作用于自身。\\n通过 var router  = express.Router([可选参数]) 创建一个路由器对象。\\n可选参数对象有两个可选值，caseSensitive 区分大小写，例如/Foo 和 /foo ，默认false关闭。strict 严格路由，例如 /foo 和 /foo/ ，默认false关闭。\\n它是个mini app，所以它的行为方式和app一致，下面是个例子：\\nvar router = express.Router();\\nrouter.get(\\\"/abc\\\",function(req,res,next){\\n    res.send(\\\"abc abc\\\");\\n})\\n\\napp.use(\\\"/user\\\",router);\\n通过 /user/abc 可以访问，通过app.use方法加入到应用程序的路由链上。\\n比如我们系统中有一些子系统，user 、book和 forum：\\napp.use(\\\"/user\\\",require(“./user”));\\napp.use(\\\"/book\\\",require(“./user”));\\napp.use(\\\"/forum\\\",require(“./user”));\\n模块化很方便，便于管理和维护。既然它是mini app，它自身的use方法也可以应用其他router。例如：\\nvar sub = express.Router();\\nsub.get(\\\"/sub\\\",function(req,res,next){\\n    res.send(\\\"sub is me\\\");\\n})\\n\\nvar router = express.Router();\\nrouter.use(\\\"/abc\\\",sub);\\n\\napp.use(\\\"/user\\\",router);\\n通过 /user/abc/sub 可以访问到，实际开发不会这么写，这里只是举个例子。\\n另外， 无论app还是mini app的Router对象，都支持下面的糖衣写法：\\n// 也可以用于 app.route\\nrouter.route(\'/users/:user_id\')\\n.all(function(req, res, next) {\\n})\\n\\n.get(function(req, res, next) {\\n },function(req,res,next){})\\n\\n.put(function(req, res, next) {\\n\\n })\\n.post(function(req, res, next) {\\n\\n})\\n.delete(function(req, res, next) {\\n\\n})\\n泛式路由\\n/user/id0001 这是明确路由，泛式路由在“web框架开发实战”部分已经介绍过了，这里不做说明。\\n/user/:id 和  /user/* 都属于泛式路由，在express如何获得路由参数的呢？这个放在下一节Request请求来讲。\\n这个部分我们要探讨express泛式路由的写法。\\n/user/:id 这个路由通过，user/id 都可访问到。\\n/user/:id? 这个路由通过，/user 和 user/id 都可访问到。\\n/user/* 这个路由通过，/user 和 user/id 都可访问到。\\n/user/*/id?  这个路由通过，/user 和 user/id001 和 user/xxx/id001都可访问到。\\n/user/*/:id  这个路由通过， user/id001 和 user/xxx/id001都可访问到。\\n\\n这两个写法的差异在于，定义了:id 就可通过 req.params.id 得到改参数。\\n通过正则可以写复杂些的路由器。例如：\\nrouter.get(/^\\\\/commits\\\\/(\\\\w+)(?:\\\\.\\\\.(\\\\w+))?$/, function(req, res){\\n  var from = req.params[0];\\n  var to = req.params[1] || \'HEAD\';\\n  res.send(\'commit range \' + from + \'..\' + to);\\n});\\n通过 /commits/71dbb9c..4c084f9 可以访问到，params[0] 对应的是 71dbb9c ， params[1] 对应的是 4c084f9\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445058415000.jpg','2015-10-17 05:09:32','2020-08-20 15:44:22'),(167,'NodeJS独立开发web框架——静态服务器开发(4)','打造web框架雏形','2','1','','web框架','2',NULL,'','​我们在stuwebfk项目目录下，建立一个lib文件夹，里面创建一个App.js文件，然后把先前的代码整合到其中。','1','','','0:01',762,'2','0',NULL,0,'0',225678,'<script type=\"text/javascript\">var container = document.getElementById(\"content\");\n            function iEsc(){ return false; }\n            function iRec(){ return true; }\n            function DisableKeys() {\n                if(event.ctrlKey || event.altKey) {\n                    window.event.returnValue=false;\n                    iEsc();}\n            }\n            container.ondragstart=iEsc;\n            container.onkeydown=DisableKeys;\n            container.oncontextmenu=iEsc;\n            if (typeof container.onselectstart !=\"undefined\")\n                container.onselectstart=iEsc;\n            else{\n                container.onmousedown=iEsc;\n                container.onmouseup=iRec;\n            }\n            function DisableRightClick(qsyzDOTnet){\n                if (window.Event){\n                    if (qsyzDOTnet.which == 2 || qsyzDOTnet.which == 3)\n                        iEsc();}\n                else\n                if (event.button == 2 || event.button == 3){\n                    event.cancelBubble = true\n                    event.returnValue = false;\n                    iEsc();}\n            }</script><h3>打造web框架雏形</h3><p>在这一节中，要让先前的代码形成一个模块，这个模块名就叫<code>stuwebfk</code>。</p><p>我们在stuwebfk项目目录下，建立一个lib文件夹，里面创建一个App.js文件，然后把先前的代码整合到其中。</p><pre>//&nbsp;App.js&nbsp;文件，该文件表示应用程序类\nfunction&nbsp;App(){&nbsp;}&nbsp;\nmodule.exports&nbsp;=&nbsp;App;&nbsp;&nbsp;//&nbsp;这是模块出口，这样外界才能访问到App类。</pre><p>这就是一个简单模块，当外界可以通过 <code>var App = require(&quot;./lib/App&quot;)</code>的方式得到App类，当然要看访问文件本身的位置，比如都在lib一个目录内，那么可以用<code>var App = &nbsp;require(&quot;./App&quot;)</code>得到App类。</p><blockquote><p>小胖问道：我有个疑惑，比如为什么<code>fs</code>和<code>http</code>模块的引用，不用<code>require(&quot;./fs&quot;)</code>，而直接用<code>require(&quot;fs&quot;)</code>就可以访问到呢？</p></blockquote><p>这个问题提的很好，看你来你的观察力很强！这个问题我不想一次性说透，我们还是以项目为驱动的去学习，既然你问到了，我简单的先说一下，过几天随着项目的进展，不用大篇幅的介绍其概念，你也就理解了。学习的最好方式是去模仿，通过项目的进展你会从根本上领悟。</p><p>node.js中，可通过多种方式require到相应的模块，node.js核心的API，可通过require(模块名)的方式访问到，如果把模块放在<code>node_modules</code>目录中，那么该目录的同级目录，和同级目录下的子目录内的JS程序，都可通过 require(模块名)的方式访问到，下图显示了这种关系。</p><p><img alt=\"\" src=\"http://jsera.qiniudn.com/picture/brighthas-lJLVcgkiMg\"/>&nbsp;</p><p>这里的aaa和bbb目录内JS程序，和当前目录的a.js都可以通过require(模块名)的方式访问到node_modules目录下的模块。这个问题暂时就介绍到这里。</p><p>App代表一个应用的概念，通过<code>var app = new App()</code>的方式可以创建一个应用，这样就脱离开了底层的一些概念，也就是通过封装的方式，让开发更人性化。</p><p>下面写一段为代码，代替先前使用底层代码。</p><pre>var&nbsp;webfk&nbsp;=&nbsp;require(&quot;stuwebfk&quot;);\nvar&nbsp;app&nbsp;=&nbsp;new&nbsp;webfk.App();\napp.use(webfk.static(__dirname+&quot;/public&quot;));&nbsp;&nbsp;&nbsp;//&nbsp;通过插件的方式加入静态服务器的功能\napp.listen(3000);</pre><p>上面这段代码还没有实现，眼下只是个蓝图，下面就一步步的加以实现。我们要在项目根目录下，建立如下的文件。</p><p><img alt=\"\" src=\"http://jsera.qiniudn.com/picture/brighthas-xyKFqeksGl\"/>&nbsp;</p><ul class=\" list-paddingleft-2\"><li><p>App.js 是应用程序类，通过new App可以创建一个应用程序。</p></li><li><p>static.js 是静态资源服务的中间件，其实之前的代码主要是加入这个文件中，作为一个插件形式存在。</p></li><li><p>index.js 是整个模块的出口，这样就可以通过 require(&quot;stuwebfk&quot;).App 和 require(&quot;stuwebfk&quot;).static 访问了。</p></li></ul><p>下面列出三个文件的实现代码，看起来很害怕，今天不会深入研究这些具体实现，只要简单了解一下即可，后面几天会深入剖析具体的实现方式。</p><p><code>lib/static.js</code> 文件内容</p><pre>var&nbsp;url&nbsp;=&nbsp;require(&quot;url&quot;),\n&nbsp;&nbsp;&nbsp;&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\n\n//&nbsp;把URL转换成资源路径\nfunction&nbsp;url2path(url_str){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;urlObj&nbsp;=&nbsp;url.parse(url_str);&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;path&nbsp;=&nbsp;urlObj.path;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;path;\n}\n\nmodule.exports&nbsp;=&nbsp;function&nbsp;static(parent_path){\n\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;function(req,res,next){&nbsp;&nbsp;//&nbsp;这个插件无需调用next。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;path&nbsp;=&nbsp;url2path(req.url);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;callback(err,data){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(err){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.statusCode&nbsp;=&nbsp;404;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.write(data);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fs.readFile(parent_path+path,callback);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n}</pre><p><code>lib/App.js</code> 文件内容</p><pre>var&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\n\nmodule.exports&nbsp;=&nbsp;App;\n\nfunction&nbsp;App(){\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;插件有序列表\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;middleList&nbsp;=&nbsp;this._middleList&nbsp;=&nbsp;[];\n\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;request事件响应函数\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;handle(req,res){\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(middleList.length&nbsp;===&nbsp;0){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;如果没有功能插件什么都不做。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;循环执行插件\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;middleIndex&nbsp;=&nbsp;0;&nbsp;//&nbsp;插件索引\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;execMiddle();\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;执行这个函数时，会自动执行下一个middle插件。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;至于这个函数的执行，是由插件所控制。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;next(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;middleIndex&nbsp;+=&nbsp;1;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;execMiddle();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;执行插件函数\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;execMiddle(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;middle&nbsp;=&nbsp;middleList[middleIndex];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(middle){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;middle(req,res,next);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;this._server&nbsp;=&nbsp;http.createServer(handle);\n\n}\n\n//&nbsp;加入功能栈\nApp.prototype.use&nbsp;=&nbsp;function(middle){\n&nbsp;&nbsp;&nbsp;&nbsp;this._middleList.push(middle);\n}\n\n//&nbsp;监听端口\nApp.prototype.listen&nbsp;=&nbsp;function(){\n&nbsp;&nbsp;&nbsp;&nbsp;this._server.listen.apply(this._server,arguments);\n}</pre><p><code>index.js</code> 文件内容</p><pre>exports.App&nbsp;=&nbsp;require(&quot;./lib/App&quot;);\nexports.static&nbsp;=&nbsp;require(&quot;./lib/static&quot;);</pre><hr/><p>今天项目的进展很大，形成了一个雏形框架，通过今天的实战会有很多收获，也会有很多疑惑，这都是进步。在以项目为驱动的学习过程中，重点不是记住多少知识，而是去体悟那种开发的感觉，还是那句话，知识是可以学到的，经验只能被传授。传授的意思就是通过具体项目的实践，在模仿的过程中，逐步形成自己的体悟，也就是经验。</p><p>明天将会具体剖析stuwebfk框架的实现方式。今天就到这里，祝你好梦！</p>','[{\"type\":\"contents\",\"content\":\"<div>\\n打造web框架雏形\\n在这一节中，要让先前的代码形成一个模块，这个模块名就叫stuwebfk。\\n我们在stuwebfk项目目录下，建立一个lib文件夹，里面创建一个App.js文件，然后把先前的代码整合到其中。\\n// App.js 文件，该文件表示应用程序类\\nfunction App(){ } \\nmodule.exports = App;  // 这是模块出口，这样外界才能访问到App类。\\n这就是一个简单模块，当外界可以通过 var App = require(\\\"./lib/App\\\")的方式得到App类，当然要看访问文件本身的位置，比如都在lib一个目录内，那么可以用var App =  require(\\\"./App\\\")得到App类。\\n小胖问道：我有个疑惑，比如为什么fs和http模块的引用，不用require(\\\"./fs\\\")，而直接用require(\\\"fs\\\")就可以访问到呢？\\n\\n这个问题提的很好，看你来你的观察力很强！这个问题我不想一次性说透，我们还是以项目为驱动的去学习，既然你问到了，我简单的先说一下，过几天随着项目的进展，不用大篇幅的介绍其概念，你也就理解了。学习的最好方式是去模仿，通过项目的进展你会从根本上领悟。\\nnode.js中，可通过多种方式require到相应的模块，node.js核心的API，可通过require(模块名)的方式访问到，如果把模块放在node_modules目录中，那么该目录的同级目录，和同级目录下的子目录内的JS程序，都可通过 require(模块名)的方式访问到，下图显示了这种关系。\\n\"},{\"type\":\"image\",\"content\":\"http://jsera.qiniudn.com/picture/brighthas-lJLVcgkiMg\"},{\"type\":\"contents\",\"content\":\" \\n这里的aaa和bbb目录内JS程序，和当前目录的a.js都可以通过require(模块名)的方式访问到node_modules目录下的模块。这个问题暂时就介绍到这里。\\nApp代表一个应用的概念，通过var app = new App()的方式可以创建一个应用，这样就脱离开了底层的一些概念，也就是通过封装的方式，让开发更人性化。\\n下面写一段为代码，代替先前使用底层代码。\\nvar webfk = require(\\\"stuwebfk\\\");\\nvar app = new webfk.App();\\napp.use(webfk.static(__dirname+\\\"/public\\\"));   // 通过插件的方式加入静态服务器的功能\\napp.listen(3000);\\n上面这段代码还没有实现，眼下只是个蓝图，下面就一步步的加以实现。我们要在项目根目录下，建立如下的文件。\\n\"},{\"type\":\"image\",\"content\":\"http://jsera.qiniudn.com/picture/brighthas-xyKFqeksGl\"},{\"type\":\"contents\",\"content\":\" \\nApp.js 是应用程序类，通过new App可以创建一个应用程序。\\nstatic.js 是静态资源服务的中间件，其实之前的代码主要是加入这个文件中，作为一个插件形式存在。\\nindex.js 是整个模块的出口，这样就可以通过 require(\\\"stuwebfk\\\").App 和 require(\\\"stuwebfk\\\").static 访问了。\\n\\n下面列出三个文件的实现代码，看起来很害怕，今天不会深入研究这些具体实现，只要简单了解一下即可，后面几天会深入剖析具体的实现方式。\\nlib/static.js 文件内容\\nvar url = require(\\\"url\\\"),\\n    fs = require(\\\"fs\\\");\\n\\n// 把URL转换成资源路径\\nfunction url2path(url_str){\\n    var urlObj = url.parse(url_str); \\n    var path = urlObj.path;\\n    return path;\\n}\\n\\nmodule.exports = function static(parent_path){\\n\\n    return function(req,res,next){  // 这个插件无需调用next。\\n       var path = url2path(req.url);\\n       function callback(err,data){\\n             if(err){\\n                 res.statusCode = 404;\\n             }\\n             else\\n                res.write(data);\\n             res.end();       \\n       }\\n       fs.readFile(parent_path+path,callback);\\n    }\\n\\n}\\nlib/App.js 文件内容\\nvar http = require(\\\"http\\\");\\n\\nmodule.exports = App;\\n\\nfunction App(){\\n    // 插件有序列表\\n    var middleList = this._middleList = [];\\n\\n    // request事件响应函数\\n    function handle(req,res){\\n\\n\\n        if(middleList.length === 0){\\n            // 如果没有功能插件什么都不做。\\n        }else{\\n\\n            // 循环执行插件\\n            var middleIndex = 0; // 插件索引\\n\\n            execMiddle();\\n\\n            // 执行这个函数时，会自动执行下一个middle插件。\\n            // 至于这个函数的执行，是由插件所控制。\\n            function next(){\\n                middleIndex += 1;\\n                execMiddle();\\n            }\\n\\n            // 执行插件函数\\n            function execMiddle(){\\n                var middle = middleList[middleIndex];\\n                if(middle){\\n                    middle(req,res,next);\\n                }\\n            }        \\n\\n        }\\n\\n\\n    }\\n\\n    this._server = http.createServer(handle);\\n\\n}\\n\\n// 加入功能栈\\nApp.prototype.use = function(middle){\\n    this._middleList.push(middle);\\n}\\n\\n// 监听端口\\nApp.prototype.listen = function(){\\n    this._server.listen.apply(this._server,arguments);\\n}\\nindex.js 文件内容\\nexports.App = require(\\\"./lib/App\\\");\\nexports.static = require(\\\"./lib/static\\\");\\n今天项目的进展很大，形成了一个雏形框架，通过今天的实战会有很多收获，也会有很多疑惑，这都是进步。在以项目为驱动的学习过程中，重点不是记住多少知识，而是去体悟那种开发的感觉，还是那句话，知识是可以学到的，经验只能被传授。传授的意思就是通过具体项目的实践，在模仿的过程中，逐步形成自己的体悟，也就是经验。\\n明天将会具体剖析stuwebfk框架的实现方式。今天就到这里，祝你好梦！\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444892493000.jpg','2015-09-02 14:44:54','2020-08-20 15:44:25'),(168,'Redis 未授权访问漏洞','Redis 未授权访问漏洞','1','1','','Redis','2',NULL,'','redis 默认不需要密码即可访问，黑客直接访问即可获取数据库中所有信息，造成严重的信息泄露。','1','','','0:01',762,'2','0',NULL,0,'0',224889,'<p>今天阿里云服务器报出了DoraCMS一个redis漏洞：</p><p><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_9_16_13_5_22_273_1000.jpg\" title=\"Redis 未授权访问漏洞\" alt=\"Redis 未授权访问漏洞\" width=\"987\" height=\"146\" border=\"0\" vspace=\"0\" style=\"width: 987px; height: 146px;\"/></p><p><br/></p><p>于是查了一下相关资料：</p><p><br/></p><p><br/></p><p><span label=\"明显强调\" style=\"font-size: 16px; font-style: italic; font-weight: bold; color: rgb(51, 153, 204); line-height: 18px;\">漏洞描述：</span></p><p><br/></p><p>redis 默认不需要密码即可访问，黑客直接访问即可获取数据库中所有信息，造成严重的信息泄露。</p><p><br/></p><p>修复方案：</p><p><br/></p><p>1、绑定需要访问数据库的IP</p><p><br/></p><p>修改 redis.conf 中的 “bind 127.0.0.1” ，改成需要访问此数据库的IP地址。</p><p><br/></p><p>2、设置访问密码</p><p><br/></p><p>在 redis.conf 中找到“requirepass”字段，在后面填上你需要的密码。</p><p><br/></p><p>注：上述两种方法修改后，需要重启redis才能生效。</p><p><br/></p><p>发现确实前几天做redis缓存并没有设置密码，而未设置密码的redis是可以直接访问缓存信息的，所以需要通过auth属性设置redis密码：</p><pre class=\"brush:js;toolbar:false\">var&nbsp;redis&nbsp;=&nbsp;require(&#39;redis&#39;);\nvar&nbsp;client&nbsp;=&nbsp;redis.createClient(settings.redis_port,&nbsp;settings.redis_host);\nclient.auth(settings.redis_psd);</pre><p><br/></p><p>别忘了，如果在express-session中也使用了redis，也需要加入密码：</p><pre class=\"brush:js;toolbar:false\">app.use(session({\n&nbsp;&nbsp;&nbsp;&nbsp;secret:&nbsp;settings.session_secret,\n&nbsp;&nbsp;&nbsp;&nbsp;store:&nbsp;new&nbsp;RedisStore({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;port:&nbsp;settings.redis_port,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;host:&nbsp;settings.redis_host,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass&nbsp;:&nbsp;settings.redis_psd,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ttl:&nbsp;1800&nbsp;//&nbsp;过期时间\n&nbsp;&nbsp;&nbsp;&nbsp;}),\n&nbsp;&nbsp;&nbsp;&nbsp;resave:&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;saveUninitialized:&nbsp;true\n}));</pre><p><br/></p><p>其它参数设置可参考官方文档：<a href=\"https://github.com/tj/connect-redis\" _src=\"https://github.com/tj/connect-redis\">https://github.com/tj/connect-redis</a> </p><p>在redis.conf 配置中 配置&nbsp;requirepass 的值 和 IP 重启redis和node就可以了，重新扫描结果：</p><p><br/></p><p><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_9_16_13_9_8_30_1001.jpg\" title=\"Redis 未授权访问漏洞\" alt=\"Redis 未授权访问漏洞\" width=\"941\" height=\"162\" border=\"0\" vspace=\"0\" style=\"width: 941px; height: 162px;\"/>&nbsp;</p><p><br/></p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"今天阿里云服务器报出了DoraCMS一个redis漏洞：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_9_16_13_5_22_273_1000.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n于是查了一下相关资料：\\n\\n\\n漏洞描述：\\n\\nredis 默认不需要密码即可访问，黑客直接访问即可获取数据库中所有信息，造成严重的信息泄露。\\n\\n修复方案：\\n\\n1、绑定需要访问数据库的IP\\n\\n修改 redis.conf 中的 “bind 127.0.0.1” ，改成需要访问此数据库的IP地址。\\n\\n2、设置访问密码\\n\\n在 redis.conf 中找到“requirepass”字段，在后面填上你需要的密码。\\n\\n注：上述两种方法修改后，需要重启redis才能生效。\\n\\n发现确实前几天做redis缓存并没有设置密码，而未设置密码的redis是可以直接访问缓存信息的，所以需要通过auth属性设置redis密码：\\nvar redis = require(\'redis\');\\nvar client = redis.createClient(settings.redis_port, settings.redis_host);\\nclient.auth(settings.redis_psd);\\n\\n别忘了，如果在express-session中也使用了redis，也需要加入密码：\\napp.use(session({\\n    secret: settings.session_secret,\\n    store: new RedisStore({\\n        port: settings.redis_port,\\n        host: settings.redis_host,\\n        pass : settings.redis_psd,\\n        ttl: 1800 // 过期时间\\n    }),\\n    resave: true,\\n    saveUninitialized: true\\n}));\\n\\n其它参数设置可参考官方文档：https://github.com/tj/connect-redis \\n在redis.conf 配置中 配置 requirepass 的值 和 IP 重启redis和node就可以了，重新扫描结果：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_9_16_13_9_8_30_1001.jpg\"},{\"type\":\"contents\",\"content\":\" \\n\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444894889000.jpg','2015-09-16 05:10:00','2020-08-20 15:44:24'),(169,'Node.js API实例讲解——数据的加密与解密','数据的加密与解密','2','1','','加密，解密','2',NULL,'','听起来好高深，其实这里并不会介绍原理，主要介绍node.js平台提供的加密与解密的工具如何用。\n加密和解密的手段有一些，下面一一道来。','1','','','0:01',762,'2','0',NULL,0,'0',227845,'<h3>数据的加密与解密</h3><p>听起来好高深，其实这里并不会介绍原理，主要介绍node.js平台提供的加密与解密的工具如何用。</p><p>加密和解密的手段有一些，下面一一道来。</p><p>Cipher对象用来加密，Decipher对象用来解密。也就是说创建Cipher对象然后调用它的一些“神秘”方法把数据加密，反过来通过创建一个Decipher对象，然后调用它的“秘密”方法把加密的数据解密，还原到原始数据。</p><p>那么下面的讲解，会分几个部分，首先介绍创建Cipher对象的方式，2 介绍如何通过Cipher进行加密，3 介绍Decipher对象的创建方式，4 介绍如何通过Decipher对象进行解密。</p><h5 id=\"-cipher-\">创建Cipher对象</h5><p>通过 crypto.createCipher(algorithm, key) 或 crypto.createCipheriv(algorithm, key, key2) 可以创建 Cipher对象。&nbsp;</p><p>第二个方法多了一个key2，可以理解为是多加了一个key，不过kye2必须是8个字符，多也不行，少也不行。第一个参数algorithm算法是专门用于加密的算法，可以通过crypto.getCiphers() 得到一个算法数组。</p><pre class=\"code\">var&nbsp;crypto&nbsp;=&nbsp;require(&quot;crypto&quot;);\nvar&nbsp;ciphter&nbsp;=&nbsp;crypto.createCipher(&quot;bf&quot;,&quot;111&quot;);&nbsp;\nvar&nbsp;ciphter2&nbsp;=&nbsp;crypto.createCipheriv(&quot;bf&quot;,&quot;111&quot;,&quot;12345678&quot;);</pre><p>以上代码创建了两个Ciphter对象。</p><h5 id=\"-\">加密数据</h5><p>通过调用Ciphter对象的update和final可以得到加密后的数据。通过ciphter.update(data)方法加密data数据，然后return返回部分加密的数据，可多次调用update方法，最后调用 ciphter.final() 返回剩余的加密数据。这里要注意的是调用update(data)并不一定返回对应的data加密后的数据，所以正确的流程是，每次调用update，然后把返回的数据相加，最后调用一次final，再把final返回的数据相加，得到完整的加密后的数据。</p><p>下面看一个例子：</p><pre class=\"code\">var&nbsp;crypto&nbsp;=&nbsp;require(&quot;crypto&quot;);\nvar&nbsp;ciphter&nbsp;=&nbsp;crypto.createCipher(&quot;bf&quot;,&quot;111&quot;);\nvar&nbsp;s&nbsp;=&nbsp;&quot;&quot;;\ns&nbsp;+=&nbsp;ciphter.update(&quot;aaa&quot;,&quot;utf8&quot;,&quot;hex&quot;);\ns&nbsp;+=&nbsp;ciphter.update(&quot;bbb&quot;,&quot;utf8&quot;,&quot;hex&quot;);\ns&nbsp;+=&nbsp;ciphter.update(&quot;ccc&quot;,&quot;utf8&quot;,&quot;hex&quot;);\ns&nbsp;+=&nbsp;ciphter.final(&quot;hex&quot;);</pre><p>是最终加密后的数据，update(要加密的数据,数据的编码,加密后的数据编码)， final(加密后的数据编码)。</p><h5 id=\"-decipher-\">创建Decipher对象，用于解密。</h5><p>crypto.createDecipher(algorithm, key) 和 crypto.createDecipheriv(algorithm, key, key2) 对应 &nbsp;crypto.createCipher(algorithm, key) 和 crypto.createCipheriv(algorithm, key, key2) 方法。</p><pre class=\"code\">var&nbsp;decipher&nbsp;=&nbsp;crypto.createDecipher(&quot;bf&quot;,&quot;111&quot;);</pre><h5 id=\"-\">解密数据</h5><p>和加密的方法一模一样，下面举个例子，解密上面加密的例子。</p><pre class=\"code\">var&nbsp;o&nbsp;=&nbsp;&quot;&quot;;\nvar&nbsp;decipher&nbsp;=&nbsp;crypto.createDecipher(&quot;bf&quot;,&quot;111&quot;);\no&nbsp;+=&nbsp;decipher.update(s,&quot;hex&quot;,&quot;utf8&quot;);\no&nbsp;+=&nbsp;decipher.final(&quot;utf8&quot;);\nconsole.log(o);&nbsp;//&nbsp;aaabbbccc</pre><p>分解之后，加密解密其实很简单，即使不知道原理，只要知道怎么用就可以了。</p>','[{\"type\":\"contents\",\"content\":\"数据的加密与解密\\n听起来好高深，其实这里并不会介绍原理，主要介绍node.js平台提供的加密与解密的工具如何用。\\n加密和解密的手段有一些，下面一一道来。\\nCipher对象用来加密，Decipher对象用来解密。也就是说创建Cipher对象然后调用它的一些“神秘”方法把数据加密，反过来通过创建一个Decipher对象，然后调用它的“秘密”方法把加密的数据解密，还原到原始数据。\\n那么下面的讲解，会分几个部分，首先介绍创建Cipher对象的方式，2 介绍如何通过Cipher进行加密，3 介绍Decipher对象的创建方式，4 介绍如何通过Decipher对象进行解密。\\n创建Cipher对象\\n通过 crypto.createCipher(algorithm, key) 或 crypto.createCipheriv(algorithm, key, key2) 可以创建 Cipher对象。 \\n第二个方法多了一个key2，可以理解为是多加了一个key，不过kye2必须是8个字符，多也不行，少也不行。第一个参数algorithm算法是专门用于加密的算法，可以通过crypto.getCiphers() 得到一个算法数组。\\nvar crypto = require(\\\"crypto\\\");\\nvar ciphter = crypto.createCipher(\\\"bf\\\",\\\"111\\\"); \\nvar ciphter2 = crypto.createCipheriv(\\\"bf\\\",\\\"111\\\",\\\"12345678\\\");\\n以上代码创建了两个Ciphter对象。\\n加密数据\\n通过调用Ciphter对象的update和final可以得到加密后的数据。通过ciphter.update(data)方法加密data数据，然后return返回部分加密的数据，可多次调用update方法，最后调用 ciphter.final() 返回剩余的加密数据。这里要注意的是调用update(data)并不一定返回对应的data加密后的数据，所以正确的流程是，每次调用update，然后把返回的数据相加，最后调用一次final，再把final返回的数据相加，得到完整的加密后的数据。\\n下面看一个例子：\\nvar crypto = require(\\\"crypto\\\");\\nvar ciphter = crypto.createCipher(\\\"bf\\\",\\\"111\\\");\\nvar s = \\\"\\\";\\ns += ciphter.update(\\\"aaa\\\",\\\"utf8\\\",\\\"hex\\\");\\ns += ciphter.update(\\\"bbb\\\",\\\"utf8\\\",\\\"hex\\\");\\ns += ciphter.update(\\\"ccc\\\",\\\"utf8\\\",\\\"hex\\\");\\ns += ciphter.final(\\\"hex\\\");\\n是最终加密后的数据，update(要加密的数据,数据的编码,加密后的数据编码)， final(加密后的数据编码)。\\n创建Decipher对象，用于解密。\\ncrypto.createDecipher(algorithm, key) 和 crypto.createDecipheriv(algorithm, key, key2) 对应  crypto.createCipher(algorithm, key) 和 crypto.createCipheriv(algorithm, key, key2) 方法。\\nvar decipher = crypto.createDecipher(\\\"bf\\\",\\\"111\\\");\\n解密数据\\n和加密的方法一模一样，下面举个例子，解密上面加密的例子。\\nvar o = \\\"\\\";\\nvar decipher = crypto.createDecipher(\\\"bf\\\",\\\"111\\\");\\no += decipher.update(s,\\\"hex\\\",\\\"utf8\\\");\\no += decipher.final(\\\"utf8\\\");\\nconsole.log(o); // aaabbbccc\\n分解之后，加密解密其实很简单，即使不知道原理，只要知道怎么用就可以了。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444890698000.jpg','2015-08-23 14:35:46','2020-08-20 15:44:25'),(170,'第五天——范式路由之泛式路由分析','泛式路由分析','2','1','','范式路由','2',NULL,'','要想把泛式路由的特性，加入到系统中，第一个想到的是修改App.js文件的两个方法','1','','','0:01',762,'2','0',NULL,0,'0',224270,'<h3>泛式路由分析</h3><p>要想把泛式路由的特性，加入到系统中，第一个想到的是修改<code>App.js</code>文件的两个方法：</p><pre>App.prototype.get&nbsp;=&nbsp;function(route,handle){\n&nbsp;&nbsp;&nbsp;&nbsp;this._route_get_handles[route]&nbsp;=&nbsp;handle;\n}\n\nApp.prototype.post&nbsp;=&nbsp;function(route,handle){\n&nbsp;&nbsp;&nbsp;&nbsp;this._route_post_handles[route]&nbsp;=&nbsp;handle;\n}</pre><p>上周末加入了简单的路由功能，对GET/POST进行了分离处理，也就是说 app.get(&quot;/abc&quot;) 和 app.post(&quot;/abc&quot;) 是不同的，stuwebfk框架会根据get或post方法智能判断路由到的处理器。那么，即使是泛式，也必然会分两个仓库对象，保存路由和其处理函数。还是使用原有的 <code>this._route_get_handles</code> 和 <code>this._route_post_handles</code> 不过，以前是map格式，现在要修改成数组对象。</p><p>修改后的代码是：</p><pre>App.prototype.get&nbsp;=&nbsp;function(route,handle){\n&nbsp;&nbsp;&nbsp;&nbsp;this._route_get_handles.push({route:route,handle:handle})\n}\n\nApp.prototype.post&nbsp;=&nbsp;function(route,handle){\n&nbsp;&nbsp;&nbsp;&nbsp;this._route_post_handles.push({route:route,handle:handle})\n}</pre><p>当有客户请求时，会判断是GET还是POST方法，然后循环this._route_get_handles或this._route_post_handles的数组，找到匹配的路由，然后调用该路由的处理器handle即可，找不到就发送 404 。</p><p>分析就到这里，下节实际编码，并实现泛式路由功能。<span class=\"invade-word\"></span></p>','[{\"type\":\"contents\",\"content\":\"泛式路由分析\\n要想把泛式路由的特性，加入到系统中，第一个想到的是修改App.js文件的两个方法：\\nApp.prototype.get = function(route,handle){\\n    this._route_get_handles[route] = handle;\\n}\\n\\nApp.prototype.post = function(route,handle){\\n    this._route_post_handles[route] = handle;\\n}\\n上周末加入了简单的路由功能，对GET/POST进行了分离处理，也就是说 app.get(\\\"/abc\\\") 和 app.post(\\\"/abc\\\") 是不同的，stuwebfk框架会根据get或post方法智能判断路由到的处理器。那么，即使是泛式，也必然会分两个仓库对象，保存路由和其处理函数。还是使用原有的 this._route_get_handles 和 this._route_post_handles 不过，以前是map格式，现在要修改成数组对象。\\n修改后的代码是：\\nApp.prototype.get = function(route,handle){\\n    this._route_get_handles.push({route:route,handle:handle})\\n}\\n\\nApp.prototype.post = function(route,handle){\\n    this._route_post_handles.push({route:route,handle:handle})\\n}\\n当有客户请求时，会判断是GET还是POST方法，然后循环this._route_get_handles或this._route_post_handles的数组，找到匹配的路由，然后调用该路由的处理器handle即可，找不到就发送 404 。\\n分析就到这里，下节实际编码，并实现泛式路由功能。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444891757000.jpg','2015-10-05 01:29:16','2020-10-24 15:26:37'),(171,'DoraCMS安装常见问题详解','DoraCMS安装常见问题详解','1','1','','faq,安装教程','2',NULL,'','近期发现关注DoraCMS的童鞋多了很多，有一些熟悉node的，也有一些前端开发新手，都提出来一些宝贵的建议和遇到的一些问题，生哥在此表示感谢，在此总结一些常见问题，帮助大家更好的了解DoraCMS。','1','','','0:01',762,'2','0',NULL,0,'0',227849,'<p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_29_6_975_1001.jpg\" title=\"\" alt=\"img20151224185512.jpg\"/></p><p>&nbsp; 近期发现关注DoraCMS的童鞋多了很多，有一些熟悉node的，也有一些前端开发新手，都提出来一些宝贵的建议和遇到的一些问题，生哥在此表示感谢，在此总结一些常见问题，帮助大家更好的了解DoraCMS。</p><p><br/></p><p style=\"text-align: center;\"><strong style=\"font-size: 20px; text-align: center; white-space: normal;\">DoraCMS 2.0</strong></p><p><strong style=\"font-size: 20px; text-align: center; white-space: normal;\"></strong></p><hr/><p>1、服务器部署（生产环境）报错：找不到路径 &#39;/home/doraData/logsdir/doracms&#39;</p><p>这个路径是服务器保存日志的目录，最简单的办法在服务器上新建对应的文件夹就可以了。</p><p><br/></p><p>2、文章缩略图无法上传的问题。这个问题可能由两种情况导致。</p><p>① 之前只允许上传jpg，这个问题已修复，重新更新代码就可以了。</p><p>② 发现某种jpg图片，在服务端校验图片格式时没有识别出来，可以这样处理，在下面的位置加入一段代码（这个问题会在下个版本修复）：</p><pre class=\"brush:js;toolbar:false\">case&nbsp;&#39;ffd8ffdb&#39;:\nfiletype&nbsp;=&nbsp;&#39;jpg&#39;;\nmimetype&nbsp;=&nbsp;[&#39;image/jpeg&#39;,&nbsp;&#39;image/pjpeg&#39;];\nbreak;</pre><p><img src=\"https://user-images.githubusercontent.com/11911066/31007255-8ec86130-a4c5-11e7-9970-393bf67a1993.png\" width=\"600\"/></p><p><br/></p><p>3、后台进去后一片空白。因为近期有更新后台首页，但是没及时更新文档，一片空白的原因是缺少配置，可以参照 html-js.cn 中的资源管理中对系统首页的配置。</p><p><img src=\"https://cdn.html-js.cn/cms/upload/images/ueditor/913694532950953984.png\" title=\"WX20170929-171827@2x.png\" alt=\"WX20170929-171827@2x.png\" width=\"600\" height=\"120\"/></p><p>也可以重新导入 doracms2.zip 初始化数据。</p><p>4、执行npm run dev 报错大致如下：</p><pre class=\"brush:js;toolbar:false\">node&nbsp;./build/copy\nE:\\DoraCMS\\server\\lib\\controller\\adminUser.js:54\nasync&nbsp;getUserSession(req,&nbsp;res,&nbsp;next)&nbsp;{\n^^^^^^^^^^^^^^\nSyntaxError:&nbsp;Unexpected&nbsp;identifier\nat&nbsp;createScript&nbsp;(vm.js:56:10)\nat&nbsp;Object.runInThisContext&nbsp;(vm.js:97:10)\nat&nbsp;Module._compile&nbsp;(module.js:542:28)\nat&nbsp;Object.Module._extensions..js&nbsp;(module.js:579:10)\nat&nbsp;Module.load&nbsp;(module.js:487:32)\nat&nbsp;tryModuleLoad&nbsp;(module.js:446:12)\nat&nbsp;Function.Module._load&nbsp;(module.js:438:3)</pre><p><br/></p><p>部署文档中已经提到了，doracms2用到了 async 来解决连续回调的问题，但是需要nodejs8.0以上支持，所以请将nodejs版本升级就可以了。</p><hr/><p style=\"line-height: normal; text-align: center;\"><span style=\"font-size: 20px;\"><strong>DoraCMS 1.0</strong></span></p><p>1、图片上传报错的问题。</p><p>这个在前面的文档已经解释过了，目前DoraCMS上传图片用到了gm压缩，需要本地软件支持(GraphicsMagick Display),windows\\linux\\mac都有安装方式，具体问度娘。</p><p>PS:能不能本地不安装GraphicsMagick？可以的，DoraCMSv1.1.0在setting.js文件中给了一个开关，如果您不需要图片压缩直接上传，也就不需要安装GraphicsMagick了，直接将 imgZip设为false.</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_5_16_3_37_7_1000.jpg\" title=\"\" alt=\"DoraCMS版本更新4.jpg\"/>&nbsp;</p><p><br/></p><p>2、用户注册提示：“<span class=\"ellipsis\">乱写邮箱被我发现了吧！</span>”</p><p>其实是邮箱配置不正确导致的，DoraCMS如何配置邮箱：</p><p>① 找到 /models/db/settings.js 设置发件箱的账号密码（我用的是QQ邮箱）</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_33_20_472_1002.jpg\" title=\"\" alt=\"DoraCMS帮助1.jpg\"/></p><p>② 找到 /util/system.js,设置邮箱服务器名称</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_34_5_975_1003.jpg\" title=\"\" alt=\"DoraCMS帮助2.jpg\"/></p><p>如果你是163邮箱，这里就是163，具体其它邮箱可以参考nodemailer官方文档。</p><p><span style=\"text-decoration: underline;\"><strong><span style=\"text-decoration: underline; color: rgb(255, 0, 0);\">注意：留意到现在qq邮箱或者163等邮箱在开启SMTP、IMAP都给了授权码，这样更安全，这时候，在settings.js中 site_email_psd 需要填授权码，而不是邮箱密码，特别注意！</span></strong></span></p><p>设置正确后，邮件配置就没问题了。</p><p><br/></p><p>3、数据备份不成功。数据备份一般情况是正常的，我们在settings.js(/models/db/settings.js)文件中可以看到配置数据库备份存放路径:</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_35_15_582_1004.jpg\" title=\"\" alt=\"DoraCMS帮助3.jpg\"/></p><p>这路径可以不用改，如果不存在该路径会自动创建。需要注意的是，数据库备份是需要获取mongodb的权限的。打开/util/system.js 找到下面一段：</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_38_28_458_1006.jpg\" title=\"\" alt=\"DoraCMS帮助4.jpg\"/></p><p><br/></p><p>如果你是本地调试，mongodb没有设置密码，请把下面的注释打开，它下面的一行注释掉。</p><pre class=\"brush:js;toolbar:false\">var&nbsp;cmdstr&nbsp;=&nbsp;&#39;mongodump&nbsp;-o&nbsp;&quot;&#39;+dataPath+&#39;&quot;&#39;;</pre><p>同理，如果已经是服务器了，mongodb有密码，用下面的</p><pre class=\"brush:js;toolbar:false\">var&nbsp;cmdstr&nbsp;=&nbsp;&#39;mongodump&nbsp;-u&nbsp;&#39;+settings.USERNAME+&#39;&nbsp;-p&nbsp;&#39;+settings.PASSWORD+&#39;&nbsp;-d&nbsp;&#39;+settings.DB+&#39;&nbsp;-o&nbsp;&quot;&#39;+dataPath+&#39;&quot;&#39;;</pre><p>确认了上面的信息，数据备份就没问题了。</p><p><br/></p><p>4、后台设置模板提示——空白页，<span style=\"color: rgb(255, 0, 0);\">“亲爱哒，请先在后台安装并启用模板喔~!”</span></p><p>打开用户组管理，针对当前管理员用户组，看看是否对模板配置有权限，全部勾选上<br/></p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_14_32_36_526_1000.jpg\" title=\"\" alt=\"DoraCMS常见问题.jpg\"/></p><p><br/></p><p>PS:</p><p>1、1.0版本不在更新</p><p>2、本文档会持续补充，如果您遇到其它问题，可以留言提出，我会不断完善,谢谢！&nbsp;</p>','[{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_29_6_975_1001.jpg\"},{\"type\":\"contents\",\"content\":\"\\n  近期发现关注DoraCMS的童鞋多了很多，有一些熟悉node的，也有一些前端开发新手，都提出来一些宝贵的建议和遇到的一些问题，生哥在此表示感谢，在此总结一些常见问题，帮助大家更好的了解DoraCMS。\\n\\nDoraCMS 2.0\\n\\n1、服务器部署（生产环境）报错：找不到路径 \'/home/doraData/logsdir/doracms\'\\n这个路径是服务器保存日志的目录，最简单的办法在服务器上新建对应的文件夹就可以了。\\n\\n2、文章缩略图无法上传的问题。这个问题可能由两种情况导致。\\n① 之前只允许上传jpg，这个问题已修复，重新更新代码就可以了。\\n② 发现某种jpg图片，在服务端校验图片格式时没有识别出来，可以这样处理，在下面的位置加入一段代码（这个问题会在下个版本修复）：\\ncase \'ffd8ffdb\':\\nfiletype = \'jpg\';\\nmimetype = [\'image/jpeg\', \'image/pjpeg\'];\\nbreak;\\n\"},{\"type\":\"image\",\"content\":\"https://user-images.githubusercontent.com/11911066/31007255-8ec86130-a4c5-11e7-9970-393bf67a1993.png\"},{\"type\":\"contents\",\"content\":\"\\n\\n3、后台进去后一片空白。因为近期有更新后台首页，但是没及时更新文档，一片空白的原因是缺少配置，可以参照 html-js.cn 中的资源管理中对系统首页的配置。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/ueditor/913694532950953984.png\"},{\"type\":\"contents\",\"content\":\"\\n也可以重新导入 doracms2.zip 初始化数据。\\n4、执行npm run dev 报错大致如下：\\nnode ./build/copy\\nE:\\\\DoraCMS\\\\server\\\\lib\\\\controller\\\\adminUser.js:54\\nasync getUserSession(req, res, next) {\\n^^^^^^^^^^^^^^\\nSyntaxError: Unexpected identifier\\nat createScript (vm.js:56:10)\\nat Object.runInThisContext (vm.js:97:10)\\nat Module._compile (module.js:542:28)\\nat Object.Module._extensions..js (module.js:579:10)\\nat Module.load (module.js:487:32)\\nat tryModuleLoad (module.js:446:12)\\nat Function.Module._load (module.js:438:3)\\n\\n部署文档中已经提到了，doracms2用到了 async 来解决连续回调的问题，但是需要nodejs8.0以上支持，所以请将nodejs版本升级就可以了。\\nDoraCMS 1.0\\n1、图片上传报错的问题。\\n这个在前面的文档已经解释过了，目前DoraCMS上传图片用到了gm压缩，需要本地软件支持(GraphicsMagick Display),windows\\\\linux\\\\mac都有安装方式，具体问度娘。\\nPS:能不能本地不安装GraphicsMagick？可以的，DoraCMSv1.1.0在setting.js文件中给了一个开关，如果您不需要图片压缩直接上传，也就不需要安装GraphicsMagick了，直接将 imgZip设为false.\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_5_16_3_37_7_1000.jpg\"},{\"type\":\"contents\",\"content\":\" \\n\\n2、用户注册提示：“乱写邮箱被我发现了吧！”\\n其实是邮箱配置不正确导致的，DoraCMS如何配置邮箱：\\n① 找到 /models/db/settings.js 设置发件箱的账号密码（我用的是QQ邮箱）\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_33_20_472_1002.jpg\"},{\"type\":\"contents\",\"content\":\"\\n② 找到 /util/system.js,设置邮箱服务器名称\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_34_5_975_1003.jpg\"},{\"type\":\"contents\",\"content\":\"\\n如果你是163邮箱，这里就是163，具体其它邮箱可以参考nodemailer官方文档。\\n注意：留意到现在qq邮箱或者163等邮箱在开启SMTP、IMAP都给了授权码，这样更安全，这时候，在settings.js中 site_email_psd 需要填授权码，而不是邮箱密码，特别注意！\\n设置正确后，邮件配置就没问题了。\\n\\n3、数据备份不成功。数据备份一般情况是正常的，我们在settings.js(/models/db/settings.js)文件中可以看到配置数据库备份存放路径:\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_35_15_582_1004.jpg\"},{\"type\":\"contents\",\"content\":\"\\n这路径可以不用改，如果不存在该路径会自动创建。需要注意的是，数据库备份是需要获取mongodb的权限的。打开/util/system.js 找到下面一段：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_38_28_458_1006.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n如果你是本地调试，mongodb没有设置密码，请把下面的注释打开，它下面的一行注释掉。\\nvar cmdstr = \'mongodump -o \\\"\'+dataPath+\'\\\"\';\\n同理，如果已经是服务器了，mongodb有密码，用下面的\\nvar cmdstr = \'mongodump -u \'+settings.USERNAME+\' -p \'+settings.PASSWORD+\' -d \'+settings.DB+\' -o \\\"\'+dataPath+\'\\\"\';\\n确认了上面的信息，数据备份就没问题了。\\n\\n4、后台设置模板提示——空白页，“亲爱哒，请先在后台安装并启用模板喔~!”\\n打开用户组管理，针对当前管理员用户组，看看是否对模板配置有权限，全部勾选上\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_14_32_36_526_1000.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\nPS:\\n1、1.0版本不在更新\\n2、本文档会持续补充，如果您遇到其它问题，可以留言提出，我会不断完善,谢谢！ \\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20151224185512.jpg','2015-12-24 11:20:32','2020-08-20 15:44:13'),(172,'第7天 Post方法与上传——切割分类数据','切割分类数据','2','1','','Post方法','2',NULL,'','现在要切割并分类上传来的数据，首先就要解析出边界字符串，通过边界字符串，可以把上传的数据按照字段进行分割。','1','','','0:01',762,'2','0',NULL,0,'0',224089,'<h3>切割分类数据</h3><p>现在要切割并分类上传来的数据，首先就要解析出边界字符串，通过边界字符串，可以把上传的数据按照字段进行分割。</p><h5 id=\"-content-type-boundary-\">从 content-type 中解析出boundary边界字符串</h5><p>解析代码如下：</p><pre>var&nbsp;contentType&nbsp;=&nbsp;req.headers[&quot;content-type&quot;];\n/(boundary=)/gi.test(contentType);\n//&nbsp;boundary&nbsp;就是边界字符串&nbsp;&nbsp;-----------------------------7ddc8352a02ea\nvar&nbsp;boundary&nbsp;=&nbsp;RegExp[&quot;$&#39;&quot;];</pre><p>OK，我们有了边界字符串，就可以利用它进行分割工作了；不过值得注意的是，boundary前面还要加上两个&quot;-&quot;，而结尾的边界字符串是最特殊的，因为他还要在后面加上两个&quot;-&quot;，另外边界字符串结尾都跟着&quot;\\r\\n&quot;（除了结尾边界字符串）。所以我们还要定义两个变量，boundaryStandard和boundaryEnd，分别代表一般边界字符串和结尾边界字符串。代码如下：</p><pre>var&nbsp;boundaryStandard&nbsp;=&nbsp;&quot;--&quot;+boundary+&quot;\\r\\n&quot;;\nvar&nbsp;boundaryEnd&nbsp;=&nbsp;boundaryStandard+&quot;--&quot;;</pre><h5 id=\"-\">去掉头尾边界字符串</h5><p>为了方便下一步的工作，我们要删除头尾的边界字符串，body_data是个字符串形式的数据，保存着整个上传的body体数据。&nbsp;</p><pre>//删除头尾边界字符串\nbody_data&nbsp;=&nbsp;body_data.substring(boundaryStandard.length,body_data.length-boundaryEnd.length);</pre><p>OK，现在的body_data已去掉头尾边界字符串了，下一步就要用字符串的split方法把数据按照字段分割，分割后保存在一个数组中。</p><pre>var&nbsp;fields&nbsp;=&nbsp;body_data.split(boundaryStandard);</pre><p>有了fileds，就可以单独处理字段数据了。处理这些字段数据的过程，我们叫它解析。下一节解析这些分割后的数据，也就是fileds。</p>','[{\"type\":\"contents\",\"content\":\"切割分类数据\\n现在要切割并分类上传来的数据，首先就要解析出边界字符串，通过边界字符串，可以把上传的数据按照字段进行分割。\\n从 content-type 中解析出boundary边界字符串\\n解析代码如下：\\nvar contentType = req.headers[\\\"content-type\\\"];\\n/(boundary=)/gi.test(contentType);\\n// boundary 就是边界字符串  -----------------------------7ddc8352a02ea\\nvar boundary = RegExp[\\\"$\'\\\"];\\nOK，我们有了边界字符串，就可以利用它进行分割工作了；不过值得注意的是，boundary前面还要加上两个\\\"-\\\"，而结尾的边界字符串是最特殊的，因为他还要在后面加上两个\\\"-\\\"，另外边界字符串结尾都跟着\\\"\\\\r\\\\n\\\"（除了结尾边界字符串）。所以我们还要定义两个变量，boundaryStandard和boundaryEnd，分别代表一般边界字符串和结尾边界字符串。代码如下：\\nvar boundaryStandard = \\\"--\\\"+boundary+\\\"\\\\r\\\\n\\\";\\nvar boundaryEnd = boundaryStandard+\\\"--\\\";\\n去掉头尾边界字符串\\n为了方便下一步的工作，我们要删除头尾的边界字符串，body_data是个字符串形式的数据，保存着整个上传的body体数据。 \\n//删除头尾边界字符串\\nbody_data = body_data.substring(boundaryStandard.length,body_data.length-boundaryEnd.length);\\nOK，现在的body_data已去掉头尾边界字符串了，下一步就要用字符串的split方法把数据按照字段分割，分割后保存在一个数组中。\\nvar fields = body_data.split(boundaryStandard);\\n有了fileds，就可以单独处理字段数据了。处理这些字段数据的过程，我们叫它解析。下一节解析这些分割后的数据，也就是fileds。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444982023000.jpg','2015-10-16 07:54:47','2020-08-20 15:44:23'),(173,'Node.js API实例讲解——类型化数组','类型化数组','2','1','','nodejs教程,前端开发','2',NULL,'','ArrayBuffer对象是HTML5标准，也就说明在浏览器和node.js都能使用。表示二进制数据的原始缓冲区，该缓冲区用于存储各种类型化数组的数据。','1','','','0:01',762,'2','0',NULL,0,'0',223630,'<h3>类型化数组</h3><p>ArrayBuffer对象是HTML5标准，也就说明在浏览器和node.js都能使用。</p><p>表示二进制数据的原始缓冲区，该缓冲区用于存储各种类型化数组的数据。 无法直接读取或写入 ArrayBuffer，但可根据需要将其传递到类型化数组或 DataView 对象 来解释原始缓冲区。</p><h3 id=\"-arraybuffer-\">创建ArrayBuffer对象</h3><pre class=\"code\">var&nbsp;buf&nbsp;=&nbsp;new&nbsp;ArrayBuffer(8);</pre><p>不能像Buffer对象那样操作它，那么如何读与写呢？答案就是ArrayBuffer针对不同的类型定义了相关类，通过这些类实例化对象对其进行操作。这些个类型虽然名字和Buffer定义的读写方法名不完全一致，但仔细观察会发现，都是可以对号入座的。</p><p>类型化数组类型表示可编制索引和操纵的 ArrayBuffer 对象 的各种视图。这些个类包括：Int8Array 、Uint8Array 、Int16Array 、Uint16Array 、Int32Array 、Uint32Array 、Float32Array 、64Array</p><p>例1. 创建的buf内部有8个bytes，我们想让第二个字节储存12，代码如下。</p><pre class=\"code\">var&nbsp;buf&nbsp;=&nbsp;new&nbsp;ArrayBuffer(8);\nconsole.log(buf);</pre><p>打印结果是</p><pre class=\"code\">{&nbsp;&#39;0&#39;:&nbsp;0,\n&nbsp;&nbsp;&#39;1&#39;:&nbsp;0,\n&nbsp;&nbsp;&#39;2&#39;:&nbsp;0,\n&nbsp;&nbsp;&#39;3&#39;:&nbsp;0,\n&nbsp;&nbsp;&#39;4&#39;:&nbsp;0,\n&nbsp;&nbsp;&#39;5&#39;:&nbsp;0,\n&nbsp;&nbsp;&#39;6&#39;:&nbsp;0,\n&nbsp;&nbsp;&#39;7&#39;:&nbsp;0,\n&nbsp;&nbsp;slice:&nbsp;[Function:&nbsp;slice],\n&nbsp;&nbsp;byteLength:&nbsp;8&nbsp;}</pre><p>用无符号8位整数类型数组包装ArrayBuffer对象。</p><pre class=\"code\">//&nbsp;用无符号8位整数类型数组包装ArrayBuffer对象\nvar&nbsp;arr&nbsp;=&nbsp;new&nbsp;Uint8Array(buf,1,1);\n//&nbsp;设置arr视图的第一个byte，也就是buf的第二个byte为12\narr.set(0,12);\nconsole.log(buf);</pre><p>打印结果是：</p><pre class=\"code\">{&nbsp;&#39;0&#39;:&nbsp;0,\n&nbsp;&nbsp;&#39;1&#39;:&nbsp;12,\n&nbsp;&nbsp;&#39;2&#39;:&nbsp;0,\n&nbsp;&nbsp;&#39;3&#39;:&nbsp;0,\n&nbsp;&nbsp;&#39;4&#39;:&nbsp;0,\n&nbsp;&nbsp;&#39;5&#39;:&nbsp;0,\n&nbsp;&nbsp;&#39;6&#39;:&nbsp;0,\n&nbsp;&nbsp;&#39;7&#39;:&nbsp;0,\n&nbsp;&nbsp;slice:&nbsp;[Function:&nbsp;slice],\n&nbsp;&nbsp;byteLength:&nbsp;8&nbsp;}</pre><h3 id=\"-\">类型数组具有的构造方法</h3><p>new XXXArray( length ); 参数length , 指定数组的长度。</p><p>例</p><pre class=\"code\">var&nbsp;int8Array&nbsp;=&nbsp;new&nbsp;Int8Array(1);\nconsole.log(int8Array.byteLength);&nbsp;//&nbsp;打印&nbsp;1&nbsp;，表示占用1个byte。\n\nvar&nbsp;uint8Array&nbsp;=&nbsp;new&nbsp;Uint8Array(1);\nconsole.log(uint8Array.byteLength);&nbsp;//&nbsp;打印&nbsp;1&nbsp;，表示占用1个byte。\n\nvar&nbsp;int16Array&nbsp;=&nbsp;new&nbsp;Int16Array(1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nconsole.log(int16Array.byteLength);&nbsp;&nbsp;//&nbsp;打印&nbsp;2&nbsp;，表示占用2个byte。\n\nvar&nbsp;uint16Array&nbsp;=&nbsp;new&nbsp;Uint16Array(1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nconsole.log(uint16Array.byteLength);&nbsp;&nbsp;//&nbsp;打印&nbsp;2&nbsp;，表示占用2个byte。\n\nvar&nbsp;int32Array&nbsp;=&nbsp;new&nbsp;Int32Array(1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nconsole.log(int32Array.byteLength);&nbsp;&nbsp;//&nbsp;打印&nbsp;4&nbsp;，表示占用4个byte。\n\nvar&nbsp;uint32Array&nbsp;=&nbsp;new&nbsp;Uint32Array(1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nconsole.log(uint32Array.byteLength);&nbsp;&nbsp;//&nbsp;打印&nbsp;4&nbsp;，表示占用4个byte。\n\nvar&nbsp;float32Array&nbsp;=&nbsp;new&nbsp;Float32Array(1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nconsole.log(float32Array.byteLength);&nbsp;&nbsp;//&nbsp;打印&nbsp;4&nbsp;，表示占用4个byte。\n\nvar&nbsp;float64Array&nbsp;=&nbsp;new&nbsp;Float64Array(1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nconsole.log(float64Array.byteLength);&nbsp;&nbsp;//&nbsp;打印&nbsp;8&nbsp;，表示占用8个byte。</pre><p>new XXXArray( array ); array ,该数组中包含的数组（或类型化数组）。 内容将初始化为给定数组或类型化数组的内容，且每个元素均转换为此类型。</p><p>例</p><pre class=\"code\">var&nbsp;int8Array&nbsp;=&nbsp;new&nbsp;Int8Array([22,24]);\nconsole.log(int8Array.byteLength);&nbsp;//&nbsp;打印&nbsp;2&nbsp;，表示占用2个byte。\n\nvar&nbsp;uint8Array&nbsp;=&nbsp;new&nbsp;Uint8Array([22,24]);\nconsole.log(uint8Array.byteLength);&nbsp;//&nbsp;打印&nbsp;2&nbsp;，表示占用2个byte。\n\nvar&nbsp;int16Array&nbsp;=&nbsp;new&nbsp;Int16Array([22,24]);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nconsole.log(int16Array.byteLength);&nbsp;&nbsp;//&nbsp;打印&nbsp;4&nbsp;，表示占用4个byte。\n\nvar&nbsp;uint16Array&nbsp;=&nbsp;new&nbsp;Uint16Array([22,24]);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nconsole.log(uint16Array.byteLength);&nbsp;&nbsp;//&nbsp;打印&nbsp;4&nbsp;，表示占用4个byte。\n\nvar&nbsp;int32Array&nbsp;=&nbsp;new&nbsp;Int32Array([22,24]);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nconsole.log(int32Array.byteLength);&nbsp;&nbsp;//&nbsp;打印&nbsp;8&nbsp;，表示占用8个byte。\n\nvar&nbsp;uint32Array&nbsp;=&nbsp;new&nbsp;Uint32Array([22,24]);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nconsole.log(uint32Array.byteLength);&nbsp;&nbsp;//&nbsp;打印&nbsp;8&nbsp;，表示占用8个byte。\n\nvar&nbsp;float32Array&nbsp;=&nbsp;new&nbsp;Float32Array([22,24]);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nconsole.log(float32Array.byteLength);&nbsp;&nbsp;//&nbsp;打印&nbsp;8&nbsp;，表示占用8个byte。\n\nvar&nbsp;float64Array&nbsp;=&nbsp;new&nbsp;Float64Array([22,24]);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nconsole.log(float64Array.byteLength);&nbsp;&nbsp;//&nbsp;打印&nbsp;16&nbsp;，表示占用16个byte。</pre><p>new XXXArray( buffer, byteOffset, length); buffer，此数组类型表示的 ArrayBuffer。byteOffset 可选，指定与 此类型数组将开始的缓冲区的开始处的偏移量（以字节为单位），根据测试这个参数除了Int8Array和Uint8Array可以正常使用，其余都必须设置为0，原因作者暂时也不得而知。length，数组的长度。</p><p>例</p><pre class=\"code\">var&nbsp;ab&nbsp;=&nbsp;new&nbsp;ArrayBuffer(20);\nvar&nbsp;int16Array&nbsp;=&nbsp;new&nbsp;Int16Array(ab,0,2);\nconsole.log(int16Array.length);&nbsp;//&nbsp;2&nbsp;表示数组长度。\nconsole.log(int16Array.byteLength);&nbsp;//&nbsp;4&nbsp;表示占用4个byte。</pre><h3 id=\"-\">类型数组具有的属性</h3><p>buffer 属性 只读。 获取此数组引用的 ArrayBuffer。<span class=\"invade-word\">fuck</span></p><p><span class=\"invade-word\">sex</span>byteLength 属性 只读。 此数组的从其 ArrayBuffer 开始的长度（以字节为单位）在构造时已固定。</p><p>byteOffset 属性 只读。 此数组的从其 ArrayBuffer 开始的偏移量（以字节为单位）在构造时已固定。</p><p>length 属性,数组的长度。\n例</p><pre class=\"code\">var&nbsp;arr&nbsp;=&nbsp;new&nbsp;Uint16Array(2);\narr.set(0,12);\narr.set(1,322);</pre><p></p><p>console.log(arr.buffer);\n/<em> 打印\n &nbsp; &nbsp;{ &#39;0&#39;: 12,\n &nbsp; &nbsp; &nbsp;&#39;1&#39;: 0,\n &nbsp; &nbsp; &nbsp;&#39;2&#39;: 66,\n &nbsp; &nbsp; &nbsp;&#39;3&#39;: 1,\n &nbsp; &nbsp; &nbsp;slice: [Function: slice],\n &nbsp; &nbsp; &nbsp;byteLength: 4 }</em>/</p><p><span class=\"invade-word\">god</span>console.log(arr.byteLength); // 4\nconsole.log(arr.byteOffset); // 0\nconsole.log(arr.length); &nbsp; &nbsp; // 2</p><h3 id=\"-\">类型数组具有的方法</h3><p>get(index) 方法，获取指定索引处的元素</p><p>set(index, value) 方法，设置索引位置的值。</p><p>set(array, offset) 方法，在指定offset位置写入类型化或非类型化数组。</p><p>subarray() 方法,为此数组获取 ArrayBuffer 存储的新视图。</p><pre class=\"code\">var&nbsp;arr&nbsp;=&nbsp;new&nbsp;Uint16Array(4);\narr.set(0,12);\narr.set(1,35);\narr.set(2,666);\narr.set(3,980);\n\nconsole.log(arr.get(2));&nbsp;//&nbsp;666\nconsole.log(arr.length);&nbsp;//&nbsp;4\n\nvar&nbsp;subarr&nbsp;=&nbsp;arr.subarray(1,&nbsp;3);\nconsole.log(subarr.length);&nbsp;//&nbsp;2</pre><h3 id=\"-\">常量</h3><p>BYTES_PER_ELEMENT , 数组中的每个元素的大小（以字节为单位）。</p><pre class=\"code\">var&nbsp;int8Array&nbsp;=&nbsp;new&nbsp;Uint8Array(10);\nvar&nbsp;int32Array&nbsp;=&nbsp;new&nbsp;Uint32Array(2);\nconsole.log(int8Array.BYTES_PER_ELEMENT);\nconsole.log(Int32Array.BYTES_PER_ELEMENT);</pre>','[{\"type\":\"contents\",\"content\":\"类型化数组\\nArrayBuffer对象是HTML5标准，也就说明在浏览器和node.js都能使用。\\n表示二进制数据的原始缓冲区，该缓冲区用于存储各种类型化数组的数据。 无法直接读取或写入 ArrayBuffer，但可根据需要将其传递到类型化数组或 DataView 对象 来解释原始缓冲区。\\n创建ArrayBuffer对象\\nvar buf = new ArrayBuffer(8);\\n不能像Buffer对象那样操作它，那么如何读与写呢？答案就是ArrayBuffer针对不同的类型定义了相关类，通过这些类实例化对象对其进行操作。这些个类型虽然名字和Buffer定义的读写方法名不完全一致，但仔细观察会发现，都是可以对号入座的。\\n类型化数组类型表示可编制索引和操纵的 ArrayBuffer 对象 的各种视图。这些个类包括：Int8Array 、Uint8Array 、Int16Array 、Uint16Array 、Int32Array 、Uint32Array 、Float32Array 、64Array\\n例1. 创建的buf内部有8个bytes，我们想让第二个字节储存12，代码如下。\\nvar buf = new ArrayBuffer(8);\\nconsole.log(buf);\\n打印结果是\\n{ \'0\': 0,\\n  \'1\': 0,\\n  \'2\': 0,\\n  \'3\': 0,\\n  \'4\': 0,\\n  \'5\': 0,\\n  \'6\': 0,\\n  \'7\': 0,\\n  slice: [Function: slice],\\n  byteLength: 8 }\\n用无符号8位整数类型数组包装ArrayBuffer对象。\\n// 用无符号8位整数类型数组包装ArrayBuffer对象\\nvar arr = new Uint8Array(buf,1,1);\\n// 设置arr视图的第一个byte，也就是buf的第二个byte为12\\narr.set(0,12);\\nconsole.log(buf);\\n打印结果是：\\n{ \'0\': 0,\\n  \'1\': 12,\\n  \'2\': 0,\\n  \'3\': 0,\\n  \'4\': 0,\\n  \'5\': 0,\\n  \'6\': 0,\\n  \'7\': 0,\\n  slice: [Function: slice],\\n  byteLength: 8 }\\n类型数组具有的构造方法\\nnew XXXArray( length ); 参数length , 指定数组的长度。\\n例\\nvar int8Array = new Int8Array(1);\\nconsole.log(int8Array.byteLength); // 打印 1 ，表示占用1个byte。\\n\\nvar uint8Array = new Uint8Array(1);\\nconsole.log(uint8Array.byteLength); // 打印 1 ，表示占用1个byte。\\n\\nvar int16Array = new Int16Array(1);      \\nconsole.log(int16Array.byteLength);  // 打印 2 ，表示占用2个byte。\\n\\nvar uint16Array = new Uint16Array(1);      \\nconsole.log(uint16Array.byteLength);  // 打印 2 ，表示占用2个byte。\\n\\nvar int32Array = new Int32Array(1);      \\nconsole.log(int32Array.byteLength);  // 打印 4 ，表示占用4个byte。\\n\\nvar uint32Array = new Uint32Array(1);      \\nconsole.log(uint32Array.byteLength);  // 打印 4 ，表示占用4个byte。\\n\\nvar float32Array = new Float32Array(1);      \\nconsole.log(float32Array.byteLength);  // 打印 4 ，表示占用4个byte。\\n\\nvar float64Array = new Float64Array(1);      \\nconsole.log(float64Array.byteLength);  // 打印 8 ，表示占用8个byte。\\nnew XXXArray( array ); array ,该数组中包含的数组（或类型化数组）。 内容将初始化为给定数组或类型化数组的内容，且每个元素均转换为此类型。\\n例\\nvar int8Array = new Int8Array([22,24]);\\nconsole.log(int8Array.byteLength); // 打印 2 ，表示占用2个byte。\\n\\nvar uint8Array = new Uint8Array([22,24]);\\nconsole.log(uint8Array.byteLength); // 打印 2 ，表示占用2个byte。\\n\\nvar int16Array = new Int16Array([22,24]);      \\nconsole.log(int16Array.byteLength);  // 打印 4 ，表示占用4个byte。\\n\\nvar uint16Array = new Uint16Array([22,24]);      \\nconsole.log(uint16Array.byteLength);  // 打印 4 ，表示占用4个byte。\\n\\nvar int32Array = new Int32Array([22,24]);      \\nconsole.log(int32Array.byteLength);  // 打印 8 ，表示占用8个byte。\\n\\nvar uint32Array = new Uint32Array([22,24]);      \\nconsole.log(uint32Array.byteLength);  // 打印 8 ，表示占用8个byte。\\n\\nvar float32Array = new Float32Array([22,24]);      \\nconsole.log(float32Array.byteLength);  // 打印 8 ，表示占用8个byte。\\n\\nvar float64Array = new Float64Array([22,24]);      \\nconsole.log(float64Array.byteLength);  // 打印 16 ，表示占用16个byte。\\nnew XXXArray( buffer, byteOffset, length); buffer，此数组类型表示的 ArrayBuffer。byteOffset 可选，指定与 此类型数组将开始的缓冲区的开始处的偏移量（以字节为单位），根据测试这个参数除了Int8Array和Uint8Array可以正常使用，其余都必须设置为0，原因作者暂时也不得而知。length，数组的长度。\\n例\\nvar ab = new ArrayBuffer(20);\\nvar int16Array = new Int16Array(ab,0,2);\\nconsole.log(int16Array.length); // 2 表示数组长度。\\nconsole.log(int16Array.byteLength); // 4 表示占用4个byte。\\n类型数组具有的属性\\nbuffer 属性 只读。 获取此数组引用的 ArrayBuffer。fuck\\nsexbyteLength 属性 只读。 此数组的从其 ArrayBuffer 开始的长度（以字节为单位）在构造时已固定。\\nbyteOffset 属性 只读。 此数组的从其 ArrayBuffer 开始的偏移量（以字节为单位）在构造时已固定。\\nlength 属性,数组的长度。例\\nvar arr = new Uint16Array(2);\\narr.set(0,12);\\narr.set(1,322);\\n\\nconsole.log(arr.buffer);/ 打印    { \'0\': 12,      \'1\': 0,      \'2\': 66,      \'3\': 1,      slice: [Function: slice],      byteLength: 4 }/\\ngodconsole.log(arr.byteLength); // 4console.log(arr.byteOffset); // 0console.log(arr.length);     // 2\\n类型数组具有的方法\\nget(index) 方法，获取指定索引处的元素\\nset(index, value) 方法，设置索引位置的值。\\nset(array, offset) 方法，在指定offset位置写入类型化或非类型化数组。\\nsubarray() 方法,为此数组获取 ArrayBuffer 存储的新视图。\\nvar arr = new Uint16Array(4);\\narr.set(0,12);\\narr.set(1,35);\\narr.set(2,666);\\narr.set(3,980);\\n\\nconsole.log(arr.get(2)); // 666\\nconsole.log(arr.length); // 4\\n\\nvar subarr = arr.subarray(1, 3);\\nconsole.log(subarr.length); // 2\\n常量\\nBYTES_PER_ELEMENT , 数组中的每个元素的大小（以字节为单位）。\\nvar int8Array = new Uint8Array(10);\\nvar int32Array = new Uint32Array(2);\\nconsole.log(int8Array.BYTES_PER_ELEMENT);\\nconsole.log(Int32Array.BYTES_PER_ELEMENT);\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444889417000.jpg','2015-08-01 13:10:39','2020-08-20 15:44:26'),(174,'js鼠标滑轮滚动事件绑定（兼容主流浏览器）','js鼠标滑轮滚动事件绑定,兼容主流浏览器','1','1','','鼠标滚动事件，前端开发','2',NULL,'','今天尝试写基于jquery的滚动条，遇到了滚轮事件的兼容性问题，在firefox下和在IE下以及其它浏览器下，监听的事件有区别，查了下相关资料总结一下不同浏览器下鼠标滚轮事件兼容性的处理方式','1','','','0:01',762,'2','0',NULL,0,'0',223912,'<p>今天尝试写基于jquery的滚动条，遇到了滚轮事件的兼容性问题，在firefox下和在IE下以及其它浏览器下，监听的事件有区别，查了下相关资料总结一下不同浏览器下鼠标滚轮事件兼容性的处理方式：</p><p><br/></p><p>在 firefox 下 需要监听 DOMMouseScroll,即：</p><p><br/></p><pre class=\"brush:js;toolbar:false\">if&nbsp;(window.addEventListener)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;DOMMouseScroll&nbsp;is&nbsp;for&nbsp;mozilla.&nbsp;*/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.addEventListener(&#39;DOMMouseScroll&#39;,&nbsp;wheel,&nbsp;false);\n&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p><br/></p><p>在IE或其它浏览器下，这样添加监听就可以了：</p><p><br/></p><pre class=\"brush:js;toolbar:false\">window.onmousewheel&nbsp;=&nbsp;document.onmousewheel&nbsp;=&nbsp;wheel;</pre><p><br/></p><pre class=\"brush:js;toolbar:false\">/**\n&nbsp;*&nbsp;Created&nbsp;by&nbsp;Administrator&nbsp;on&nbsp;2015/7/15.\n&nbsp;*/\n/**&nbsp;Event&nbsp;handler&nbsp;for&nbsp;mouse&nbsp;wheel&nbsp;event.\n&nbsp;*鼠标滚动事件\n&nbsp;*/\n$(function(){\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;wheel&nbsp;=&nbsp;function(event)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;delta&nbsp;=&nbsp;0;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!event)&nbsp;/*&nbsp;For&nbsp;IE.&nbsp;*/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event&nbsp;=&nbsp;window.event;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(event.wheelDelta)&nbsp;{&nbsp;/*&nbsp;IE/Opera.&nbsp;*/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delta&nbsp;=&nbsp;event.wheelDelta&nbsp;/&nbsp;120;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if&nbsp;(event.detail)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;Mozilla&nbsp;case.&nbsp;*/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;In&nbsp;Mozilla,&nbsp;sign&nbsp;of&nbsp;delta&nbsp;is&nbsp;different&nbsp;than&nbsp;in&nbsp;IE.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Also,&nbsp;delta&nbsp;is&nbsp;multiple&nbsp;of&nbsp;3.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delta&nbsp;=&nbsp;-event.detail&nbsp;/&nbsp;3;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;If&nbsp;delta&nbsp;is&nbsp;nonzero,&nbsp;handle&nbsp;it.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Basically,&nbsp;delta&nbsp;is&nbsp;now&nbsp;positive&nbsp;if&nbsp;wheel&nbsp;was&nbsp;scrolled&nbsp;up,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;and&nbsp;negative,&nbsp;if&nbsp;wheel&nbsp;was&nbsp;scrolled&nbsp;down.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(delta)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handle(delta);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;Prevent&nbsp;default&nbsp;actions&nbsp;caused&nbsp;by&nbsp;mouse&nbsp;wheel.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;That&nbsp;might&nbsp;be&nbsp;ugly,&nbsp;but&nbsp;we&nbsp;handle&nbsp;scrolls&nbsp;somehow\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;anyway,&nbsp;so&nbsp;don&#39;t&nbsp;bother&nbsp;here..\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(event.preventDefault)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event.preventDefault();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event.returnValue&nbsp;=&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;Initialization&nbsp;code.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;If&nbsp;you&nbsp;use&nbsp;your&nbsp;own&nbsp;event&nbsp;management&nbsp;code,&nbsp;change&nbsp;it&nbsp;as&nbsp;required.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\n\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(window.addEventListener)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;DOMMouseScroll&nbsp;is&nbsp;for&nbsp;mozilla.&nbsp;*/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.addEventListener(&#39;DOMMouseScroll&#39;,&nbsp;wheel,&nbsp;false);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;IE/Opera.&nbsp;*/\n&nbsp;&nbsp;&nbsp;&nbsp;window.onmousewheel&nbsp;=&nbsp;document.onmousewheel&nbsp;=&nbsp;wheel;\n\n&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;This&nbsp;is&nbsp;high-level&nbsp;function.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;It&nbsp;must&nbsp;react&nbsp;to&nbsp;delta&nbsp;being&nbsp;more/less&nbsp;than&nbsp;zero.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;handle&nbsp;=&nbsp;function(delta)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;random_num&nbsp;=&nbsp;Math.floor((Math.random()&nbsp;*&nbsp;100)&nbsp;+&nbsp;50);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(delta&nbsp;&lt;&nbsp;0)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;alert(&quot;鼠标滑轮向下滚动：&quot;&nbsp;+&nbsp;delta&nbsp;+&nbsp;&quot;次！&quot;);&nbsp;//&nbsp;1\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;#mScroll&quot;).val(&quot;鼠标滑轮向下滚动：&quot;&nbsp;+&nbsp;delta&nbsp;+&nbsp;&quot;次！&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;alert(&quot;鼠标滑轮向上滚动：&quot;&nbsp;+&nbsp;delta&nbsp;+&nbsp;&quot;次！&quot;);&nbsp;//&nbsp;-1\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;#mScroll&quot;).val(&quot;鼠标滑轮向上滚动：&quot;&nbsp;+&nbsp;delta&nbsp;+&nbsp;&quot;次！&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n})</pre><p><br/></p>','[{\"type\":\"contents\",\"content\":\"今天尝试写基于jquery的滚动条，遇到了滚轮事件的兼容性问题，在firefox下和在IE下以及其它浏览器下，监听的事件有区别，查了下相关资料总结一下不同浏览器下鼠标滚轮事件兼容性的处理方式：\\n\\n在 firefox 下 需要监听 DOMMouseScroll,即：\\n\\nif (window.addEventListener) {\\n        /** DOMMouseScroll is for mozilla. */\\n        window.addEventListener(\'DOMMouseScroll\', wheel, false);\\n    }\\n\\n在IE或其它浏览器下，这样添加监听就可以了：\\n\\nwindow.onmousewheel = document.onmousewheel = wheel;\\n\\n/**\\n * Created by Administrator on 2015/7/15.\\n */\\n/** Event handler for mouse wheel event.\\n *鼠标滚动事件\\n */\\n$(function(){\\n\\n\\n    var wheel = function(event) {\\n        var delta = 0;\\n        if (!event) /* For IE. */\\n            event = window.event;\\n        if (event.wheelDelta) { /* IE/Opera. */\\n            delta = event.wheelDelta / 120;\\n        } else if (event.detail) {\\n            /** Mozilla case. */\\n            /** In Mozilla, sign of delta is different than in IE.\\n             * Also, delta is multiple of 3.\\n             */\\n            delta = -event.detail / 3;\\n        }\\n        /** If delta is nonzero, handle it.\\n         * Basically, delta is now positive if wheel was scrolled up,\\n         * and negative, if wheel was scrolled down.\\n         */\\n        if (delta)\\n            handle(delta);\\n        /** Prevent default actions caused by mouse wheel.\\n         * That might be ugly, but we handle scrolls somehow\\n         * anyway, so don\'t bother here..\\n         */\\n        if (event.preventDefault)\\n            event.preventDefault();\\n        event.returnValue = false;\\n    }\\n\\n    /** Initialization code.\\n     * If you use your own event management code, change it as required.\\n     */\\n\\n    if (window.addEventListener) {\\n        /** DOMMouseScroll is for mozilla. */\\n        window.addEventListener(\'DOMMouseScroll\', wheel, false);\\n    }\\n    /** IE/Opera. */\\n    window.onmousewheel = document.onmousewheel = wheel;\\n\\n    /** This is high-level function.\\n     * It must react to delta being more/less than zero.\\n     */\\n    var handle = function(delta) {\\n        var random_num = Math.floor((Math.random() * 100) + 50);\\n        if (delta &lt; 0) {\\n            // alert(\\\"鼠标滑轮向下滚动：\\\" + delta + \\\"次！\\\"); // 1\\n            $(\\\"#mScroll\\\").val(\\\"鼠标滑轮向下滚动：\\\" + delta + \\\"次！\\\");\\n            return;\\n        } else {\\n            // alert(\\\"鼠标滑轮向上滚动：\\\" + delta + \\\"次！\\\"); // -1\\n            $(\\\"#mScroll\\\").val(\\\"鼠标滑轮向上滚动：\\\" + delta + \\\"次！\\\");\\n            return;\\n        }\\n    }\\n})\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1436943648000.jpg','2015-07-15 07:05:37','2020-08-20 15:44:27'),(175,'2015-2016前端知识体系','2015-2016前端知识体系','2','1','','前端体系','2',NULL,'','bootstrap等UI框架设计与实现，伸缩布局：grid网格布局。基础UI样式：元素reset、按钮、图片、菜单、表单。组件UI样式：按钮组、字体图标、下拉菜单、输入框组、导航组、面包屑、分页、标签、轮播、弹出框、列表、多媒体、警告','1','','','0:01',762,'2','0',NULL,1,'0',232881,'<p style=\"text-align: center;\"><img alt=\"Qe01.png\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_2_24_12_39_31_270_1007.png\" title=\"\"/></p><p><br/></p><p><a title=\"前端知识体系\" target=\"_blank\" href=\"http://7xkr1n.com1.z0.glb.clouddn.com/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.jpg\">查看大图</a><br/></p><p><br/></p><p>一、框架与组件</p><p>bootstrap等UI框架设计与实现</p><p>&nbsp;&nbsp;&nbsp; 伸缩布局：grid网格布局<br/>&nbsp;&nbsp;&nbsp; 基础UI样式：元素reset、按钮、图片、菜单、表单<br/>&nbsp;&nbsp;&nbsp; 组件UI样式：按钮组、字体图标、下拉菜单、输入框组、导航组、面包屑、分页、标签、轮播、弹出框、列表、多媒体、警告<br/>&nbsp;&nbsp;&nbsp; 响应式布局：布局、结构、样式、媒体、javascript响应式<br/>&nbsp;&nbsp;&nbsp; 第三方插件：插件管理<br/><br/>jQuery、zepto使用原理以及插件开发<br/><br/>&nbsp;&nbsp;&nbsp; 支持amd、cmd、全局变量的模块化封装<br/>&nbsp;&nbsp;&nbsp; $.fn.method = function(){}<br/><br/>mvc/mvvm框架原理设计，vue/angular/avalon等<br/><br/>&nbsp;&nbsp;&nbsp; directive设计：html、text、class、html、attr、repeat、ref，可扩展<br/>&nbsp;&nbsp;&nbsp; filter设计：bool、upperCase、lowerCase，可扩展<br/><br/>&nbsp;&nbsp;&nbsp; 表达式设计：if-else等实现<br/><br/>&nbsp;&nbsp;&nbsp; viewmodel结构设计：例如数据，元素，方法的挂载与作用域<br/>&nbsp;&nbsp;&nbsp; 数据更变检测：函数触发，脏数据检测、对象hijacking<br/><br/>polymer/angular2思想与设计思路<br/><br/>&nbsp;&nbsp;&nbsp; import技术<br/>&nbsp;&nbsp;&nbsp; template和script引入方式<br/>&nbsp;&nbsp;&nbsp; css样式命名空间隔离<br/>&nbsp;&nbsp;&nbsp; 简单复用第三方库<br/><br/>reactjs原理与使用<br/><br/>&nbsp;&nbsp;&nbsp; virtual dom单向数据绑定<br/>&nbsp;&nbsp;&nbsp; js执行语法方式<br/>&nbsp;&nbsp;&nbsp; UI由状态控制<br/><br/>commonJS/AMD/CMD<br/><br/>&nbsp;&nbsp;&nbsp; 模块引入<br/>&nbsp;&nbsp;&nbsp; 模块定义<br/>&nbsp;&nbsp;&nbsp; 模块标识<br/><br/>&nbsp;&nbsp;&nbsp; UMD解决不同规范兼容性的问题，例如webpack封装<br/><br/>&nbsp;&nbsp;&nbsp; 模块懒执行(CMD)与与预执行(AMD)<br/><br/>loadJs模块化加载原理与实现<br/><br/>&nbsp;&nbsp;&nbsp; 创建script标签，需要id映射到资源url<br/>&nbsp;&nbsp;&nbsp; onload加载模块队列判断<br/>&nbsp;&nbsp;&nbsp; 全部加载完成后触发<br/>&nbsp;&nbsp;&nbsp; 加载失败问题优化<br/>&nbsp;&nbsp;&nbsp; requirejs、modjs、seajs<br/><br/>polyfill、shim原理与实现<br/><br/>&nbsp;&nbsp;&nbsp; polyfill提供了开发者们希望浏览器原生提供支持的功能特性<br/>&nbsp;&nbsp;&nbsp; shim将新的API引入到旧的环境中,且仅靠旧环境中已有的手段实现<br/><br/>virtual Dom、Incremental DOM<br/><br/>&nbsp;&nbsp;&nbsp; 1.用js对象树表示dom树结构，根据该对象树构建dom树<br/>&nbsp;&nbsp;&nbsp; 2.状态改变时，重新构建对象，和旧的对象对比，记录两个对象树差异<br/>&nbsp;&nbsp;&nbsp; 3.将对象树差异应用到dom中<br/>&nbsp;&nbsp;&nbsp; 小结:js对象模拟dom(elem.js)，virtual dom diff算法(diff.js)、差异渲染dom(patch.js)<br/>&nbsp;&nbsp;&nbsp; incremental dom在状态改变时扫描旧对象树将差异直接应用到dom中<br/><br/>shadow dom<br/><br/>&nbsp;&nbsp;&nbsp; 隔离外部环境用于封装组件：结构、样式、行为<br/>&nbsp;&nbsp;&nbsp; 实现形式：新标签、class类属性 + 构建编译<br/><br/>webwork与service Worker<br/><br/>&nbsp;&nbsp;&nbsp; webwork与主线程机制，on/post<br/>&nbsp;&nbsp;&nbsp; serviceworker可作为浏览器请求代理<br/>&nbsp;&nbsp;&nbsp; 应用场景<br/><br/>ES6转ES5、Babel与ES6开发规范体系<br/><br/>&nbsp;&nbsp;&nbsp; ES6编码规范全<br/>&nbsp;&nbsp;&nbsp; ES6在babel下兼容性<br/>&nbsp;&nbsp;&nbsp; ES6在node下兼容性与性能<br/>&nbsp;&nbsp;&nbsp; ES6新特性：看编码规范<br/>&nbsp;&nbsp;&nbsp; aurelia ES6前端框架<br/><br/>Isomorphic JavaScript<br/><br/>&nbsp;&nbsp;&nbsp; 同构原理<br/>&nbsp;&nbsp;&nbsp; 同构方案 Rendr<br/>&nbsp;&nbsp;&nbsp; nodejs: 服务器<br/>&nbsp;&nbsp;&nbsp; hapi: 应用服务<br/>&nbsp;&nbsp;&nbsp; backbone.js: 后台mvc<br/>&nbsp;&nbsp;&nbsp; requirejs: 模块加载<br/>&nbsp;&nbsp;&nbsp; jquery: dom处理<br/>&nbsp;&nbsp;&nbsp; reactjs同构:React + Flux + Koa<br/><br/>双向数据绑定<br/><br/>&nbsp;&nbsp;&nbsp; 函数触发:vuejs<br/>&nbsp;&nbsp;&nbsp; 脏数据检测:angular<br/>&nbsp;&nbsp;&nbsp; 对象hijacking:avalon<br/><br/>browserify运行原理<br/><br/>&nbsp;&nbsp;&nbsp; 1.从入口模块开始分析require函数调用<br/>&nbsp;&nbsp;&nbsp; 2.根据依赖生成AST<br/>&nbsp;&nbsp;&nbsp; 3.根据AST找到每个模块的模块名<br/>&nbsp;&nbsp;&nbsp; 4.得到每个模块的依赖关系，生成一个依赖字典<br/>&nbsp;&nbsp;&nbsp; 5.包装每个模块（传入依赖字典以及export和require函数），生成执行的js<br/><br/>performance timing<br/><br/>&nbsp;&nbsp;&nbsp; performance timing api<br/>&nbsp;&nbsp;&nbsp; performance timing 过程<br/>&nbsp;&nbsp;&nbsp; performance timing 性能计算<br/>&nbsp;&nbsp;&nbsp; performanceTrace库<br/><br/>组件UI与js组件规范化<br/><br/>&nbsp;&nbsp;&nbsp; 组件编码规范<br/>&nbsp;&nbsp;&nbsp; 组件目录规范：组件目录与公用目录<br/>&nbsp;&nbsp;&nbsp; 组件构建规范：构建环境支持<br/>&nbsp;&nbsp;&nbsp; 组件模块化管理：spm，bowserify<br/>&nbsp;&nbsp;&nbsp; 组件复用性管理<br/>&nbsp;&nbsp;&nbsp; 第三方组件接入成本<br/><br/>immutable JavaScript<br/>generator与promise原理与使用</p><p><br/></p><p>二、构建生态<br/>grunt/gulp开发环境任务编写<br/><br/>&nbsp;&nbsp;&nbsp; 文件处理插件：html、scss、js、image、font、其它<br/>&nbsp;&nbsp;&nbsp; 优化插件：雪碧图、图片压缩、iconfont构建<br/>&nbsp;&nbsp;&nbsp; 发布替换插件<br/>&nbsp;&nbsp;&nbsp; 打包、压缩包插件：组件自动分析<br/>&nbsp;&nbsp;&nbsp; 白名单配置<br/>&nbsp;&nbsp;&nbsp; 自定义插件编写<br/><br/>npm、jspm、bower包管理工具<br/>r.js、browserify、webpack、webpack 2、Rollup打包工具使用<br/><br/>&nbsp;&nbsp;&nbsp; 原理：根据依赖配置文件对文件进行依赖打包<br/>&nbsp;&nbsp;&nbsp; webpack支持更多的规范打包，AMD,Commonjs<br/>&nbsp;&nbsp;&nbsp; webpack+babel/reactjs+reflux<br/><br/>fis3构建与插件开发、构建环境、fis3构建离线包<br/>web Component：rosetta-org、x-view、Q、riot、nova<br/>brunch构建工具<br/>三、开发技巧与调试<br/>fiddler加willow基础组合调试<br/><br/>&nbsp;&nbsp;&nbsp; 常见配置与分析<br/>&nbsp;&nbsp;&nbsp; 结合浏览器调试<br/><br/>werien、vorlonjs远程调试，chrome inspect<br/>mockjs，F.M.S(Front Mock Server)模拟调试使用与cgi自动调试<br/>macha/phantomjs/casperjs/karma测试自动化任务使用<br/>自动化UI测试，海豚<br/>node-supervior、node-inspector、karma<br/>开发发布系统流程<br/>sublime高效插件<br/><br/>&nbsp;&nbsp;&nbsp; emmet工具使用、 sublimelinter、 babel snippets、 sublimeLint、 SassBeautify 、 emmet 快速编辑、 jsxlint、 SideBarEnhancements、 SnippetsMaker、 SublimeCodeIntel、 css snippets、 ColorPicker、 html/css/js Pretty、 SpinnetMacker、 DocBlockr、 MultiEditUtils、 javascript &amp; node spinnet、 JavaScript &amp; NodeJS Snippets、 jsLint、cssLint<br/><br/>代码自动化检查fecs<br/>四、html、css与重构<br/>jpeg、webp、apng、bpg图片<br/><br/>&nbsp;&nbsp;&nbsp; 编码原理<br/>&nbsp;&nbsp;&nbsp; 特点与优劣势<br/>&nbsp;&nbsp;&nbsp; 适用场景<br/><br/>iconfont使用与实现原理<br/><br/>&nbsp;&nbsp;&nbsp; 自动打包构建方法<br/>&nbsp;&nbsp;&nbsp; iconfont兼容性写法<br/>&nbsp;&nbsp;&nbsp; fonthello、fontawesome、icomoon.io、iconfont.cn线上工具<br/><br/>页面响应式设计<br/><br/>&nbsp;&nbsp;&nbsp; layout布局响应式<br/>&nbsp;&nbsp;&nbsp; html结构响应式<br/>&nbsp;&nbsp;&nbsp; css样式响应式<br/>&nbsp;&nbsp;&nbsp; image媒体响应式<br/>&nbsp;&nbsp;&nbsp; javascript响应式<br/>&nbsp;&nbsp;&nbsp; media query与平台判断<br/><br/>css重置<br/><br/>&nbsp;&nbsp;&nbsp; reset<br/>&nbsp;&nbsp;&nbsp; nomalize<br/>&nbsp;&nbsp;&nbsp; neat<br/><br/>sass/compass/less/postcss常用语法与使用<br/><br/>&nbsp;&nbsp;&nbsp; 常用语法功能<br/>&nbsp;&nbsp;&nbsp; 组件化UI设计管理<br/>&nbsp;&nbsp;&nbsp; 构建工具实现方案<br/>&nbsp;&nbsp;&nbsp; 雪碧图自动合成<br/>&nbsp;&nbsp;&nbsp; iconfont自动接入等等<br/><br/>media query与常见页面尺寸了解<br/><br/>&nbsp;&nbsp;&nbsp; 媒体类型引入和媒体特性引入<br/>&nbsp;&nbsp;&nbsp; device-width适应<br/>&nbsp;&nbsp;&nbsp; retina屏幕适应<br/><br/>em,rem原理与实现<br/><br/>&nbsp;&nbsp;&nbsp; rem计算：width*retina/10，相当于屏幕宽度为10rem<br/>&nbsp;&nbsp;&nbsp; 字体在rem情况下仍然使用px<br/><br/>code4ui、code4app、初页、maka等<br/><br/>&nbsp;&nbsp;&nbsp; 前端dom操作即使刷新前端页面<br/>&nbsp;&nbsp;&nbsp; 根据dom操作生成组件config配置保存到db<br/>&nbsp;&nbsp;&nbsp; 根据config配置使用r.js或webpack打包<br/>&nbsp;&nbsp;&nbsp; 发布打包后输出文件<br/><br/>css3动画<br/><br/>&nbsp;&nbsp;&nbsp; transform<br/>&nbsp;&nbsp;&nbsp; animation<br/>&nbsp;&nbsp;&nbsp; transiction<br/>&nbsp;&nbsp;&nbsp; 3D加速与动画加速<br/>&nbsp;&nbsp;&nbsp; 动画库<br/><br/>&nbsp;&nbsp;&nbsp; 缓动函数速查表： http://www.xuanfengge.com/easeing/easeing/<br/><br/>&nbsp;&nbsp;&nbsp; Ceaser： http://xuanfengge.com/easeing/ceaser/<br/>&nbsp;&nbsp;&nbsp; cubic-bezier：http://cubic-bezier.com/<br/><br/>css网格布局<br/><br/>&nbsp;&nbsp;&nbsp; susy<br/>&nbsp;&nbsp;&nbsp; Responsive Grid System<br/>&nbsp;&nbsp;&nbsp; Fluid 960 Grid(adaptjs)<br/>&nbsp;&nbsp;&nbsp; Simple Grid<br/><br/>搜索引擎与前端SEO<br/><br/>&nbsp;&nbsp;&nbsp; tdk优化<br/>&nbsp;&nbsp;&nbsp; 页面内容优化<br/>&nbsp;&nbsp;&nbsp; 唯一的H1标题<br/>&nbsp;&nbsp;&nbsp; img设置alt属性<br/>&nbsp;&nbsp;&nbsp; nofollow<br/><br/>&nbsp;&nbsp;&nbsp; url优化<br/><br/>&nbsp;&nbsp;&nbsp; 统一链接<br/>&nbsp;&nbsp;&nbsp; 301跳转<br/>&nbsp;&nbsp;&nbsp; canonical<br/>&nbsp;&nbsp;&nbsp; robot优化<br/>&nbsp;&nbsp;&nbsp; robots.txt<br/>&nbsp;&nbsp;&nbsp; meta robots<br/>&nbsp;&nbsp;&nbsp; sitemap<br/>&nbsp;&nbsp;&nbsp; SEO工具<br/>&nbsp;&nbsp;&nbsp; 各种站长工具等<br/><br/>浏览器缓存种类，resources,webSQL,indexDB, localstorage,cookie,app cache,cache storage<br/><br/>&nbsp;&nbsp;&nbsp; store.js、cookie.js<br/><br/>UI框架<br/><br/>&nbsp;&nbsp;&nbsp; bootstrap、jqwidgets、semantic ui、amaze ui<br/>&nbsp;&nbsp;&nbsp; 微信手Q ui: frozenui、weui、blend ui<br/>&nbsp;&nbsp;&nbsp; extjs、echart图表ui<br/><br/>五、native/hybrid/桌面开发<br/>ionic移动开发方案<br/><br/>&nbsp;&nbsp;&nbsp; 运行架构<br/>&nbsp;&nbsp;&nbsp; hybrid混合开发<br/>&nbsp;&nbsp;&nbsp; cordova交互<br/>&nbsp;&nbsp;&nbsp; 离线包更新<br/>&nbsp;&nbsp;&nbsp; 性能瓶颈<br/><br/>nativescript移动开发方案<br/>react Native移动开发方案<br/><br/>&nbsp;&nbsp;&nbsp; 运行架构：js引擎<br/>&nbsp;&nbsp;&nbsp; 性能缺陷与内存泄露<br/>&nbsp;&nbsp;&nbsp; 更新机制<br/>&nbsp;&nbsp;&nbsp; 使用场景<br/><br/>android/ios原生开发与框架<br/><br/>&nbsp;&nbsp;&nbsp; java<br/>&nbsp;&nbsp;&nbsp; oc、swift<br/>&nbsp;&nbsp;&nbsp; web与native交互<br/>&nbsp;&nbsp;&nbsp; 屏幕旋转<br/>&nbsp;&nbsp;&nbsp; 摇一摇<br/>&nbsp;&nbsp;&nbsp; 录像，拍照，选取本地图片<br/>&nbsp;&nbsp;&nbsp; 打电话，发短信<br/>&nbsp;&nbsp;&nbsp; 电池电量<br/>&nbsp;&nbsp;&nbsp; 地理位置<br/>&nbsp;&nbsp;&nbsp; 日期选择<br/>&nbsp;&nbsp;&nbsp; 开启硬件加速<br/><br/>桌面应用开发<br/><br/>&nbsp;&nbsp;&nbsp; nodewebkit<br/>&nbsp;&nbsp;&nbsp; atom-shell(后改名为electron)<br/>&nbsp;&nbsp;&nbsp; 网易Hex<br/>&nbsp;&nbsp;&nbsp; pomelo(游戏服务器框架)<br/>&nbsp;&nbsp;&nbsp; react desktop<br/>&nbsp;&nbsp;&nbsp; appjs:appjs.com<br/><br/>六、前端/H5优化(另一个图已给出)</p><p>yslow、pagespeed<br/>移动web性能优化<br/><br/>&nbsp;&nbsp;&nbsp; 手机浏览器”省流量”原理<br/>&nbsp;&nbsp;&nbsp; 增量更新原理及注意事项<br/>&nbsp;&nbsp;&nbsp; 本地存储的应用<br/>&nbsp;&nbsp;&nbsp; 加载优化<br/>&nbsp;&nbsp;&nbsp; 图片优化<br/>&nbsp;&nbsp;&nbsp; 单页面及路由实现<br/>&nbsp;&nbsp;&nbsp; 业内著名站点案例分析<br/><br/>七、全栈/全端开发</p><p>express/node club + mongodb、thinkjs等框架<br/>node.js直出<br/>实时web开发，meteor/express.io<br/>MEAN(mongodb/express/angular/nodejs)<br/>http与http2协议、bigpipe、pipeline<br/>离线缓存，cookie、localstorage、indexdb<br/>cdn与dns<br/><br/>&nbsp;&nbsp;&nbsp; 动态域名加速<br/>&nbsp;&nbsp;&nbsp; cdn原理与cdn combo<br/><br/>八、研究实验<br/>WebAssembly、webTRC、typescript<br/>Material design规范的前端框架<br/><br/>&nbsp;&nbsp;&nbsp; 交互动效库<br/><br/>AMP-HTML规范<br/><br/>&nbsp;&nbsp;&nbsp; 使用受限HTML以及缓存技术来提高移动网络中静态内容的性能<br/>&nbsp;&nbsp;&nbsp; 添加自定义的元素代替禁用掉的元素：amp-audio, amp-img、amp-video等<br/><br/>九、数据分析与监控<br/>badjs数据上报<br/><br/>&nbsp;&nbsp;&nbsp; 捕获错误两种方法：onerror、try-catch。抽样上报，先onerror统计语法错误，如果是script error，再使用tryjs。<br/>&nbsp;&nbsp;&nbsp; 后台统计方法、不同业务接入体系、抽样统计<br/>&nbsp;&nbsp;&nbsp; onerror:可以捕捉语法错误和运行时错误；可以拿到出错的信息，堆栈，出错文件、行号、列号；当前页面执行的js脚本出错都会捕捉到；跨域的资源需要特殊头部支持。<br/>&nbsp;&nbsp;&nbsp; try-catch:无法捕捉语法错误，只能捕捉运行时错误；可以拿到出错的信息，堆栈，出错文件、行号、列号；需要借助工具把function块以及文件块加入try,catch，可以在这个阶段打入更多的静态信息。<br/><br/>点击热力图clickHeat、heatMap<br/>js加载失败优化方案<br/><br/>&nbsp;&nbsp;&nbsp; 失败重发机制<br/>&nbsp;&nbsp;&nbsp; 加载源域名服务器文件<br/>&nbsp;&nbsp;&nbsp; https反劫持<br/><br/>百度alog数据上报<br/>十、其它软技能</p><p>axure 原型图设计<br/>xmind脑图管理<br/>效率管理<br/>can i use、github<br/>知识管理/总结分享<br/>产品思维与技能<br/>十一、前端技术网站<br/>技术社区<br/><br/>&nbsp;&nbsp;&nbsp; w3c tech、w3c plus、w3 help<br/>&nbsp;&nbsp;&nbsp; div.io、nodeParty<br/>&nbsp;&nbsp;&nbsp; 稀土掘金、前端早读课<br/>&nbsp;&nbsp;&nbsp; alloyteam、html5基地<br/>&nbsp;&nbsp;&nbsp; W3 help<br/><br/>行业会议<br/><br/>&nbsp;&nbsp;&nbsp; segmentfault会议<br/>&nbsp;&nbsp;&nbsp; 深js、杭js<br/>&nbsp;&nbsp;&nbsp; GMIC(全球移动互联网大会)<br/>&nbsp;&nbsp;&nbsp; D2、webrebuild<br/>&nbsp;&nbsp;&nbsp; infoQ内容、Qcon、velocity<br/><br/><br/></p>','[{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_2_24_12_39_31_270_1007.png\"},{\"type\":\"contents\",\"content\":\"\\n\\n查看大图\\n\\n一、框架与组件\\nbootstrap等UI框架设计与实现\\n    伸缩布局：grid网格布局\\n    基础UI样式：元素reset、按钮、图片、菜单、表单\\n    组件UI样式：按钮组、字体图标、下拉菜单、输入框组、导航组、面包屑、分页、标签、轮播、弹出框、列表、多媒体、警告\\n    响应式布局：布局、结构、样式、媒体、javascript响应式\\n    第三方插件：插件管理\\n\\njQuery、zepto使用原理以及插件开发\\n\\n    支持amd、cmd、全局变量的模块化封装\\n    $.fn.method = function(){}\\n\\nmvc/mvvm框架原理设计，vue/angular/avalon等\\n\\n    directive设计：html、text、class、html、attr、repeat、ref，可扩展\\n    filter设计：bool、upperCase、lowerCase，可扩展\\n\\n    表达式设计：if-else等实现\\n\\n    viewmodel结构设计：例如数据，元素，方法的挂载与作用域\\n    数据更变检测：函数触发，脏数据检测、对象hijacking\\n\\npolymer/angular2思想与设计思路\\n\\n    import技术\\n    template和script引入方式\\n    css样式命名空间隔离\\n    简单复用第三方库\\n\\nreactjs原理与使用\\n\\n    virtual dom单向数据绑定\\n    js执行语法方式\\n    UI由状态控制\\n\\ncommonJS/AMD/CMD\\n\\n    模块引入\\n    模块定义\\n    模块标识\\n\\n    UMD解决不同规范兼容性的问题，例如webpack封装\\n\\n    模块懒执行(CMD)与与预执行(AMD)\\n\\nloadJs模块化加载原理与实现\\n\\n    创建script标签，需要id映射到资源url\\n    onload加载模块队列判断\\n    全部加载完成后触发\\n    加载失败问题优化\\n    requirejs、modjs、seajs\\n\\npolyfill、shim原理与实现\\n\\n    polyfill提供了开发者们希望浏览器原生提供支持的功能特性\\n    shim将新的API引入到旧的环境中,且仅靠旧环境中已有的手段实现\\n\\nvirtual Dom、Incremental DOM\\n\\n    1.用js对象树表示dom树结构，根据该对象树构建dom树\\n    2.状态改变时，重新构建对象，和旧的对象对比，记录两个对象树差异\\n    3.将对象树差异应用到dom中\\n    小结:js对象模拟dom(elem.js)，virtual dom diff算法(diff.js)、差异渲染dom(patch.js)\\n    incremental dom在状态改变时扫描旧对象树将差异直接应用到dom中\\n\\nshadow dom\\n\\n    隔离外部环境用于封装组件：结构、样式、行为\\n    实现形式：新标签、class类属性 + 构建编译\\n\\nwebwork与service Worker\\n\\n    webwork与主线程机制，on/post\\n    serviceworker可作为浏览器请求代理\\n    应用场景\\n\\nES6转ES5、Babel与ES6开发规范体系\\n\\n    ES6编码规范全\\n    ES6在babel下兼容性\\n    ES6在node下兼容性与性能\\n    ES6新特性：看编码规范\\n    aurelia ES6前端框架\\n\\nIsomorphic JavaScript\\n\\n    同构原理\\n    同构方案 Rendr\\n    nodejs: 服务器\\n    hapi: 应用服务\\n    backbone.js: 后台mvc\\n    requirejs: 模块加载\\n    jquery: dom处理\\n    reactjs同构:React + Flux + Koa\\n\\n双向数据绑定\\n\\n    函数触发:vuejs\\n    脏数据检测:angular\\n    对象hijacking:avalon\\n\\nbrowserify运行原理\\n\\n    1.从入口模块开始分析require函数调用\\n    2.根据依赖生成AST\\n    3.根据AST找到每个模块的模块名\\n    4.得到每个模块的依赖关系，生成一个依赖字典\\n    5.包装每个模块（传入依赖字典以及export和require函数），生成执行的js\\n\\nperformance timing\\n\\n    performance timing api\\n    performance timing 过程\\n    performance timing 性能计算\\n    performanceTrace库\\n\\n组件UI与js组件规范化\\n\\n    组件编码规范\\n    组件目录规范：组件目录与公用目录\\n    组件构建规范：构建环境支持\\n    组件模块化管理：spm，bowserify\\n    组件复用性管理\\n    第三方组件接入成本\\n\\nimmutable JavaScript\\ngenerator与promise原理与使用\\n\\n二、构建生态\\ngrunt/gulp开发环境任务编写\\n\\n    文件处理插件：html、scss、js、image、font、其它\\n    优化插件：雪碧图、图片压缩、iconfont构建\\n    发布替换插件\\n    打包、压缩包插件：组件自动分析\\n    白名单配置\\n    自定义插件编写\\n\\nnpm、jspm、bower包管理工具\\nr.js、browserify、webpack、webpack 2、Rollup打包工具使用\\n\\n    原理：根据依赖配置文件对文件进行依赖打包\\n    webpack支持更多的规范打包，AMD,Commonjs\\n    webpack+babel/reactjs+reflux\\n\\nfis3构建与插件开发、构建环境、fis3构建离线包\\nweb Component：rosetta-org、x-view、Q、riot、nova\\nbrunch构建工具\\n三、开发技巧与调试\\nfiddler加willow基础组合调试\\n\\n    常见配置与分析\\n    结合浏览器调试\\n\\nwerien、vorlonjs远程调试，chrome inspect\\nmockjs，F.M.S(Front Mock Server)模拟调试使用与cgi自动调试\\nmacha/phantomjs/casperjs/karma测试自动化任务使用\\n自动化UI测试，海豚\\nnode-supervior、node-inspector、karma\\n开发发布系统流程\\nsublime高效插件\\n\\n    emmet工具使用、 sublimelinter、 babel snippets、 sublimeLint、 SassBeautify 、 emmet 快速编辑、 jsxlint、 SideBarEnhancements、 SnippetsMaker、 SublimeCodeIntel、 css snippets、 ColorPicker、 html/css/js Pretty、 SpinnetMacker、 DocBlockr、 MultiEditUtils、 javascript &amp; node spinnet、 JavaScript &amp; NodeJS Snippets、 jsLint、cssLint\\n\\n代码自动化检查fecs\\n四、html、css与重构\\njpeg、webp、apng、bpg图片\\n\\n    编码原理\\n    特点与优劣势\\n    适用场景\\n\\niconfont使用与实现原理\\n\\n    自动打包构建方法\\n    iconfont兼容性写法\\n    fonthello、fontawesome、icomoon.io、iconfont.cn线上工具\\n\\n页面响应式设计\\n\\n    layout布局响应式\\n    html结构响应式\\n    css样式响应式\\n    image媒体响应式\\n    javascript响应式\\n    media query与平台判断\\n\\ncss重置\\n\\n    reset\\n    nomalize\\n    neat\\n\\nsass/compass/less/postcss常用语法与使用\\n\\n    常用语法功能\\n    组件化UI设计管理\\n    构建工具实现方案\\n    雪碧图自动合成\\n    iconfont自动接入等等\\n\\nmedia query与常见页面尺寸了解\\n\\n    媒体类型引入和媒体特性引入\\n    device-width适应\\n    retina屏幕适应\\n\\nem,rem原理与实现\\n\\n    rem计算：width*retina/10，相当于屏幕宽度为10rem\\n    字体在rem情况下仍然使用px\\n\\ncode4ui、code4app、初页、maka等\\n\\n    前端dom操作即使刷新前端页面\\n    根据dom操作生成组件config配置保存到db\\n    根据config配置使用r.js或webpack打包\\n    发布打包后输出文件\\n\\ncss3动画\\n\\n    transform\\n    animation\\n    transiction\\n    3D加速与动画加速\\n    动画库\\n\\n    缓动函数速查表： http://www.xuanfengge.com/easeing/easeing/\\n\\n    Ceaser： http://xuanfengge.com/easeing/ceaser/\\n    cubic-bezier：http://cubic-bezier.com/\\n\\ncss网格布局\\n\\n    susy\\n    Responsive Grid System\\n    Fluid 960 Grid(adaptjs)\\n    Simple Grid\\n\\n搜索引擎与前端SEO\\n\\n    tdk优化\\n    页面内容优化\\n    唯一的H1标题\\n    img设置alt属性\\n    nofollow\\n\\n    url优化\\n\\n    统一链接\\n    301跳转\\n    canonical\\n    robot优化\\n    robots.txt\\n    meta robots\\n    sitemap\\n    SEO工具\\n    各种站长工具等\\n\\n浏览器缓存种类，resources,webSQL,indexDB, localstorage,cookie,app cache,cache storage\\n\\n    store.js、cookie.js\\n\\nUI框架\\n\\n    bootstrap、jqwidgets、semantic ui、amaze ui\\n    微信手Q ui: frozenui、weui、blend ui\\n    extjs、echart图表ui\\n\\n五、native/hybrid/桌面开发\\nionic移动开发方案\\n\\n    运行架构\\n    hybrid混合开发\\n    cordova交互\\n    离线包更新\\n    性能瓶颈\\n\\nnativescript移动开发方案\\nreact Native移动开发方案\\n\\n    运行架构：js引擎\\n    性能缺陷与内存泄露\\n    更新机制\\n    使用场景\\n\\nandroid/ios原生开发与框架\\n\\n    java\\n    oc、swift\\n    web与native交互\\n    屏幕旋转\\n    摇一摇\\n    录像，拍照，选取本地图片\\n    打电话，发短信\\n    电池电量\\n    地理位置\\n    日期选择\\n    开启硬件加速\\n\\n桌面应用开发\\n\\n    nodewebkit\\n    atom-shell(后改名为electron)\\n    网易Hex\\n    pomelo(游戏服务器框架)\\n    react desktop\\n    appjs:appjs.com\\n\\n六、前端/H5优化(另一个图已给出)\\nyslow、pagespeed\\n移动web性能优化\\n\\n    手机浏览器”省流量”原理\\n    增量更新原理及注意事项\\n    本地存储的应用\\n    加载优化\\n    图片优化\\n    单页面及路由实现\\n    业内著名站点案例分析\\n\\n七、全栈/全端开发\\nexpress/node club + mongodb、thinkjs等框架\\nnode.js直出\\n实时web开发，meteor/express.io\\nMEAN(mongodb/express/angular/nodejs)\\nhttp与http2协议、bigpipe、pipeline\\n离线缓存，cookie、localstorage、indexdb\\ncdn与dns\\n\\n    动态域名加速\\n    cdn原理与cdn combo\\n\\n八、研究实验\\nWebAssembly、webTRC、typescript\\nMaterial design规范的前端框架\\n\\n    交互动效库\\n\\nAMP-HTML规范\\n\\n    使用受限HTML以及缓存技术来提高移动网络中静态内容的性能\\n    添加自定义的元素代替禁用掉的元素：amp-audio, amp-img、amp-video等\\n\\n九、数据分析与监控\\nbadjs数据上报\\n\\n    捕获错误两种方法：onerror、try-catch。抽样上报，先onerror统计语法错误，如果是script error，再使用tryjs。\\n    后台统计方法、不同业务接入体系、抽样统计\\n    onerror:可以捕捉语法错误和运行时错误；可以拿到出错的信息，堆栈，出错文件、行号、列号；当前页面执行的js脚本出错都会捕捉到；跨域的资源需要特殊头部支持。\\n    try-catch:无法捕捉语法错误，只能捕捉运行时错误；可以拿到出错的信息，堆栈，出错文件、行号、列号；需要借助工具把function块以及文件块加入try,catch，可以在这个阶段打入更多的静态信息。\\n\\n点击热力图clickHeat、heatMap\\njs加载失败优化方案\\n\\n    失败重发机制\\n    加载源域名服务器文件\\n    https反劫持\\n\\n百度alog数据上报\\n十、其它软技能\\naxure 原型图设计\\nxmind脑图管理\\n效率管理\\ncan i use、github\\n知识管理/总结分享\\n产品思维与技能\\n十一、前端技术网站\\n技术社区\\n\\n    w3c tech、w3c plus、w3 help\\n    div.io、nodeParty\\n    稀土掘金、前端早读课\\n    alloyteam、html5基地\\n    W3 help\\n\\n行业会议\\n\\n    segmentfault会议\\n    深js、杭js\\n    GMIC(全球移动互联网大会)\\n    D2、webrebuild\\n    infoQ内容、Qcon、velocity\\n\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20160224123902.jpg','2016-02-24 04:47:06','2020-08-20 15:44:10'),(176,'DoraCMS版本更新 V1.0.6','DoraCMS版本更新 V1.0.6','1','1','','版本更新','2',NULL,'','​近期针对网友提出的bug和自己发现的问题对DoraCMS的相关功能进行了优化，具体如下','1','','','0:01',762,'2','0',NULL,1,'0',224919,'<p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_10_1_9_58_45_869_1000.jpg\" alt=\"2015_10_1_9_58_45_869_1000.jpg\"/></p><p><br/></p><p>近期针对网友提出的bug和自己发现的问题对DoraCMS的相关功能进行了优化，具体如下：</p><p><br/></p><h3>版本更新 2015年10月23日11:27:01</h3><h3><a class=\"anchor\" id=\"版本号v1-0-6\" href=\"https://git.oschina.net/doramart/DoraCMS#%E7%89%88%E6%9C%AC%E5%8F%B7v1-0-6\"></a>版本号v1.0.6</h3><h3><a class=\"anchor\" id=\"更新内容-\" href=\"https://git.oschina.net/doramart/DoraCMS#%E6%9B%B4%E6%96%B0%E5%86%85%E5%AE%B9-\"></a>更新内容：</h3><ul class=\" list-paddingleft-2\"><li><p>1、修改了实验室模块模板</p></li><li><p>2、文档列表加入了首图显示</p></li><li><p>3、文档详情页和关于我去掉了左侧没必要显示的列表</p></li><li><p>4、文档详情页底部增加了随机记录显示</p></li><li><p>5、个人中心信息管理优化（用户名和邮箱禁止修改，注册用户名唯一性校验）</p></li><li><p>6、优化文档列表打开方式（参考各类大型网站，列表新窗口打开）</p></li><li><p>7、优化留言模块，新增管理员后台回复功能，并邮件提醒对方</p></li><li><p>8、添加返回到顶部小按钮</p></li><li><p>9、优化了广告模块（支持单图显示和多图轮播，可配置）</p></li><li><p>10、优化了站点地图的缓存关键字，避免同一服务器多站点缓存混淆</p></li><li><p>11、修复了管理员登录记录的一个bug</p></li><li><p>12、修复了一些很明显的小bug</p></li></ul><p><br/></p><p>&nbsp;<a href=\"https://github.com/doramart/DoraCMS\" target=\"_blank\" title=\"DoraCMS源码下载\">DoraCMS源码下载</a></p><p><br/></p><p>相关文档：</p><p><br/></p><p><a href=\"http://www.html-js.cn/details/VymuSlpGg.html\" target=\"_blank\" class=\"ng-binding\" style=\"box-sizing: border-box; color: rgb(60, 141, 188); text-decoration: none; font-family: &#39;Source Sans Pro&#39;, &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; white-space: normal; background-color: rgb(255, 255, 255);\">DoraCMS V1.0.7升级指南</a></p><p><a href=\"http://www.html-js.cn/details/4k05fF4ye.html\" target=\"_blank\" class=\"ng-binding\" style=\"box-sizing: border-box; color: rgb(60, 141, 188); text-decoration: none; font-family: &#39;Source Sans Pro&#39;, &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; white-space: normal; background-color: rgb(255, 255, 255);\">DoraCMS版本更新V1.0.4</a></p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_10_1_9_58_45_869_1000.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n近期针对网友提出的bug和自己发现的问题对DoraCMS的相关功能进行了优化，具体如下：\\n\\n版本更新 2015年10月23日11:27:01\\n版本号v1.0.6\\n更新内容：\\n1、修改了实验室模块模板\\n2、文档列表加入了首图显示\\n3、文档详情页和关于我去掉了左侧没必要显示的列表\\n4、文档详情页底部增加了随机记录显示\\n5、个人中心信息管理优化（用户名和邮箱禁止修改，注册用户名唯一性校验）\\n6、优化文档列表打开方式（参考各类大型网站，列表新窗口打开）\\n7、优化留言模块，新增管理员后台回复功能，并邮件提醒对方\\n8、添加返回到顶部小按钮\\n9、优化了广告模块（支持单图显示和多图轮播，可配置）\\n10、优化了站点地图的缓存关键字，避免同一服务器多站点缓存混淆\\n11、修复了管理员登录记录的一个bug\\n12、修复了一些很明显的小bug\\n\\n\\n DoraCMS源码下载\\n\\n相关文档：\\n\\nDoraCMS V1.0.7升级指南\\nDoraCMS版本更新V1.0.4\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445582410000.jpg','2015-10-23 06:41:47','2020-08-20 15:44:15'),(177,'第7天 Post方法与上传——更新后的代码','第7天 Post方法与上传—更新后的代码','2','1','','Post方法上传','2',NULL,'','​lib/post.js 更新后的源代码','1','','','0:01',762,'2','0',NULL,0,'0',224225,'<h3>更新后的代码</h3><p><code>lib/post.js</code> 更新后的源代码</p><pre>var&nbsp;qs&nbsp;=&nbsp;require(&quot;querystring&quot;);\n\nmodule.exports&nbsp;=&nbsp;function&nbsp;post(req,res,next){\n\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;body_data&nbsp;=&nbsp;&quot;&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;req.files&nbsp;=&nbsp;{};&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;req.body&nbsp;=&nbsp;{};\n\n&nbsp;&nbsp;&nbsp;&nbsp;req.on(&quot;data&quot;,function(chunk){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body_data&nbsp;+=&nbsp;chunk;\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;&nbsp;req.on(&quot;end&quot;,function(){\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;contentType&nbsp;=&nbsp;req.headers[&quot;content-type&quot;];\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;isMulti&nbsp;如果是true，表示是设置了enctype=&quot;multipart/form-data&quot;&nbsp;属性\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;isMulti&nbsp;=&nbsp;/(boundary=)/gi.test(contentType);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(isMulti){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;boundary&nbsp;=&nbsp;RegExp[&quot;$&#39;&quot;];\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;boundaryStandard&nbsp;=&nbsp;&quot;--&quot;+boundary+&quot;\\r\\n&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;boundaryEnd&nbsp;=&nbsp;boundaryStandard+&quot;--&quot;;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//删除头尾边界字符串\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body_data&nbsp;=&nbsp;body_data.substring(boundaryStandard.length,body_data.length-boundaryEnd.length);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;fields&nbsp;=&nbsp;body_data.split(boundaryStandard);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;头信息和体信息的之间分割字符串\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;RN&nbsp;=&nbsp;&quot;\\r\\n\\r\\n&quot;;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fields.forEach(function(field){\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;index&nbsp;&nbsp;=&nbsp;field.indexOf(RN);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;解析出头信息块\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;header&nbsp;=&nbsp;field.substring(0,index);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;从头信息中解析出表单字段的名称，也就是表单的name属性值。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/name=\\&quot;(.*?)\\&quot;/g.test(header);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;fieldName&nbsp;=&nbsp;RegExp.$1;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;判断是上传的文件，还是一般的表单字段。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;isFile&nbsp;=&nbsp;/filename/g.test(header);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;解析出数据体\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;body&nbsp;=&nbsp;field.substring(index+RN.length);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(fields[0])\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body&nbsp;=&nbsp;body.substring(0,body.length&nbsp;-&nbsp;RN.length/2);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(isFile){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req.files[fieldName]&nbsp;=&nbsp;new&nbsp;Buffer(body);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req.body[fieldName]&nbsp;=&nbsp;body;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req.body&nbsp;=&nbsp;qs.parse(body_data);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}catch(e){}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next();\n\n&nbsp;&nbsp;&nbsp;&nbsp;});\n}</pre>','[{\"type\":\"contents\",\"content\":\"更新后的代码\\nlib/post.js 更新后的源代码\\nvar qs = require(\\\"querystring\\\");\\n\\nmodule.exports = function post(req,res,next){\\n\\n    var body_data = \\\"\\\";\\n    req.files = {}; \\n    req.body = {};\\n\\n    req.on(\\\"data\\\",function(chunk){\\n        body_data += chunk;\\n    })\\n\\n    req.on(\\\"end\\\",function(){\\n\\n        var contentType = req.headers[\\\"content-type\\\"];\\n\\n        // isMulti 如果是true，表示是设置了enctype=\\\"multipart/form-data\\\" 属性\\n        var isMulti = /(boundary=)/gi.test(contentType);\\n\\n        if(isMulti){\\n            var boundary = RegExp[\\\"$\'\\\"];\\n\\n            var boundaryStandard = \\\"--\\\"+boundary+\\\"\\\\r\\\\n\\\";\\n            var boundaryEnd = boundaryStandard+\\\"--\\\";\\n\\n            //删除头尾边界字符串\\n            body_data = body_data.substring(boundaryStandard.length,body_data.length-boundaryEnd.length);\\n\\n            var fields = body_data.split(boundaryStandard);\\n\\n            // 头信息和体信息的之间分割字符串\\n            var RN = \\\"\\\\r\\\\n\\\\r\\\\n\\\";\\n\\n            fields.forEach(function(field){\\n\\n                var index  = field.indexOf(RN);\\n\\n                // 解析出头信息块\\n                var header = field.substring(0,index);\\n\\n                // 从头信息中解析出表单字段的名称，也就是表单的name属性值。\\n                /name=\\\\\\\"(.*?)\\\\\\\"/g.test(header);\\n                var fieldName = RegExp.$1;\\n\\n                // 判断是上传的文件，还是一般的表单字段。\\n                var isFile = /filename/g.test(header);\\n\\n                // 解析出数据体\\n                var body = field.substring(index+RN.length);\\n                    console.log(fields[0])\\n                    body = body.substring(0,body.length - RN.length/2);\\n\\n                if(isFile){\\n                    req.files[fieldName] = new Buffer(body);\\n                }else{\\n                    req.body[fieldName] = body;\\n                }\\n\\n            })\\n        }else{\\n            try{\\n                req.body = qs.parse(body_data);\\n            }catch(e){}\\n        }\\n\\n        next();\\n\\n    });\\n}\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444982456000.jpg','2015-10-16 08:01:29','2020-08-20 15:44:22'),(178,'DoraCMS 安装教程(windows)','DoraCMS 安装教程(windows)','1','1',NULL,'doracms安装','2',NULL,'','应一些前端朋友的建议，和反馈的一些问题，很多童鞋提议出一个DoraCMS完整的安装文档，在这里我就详细介绍一下doracms在windows下是如何安装的。（linux和mac后面再补充）','1','','','0:01',762,'2','0',NULL,0,'0',236295,'<p style=\"white-space: normal;\">应一些前端朋友的建议，和反馈的一些问题，很多童鞋提议出一个DoraCMS完整的安装文档，在这里我就详细介绍一下doracms在windows下是如何安装的。（linux和mac后面再补充）。</p><p style=\"white-space: normal;\"><strong><span style=\"font-size: 18px;\">一、环境准备。</span></strong></p><p style=\"white-space: normal;\">1、安装nodejs，下载地址：<a href=\"https://nodejs.org/en/download/\" _src=\"https://nodejs.org/en/download/\">https://nodejs.org/en/download/</a>&nbsp;根据您操作系统的版本下载对应的node，下载完成后进行安装，安装过程没什么好说的，基本上都是下一步，如何验证安装成功呢？起一个cmd窗口，执行node -v，如果看到版本号，就证明node已经安装成功了。</p><p style=\"white-space: normal;\"><span style=\"text-decoration: underline; color: rgb(255, 0, 0);\">注意：有时候安装成功了执行node -v 会提示没有node命令，我碰到过几次，重启机器就可以了，如果还是不行，就手动将nodejs添加到环境变量中。</span></p><p style=\"white-space: normal;\"><img alt=\"DoraCMS安装教程1.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_26_39_722_1027.jpg\" title=\"\"/></p><p style=\"white-space: normal;\">2、安装mongodb。mongodb为nosql数据库，下载地址<a href=\"https://www.mongodb.org/downloads#production\">https://www.mongodb.org/downloads#production</a>，同样根据自己操作系统的版本选择对应的安装包。建议默认安装到c盘（默认到其它盘也是可以的，但是后面启动有时候会报找不到数据库存放目录，这个时候，你需要通过修改配置文件，通过配置文件指定数据库存放目录，然后以该配置启动数据库才能启动成功，如果默认到c盘，就不用那么麻烦了）。</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">注意：如果安装到其他盘(例如D盘)，你可以这样做：<br/></p><p style=\"white-space: normal;\">① 在D盘下新建Data文件夹</p><p style=\"white-space: normal;\">② 在mongdb的安装目录下找到bin目录，创建文件名为mongodb.conf的配置文件</p><p style=\"white-space: normal;\"><img alt=\"DoraCMS安装教程2.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_26_56_651_1028.jpg\" title=\"\"/></p><p style=\"white-space: normal;\">③ 启动mongdb:</p><pre class=\"brush:js;toolbar:false\">mongod&nbsp;--config&nbsp;mongodb.conf</pre><p style=\"white-space: normal;\"><img alt=\"DoraCMS安装教程3.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_27_10_950_1029.jpg\" title=\"\"/></p><p style=\"white-space: normal;\">这样mongodb就启动了，将来的数据都存放在D盘的data目录下。</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">3、安装redis，这里提供一个windows下的版本&nbsp;</p><p style=\"white-space: normal; line-height: 16px;\"><img src=\"http://www.html-js.cn/ueditor/dialogs/attachment/fileTypeImages/icon_rar.gif\" style=\"vertical-align: middle; margin-right: 2px;\"/><a href=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_12_18_14_18_10_701_1004.zip\" title=\"redis-2.4.2-win32-win64-fix.zip\" style=\"font-size: 12px; color: rgb(0, 102, 204);\">redis-2.4.2-win32-win64-fix.zip</a></p><p style=\"white-space: normal; line-height: 16px;\">解压后的目录如图：</p><p style=\"white-space: normal; line-height: 16px;\"><img alt=\"DoraCMS安装教程4.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_27_21_952_1030.jpg\" title=\"\"/></p><p style=\"white-space: normal;\">本地测试redis可以不用设置密码，执行redis-server.exe,开启redis：</p><p style=\"white-space: normal;\"><img alt=\"DoraCMS安装教程5.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_27_37_176_1031.jpg\" title=\"\"/></p><p style=\"white-space: normal;\">注意：</p><p style=\"white-space: normal;\">①将来部署到服务器，redis必须设置密码，如何设置请参考我之前写的&nbsp;<a href=\"http://www.html-js.cn/details/41Fa_JG0.html\" target=\"_blank\" title=\"redis未授权访问漏洞\" style=\"box-sizing: border-box; color: rgb(110, 113, 115); text-decoration: none; transition: all 0.1s ease-in 0s; font-family: &#39;Microsoft Yahei&#39;, &#39;冬青黑体简体中文 w3&#39;; font-size: 15px; line-height: 25.725px; background-color: rgb(255, 255, 255);\">Redis 未授权访问漏洞</a></p><p style=\"white-space: normal;\">②如果你之前已经装过了redis，也运行过doracms，这里请务必注意清除全部redis的缓存数据</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">4、安装&nbsp;GraphicsMagick Display，它是做图像处理的，nodejs利用gm包调用GraphicsMagick Display来处理图片缩略图，裁剪等动作，下载地址：<a href=\"http://www.graphicsmagick.org/download.html\">http://www.graphicsmagick.org/download.html</a>&nbsp;直接安装到本地就可以了。</p><p style=\"white-space: normal;\"><span style=\"color: rgb(255, 0, 0);\">注意：很多朋友提出在mac下图片上传不正常，基本上也是GraphicsMagick Display没装上的原因，GraphicsMagick可以再绝大多数的平台上使用，Linux、Mac、Windows都没有问题。至于在mac上如何装，我目前没有mac的机器，找了一篇文章大家可以参考一下&nbsp;</span><a href=\"http://elf8848.iteye.com/blog/1708994\" target=\"_blank\" title=\"mac下安装graphicsmagick\" style=\"color: rgb(255, 0, 0); text-decoration: underline;\"><span style=\"color: rgb(255, 0, 0);\">Mac下安装GraphicsMagick&nbsp;Display</span></a></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\"><strong><span style=\"font-size: 18px;\">二、运行DoraCMS</span></strong></p><p style=\"white-space: normal;\">1、下载源码（使用工具TortoiseGit），地址&nbsp;<a href=\"https://github.com/doramart/DoraCMS\" target=\"_blank\" title=\"DoraCMS源码\">DoraCMS源码</a>，下载完成后的目录</p><p style=\"white-space: normal;\"><img alt=\"DoraCMS安装教程6.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_28_20_932_1032.jpg\" title=\"\"/></p><p style=\"white-space: normal;\"><span style=\"color: rgb(255, 0, 0); text-decoration: underline;\">注意：doracms默认数据库为本地数据库(127.0.0.1:27017),用户名密码为空，即无需设置，redis也默认没有密码，无需设置。</span></p><p style=\"white-space: normal;\">2、安装依赖。</p><p style=\"white-space: normal;\">在源码根目录下执行npm&nbsp;install,等待一会</p><p style=\"white-space: normal;\"><img alt=\"DoraCMS安装教程7.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_28_29_492_1033.jpg\" title=\"\"/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\"><span style=\"text-decoration: underline; color: rgb(255, 0, 0);\">注意：因为墙的原因，有童鞋可能会非常慢，也有可能会报错，这里你可以用cnpm的方式去安装，即先安装cnpm(npm install cnpm -g),之后再执行</span></p><pre class=\"brush:js;toolbar:false\">cnpm&nbsp;install</pre><p style=\"white-space: normal;\"><img alt=\"DoraCMS安装教程8.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_28_46_647_1034.jpg\" title=\"\"/></p><p style=\"white-space: normal;\">以上依赖包全部安装完毕，在代码根目录下多出node_modules文件夹，里面包含所有依赖。</p><p style=\"white-space: normal;\"><span style=\"text-decoration: underline;\">注意：碰到好些童鞋都是一个个依赖安装，这样费时费力而且不能保证全部安装完成，因为包和包之间可能也是依赖的。</span></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">3、启动DoraCMS。在第一步环境准备中，我们已经安装并开启了mongodb和redis。现在只用启动DoraCMS就可以了，代码根目录执行：</p><pre class=\"brush:js;toolbar:false\">npm&nbsp;start</pre><p style=\"white-space: normal;\"><img alt=\"DoraCMS安装教程9.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_28_56_114_1035.jpg\" title=\"\"/></p><p style=\"white-space: normal;\">如果没有报错，则启动成功。</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\"><strong><span style=\"font-size: 18px;\">三、配置</span></strong></p><p style=\"white-space: normal;\">1、添加管理员用户组和管理员。</p><p style=\"white-space: normal;\">找到routes下的adminCtrl.js文件,注释下面的代码：</p><p style=\"white-space: normal;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_4_30_16_21_19_878_1002.jpg\" title=\"\" alt=\"cms教程.jpg\"/></p><p style=\"white-space: normal;\">找到/models/db 下的&nbsp;adminFunc.js ，注释下面的一段，直接返回true</p><p style=\"white-space: normal;\"><img alt=\"DoraCMS安装教程11.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_29_32_314_1037.jpg\" title=\"\"/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">至此，访问后台页面就不需要登录了，开启服务后，你可以直接访问地址：</p><p style=\"white-space: normal;\">用户组管理 ：<a href=\"http://127.0.0.1:81/admin/manage/adminGroupList\" _src=\"http://127.0.0.1:81/admin/manage/adminGroupList\" style=\"white-space: normal;\">http://127.0.0.1:81/admin/manage/adminGroupList</a></p><p style=\"white-space: normal;\">管理员添加 ：&nbsp;<a href=\"http://127.0.0.1:81/admin/manage/adminUsersList\" _src=\"http://127.0.0.1:81/admin/manage/adminUsersList\">http://127.0.0.1:81/admin/manage/adminUsersList</a></p><p style=\"white-space: normal;\">注意：1、先添加用户组，在添加管理员</p><p>&nbsp; &nbsp; 2、添加完成之后，把之前注释掉的两个地方还原，然后重启服务，用刚才设置的管理员信息登录后台。</p><p><br/></p><p>2、配置模板</p><p>DoraCMS服务启动之后，访问前台是有问题的，需要在后台配置模板后才能正常访问。</p><p style=\"white-space: normal;\">① 用刚才设置的管理员账户密码进入后台，找到模板配置模块。&nbsp;</p><p style=\"white-space: normal;\"><img alt=\"DoraCMS安装教程12.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_29_58_61_1038.jpg\" title=\"\"/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">②、切换到安装主题选项卡，点击安装。</p><p style=\"white-space: normal;\"><img alt=\"DoraCMS安装教程13.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_30_14_477_1039.jpg\" title=\"\"/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">安装成功后会在可用主题中找到刚安装的主题：<br/></p><p style=\"white-space: normal;\"><img alt=\"DoraCMS安装教程14.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_30_32_570_1040.jpg\" title=\"\"/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\"><span style=\"text-decoration: underline;\">注意：当前正在使用的主题不允许卸载。</span></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">③&nbsp;在可用主题中点击“启用”，即可激活改主题： <br/></p><p style=\"white-space: normal;\"><img alt=\"DoraCMS安装教程15.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_30_46_427_1041.jpg\" title=\"\"/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">④&nbsp;这时候再访问首页看看（http://127.0.0.1:81/），是不是可以访问了？</p><p style=\"white-space: normal;\"><span style=\"text-decoration: underline;\">注意：默认情况下，模板是不需要配置的。模板单元的作用是为不同类别设置不同模板，有兴趣的童鞋可以研究一下。</span></p><p style=\"white-space: normal;\">至此，DoraCMS就可以正常启用了。</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">如果您有任何问题或建议，欢迎在下面留言反馈，感谢您的支持！</p><p style=\"white-space: normal;\">如果后续还有其它问题，请查看&nbsp;<a href=\"http://www.html-js.cn/details/41ZX4pE8x.html\" target=\"_blank\" title=\"DoraCMS安装常见问题详解\" style=\"color: rgb(0, 176, 240); text-decoration: underline;\"><span style=\"color: rgb(0, 176, 240);\">DoraCMS安装常见问题详解</span></a></p>','[{\"type\":\"contents\",\"content\":\"应一些前端朋友的建议，和反馈的一些问题，很多童鞋提议出一个DoraCMS完整的安装文档，在这里我就详细介绍一下doracms在windows下是如何安装的。（linux和mac后面再补充）。\\n一、环境准备。\\n1、安装nodejs，下载地址：https://nodejs.org/en/download/ 根据您操作系统的版本下载对应的node，下载完成后进行安装，安装过程没什么好说的，基本上都是下一步，如何验证安装成功呢？起一个cmd窗口，执行node -v，如果看到版本号，就证明node已经安装成功了。\\n注意：有时候安装成功了执行node -v 会提示没有node命令，我碰到过几次，重启机器就可以了，如果还是不行，就手动将nodejs添加到环境变量中。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_26_39_722_1027.jpg\"},{\"type\":\"contents\",\"content\":\"\\n2、安装mongodb。mongodb为nosql数据库，下载地址https://www.mongodb.org/downloads#production，同样根据自己操作系统的版本选择对应的安装包。建议默认安装到c盘（默认到其它盘也是可以的，但是后面启动有时候会报找不到数据库存放目录，这个时候，你需要通过修改配置文件，通过配置文件指定数据库存放目录，然后以该配置启动数据库才能启动成功，如果默认到c盘，就不用那么麻烦了）。\\n\\n注意：如果安装到其他盘(例如D盘)，你可以这样做：\\n① 在D盘下新建Data文件夹\\n② 在mongdb的安装目录下找到bin目录，创建文件名为mongodb.conf的配置文件\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_26_56_651_1028.jpg\"},{\"type\":\"contents\",\"content\":\"\\n③ 启动mongdb:\\nmongod --config mongodb.conf\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_27_10_950_1029.jpg\"},{\"type\":\"contents\",\"content\":\"\\n这样mongodb就启动了，将来的数据都存放在D盘的data目录下。\\n\\n3、安装redis，这里提供一个windows下的版本 \\n\"},{\"type\":\"image\",\"content\":\"http://www.html-js.cn/ueditor/dialogs/attachment/fileTypeImages/icon_rar.gif\"},{\"type\":\"contents\",\"content\":\"redis-2.4.2-win32-win64-fix.zip\\n解压后的目录如图：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_27_21_952_1030.jpg\"},{\"type\":\"contents\",\"content\":\"\\n本地测试redis可以不用设置密码，执行redis-server.exe,开启redis：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_27_37_176_1031.jpg\"},{\"type\":\"contents\",\"content\":\"\\n注意：\\n①将来部署到服务器，redis必须设置密码，如何设置请参考我之前写的 Redis 未授权访问漏洞\\n②如果你之前已经装过了redis，也运行过doracms，这里请务必注意清除全部redis的缓存数据\\n\\n4、安装 GraphicsMagick Display，它是做图像处理的，nodejs利用gm包调用GraphicsMagick Display来处理图片缩略图，裁剪等动作，下载地址：http://www.graphicsmagick.org/download.html 直接安装到本地就可以了。\\n注意：很多朋友提出在mac下图片上传不正常，基本上也是GraphicsMagick Display没装上的原因，GraphicsMagick可以再绝大多数的平台上使用，Linux、Mac、Windows都没有问题。至于在mac上如何装，我目前没有mac的机器，找了一篇文章大家可以参考一下 Mac下安装GraphicsMagick Display\\n\\n二、运行DoraCMS\\n1、下载源码（使用工具TortoiseGit），地址 DoraCMS源码，下载完成后的目录\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_28_20_932_1032.jpg\"},{\"type\":\"contents\",\"content\":\"\\n注意：doracms默认数据库为本地数据库(127.0.0.1:27017),用户名密码为空，即无需设置，redis也默认没有密码，无需设置。\\n2、安装依赖。\\n在源码根目录下执行npm install,等待一会\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_28_29_492_1033.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n注意：因为墙的原因，有童鞋可能会非常慢，也有可能会报错，这里你可以用cnpm的方式去安装，即先安装cnpm(npm install cnpm -g),之后再执行\\ncnpm install\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_28_46_647_1034.jpg\"},{\"type\":\"contents\",\"content\":\"\\n以上依赖包全部安装完毕，在代码根目录下多出node_modules文件夹，里面包含所有依赖。\\n注意：碰到好些童鞋都是一个个依赖安装，这样费时费力而且不能保证全部安装完成，因为包和包之间可能也是依赖的。\\n\\n3、启动DoraCMS。在第一步环境准备中，我们已经安装并开启了mongodb和redis。现在只用启动DoraCMS就可以了，代码根目录执行：\\nnpm start\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_28_56_114_1035.jpg\"},{\"type\":\"contents\",\"content\":\"\\n如果没有报错，则启动成功。\\n\\n三、配置\\n1、添加管理员用户组和管理员。\\n找到routes下的adminCtrl.js文件,注释下面的代码：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_4_30_16_21_19_878_1002.jpg\"},{\"type\":\"contents\",\"content\":\"\\n找到/models/db 下的 adminFunc.js ，注释下面的一段，直接返回true\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_29_32_314_1037.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n至此，访问后台页面就不需要登录了，开启服务后，你可以直接访问地址：\\n用户组管理 ：http://127.0.0.1:81/admin/manage/adminGroupList\\n管理员添加 ： http://127.0.0.1:81/admin/manage/adminUsersList\\n注意：1、先添加用户组，在添加管理员\\n    2、添加完成之后，把之前注释掉的两个地方还原，然后重启服务，用刚才设置的管理员信息登录后台。\\n\\n2、配置模板\\nDoraCMS服务启动之后，访问前台是有问题的，需要在后台配置模板后才能正常访问。\\n① 用刚才设置的管理员账户密码进入后台，找到模板配置模块。 \\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_29_58_61_1038.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n②、切换到安装主题选项卡，点击安装。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_30_14_477_1039.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n安装成功后会在可用主题中找到刚安装的主题：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_30_32_570_1040.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n注意：当前正在使用的主题不允许卸载。\\n\\n③ 在可用主题中点击“启用”，即可激活改主题： \\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_30_46_427_1041.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n④ 这时候再访问首页看看（http://127.0.0.1:81/），是不是可以访问了？\\n注意：默认情况下，模板是不需要配置的。模板单元的作用是为不同类别设置不同模板，有兴趣的童鞋可以研究一下。\\n至此，DoraCMS就可以正常启用了。\\n\\n如果您有任何问题或建议，欢迎在下面留言反馈，感谢您的支持！\\n如果后续还有其它问题，请查看 DoraCMS安装常见问题详解\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1450421429000.jpg','2015-12-18 06:50:46','2020-11-07 13:19:03'),(179,'DoraCMS开放后台查看功能','DoraCMS开放后台查看功能','1','1','','权限模块开放','2',NULL,'','上周对权限模块做了完善，针对不同的模块设置了增、删、改、查的权限控制，经过几天简单测试，并没有发现严重问题。为了让开发者能够更清楚了了解DoraCMS','1','','','0:01',762,'2','0',NULL,1,'0',223432,'<p>&nbsp; 上周对权限模块做了完善，针对不同的模块设置了增、删、改、查的权限控制，经过几天简单测试，并没有发现严重问题。为了让开发者能够更清楚了了解DoraCMS的后台管理和整体架构，在这里准备开放后台的查看权限，当然，这个开放是有风险的，毕竟也叫兄弟帮忙测过，但是不保证就没有漏洞，开放的目的是为了更好的开源，更好的完善DoraCMS。也请兄弟姐妹高抬贵手，遇到的明显的bug，花点时间提出来，我加了一个提建议的入口：</p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_25_14_161_1021.jpg\" title=\"\" alt=\"DoraCMS权限模块3.jpg\"/></p><p><br/></p><p><br/></p><p><br/></p><p>所以有问题欢迎提出，我们一起改善，感谢在前端不停奋斗的兄弟姐妹 ^_^~~</p><p>您需要了解的信息：</p><p>1、后台登录地址：<a href=\"http://www.html-js.cn/admin\" _src=\"http://www.html-js.cn/admin\">http://www.html-js.cn/admin</a></p><p>2、登录账号：testuser &nbsp;密码：doracms</p><p>3、建议在现代浏览器下访问（chrome、firefox等）&nbsp;</p><p>4、用户组为测试用户，仅仅具有后台查看权限，如果你能改，那肯定是bug，请提出来，博主将献上香吻一个，以示感激<img src=\"http://img.baidu.com/hi/tsj/t_0001.gif\"/>。</p><p><br/></p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"  上周对权限模块做了完善，针对不同的模块设置了增、删、改、查的权限控制，经过几天简单测试，并没有发现严重问题。为了让开发者能够更清楚了了解DoraCMS的后台管理和整体架构，在这里准备开放后台的查看权限，当然，这个开放是有风险的，毕竟也叫兄弟帮忙测过，但是不保证就没有漏洞，开放的目的是为了更好的开源，更好的完善DoraCMS。也请兄弟姐妹高抬贵手，遇到的明显的bug，花点时间提出来，我加了一个提建议的入口：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_25_14_161_1021.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n\\n\\n所以有问题欢迎提出，我们一起改善，感谢在前端不停奋斗的兄弟姐妹 ^_^~~\\n您需要了解的信息：\\n1、后台登录地址：http://www.html-js.cn/admin\\n2、登录账号：testuser  密码：doracms\\n3、建议在现代浏览器下访问（chrome、firefox等） \\n4、用户组为测试用户，仅仅具有后台查看权限，如果你能改，那肯定是bug，请提出来，博主将献上香吻一个，以示感激\"},{\"type\":\"image\",\"content\":\"http://img.baidu.com/hi/tsj/t_0001.gif\"},{\"type\":\"contents\",\"content\":\"。\\n\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444894498000.jpg','2015-09-28 06:23:27','2020-08-20 15:44:23'),(180,'树莓派 （为学生计算机编程教育设计的一种卡片式电脑）','树莓派——卡片式电脑','1','1','','树莓派,微型电脑','2',NULL,'','今天无意发现一个好玩的硬件——树莓派，刚看到还以为是什么吃的，不过仔细查资料才发现，这东西已经出来好几年了，而且近年来非常火。','1','','','0:01',762,'2','0',NULL,0,'0',223953,'<p style=\"text-align: center;\">&nbsp;&nbsp;&nbsp; <img alt=\"cc1.jpg\" src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_19_21_58_10_382_1000.jpg\" title=\"\"/></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 今天无意发现一个好玩的硬件——树莓派，刚看到还以为是什么吃的，不过仔细查资料才发现，这东西已经出来好几年了，而且近年来非常火。</p><p><br/></p><p>&nbsp; Raspberry Pi(中文名为“树莓派”,简写为RPi，或者RasPi/RPi)是为学生计算机编程教育而设计，只有信用卡大小的卡片式电脑，其系统基于Linux。 随着Windows 10 IoT的发布，我们也将可以用上运行Windows的树莓派。 自问世以来，受众多计算机发烧友和创客的追捧，曾经一“派”难求。别看其外表“娇小”，内“心”却很强大，视频、音频等功能通通皆有，可谓是“麻雀虽小，五脏俱全”。</p><p><br/></p><p><span style=\"font-size: 16px; font-style: italic; font-weight: bold; color: rgb(51, 153, 204); line-height: 18px;\" label=\"明显强调\">卡片式电脑</span></p><p>它是一款基于ARM的微型电脑主板，以SD卡为内存硬盘，卡片主板周围有两个USB接口和一个网口，可连接键盘、鼠标和网线，同时拥有视频模拟信号的电视输出接口和HDMI高清视频输出接口，以上部件全部整合在一张仅比信用卡稍大的主板上，具备所有PC的基本功能只需接通电视机和键盘，就能执行如电子表格、文字处理、玩游戏、播放高清视频等诸多功能。 Raspberry Pi B款只提供电脑板，无内存、电源、键盘、机箱或连线。</p><p><br/></p><p>说明白了，树莓派就是可以装操作系统的微型硬件，基础操作系统基于linux，这么小的硬件已经具备了计算机的基础功能，剩下的就靠开发者自己发挥了。</p><p><br/></p><p><span style=\"font-size: 16px; font-style: italic; font-weight: bold; color: rgb(51, 153, 204); line-height: 18px;\" label=\"明显强调\">树莓派可以做什么？</span></p><p><br/></p><p><span style=\"font-size: 16px; font-style: italic; font-weight: bold; color: rgb(51, 153, 204); line-height: 18px;\" label=\"明显强调\">树莓派变身微博机器人</span><br/></p><p>树莓派最大的一点就是可扩展性很强，用户可以在此基础上加上各种传感器。比如利用温度\n传感器来实现监控温度，单纯的检测温度会比较枯燥。让我们来改造一下，把温度监控结果来定时发微博，树莓派变身微博机器人，每过一段时间把现在的温度发一\n个微博。也许你可能不会写代码，不知道怎么配置微博的接口。没关系，已经有人把一些工作都做好了，只要能动手，会Google，你也可以实现。</p><p style=\"text-align: center;\">&nbsp;<img alt=\"ee10e27b1d38e4223c262db42132b53d.jpg\" src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_19_22_3_20_636_1001.jpg\" title=\"\"/></p><p></p><p style=\"text-align: center;\">点击<a title=\"树莓派\" target=\"_blank\" href=\"http://www.guokr.com/post/438477/\">【来源】</a>查看实现方法</p><p>除了温度传感器，还可以尝试其他的传感器，来实现新的玩法，等待你的尝试。</p><p><br/></p><p><span style=\"font-size: 16px; font-style: italic; font-weight: bold; color: rgb(51, 153, 204); line-height: 18px;\" label=\"明显强调\">树莓派来做真正的豆瓣FM</span></p><p>把豆瓣FM真正的做成一个FM\n发射电台，用收音机来收听。尽管看起来是多此一举，但是极客精神就是以折腾不息，做出来的时候感觉是很酷的。听到这个概念时，一开始是不是无从下手，其实\n思路还是比较简单的，树莓派可以联网，可以装入操作系统扩展功能，已经较为方便的适合我们折腾。只需要用树莓派从豆瓣FM上下载MP3音乐码流并解码，把\n音频信号调制成调频信号发射出去。就可以用收音机或者是手机豆瓣FM了。具体的代码实现善用Github，也能找的到。</p><p style=\"text-align: center;\">&nbsp;<img alt=\"f384dddd4a812c2ad51a7f6172fb74c1.jpg\" src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_19_22_5_47_880_1002.jpg\" title=\"\"/></p><p></p><p style=\"text-align: center;\">点击<a title=\"树莓派\" target=\"_blank\" href=\"http://www.freemindworld.com/blog/2013/130218_douban_fm_with_raspberry_pi.shtml\">【来源】</a>查看实现方法</p><p>如果你更发烧，更极客，可以尝试一下这个方法，把你的树莓派版的豆瓣FM 加一个显示器。</p><p>效果见视频</p><p style=\"text-align: center;\">&nbsp;<embed type=\"application/x-shockwave-flash\" class=\"edui-faked-video\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" src=\"http://player.youku.com/player.php/sid/XNTgwMzc4ODcy/v.swf\" width=\"600\" height=\"400\" wmode=\"transparent\" play=\"true\" loop=\"false\" menu=\"false\" allowscriptaccess=\"never\" allowfullscreen=\"true\"/></p><p>点击【来源】查看实现方法</p><p>只需要多加一个显示模块，红外遥控器，红外感应器，当然动手难度也相应的提高不少，需要一定的编程基础。</p><p><br/></p><p><span style=\"font-size: 16px; font-style: italic; font-weight: bold; color: rgb(51, 153, 204); line-height: 18px;\" label=\"明显强调\">树莓派实现远程开门器</span></p><p>当你到公司签到的时候，用手机发送一条指令，门便自动打开。也许在之前听起来会比较科幻，非常极客，制作难度也会很高。现在用树莓派实现也不会很难，需要你研究一下门锁，给树莓派刷上操作系统，配置网络，连接硬件，用代码编写一个小Web Server 。然后输入正确的口令，便可解锁。如果再高端一点，可以写一个Android 和 iOS程序，用手机签到，这样每次忘记带门卡，用手机遥控开门。</p><p><br/></p><p style=\"text-align: center;\"><img alt=\"4e18232f871d63fcb27fe7b9df6dc6f0.jpg\" src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_19_22_7_55_16_1003.jpg\" title=\"\"/>&nbsp;</p><p><br/></p><p></p><p style=\"text-align: center;\">点击【<a title=\"树莓派\" target=\"_blank\" href=\"http://blog.douban.com/douban/2013/01/07/2135/\">来源】</a>查看实现方法</p><p>&nbsp;</p><p><span style=\"font-size: 16px; font-style: italic; font-weight: bold; color: rgb(51, 153, 204); line-height: 18px;\" label=\"明显强调\">Kindle + Raspberry Pi = PC</span></p><p>PC还可以怎么组装？只要你有个Kindle和树莓派，便可改造成一台小PC。这个上手难度会高很多，但挑战越多，乐趣也越大。一台越狱的\nKindle 加上一个外接键盘，树莓派作为处理中心，Kindle \n作为显示器，看起来是不是像一台小PC，虽然只能实现远古的命令行模式，在Kindle上Hack一下，至少会提高不少逼格。</p><p style=\"text-align: center;\">&nbsp;<img alt=\"bc13107c199e147e07d1d046fc9b19f6.jpg\" src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_19_22_9_40_323_1004.jpg\" title=\"\"/></p><p></p><p style=\"text-align: center;\">点击<a title=\"树莓派\" target=\"_blank\" href=\"http://www.ponnuki.net/2012/09/kindleberry-pi/\">【来源】</a>查看实现方法</p><p><span style=\"font-size: 16px; font-style: italic; font-weight: bold; color: rgb(51, 153, 204); line-height: 18px;\" label=\"明显强调\">自制树莓派飞行器</span></p><p><span style=\"font-size: 16px; font-style: italic; font-weight: bold; color: rgb(51, 153, 204); line-height: 18px;\" label=\"明显强调\"><br/></span></p><p>采用树莓派电脑控制的旋翼飞行器，可以装备智能手机用的那种微型摄像头，相对普通旋翼飞行器+相机的航拍组合，不仅成本更低，而且能够实现更复杂的\n功能，比如航拍录像或者实时航拍影像无线传输，相比单纯的买来用手机控制的飞行器，这个自己改装的树莓派版还可以扩展功能，是不是很酷。</p><p style=\"text-align: center;\"><img alt=\"5ea7a2fb4505ebacf924d9d8b764b342.jpg\" src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_19_22_11_54_839_1005.jpg\" title=\"\"/></p><p></p><p style=\"text-align: center;\"><a title=\"树莓派\" target=\"_blank\" href=\"http://www.guokr.com/post/480889/\">【点击】</a>查看来源</p><p>树莓派商店和论坛</p><p>觉得自己动手难度太高？试试树莓派商店吧，商店中直接有别人做好的一些项目，有游戏有应用，当然有些是需要掏钱买的。如果你自己的动手能力够强，也可以发布自己的项目，让别人感受你的成果。</p><p></p><p>现在也有不少玩家集合，在树莓派论坛中，也能发现比较好玩的东西，也有一些教程来给普通用户解决一些问题。互联网时代能接触到的资源很多，只要去尝试和发现，总是会能解决的。</p><p>不久前去幻腾智能的时候，发现\n他们的工作室门边贴满了传感器。后来了解到这是用来解锁开门的，在门上设定解锁图案。只要按照特定的顺序敲击固定的位置，便可解锁。具体原理是敲击门的时\n候，每一个击中点传感器都能感应的到，然后各个传感器计算偏移量，得出坐标。如果匹配设定好的方案，便可解锁。</p><p>他们用一种很极客的方式来创造了一种解锁方案。对普通用户来说，可能没有那个能力去做，树莓派的出现在一定程度上降低了难度，可以自己去尝试着做一些小产品。</p><p><br/></p><p>以上实践整理于网络，有兴趣的童鞋不妨自己试试？<br/></p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"    \"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_19_21_58_10_382_1000.jpg\"},{\"type\":\"contents\",\"content\":\"\\n     今天无意发现一个好玩的硬件——树莓派，刚看到还以为是什么吃的，不过仔细查资料才发现，这东西已经出来好几年了，而且近年来非常火。\\n\\n  Raspberry Pi(中文名为“树莓派”,简写为RPi，或者RasPi/RPi)是为学生计算机编程教育而设计，只有信用卡大小的卡片式电脑，其系统基于Linux。 随着Windows 10 IoT的发布，我们也将可以用上运行Windows的树莓派。 自问世以来，受众多计算机发烧友和创客的追捧，曾经一“派”难求。别看其外表“娇小”，内“心”却很强大，视频、音频等功能通通皆有，可谓是“麻雀虽小，五脏俱全”。\\n\\n卡片式电脑\\n它是一款基于ARM的微型电脑主板，以SD卡为内存硬盘，卡片主板周围有两个USB接口和一个网口，可连接键盘、鼠标和网线，同时拥有视频模拟信号的电视输出接口和HDMI高清视频输出接口，以上部件全部整合在一张仅比信用卡稍大的主板上，具备所有PC的基本功能只需接通电视机和键盘，就能执行如电子表格、文字处理、玩游戏、播放高清视频等诸多功能。 Raspberry Pi B款只提供电脑板，无内存、电源、键盘、机箱或连线。\\n\\n说明白了，树莓派就是可以装操作系统的微型硬件，基础操作系统基于linux，这么小的硬件已经具备了计算机的基础功能，剩下的就靠开发者自己发挥了。\\n\\n树莓派可以做什么？\\n\\n树莓派变身微博机器人\\n树莓派最大的一点就是可扩展性很强，用户可以在此基础上加上各种传感器。比如利用温度传感器来实现监控温度，单纯的检测温度会比较枯燥。让我们来改造一下，把温度监控结果来定时发微博，树莓派变身微博机器人，每过一段时间把现在的温度发一个微博。也许你可能不会写代码，不知道怎么配置微博的接口。没关系，已经有人把一些工作都做好了，只要能动手，会Google，你也可以实现。\\n \"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_19_22_3_20_636_1001.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n点击【来源】查看实现方法\\n除了温度传感器，还可以尝试其他的传感器，来实现新的玩法，等待你的尝试。\\n\\n树莓派来做真正的豆瓣FM\\n把豆瓣FM真正的做成一个FM发射电台，用收音机来收听。尽管看起来是多此一举，但是极客精神就是以折腾不息，做出来的时候感觉是很酷的。听到这个概念时，一开始是不是无从下手，其实思路还是比较简单的，树莓派可以联网，可以装入操作系统扩展功能，已经较为方便的适合我们折腾。只需要用树莓派从豆瓣FM上下载MP3音乐码流并解码，把音频信号调制成调频信号发射出去。就可以用收音机或者是手机豆瓣FM了。具体的代码实现善用Github，也能找的到。\\n \"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_19_22_5_47_880_1002.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n点击【来源】查看实现方法\\n如果你更发烧，更极客，可以尝试一下这个方法，把你的树莓派版的豆瓣FM 加一个显示器。\\n效果见视频\\n \"},{\"type\":\"image\",\"content\":\"/ueditor/themes/default/images/spacer.gif\"},{\"type\":\"contents\",\"content\":\"\\n点击【来源】查看实现方法\\n只需要多加一个显示模块，红外遥控器，红外感应器，当然动手难度也相应的提高不少，需要一定的编程基础。\\n\\n树莓派实现远程开门器\\n当你到公司签到的时候，用手机发送一条指令，门便自动打开。也许在之前听起来会比较科幻，非常极客，制作难度也会很高。现在用树莓派实现也不会很难，需要你研究一下门锁，给树莓派刷上操作系统，配置网络，连接硬件，用代码编写一个小Web Server 。然后输入正确的口令，便可解锁。如果再高端一点，可以写一个Android 和 iOS程序，用手机签到，这样每次忘记带门卡，用手机遥控开门。\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_19_22_7_55_16_1003.jpg\"},{\"type\":\"contents\",\"content\":\" \\n\\n\\n点击【来源】查看实现方法\\n\\nKindle + Raspberry Pi = PC\\nPC还可以怎么组装？只要你有个Kindle和树莓派，便可改造成一台小PC。这个上手难度会高很多，但挑战越多，乐趣也越大。一台越狱的Kindle 加上一个外接键盘，树莓派作为处理中心，Kindle 作为显示器，看起来是不是像一台小PC，虽然只能实现远古的命令行模式，在Kindle上Hack一下，至少会提高不少逼格。\\n \"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_19_22_9_40_323_1004.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n点击【来源】查看实现方法\\n自制树莓派飞行器\\n\\n\\n采用树莓派电脑控制的旋翼飞行器，可以装备智能手机用的那种微型摄像头，相对普通旋翼飞行器+相机的航拍组合，不仅成本更低，而且能够实现更复杂的功能，比如航拍录像或者实时航拍影像无线传输，相比单纯的买来用手机控制的飞行器，这个自己改装的树莓派版还可以扩展功能，是不是很酷。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_19_22_11_54_839_1005.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n【点击】查看来源\\n树莓派商店和论坛\\n觉得自己动手难度太高？试试树莓派商店吧，商店中直接有别人做好的一些项目，有游戏有应用，当然有些是需要掏钱买的。如果你自己的动手能力够强，也可以发布自己的项目，让别人感受你的成果。\\n\\n现在也有不少玩家集合，在树莓派论坛中，也能发现比较好玩的东西，也有一些教程来给普通用户解决一些问题。互联网时代能接触到的资源很多，只要去尝试和发现，总是会能解决的。\\n不久前去幻腾智能的时候，发现他们的工作室门边贴满了传感器。后来了解到这是用来解锁开门的，在门上设定解锁图案。只要按照特定的顺序敲击固定的位置，便可解锁。具体原理是敲击门的时候，每一个击中点传感器都能感应的到，然后各个传感器计算偏移量，得出坐标。如果匹配设定好的方案，便可解锁。\\n他们用一种很极客的方式来创造了一种解锁方案。对普通用户来说，可能没有那个能力去做，树莓派的出现在一定程度上降低了难度，可以自己去尝试着做一些小产品。\\n\\n以上实践整理于网络，有兴趣的童鞋不妨自己试试？\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444890103000.jpg','2015-08-19 14:13:03','2020-08-20 15:44:25'),(181,'基于node+express+log4js的前端异常信息监控','基于node+express+log4js的前端异常信息监控','1','1','','node,express,log4js','2',NULL,'','近期在熟悉怎样处理前端异常，在客户端跑的h5代码，如果遇到体量大的客户群（几百w，几千w），对前端js进行异常监控就变得很重要了','1','','','0:01',762,'2','0',NULL,1,'0',236018,'<p class=\"p1\">&nbsp; &nbsp; 近期在熟悉怎样处理前端异常，在客户端跑的<span class=\"s2\">h5</span>代码，如果遇到体量大的客户群（几百<span class=\"s2\">w</span>，几千<span class=\"s2\">w</span>），对前端<span class=\"s2\">js</span>进行异常监控就变得很重要了，因为测试并不能完整的捕捉到某些情况和场景下的异常，其中包括了接口返回信息缺失、固定操作下的<span class=\"s2\">js</span>报错等，我的思路大概是这样：</p><p class=\"p3\"><span class=\"s2\">1</span>、前端对异常进行收集</p><p class=\"p1\">2<span class=\"s1\">、上报到</span>node server</p><p class=\"p3\"><span class=\"s2\">3</span>、通过<span class=\"s2\"> log4js</span>进行日志记录</p><p class=\"p3\">当然，如果想体验更好，也可以通过<span class=\"s2\">node server </span>将异常入库（结合<span class=\"s2\">mongodb</span>），在后台通过数据结合类</p><p class=\"p3\"><span class=\"s2\">chart </span>组件通过图形化展示异常信息更为直观。</p><p class=\"p2\"><br/></p><p class=\"p3\"><strong>一、前端异常收集。</strong></p><p class=\"p3\">前端的异常收集常用的两种方式：</p><p class=\"p1\"><strong>1<span class=\"s1\">、</span>try catch</strong></p><p class=\"p3\"><span class=\"s2\">try</span>,<span class=\"s2\">catch</span>能够知道出错的信息，并且也有堆栈信息可以知道在哪个文件第几行第几列发生错误。</p><p class=\"p3\">但是<span class=\"s2\">try</span>,<span class=\"s2\">catch</span>的方案有<span class=\"s2\">2</span>个缺点：</p><ol class=\"ol1 list-paddingleft-2\"><li><p><span class=\"s2\"></span>没法捕捉<span class=\"s2\">try</span>,<span class=\"s2\">catch</span>块，当前代码块有语法错误，<span class=\"s2\">JS</span>解释器压根都不会执行当前这个代码块，所以也就没办法被<span class=\"s2\">catch</span>住；</p></li><li><p><span class=\"s2\"></span>没法捕捉到全局的错误事件，也即是只有<span class=\"s2\">try</span>,<span class=\"s2\">catch</span>的块里边运行出错才会被你捕捉到，这里的块你要理解成一个函数块。</p></li></ol><p class=\"p2\"><br/></p><p class=\"p1\"><strong>2<span class=\"s1\">、</span>window.onerror</strong></p><ol class=\"ol1 list-paddingleft-2\"><li><p><span class=\"s2\"></span>可以捕捉语法错误，也可以捕捉运行时错误；</p></li><li><p><span class=\"s2\"></span>可以拿到出错的信息，堆栈，出错的文件、行号、列号；</p></li><li><p><span class=\"s2\"></span>只要在当前页面执行的<span class=\"s2\">js</span>脚本出错都会捕捉到，例如：浏览器插件的<span class=\"s2\">javascript</span>、或者<span class=\"s2\">flash</span>抛出的异常等。</p></li><li><p><span class=\"s2\"></span>跨域的资源需要特殊头部支持。</p></li></ol><p class=\"p2\"><br/></p><p class=\"p3\"><span style=\"color: rgb(192, 0, 0);\">需要注意的是：</span></p><p class=\"p1\"><span style=\"text-decoration: underline;\">1、window.onerror能捕捉到语法错误，但是语法出错的代码块不能跟window.onerror在同一个块</span></p><p class=\"p3\"><span style=\"text-decoration: underline;\">2、对于跨域的JS资源，window.onerror拿不到详细的信息，需要往资源的请求添加额外的头部。</span></p><pre class=\"brush:js;toolbar:false\">window.onerror&nbsp;=&nbsp;(msg,&nbsp;url,&nbsp;line,&nbsp;col,&nbsp;error)&nbsp;=&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//没有URL不上报！上报也不知道错误\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(msg&nbsp;!=&nbsp;&quot;Script&nbsp;error.&quot;&nbsp;&amp;&amp;&nbsp;!url)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(()&nbsp;=&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;data&nbsp;=&nbsp;{};\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//不一定所有浏览器都支持col参数\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;col&nbsp;=&nbsp;col&nbsp;||&nbsp;(window.event&nbsp;&amp;&amp;&nbsp;window.event.errorCharacter)&nbsp;||&nbsp;0;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data.url&nbsp;=&nbsp;url;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data.line&nbsp;=&nbsp;line;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data.col&nbsp;=&nbsp;col;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!!error&nbsp;&amp;&amp;&nbsp;!!error.stack)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//如果浏览器有堆栈信息\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//直接使用\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data.msg&nbsp;=&nbsp;error.stack.toString();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if&nbsp;(!!arguments.callee)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//尝试通过callee拿堆栈信息\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;ext&nbsp;=&nbsp;[];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;f&nbsp;=&nbsp;arguments.callee.caller,&nbsp;c&nbsp;=&nbsp;3;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//这里只拿三层堆栈信息\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(f&nbsp;&amp;&amp;&nbsp;(--c&nbsp;&gt;&nbsp;0))&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ext.push(f.toString());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(f&nbsp;===&nbsp;f.caller)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;//如果有环\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f&nbsp;=&nbsp;f.caller;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ext&nbsp;=&nbsp;ext.join(&quot;,&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data.msg&nbsp;=&nbsp;ext;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//把data上报到后台！\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//这里可以做日志上报\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$.ajax({})\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;0);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};</pre><p class=\"p2\"><br/></p><p class=\"p3\">这里我们在后面返回<span class=\"s2\">false</span>，让控制台也能把错误打印出来，至此，前端异常收集完成！</p><p class=\"p2\"><br/></p><p class=\"p1\"><strong><span class=\"s1\">二、上报到</span>node server</strong></p><p class=\"p3\">服务端要做的，就是提供上传数据的接口，让错误数据能保存下来，很简单，我们加到<span class=\"s2\">express</span>路由中就可以了：</p><p class=\"p2\"><br/></p><p class=\"p1\">/*&nbsp;<span class=\"s1\">写入前端日志</span>&nbsp;*/</p><pre class=\"brush:js;toolbar:false\">router.post(&#39;/restapi/reportErrInfo&#39;,&nbsp;(req,&nbsp;res,&nbsp;next)&nbsp;=&gt;&nbsp;{\n\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;logParams&nbsp;=&nbsp;req.query;\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;logUrl&nbsp;=&nbsp;logParams.url;\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;sendState&nbsp;=&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(autoUrl(logUrl))&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logUtil.logh5Error(req,&nbsp;logParams);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sendState&nbsp;=&nbsp;true;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;res.json({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;responseCode:&nbsp;&#39;0&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;responseMsg:&nbsp;sendState&nbsp;?&nbsp;&#39;success！&#39;&nbsp;:&nbsp;&#39;failed！&#39;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n});</pre><p class=\"p2\"><br/></p><p class=\"p3\">这里主要是通过接口写入日志的操作, 这是我通过<span class=\"s2\">log4js</span>封装的方法，也就是下面这段：</p><pre class=\"brush:js;toolbar:false\">logUtil.logh5Error(req,&nbsp;logParams);</pre><p class=\"p3\"><br/></p><p class=\"p3\"><strong>另外需要重点说明两点：</strong></p><p class=\"p3\"><span style=\"text-decoration: underline; color: rgb(192, 0, 0);\">1、日志上报使用post方式，更安全</span></p><p class=\"p3\"><span style=\"text-decoration: underline; color: rgb(192, 0, 0);\">2、为了防止恶意请求（csrc等），需要在接口处对信息进行鉴权处理，方法很多，常用的比如通过对比cookie，或者前端传token的方式</span></p><p class=\"p2\"><br/></p><p class=\"p3\">三、通过<span class=\"s2\"> log4js</span>进行日志记录</p><p class=\"p3\"><span class=\"s2\">nodeJS</span>自带的<span class=\"s2\">console.log</span>已经可以打印出日志了，为了让日志看起来没那么糟，我打算对日子进行改造（将常规日志<span class=\"s2\">response</span>和错误日志<span class=\"s2\">error</span>分开），具体实现如下：</p><p class=\"p2\"><br/></p><p class=\"p3\"><span class=\"s2\">1</span>、新建<span class=\"s2\">log</span>配置文件<span class=\"s2\"> </span>logConfig.js</p><pre class=\"brush:js;toolbar:false\">let&nbsp;path&nbsp;=&nbsp;require(&#39;path&#39;);\n\n//日志根目录\n\nlet&nbsp;isDevEnv&nbsp;=&nbsp;(process.env.NODE_ENV&nbsp;==&nbsp;&#39;development&#39;&nbsp;||&nbsp;process.env.NODE_ENV&nbsp;==&nbsp;&#39;FAT&#39;)&nbsp;?&nbsp;true&nbsp;:&nbsp;false;\nlet&nbsp;baseLogPath&nbsp;=&nbsp;isDevEnv&nbsp;?&nbsp;path.resolve(__dirname,&nbsp;&#39;../logs&#39;)&nbsp;:&nbsp;&#39;/home/reslogs’;\n//错误日志目录\nlet&nbsp;errorPath&nbsp;=&nbsp;isDevEnv&nbsp;?&nbsp;&quot;/error&quot;&nbsp;:&nbsp;‘/home/errlogs&#39;;\n//错误日志文件名\nlet&nbsp;errorFileName&nbsp;=&nbsp;&quot;error&quot;;\n//错误日志输出完整路径\nlet&nbsp;errorLogPath&nbsp;=&nbsp;baseLogPath&nbsp;+&nbsp;errorPath&nbsp;+&nbsp;&quot;/&quot;&nbsp;+&nbsp;errorFileName;\n\n\n//响应日志目录\nlet&nbsp;responsePath&nbsp;=&nbsp;isDevEnv&nbsp;?&nbsp;&quot;/response&quot;&nbsp;:&nbsp;&#39;&#39;;\n//响应日志文件名\nlet&nbsp;responseFileName&nbsp;=&nbsp;&quot;response&quot;;\n//响应日志输出完整路径\nlet&nbsp;responseLogPath&nbsp;=&nbsp;baseLogPath&nbsp;+&nbsp;responsePath&nbsp;+&nbsp;&quot;/&quot;&nbsp;+&nbsp;responseFileName;\n\nmodule.exports&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;appenders&quot;:\n&nbsp;&nbsp;&nbsp;&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//错误日志&nbsp;默认按小时数记录\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;category&quot;:&nbsp;&quot;errorLogger&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//logger名称\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;:&nbsp;&quot;dateFile&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//日志类型\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;filename&quot;:&nbsp;errorLogPath,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//日志输出位置\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;alwaysIncludePattern&quot;:&nbsp;true,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//是否总是有后缀名\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;pattern&quot;:&nbsp;&quot;-yyyy-MM-dd.log&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//后缀，每天创建一个新的日志文件\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;path&quot;:&nbsp;errorPath&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//自定义属性，错误日志的根目录\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//响应日志&nbsp;响应日志默认按天记录\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;category&quot;:&nbsp;&quot;resLogger&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;:&nbsp;&quot;dateFile&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;filename&quot;:&nbsp;responseLogPath,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;alwaysIncludePattern&quot;:&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;pattern&quot;:&nbsp;&quot;-yyyy-MM-dd.log&quot;,&nbsp;&nbsp;&nbsp;//后缀，每天创建一个新的日志文件\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;path&quot;:&nbsp;responsePath\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;],\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;levels&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//设置logger名称对应的的日志等级\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;errorLogger&quot;:&nbsp;&quot;ERROR&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;resLogger&quot;:&nbsp;&quot;ALL&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;baseLogPath&quot;:&nbsp;baseLogPath&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//logs根目录\n}</pre><p class=\"p2\"><br/></p><p class=\"p3\">这里是<span class=\"s2\">log4js</span>的配置文件，记录日志类型，保存文件格式以及路径等信息</p><p class=\"p2\"><br/></p><p class=\"p1\">2<span class=\"s1\">、增加</span> logUtil.js <span class=\"s1\">，代码如下：</span></p><pre class=\"brush:js;toolbar:false\">let&nbsp;log4js&nbsp;=&nbsp;require(&#39;log4js&#39;);\nlet&nbsp;fs&nbsp;=&nbsp;require(&#39;fs&#39;);\nimport&nbsp;logConfig&nbsp;from&nbsp;&#39;config/logConfig&#39;;\nimport&nbsp;_&nbsp;from&nbsp;&#39;lodash&#39;;\n//加载配置文件\nlog4js.configure(logConfig);\n\nlet&nbsp;errorLogger&nbsp;=&nbsp;log4js.getLogger(&#39;errorLogger&#39;);\nlet&nbsp;resLogger&nbsp;=&nbsp;log4js.getLogger(&#39;resLogger&#39;);\n\nlet&nbsp;logUtil&nbsp;=&nbsp;{\n\n&nbsp;&nbsp;&nbsp;&nbsp;initPath()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(logConfig.baseLogPath)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;confirmPath(logConfig.baseLogPath)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//根据不同的logType创建不同的文件目录\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(let&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;logConfig.appenders.length;&nbsp;i++)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(logConfig.appenders[i].path)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;confirmPath(logConfig.baseLogPath&nbsp;+&nbsp;logConfig.appenders[i].path);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;},\n\n&nbsp;&nbsp;&nbsp;&nbsp;logh5Error(req,&nbsp;error,&nbsp;resTime)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(req)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errorLogger.error(formatError(req,&nbsp;error,&nbsp;&#39;h5&#39;,&nbsp;resTime));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;},\n\n&nbsp;&nbsp;&nbsp;&nbsp;logError(error,&nbsp;req,&nbsp;resTime)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(error)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(typeof&nbsp;(error)&nbsp;==&nbsp;&quot;string&quot;)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errorLogger.error(&#39;*****&nbsp;node&nbsp;server&nbsp;error&nbsp;*****&#39;,&nbsp;error);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errorLogger.error(formatError(req,&nbsp;error,&nbsp;&#39;node&#39;,&nbsp;resTime));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;},\n\n&nbsp;&nbsp;&nbsp;&nbsp;logResponse(ctx,&nbsp;resTime)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(ctx)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resLogger.info(formatRes(ctx,&nbsp;resTime));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;},\n\n&nbsp;&nbsp;&nbsp;&nbsp;info(key,&nbsp;info)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(key)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resLogger.info(key,&nbsp;info);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n};\n\nlet&nbsp;confirmPath&nbsp;=&nbsp;function&nbsp;(pathStr)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!fs.existsSync(pathStr))&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fs.mkdirSync(pathStr);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;console.log(&#39;createPath:&nbsp;&#39;&nbsp;+&nbsp;pathStr);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n\n\n//格式化响应日志\nlet&nbsp;formatRes&nbsp;=&nbsp;function&nbsp;(req,&nbsp;resTime)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;logText&nbsp;=&nbsp;new&nbsp;String();\n\n&nbsp;&nbsp;&nbsp;&nbsp;//响应日志开始\n&nbsp;&nbsp;&nbsp;&nbsp;logText&nbsp;+=&nbsp;&quot;\\n&quot;&nbsp;+&nbsp;&quot;***************&nbsp;response&nbsp;log&nbsp;start&nbsp;***************&quot;&nbsp;+&nbsp;&quot;\\n&quot;;\n\n&nbsp;&nbsp;&nbsp;&nbsp;//添加请求日志\n&nbsp;&nbsp;&nbsp;&nbsp;logText&nbsp;+=&nbsp;formatReqLog(req,&nbsp;resTime);\n\n&nbsp;&nbsp;&nbsp;&nbsp;//响应状态码\n&nbsp;&nbsp;&nbsp;&nbsp;logText&nbsp;+=&nbsp;&quot;response&nbsp;status:&nbsp;&quot;&nbsp;+&nbsp;req.status&nbsp;+&nbsp;&quot;\\n&quot;;\n\n&nbsp;&nbsp;&nbsp;&nbsp;//响应内容\n&nbsp;&nbsp;&nbsp;&nbsp;logText&nbsp;+=&nbsp;&quot;response&nbsp;body:&nbsp;&quot;&nbsp;+&nbsp;&quot;\\n&quot;&nbsp;+&nbsp;JSON.stringify(req.body)&nbsp;+&nbsp;&quot;\\n&quot;;\n\n&nbsp;&nbsp;&nbsp;&nbsp;//响应日志结束\n&nbsp;&nbsp;&nbsp;&nbsp;logText&nbsp;+=&nbsp;&quot;***************&nbsp;response&nbsp;log&nbsp;end&nbsp;***************&quot;&nbsp;+&nbsp;&quot;\\n&quot;;\n\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;logText;\n\n}\n\n//格式化错误日志\nlet&nbsp;formatError&nbsp;=&nbsp;function&nbsp;(req&nbsp;=&nbsp;{},&nbsp;error&nbsp;=&nbsp;{},&nbsp;type&nbsp;=&nbsp;&#39;node&nbsp;server&#39;,&nbsp;resTime&nbsp;=&nbsp;0)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;logText&nbsp;=&nbsp;new&nbsp;String();\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;err&nbsp;=&nbsp;type&nbsp;===&nbsp;&#39;h5&#39;&nbsp;?&nbsp;req.query&nbsp;:&nbsp;error;\n&nbsp;&nbsp;&nbsp;&nbsp;//错误信息开始\n&nbsp;&nbsp;&nbsp;&nbsp;logText&nbsp;+=&nbsp;&quot;\\n&quot;&nbsp;+&nbsp;&quot;***************&nbsp;&nbsp;&quot;&nbsp;+&nbsp;type&nbsp;+&nbsp;&quot;&nbsp;error&nbsp;log&nbsp;start&nbsp;***************&quot;&nbsp;+&nbsp;&quot;\\n&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;//添加请求日志\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!_.isEmpty(req))&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logText&nbsp;+=&nbsp;formatReqLog(req);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(type&nbsp;===&nbsp;&#39;h5&#39;)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//用户信息\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(err.userInfo)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logText&nbsp;+=&nbsp;&quot;request&nbsp;user&nbsp;info:&nbsp;&nbsp;&quot;&nbsp;+&nbsp;err.userInfo&nbsp;+&nbsp;&quot;\\n&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;客户端渠道信息\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(err.pageParams)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logText&nbsp;+=&nbsp;&quot;request&nbsp;client&nbsp;channel&nbsp;info:&nbsp;&nbsp;&quot;&nbsp;+&nbsp;err.pageParams&nbsp;+&nbsp;&quot;\\n&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;客户端设备信息\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(err.clientInfo)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logText&nbsp;+=&nbsp;&quot;request&nbsp;mobile&nbsp;info:&nbsp;&nbsp;&quot;&nbsp;+&nbsp;err.clientInfo&nbsp;+&nbsp;&quot;\\n&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//报错位置\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logText&nbsp;+=&nbsp;&quot;err&nbsp;line:&nbsp;&quot;&nbsp;+&nbsp;err.line&nbsp;+&nbsp;&quot;,&nbsp;col:&nbsp;&quot;&nbsp;+&nbsp;err.col&nbsp;+&nbsp;&quot;\\n&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//错误信息\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logText&nbsp;+=&nbsp;&quot;err&nbsp;message:&nbsp;&quot;&nbsp;+&nbsp;err.msg&nbsp;+&nbsp;&quot;\\n&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//错误页面\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logText&nbsp;+=&nbsp;&quot;err&nbsp;url:&nbsp;&quot;&nbsp;+&nbsp;err.url&nbsp;+&nbsp;&quot;\\n&quot;;\n\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;//&nbsp;node&nbsp;server\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//错误名称\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logText&nbsp;+=&nbsp;&quot;err&nbsp;name:&nbsp;&quot;&nbsp;+&nbsp;error.name&nbsp;+&nbsp;&quot;\\n&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//错误信息\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logText&nbsp;+=&nbsp;&quot;err&nbsp;message:&nbsp;&quot;&nbsp;+&nbsp;error.message&nbsp;+&nbsp;&quot;\\n&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//错误详情\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logText&nbsp;+=&nbsp;&quot;err&nbsp;stack:&nbsp;&quot;&nbsp;+&nbsp;error.stack&nbsp;+&nbsp;&quot;\\n&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;//错误信息结束\n&nbsp;&nbsp;&nbsp;&nbsp;logText&nbsp;+=&nbsp;&quot;***************&nbsp;&nbsp;&quot;&nbsp;+&nbsp;type&nbsp;+&nbsp;&quot;&nbsp;&nbsp;error&nbsp;log&nbsp;end&nbsp;***************&quot;&nbsp;+&nbsp;&quot;\\n&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;logText;\n};\n\n//格式化请求日志\nlet&nbsp;formatReqLog&nbsp;=&nbsp;function&nbsp;(req)&nbsp;{\n\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;logText&nbsp;=&nbsp;new&nbsp;String();\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;method&nbsp;=&nbsp;req.method;\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;访问路径\n&nbsp;&nbsp;&nbsp;&nbsp;logText&nbsp;+=&nbsp;&quot;request&nbsp;url:&nbsp;&quot;&nbsp;+&nbsp;req.url&nbsp;+&nbsp;&quot;\\n&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;//访问方法\n&nbsp;&nbsp;&nbsp;&nbsp;logText&nbsp;+=&nbsp;&quot;request&nbsp;method:&nbsp;&quot;&nbsp;+&nbsp;method&nbsp;+&nbsp;&quot;\\n&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;//客户端ip\n&nbsp;&nbsp;&nbsp;&nbsp;logText&nbsp;+=&nbsp;&quot;request&nbsp;client&nbsp;ip:&nbsp;&nbsp;&quot;&nbsp;+&nbsp;req.ip&nbsp;+&nbsp;&quot;\\n&quot;;\n\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;logText;\n}\n\n\nmodule.exports&nbsp;=&nbsp;logUtil;</pre><p class=\"p1\"><br/></p><p class=\"p3\">此处主要是创建日志输出目录，对日志格式进行重新编辑，并约定了前端和<span class=\"s2\">node</span>端错误的格式</p><p class=\"p1\"><span class=\"s1\">前端错误调用：</span>logh5Error&nbsp; &nbsp; node<span class=\"s1\">端错误调用：</span>logError</p><p class=\"p3\">这里回到<span class=\"s2\">node</span>接口调用时执行的方法，就能看明白了，</p><pre class=\"brush:js;toolbar:false\">logUtil.logh5Error(req,&nbsp;logParams);</pre><p class=\"p2\"><br/></p><p class=\"p3\">在<span class=\"s2\">app.js</span>中对<span class=\"s2\">log4js</span>进行初始化，主要代码：</p><pre class=\"brush:js;toolbar:false\">//加载中间件\napp.use(log4js.connectLogger(logger,&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;level:&nbsp;&#39;auto&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;format:&nbsp;&#39;:method&nbsp;:url&nbsp;HTTP/:http-version&nbsp;:status&nbsp;[:res[content-length]]bytes&nbsp;:remote-addr&nbsp;:referrer&nbsp;:user-agent&#39;\n}));</pre><pre class=\"brush:js;toolbar:false\">//&nbsp;初始化日志目录\nlogUtil.initPath();</pre><p class=\"p2\">会在服务启动时在项目生成文件夹</p><p style=\"text-align:center\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2017_3_9_11_20_11_315_1066.jpg\" title=\"\" alt=\"WechatIMG2.jpg\" width=\"348\" height=\"89\" style=\"width: 348px; height: 89px;\"/></p><p class=\"p3\">来看看报错的效果吧：</p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2017_3_9_11_20_59_949_1067.jpeg\" title=\"\" alt=\"WechatIMG3.jpeg\" width=\"480\" height=\"420\" style=\"width: 480px; height: 420px;\"/></p><p><br/></p><p>参考文档：</p><p>1、<a href=\"http://div.io/topic/743\" target=\"_blank\" title=\"前端代码异常监控\">前端代码异常监控</a></p><p>2、<a href=\"http://www.jianshu.com/p/6b816c609669\" target=\"_blank\" title=\"「新手向」koa2从起步到填坑\">「新手向」koa2从起步到填坑</a>&nbsp;</p>','[{\"type\":\"contents\",\"content\":\"    近期在熟悉怎样处理前端异常，在客户端跑的h5代码，如果遇到体量大的客户群（几百w，几千w），对前端js进行异常监控就变得很重要了，因为测试并不能完整的捕捉到某些情况和场景下的异常，其中包括了接口返回信息缺失、固定操作下的js报错等，我的思路大概是这样：\\n1、前端对异常进行收集\\n2、上报到node server\\n3、通过 log4js进行日志记录\\n当然，如果想体验更好，也可以通过node server 将异常入库（结合mongodb），在后台通过数据结合类\\nchart 组件通过图形化展示异常信息更为直观。\\n\\n一、前端异常收集。\\n前端的异常收集常用的两种方式：\\n1、try catch\\ntry,catch能够知道出错的信息，并且也有堆栈信息可以知道在哪个文件第几行第几列发生错误。\\n但是try,catch的方案有2个缺点：\\n没法捕捉try,catch块，当前代码块有语法错误，JS解释器压根都不会执行当前这个代码块，所以也就没办法被catch住；\\n没法捕捉到全局的错误事件，也即是只有try,catch的块里边运行出错才会被你捕捉到，这里的块你要理解成一个函数块。\\n\\n\\n2、window.onerror\\n可以捕捉语法错误，也可以捕捉运行时错误；\\n可以拿到出错的信息，堆栈，出错的文件、行号、列号；\\n只要在当前页面执行的js脚本出错都会捕捉到，例如：浏览器插件的javascript、或者flash抛出的异常等。\\n跨域的资源需要特殊头部支持。\\n\\n\\n需要注意的是：\\n1、window.onerror能捕捉到语法错误，但是语法出错的代码块不能跟window.onerror在同一个块\\n2、对于跨域的JS资源，window.onerror拿不到详细的信息，需要往资源的请求添加额外的头部。\\nwindow.onerror = (msg, url, line, col, error) =&gt; {\\n            //没有URL不上报！上报也不知道错误\\n            if (msg != \\\"Script error.\\\" &amp;&amp; !url) {\\n                return true;\\n            }\\n            setTimeout(() =&gt; {\\n                var data = {};\\n                //不一定所有浏览器都支持col参数\\n                col = col || (window.event &amp;&amp; window.event.errorCharacter) || 0;\\n\\n                data.url = url;\\n                data.line = line;\\n                data.col = col;\\n                if (!!error &amp;&amp; !!error.stack) {\\n                    //如果浏览器有堆栈信息\\n                    //直接使用\\n                    data.msg = error.stack.toString();\\n                } else if (!!arguments.callee) {\\n                    //尝试通过callee拿堆栈信息\\n                    var ext = [];\\n                    var f = arguments.callee.caller, c = 3;\\n                    //这里只拿三层堆栈信息\\n                    while (f &amp;&amp; (--c &gt; 0)) {\\n                        ext.push(f.toString());\\n                        if (f === f.caller) {\\n                            break;//如果有环\\n                        }\\n                        f = f.caller;\\n                    }\\n                    ext = ext.join(\\\",\\\");\\n                    data.msg = ext;\\n                }\\n                //把data上报到后台！\\n               //这里可以做日志上报\\n               $.ajax({})\\n               \\n            }, 0);\\n            return false;\\n        };\\n\\n这里我们在后面返回false，让控制台也能把错误打印出来，至此，前端异常收集完成！\\n\\n二、上报到node server\\n服务端要做的，就是提供上传数据的接口，让错误数据能保存下来，很简单，我们加到express路由中就可以了：\\n\\n/* 写入前端日志 */\\nrouter.post(\'/restapi/reportErrInfo\', (req, res, next) =&gt; {\\n\\n    let logParams = req.query;\\n    let logUrl = logParams.url;\\n    let sendState = false;\\n    if (autoUrl(logUrl)) {\\n        logUtil.logh5Error(req, logParams);\\n        sendState = true;\\n    }\\n\\n    return res.json({\\n        data: {\\n            responseCode: \'0\',\\n            responseMsg: sendState ? \'success！\' : \'failed！\'\\n        }\\n    })\\n\\n});\\n\\n这里主要是通过接口写入日志的操作, 这是我通过log4js封装的方法，也就是下面这段：\\nlogUtil.logh5Error(req, logParams);\\n\\n另外需要重点说明两点：\\n1、日志上报使用post方式，更安全\\n2、为了防止恶意请求（csrc等），需要在接口处对信息进行鉴权处理，方法很多，常用的比如通过对比cookie，或者前端传token的方式\\n\\n三、通过 log4js进行日志记录\\nnodeJS自带的console.log已经可以打印出日志了，为了让日志看起来没那么糟，我打算对日子进行改造（将常规日志response和错误日志error分开），具体实现如下：\\n\\n1、新建log配置文件 logConfig.js\\nlet path = require(\'path\');\\n\\n//日志根目录\\n\\nlet isDevEnv = (process.env.NODE_ENV == \'development\' || process.env.NODE_ENV == \'FAT\') ? true : false;\\nlet baseLogPath = isDevEnv ? path.resolve(__dirname, \'../logs\') : \'/home/reslogs’;\\n//错误日志目录\\nlet errorPath = isDevEnv ? \\\"/error\\\" : ‘/home/errlogs\';\\n//错误日志文件名\\nlet errorFileName = \\\"error\\\";\\n//错误日志输出完整路径\\nlet errorLogPath = baseLogPath + errorPath + \\\"/\\\" + errorFileName;\\n\\n\\n//响应日志目录\\nlet responsePath = isDevEnv ? \\\"/response\\\" : \'\';\\n//响应日志文件名\\nlet responseFileName = \\\"response\\\";\\n//响应日志输出完整路径\\nlet responseLogPath = baseLogPath + responsePath + \\\"/\\\" + responseFileName;\\n\\nmodule.exports = {\\n    \\\"appenders\\\":\\n    [\\n        //错误日志 默认按小时数记录\\n        {\\n            \\\"category\\\": \\\"errorLogger\\\",             //logger名称\\n            \\\"type\\\": \\\"dateFile\\\",                   //日志类型\\n            \\\"filename\\\": errorLogPath,             //日志输出位置\\n            \\\"alwaysIncludePattern\\\": true,          //是否总是有后缀名\\n            \\\"pattern\\\": \\\"-yyyy-MM-dd.log\\\",      //后缀，每天创建一个新的日志文件\\n            \\\"path\\\": errorPath                     //自定义属性，错误日志的根目录\\n        },\\n        //响应日志 响应日志默认按天记录\\n        {\\n            \\\"category\\\": \\\"resLogger\\\",\\n            \\\"type\\\": \\\"dateFile\\\",\\n            \\\"filename\\\": responseLogPath,\\n            \\\"alwaysIncludePattern\\\": true,\\n            \\\"pattern\\\": \\\"-yyyy-MM-dd.log\\\",   //后缀，每天创建一个新的日志文件\\n            \\\"path\\\": responsePath\\n        }\\n    ],\\n    \\\"levels\\\":                                   //设置logger名称对应的的日志等级\\n    {\\n        \\\"errorLogger\\\": \\\"ERROR\\\",\\n        \\\"resLogger\\\": \\\"ALL\\\"\\n    },\\n    \\\"baseLogPath\\\": baseLogPath                  //logs根目录\\n}\\n\\n这里是log4js的配置文件，记录日志类型，保存文件格式以及路径等信息\\n\\n2、增加 logUtil.js ，代码如下：\\nlet log4js = require(\'log4js\');\\nlet fs = require(\'fs\');\\nimport logConfig from \'config/logConfig\';\\nimport _ from \'lodash\';\\n//加载配置文件\\nlog4js.configure(logConfig);\\n\\nlet errorLogger = log4js.getLogger(\'errorLogger\');\\nlet resLogger = log4js.getLogger(\'resLogger\');\\n\\nlet logUtil = {\\n\\n    initPath() {\\n        if (logConfig.baseLogPath) {\\n            confirmPath(logConfig.baseLogPath)\\n            //根据不同的logType创建不同的文件目录\\n            for (let i = 0; i &lt; logConfig.appenders.length; i++) {\\n                if (logConfig.appenders[i].path) {\\n                    confirmPath(logConfig.baseLogPath + logConfig.appenders[i].path);\\n                }\\n            }\\n        }\\n    },\\n\\n    logh5Error(req, error, resTime) {\\n        if (req) {\\n            errorLogger.error(formatError(req, error, \'h5\', resTime));\\n        }\\n    },\\n\\n    logError(error, req, resTime) {\\n        if (error) {\\n            if (typeof (error) == \\\"string\\\") {\\n                errorLogger.error(\'***** node server error *****\', error);\\n            } else {\\n                errorLogger.error(formatError(req, error, \'node\', resTime));\\n            }\\n        }\\n    },\\n\\n    logResponse(ctx, resTime) {\\n        if (ctx) {\\n            resLogger.info(formatRes(ctx, resTime));\\n        }\\n    },\\n\\n    info(key, info) {\\n        if (key) {\\n            resLogger.info(key, info);\\n        }\\n    }\\n\\n};\\n\\nlet confirmPath = function (pathStr) {\\n    if (!fs.existsSync(pathStr)) {\\n        fs.mkdirSync(pathStr);\\n        // console.log(\'createPath: \' + pathStr);\\n    }\\n}\\n\\n\\n//格式化响应日志\\nlet formatRes = function (req, resTime) {\\n    let logText = new String();\\n\\n    //响应日志开始\\n    logText += \\\"\\\\n\\\" + \\\"*************** response log start ***************\\\" + \\\"\\\\n\\\";\\n\\n    //添加请求日志\\n    logText += formatReqLog(req, resTime);\\n\\n    //响应状态码\\n    logText += \\\"response status: \\\" + req.status + \\\"\\\\n\\\";\\n\\n    //响应内容\\n    logText += \\\"response body: \\\" + \\\"\\\\n\\\" + JSON.stringify(req.body) + \\\"\\\\n\\\";\\n\\n    //响应日志结束\\n    logText += \\\"*************** response log end ***************\\\" + \\\"\\\\n\\\";\\n\\n    return logText;\\n\\n}\\n\\n//格式化错误日志\\nlet formatError = function (req = {}, error = {}, type = \'node server\', resTime = 0) {\\n    let logText = new String();\\n    let err = type === \'h5\' ? req.query : error;\\n    //错误信息开始\\n    logText += \\\"\\\\n\\\" + \\\"***************  \\\" + type + \\\" error log start ***************\\\" + \\\"\\\\n\\\";\\n    //添加请求日志\\n    if (!_.isEmpty(req)) {\\n        logText += formatReqLog(req);\\n    }\\n    if (type === \'h5\') {\\n        //用户信息\\n        if (err.userInfo) {\\n            logText += \\\"request user info:  \\\" + err.userInfo + \\\"\\\\n\\\";\\n        }\\n        // 客户端渠道信息\\n        if (err.pageParams) {\\n            logText += \\\"request client channel info:  \\\" + err.pageParams + \\\"\\\\n\\\";\\n        }\\n        // 客户端设备信息\\n        if (err.clientInfo) {\\n            logText += \\\"request mobile info:  \\\" + err.clientInfo + \\\"\\\\n\\\";\\n        }\\n        //报错位置\\n        logText += \\\"err line: \\\" + err.line + \\\", col: \\\" + err.col + \\\"\\\\n\\\";\\n        //错误信息\\n        logText += \\\"err message: \\\" + err.msg + \\\"\\\\n\\\";\\n        //错误页面\\n        logText += \\\"err url: \\\" + err.url + \\\"\\\\n\\\";\\n\\n    } else { // node server\\n        //错误名称\\n        logText += \\\"err name: \\\" + error.name + \\\"\\\\n\\\";\\n        //错误信息\\n        logText += \\\"err message: \\\" + error.message + \\\"\\\\n\\\";\\n        //错误详情\\n        logText += \\\"err stack: \\\" + error.stack + \\\"\\\\n\\\";\\n    }\\n    //错误信息结束\\n    logText += \\\"***************  \\\" + type + \\\"  error log end ***************\\\" + \\\"\\\\n\\\";\\n    return logText;\\n};\\n\\n//格式化请求日志\\nlet formatReqLog = function (req) {\\n\\n    let logText = new String();\\n    let method = req.method;\\n    // 访问路径\\n    logText += \\\"request url: \\\" + req.url + \\\"\\\\n\\\";\\n    //访问方法\\n    logText += \\\"request method: \\\" + method + \\\"\\\\n\\\";\\n    //客户端ip\\n    logText += \\\"request client ip:  \\\" + req.ip + \\\"\\\\n\\\";\\n\\n    return logText;\\n}\\n\\n\\nmodule.exports = logUtil;\\n\\n此处主要是创建日志输出目录，对日志格式进行重新编辑，并约定了前端和node端错误的格式\\n前端错误调用：logh5Error    node端错误调用：logError\\n这里回到node接口调用时执行的方法，就能看明白了，\\nlogUtil.logh5Error(req, logParams);\\n\\n在app.js中对log4js进行初始化，主要代码：\\n//加载中间件\\napp.use(log4js.connectLogger(logger, {\\n    level: \'auto\',\\n    format: \':method :url HTTP/:http-version :status [:res[content-length]]bytes :remote-addr :referrer :user-agent\'\\n}));\\n// 初始化日志目录\\nlogUtil.initPath();\\n会在服务启动时在项目生成文件夹\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2017_3_9_11_20_11_315_1066.jpg\"},{\"type\":\"contents\",\"content\":\"\\n来看看报错的效果吧：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2017_3_9_11_20_59_949_1067.jpeg\"},{\"type\":\"contents\",\"content\":\"\\n\\n参考文档：\\n1、前端代码异常监控\\n2、「新手向」koa2从起步到填坑 \\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20170309111530.jpg','2017-03-09 03:14:53','2020-10-17 15:33:49'),(182,'Node.js API实例讲解——node.js模块机制','node.js模块机制','2','1','','模块化','2',NULL,'','模块化的作用是可以让代码更易于管理','1','','','0:01',762,'2','0',NULL,0,'0',224385,'<h3>node.js模块机制</h3><p>模块化的作用是可以让代码更易于管理。下面开发2个模块，然后用主程序加载这2个模块。</p><p>main.js</p><pre class=\"code\">//&nbsp;math.js\n//&nbsp;加法\nexports.add&nbsp;=&nbsp;function(a,b){\n&nbsp;&nbsp;&nbsp;return&nbsp;a+b;\n}\n//&nbsp;减法\nexports.cut&nbsp;=&nbsp;function(a,b){\n&nbsp;&nbsp;&nbsp;return&nbsp;a-b;\n}</pre><p>math2.js</p><pre class=\"code\">module.exports&nbsp;=&nbsp;{\n\n&nbsp;&nbsp;//&nbsp;除法\n&nbsp;&nbsp;division:function(a,b){\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;a/b;\n&nbsp;&nbsp;},\n\n&nbsp;&nbsp;//&nbsp;乘法\n&nbsp;&nbsp;multipli:function(a,b){\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;a*b;\n&nbsp;&nbsp;}\n\n}</pre><p>main.js</p><pre class=\"code\">//&nbsp;加载math模块\nvar&nbsp;math&nbsp;=&nbsp;require(&quot;./math&quot;);\n//&nbsp;加载math2模块\nvar&nbsp;math2&nbsp;=&nbsp;require(&quot;./math2&quot;);\n\nconsole.log(math.add(6,3));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;9\nconsole.log(math.cut(6,3));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;3\nconsole.log(math2.division(6,3));&nbsp;&nbsp;&nbsp;//&nbsp;2\nconsole.log(math2.multipli(6,3));&nbsp;&nbsp;&nbsp;//&nbsp;18</pre><p>main.js是主程序，通过require加载模块，exports 和 module.exports 是模块的出口，exports 是 module.exports 的辅助写法，module.exports = xxx 这种写法是合法的，而exports = xxx这种写法是错误的，exports.xxx = xxx这种写法才是合法的。</p><p>如果定义的模块中同时使用 moudle.exports 和 exports ，那么会忽略exports的定义，看下面的代码。</p><p>修改后的math2.js</p><pre class=\"code\">//&nbsp;修改后的math2.js\nexports.division&nbsp;=&nbsp;function(a,b){\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;-----&quot;;\n}\n\nmodule.exports&nbsp;=&nbsp;{\n\n&nbsp;&nbsp;//&nbsp;除法\n&nbsp;&nbsp;division:function(a,b){\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;a/b;\n&nbsp;&nbsp;},\n\n&nbsp;&nbsp;//&nbsp;乘法\n&nbsp;&nbsp;multipli:function(a,b){\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;a*b;\n&nbsp;&nbsp;}\n\n}\n\nexports.division&nbsp;=&nbsp;function(a,b){\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;-----&quot;;\n}</pre><p>主程序 main.js</p><pre class=\"code\">//主程序&nbsp;main.js\n//&nbsp;加载math模块\nvar&nbsp;math&nbsp;=&nbsp;require(&quot;./math&quot;);\n//&nbsp;加载math2模块\nvar&nbsp;math2&nbsp;=&nbsp;require(&quot;./math2&quot;);\n\nconsole.log(math.add(6,3));\nconsole.log(math.cut(6,3));\nconsole.log(math2.division(6,3));&nbsp;&nbsp;//&nbsp;2\nconsole.log(math2.multipli(6,3));</pre><p>运行后会发现，exports.division在遇到module.exports时会无效。</p><p>知道如何定义模块后，回过头来看看模块的分类，模块分为核心模块，文件模块。</p><h5 id=\"-\">核心模块</h5><p>核心模块就是核心库，例如http模块，当通过require(&quot;http&quot;)模块时，即使自己定义了http模块，但系统还是会返回核心模块。</p><h5 id=\"-\">文件模块</h5><p>除了核心模块，都是文件模块，也就是自己定义的模块文件。</p><h5 id=\"-\">文件模块的位置</h5><p>加载文件模块可以采用绝对路径，相对路径和node_modules目录下。</p><p>相对路径和绝对路径这里就不解释了，node_modules目录下的意思是require会先查找当前目录下是否有 node_moudules目录，如果有会先在这个目录查找模块，如果没有再向上级目录找是否有node_moudles目录一直到根目录，如果都没有会抛出异常。如果把模块放在node_moudles目录下，那么采用require(&quot;modulename&quot;)写法和加载核心目录的写法一致，这个要区别于相对目录的require(&quot;./modulename&quot;)写法。</p><h5 id=\"-\">文件模块的扩展名</h5><p>require(&quot;./test.js&quot;) 如果写了完整的文件名会准确加载这个文件，如果没有写入扩展名require(&quot;./test&quot;)，那么会尝试加载 test.js 然后是test.json。 系统会把test.js解析为一个js文件，而会把test.json解析为一个json文件。</p><h5 id=\"package-json-\">package.json 定义包</h5><p>在main.js启动文件的当前目录下，创建一个mymodule的文件夹。该目录下创建一个package.json，内容如下：</p><pre class=\"code\">{\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&quot;math&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;main&quot;:&quot;./math.js&quot;\n}</pre><p>然后在package.json统计目录下顶一个math.js文件。</p><pre class=\"code\">exports.add&nbsp;=&nbsp;function(a,b){\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;a+b;\n}\nexports.cut&nbsp;=&nbsp;function(a,b){\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;a-b;\n}</pre><p>然后main.js主文件加载mymoudle模块。</p><pre class=\"code\">var&nbsp;math&nbsp;=&nbsp;require(&quot;./mymodule&quot;);</pre><p>如果在mymodule目录下找不到package，会尝试找mymodule/index.js文件加载。</p><p><span class=\"invade-word\">god</span>模块加载就讲这么多，多练习掌握模块加载的规律就熟了。下一节探讨一下module的属性和方法。</p><h4 id=\"module-\">module的属性与方法</h4><h5 id=\"module-exports\">module.exports</h5><p>上一节已有详细介绍，但要注意一点，module.exports 必须要立即执行，否则模块不会被加载，看下面代码：</p><pre class=\"code\">setTimeout(function()&nbsp;{\n&nbsp;module.exports&nbsp;=&nbsp;{&nbsp;a:&nbsp;&quot;hello&quot;&nbsp;};\n},&nbsp;0);</pre><p>以上模块不会被加载。</p><h5 id=\"module-require-id-\">module.require(id)</h5><p>require是module.require的简写方式。</p><h5 id=\"module-id\">module.id</h5><p>模块文件的完整路径，main.js如果是主启动文件，那么它自身调用 console.log(module.id) ，只会打印出 &quot;.&quot; 。</p><h5 id=\"module-filename\">module.filename</h5><p>这个和module.id功能一样，即使是main.js调用console.log(module.filename)也会打印出完整的文件路径。</p><h5 id=\"module-loaded\">module.loaded</h5><p>判断模块是否被加载完成，true/false。</p><h5 id=\"module-parent\">module.parent</h5><p>得到父模块。</p><h5 id=\"module-children\">module.children</h5><p>得到子模块。</p>','[{\"type\":\"contents\",\"content\":\"node.js模块机制\\n模块化的作用是可以让代码更易于管理。下面开发2个模块，然后用主程序加载这2个模块。\\nmain.js\\n// math.js\\n// 加法\\nexports.add = function(a,b){\\n   return a+b;\\n}\\n// 减法\\nexports.cut = function(a,b){\\n   return a-b;\\n}\\nmath2.js\\nmodule.exports = {\\n\\n  // 除法\\n  division:function(a,b){\\n    return a/b;\\n  },\\n\\n  // 乘法\\n  multipli:function(a,b){\\n    return a*b;\\n  }\\n\\n}\\nmain.js\\n// 加载math模块\\nvar math = require(\\\"./math\\\");\\n// 加载math2模块\\nvar math2 = require(\\\"./math2\\\");\\n\\nconsole.log(math.add(6,3));         // 9\\nconsole.log(math.cut(6,3));         // 3\\nconsole.log(math2.division(6,3));   // 2\\nconsole.log(math2.multipli(6,3));   // 18\\nmain.js是主程序，通过require加载模块，exports 和 module.exports 是模块的出口，exports 是 module.exports 的辅助写法，module.exports = xxx 这种写法是合法的，而exports = xxx这种写法是错误的，exports.xxx = xxx这种写法才是合法的。\\n如果定义的模块中同时使用 moudle.exports 和 exports ，那么会忽略exports的定义，看下面的代码。\\n修改后的math2.js\\n// 修改后的math2.js\\nexports.division = function(a,b){\\n    return \\\"-----\\\";\\n}\\n\\nmodule.exports = {\\n\\n  // 除法\\n  division:function(a,b){\\n    return a/b;\\n  },\\n\\n  // 乘法\\n  multipli:function(a,b){\\n    return a*b;\\n  }\\n\\n}\\n\\nexports.division = function(a,b){\\n    return \\\"-----\\\";\\n}\\n主程序 main.js\\n//主程序 main.js\\n// 加载math模块\\nvar math = require(\\\"./math\\\");\\n// 加载math2模块\\nvar math2 = require(\\\"./math2\\\");\\n\\nconsole.log(math.add(6,3));\\nconsole.log(math.cut(6,3));\\nconsole.log(math2.division(6,3));  // 2\\nconsole.log(math2.multipli(6,3));\\n运行后会发现，exports.division在遇到module.exports时会无效。\\n知道如何定义模块后，回过头来看看模块的分类，模块分为核心模块，文件模块。\\n核心模块\\n核心模块就是核心库，例如http模块，当通过require(\\\"http\\\")模块时，即使自己定义了http模块，但系统还是会返回核心模块。\\n文件模块\\n除了核心模块，都是文件模块，也就是自己定义的模块文件。\\n文件模块的位置\\n加载文件模块可以采用绝对路径，相对路径和node_modules目录下。\\n相对路径和绝对路径这里就不解释了，node_modules目录下的意思是require会先查找当前目录下是否有 node_moudules目录，如果有会先在这个目录查找模块，如果没有再向上级目录找是否有node_moudles目录一直到根目录，如果都没有会抛出异常。如果把模块放在node_moudles目录下，那么采用require(\\\"modulename\\\")写法和加载核心目录的写法一致，这个要区别于相对目录的require(\\\"./modulename\\\")写法。\\n文件模块的扩展名\\nrequire(\\\"./test.js\\\") 如果写了完整的文件名会准确加载这个文件，如果没有写入扩展名require(\\\"./test\\\")，那么会尝试加载 test.js 然后是test.json。 系统会把test.js解析为一个js文件，而会把test.json解析为一个json文件。\\npackage.json 定义包\\n在main.js启动文件的当前目录下，创建一个mymodule的文件夹。该目录下创建一个package.json，内容如下：\\n{\\n    \\\"name\\\":\\\"math\\\",\\n    \\\"main\\\":\\\"./math.js\\\"\\n}\\n然后在package.json统计目录下顶一个math.js文件。\\nexports.add = function(a,b){\\n    return a+b;\\n}\\nexports.cut = function(a,b){\\n    return a-b;\\n}\\n然后main.js主文件加载mymoudle模块。\\nvar math = require(\\\"./mymodule\\\");\\n如果在mymodule目录下找不到package，会尝试找mymodule/index.js文件加载。\\ngod模块加载就讲这么多，多练习掌握模块加载的规律就熟了。下一节探讨一下module的属性和方法。\\nmodule的属性与方法\\nmodule.exports\\n上一节已有详细介绍，但要注意一点，module.exports 必须要立即执行，否则模块不会被加载，看下面代码：\\nsetTimeout(function() {\\n module.exports = { a: \\\"hello\\\" };\\n}, 0);\\n以上模块不会被加载。\\nmodule.require(id)\\nrequire是module.require的简写方式。\\nmodule.id\\n模块文件的完整路径，main.js如果是主启动文件，那么它自身调用 console.log(module.id) ，只会打印出 \\\".\\\" 。\\nmodule.filename\\n这个和module.id功能一样，即使是main.js调用console.log(module.filename)也会打印出完整的文件路径。\\nmodule.loaded\\n判断模块是否被加载完成，true/false。\\nmodule.parent\\n得到父模块。\\nmodule.children\\n得到子模块。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444889471000.jpg','2015-08-23 14:23:08','2020-08-20 15:44:25'),(183,'领域驱动设计(DDD:Domain-Driven Design)','领域驱动设计','2','1',NULL,'领域驱动,ddd,cqrs','2',NULL,'','Eric Evans的“Domain-Driven Design领域驱动设计”简称DDD，Evans DDD是一套综合软件系统分析和设计的面向对象建模方法，Jdon.com是国内公开最早讨论DDD网站之一','1','','','0:01',762,'2','0',NULL,0,'0',225969,'<p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">&nbsp; &nbsp; Eric Evans的“Domain-Driven Design领域驱动设计”简称DDD，Evans DDD是一套综合软件系统分析和设计的面向对象建模方法，Jdon.com是国内公开最早讨论DDD网站之一.</span></p><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">过去系统分析和系统设计都是分离的，正如我们国家“系统分析师” 和“系统设计师” 两种职称考试一样，这样割裂的结果导致，需求分析的结果无法直接进行设计编程，而能够进行编程运行的代码却扭曲需求，导致客户运行软件后才发现很多功能不是自己想要的，而且软件不能快速跟随需求变化。</span></p><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">　　DDD则打破了这种隔阂，提出了领域模型概念，统一了分析和设计编程，使得软件能够更灵活快速跟随需求变化。见下面DDD与传统CRUD或过程脚本或者面向数据表等在开发效率上比较：</span></p><p style=\"text-align: center; line-height: 1.5em;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2017_3_15_9_3_45_290_1068.jpg\" title=\"\" alt=\"领域驱动设计1.jpg\"/></p><style type=\"text/css\">p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px \'.PingFang SC\'; color: #454545}\np.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px \'Helvetica Neue\'; color: #454545; min-height: 14.0px}\np.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px \'Helvetica Neue\'; color: #454545}\nli.li1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px \'.PingFang SC\'; color: #454545}\nspan.s1 {font: 12.0px \'Helvetica Neue\'}\nspan.s2 {color: #e4af0a}\nspan.s3 {font: 12.0px \'Helvetica Neue\'; color: #e4af0a}\nspan.s4 {font: 12.0px \'.PingFang SC\'}\nspan.s5 {font: 12.0px \'.PingFang SC\'; color: #e4af0a}\nol.ol1 {list-style-type: decimal}</style><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">服务器后端发展三个阶段：</span></p><ol class=\"ol1 list-paddingleft-2\"><li><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">UI+DataBase的两层架构，这种面向数据库的架构(上图table module )没有灵活性。</span></p></li><li><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">UI+Service+DataBase的多层SOA架构，这种服务+表模型的架构易使服务变得囊肿，难于维护拓展，伸缩性能差，见</span><a href=\"http://www.jdon.com/45994\" style=\"text-decoration: underline; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">这里讨论</span></a><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">或</span><a href=\"http://www.jdon.com/45857\" style=\"text-decoration: underline; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">Spring Web 应用的最大败笔</span></a><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">.</span></p></li><li><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">DDD+SOA的事件驱动的</span><a href=\"http://www.jdon.com/cqrs.html\" style=\"text-decoration: underline; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">CQRS读写分离架构</span></a><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">，应付复杂业务逻辑，以聚合模型替代数据表模型，以并发的事件驱动替代串联的消息驱动。真正实现以业务实体为核心的灵活拓展。</span></p></li></ol><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">　　DDD革命性在于：领域模型准确反映了业务语言，而传统J2EE或Spring+Hibernate等事务性编程模型只关心数据，这些数据对象除了简单setter/getter方法外，没有任何业务方法，被比喻成失血模型，那么领域模型这种带有业务方法的充血模型到底好在哪里？</span></p><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">　　以</span><a href=\"http://www.jdon.com/44815\" style=\"text-decoration: underline; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">比赛Match</span></a><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">为案例，比赛有“开始”和“结束”等业务行为，但是传统经典的方式是将“开始”和“结束”行为放在比赛的服务Service中，而不是放在比赛对象本身之中。我们不能因为用了计算机，用了数据库，用了框架，业务模型反而被技术框架给绑架，就像人虽然是由母亲生的，但是人的吃喝拉撒母亲不能替代，更不能以母爱名义肢解人的正常职责行为，如果是这样，这个人就是被母爱绑架了。</span></p><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">　　提倡充血模型，实际就是让过去被肢解被黑crack的业务模型回归正常，当然这也会被一些先入为主或被洗过脑的程序员看成反而不正常，这更是极大可悲之处。看到领域模型代码，就看到业务需求，没有翻译没有转换，保证软件真正实现“拷贝不走样”。</span></p><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">　　DDD最大的好处是：接触到需求第一步就是考虑领域模型，而不是将其切割成数据和行为，然后数据用数据库实现，行为使用服务实现，最后造成需求的首肢分离。DDD让你首先考虑的是业务语言，而不是数据。重点不同导致编程世界观不同。</span></p><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">　　DDD是解决复杂中大型软件的一套行之有效方式，在国外已经成为主流。DDD认为很多原因造成软件的复杂性，我们不可能避免这些复杂性，能做的是对复杂的问题进行控制。而一个好的领域模型是控制复杂问题的关键。领域模型的价值在于提供一种通用的语言，使得领域专家和软件技术人员联系在一起，沟通无歧义。</span></p><p style=\"line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">　　DDD在软件生产流程中定位i如下图，DDD落地实现离不开<a href=\"http://www.jdon.com/cache.html\">in-memory缓存</a>、</span> <a href=\"http://www.jdon.com/tags/9958\" style=\"text-decoration: underline; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">CQRS、</span></a> <a href=\"http://www.jdon.com/dci.html\" style=\"text-decoration: underline; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">DCI</span></a><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">、</span><a href=\"http://www.jdon.com/eda.html\" style=\"text-decoration: underline; font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">EDA</span></a><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\">或<a href=\"http://www.jdon.com/tags/17268\">Event Source</a>几大大相关领域。</span></p><p style=\"text-align: center; line-height: 1.5em;\"><span style=\"font-family: 微软雅黑, &quot;Microsoft YaHei&quot;; font-size: 16px;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2017_3_15_9_4_9_819_1069.png\" title=\"\" alt=\"领域驱动设计2.png\"/></span></p><p class=\"p2\"><br/></p><p class=\"p2\"><br/></p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"    Eric Evans的“Domain-Driven Design领域驱动设计”简称DDD，Evans DDD是一套综合软件系统分析和设计的面向对象建模方法，Jdon.com是国内公开最早讨论DDD网站之一.\\n过去系统分析和系统设计都是分离的，正如我们国家“系统分析师” 和“系统设计师” 两种职称考试一样，这样割裂的结果导致，需求分析的结果无法直接进行设计编程，而能够进行编程运行的代码却扭曲需求，导致客户运行软件后才发现很多功能不是自己想要的，而且软件不能快速跟随需求变化。\\n　　DDD则打破了这种隔阂，提出了领域模型概念，统一了分析和设计编程，使得软件能够更灵活快速跟随需求变化。见下面DDD与传统CRUD或过程脚本或者面向数据表等在开发效率上比较：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2017_3_15_9_3_45_290_1068.jpg\"},{\"type\":\"contents\",\"content\":\"\\n<div>\\n服务器后端发展三个阶段：\\nUI+DataBase的两层架构，这种面向数据库的架构(上图table module )没有灵活性。\\nUI+Service+DataBase的多层SOA架构，这种服务+表模型的架构易使服务变得囊肿，难于维护拓展，伸缩性能差，见这里讨论或Spring Web 应用的最大败笔.\\nDDD+SOA的事件驱动的CQRS读写分离架构，应付复杂业务逻辑，以聚合模型替代数据表模型，以并发的事件驱动替代串联的消息驱动。真正实现以业务实体为核心的灵活拓展。\\n\\n　　DDD革命性在于：领域模型准确反映了业务语言，而传统J2EE或Spring+Hibernate等事务性编程模型只关心数据，这些数据对象除了简单setter/getter方法外，没有任何业务方法，被比喻成失血模型，那么领域模型这种带有业务方法的充血模型到底好在哪里？\\n　　以比赛Match为案例，比赛有“开始”和“结束”等业务行为，但是传统经典的方式是将“开始”和“结束”行为放在比赛的服务Service中，而不是放在比赛对象本身之中。我们不能因为用了计算机，用了数据库，用了框架，业务模型反而被技术框架给绑架，就像人虽然是由母亲生的，但是人的吃喝拉撒母亲不能替代，更不能以母爱名义肢解人的正常职责行为，如果是这样，这个人就是被母爱绑架了。\\n　　提倡充血模型，实际就是让过去被肢解被黑crack的业务模型回归正常，当然这也会被一些先入为主或被洗过脑的程序员看成反而不正常，这更是极大可悲之处。看到领域模型代码，就看到业务需求，没有翻译没有转换，保证软件真正实现“拷贝不走样”。\\n　　DDD最大的好处是：接触到需求第一步就是考虑领域模型，而不是将其切割成数据和行为，然后数据用数据库实现，行为使用服务实现，最后造成需求的首肢分离。DDD让你首先考虑的是业务语言，而不是数据。重点不同导致编程世界观不同。\\n　　DDD是解决复杂中大型软件的一套行之有效方式，在国外已经成为主流。DDD认为很多原因造成软件的复杂性，我们不可能避免这些复杂性，能做的是对复杂的问题进行控制。而一个好的领域模型是控制复杂问题的关键。领域模型的价值在于提供一种通用的语言，使得领域专家和软件技术人员联系在一起，沟通无歧义。\\n　　DDD在软件生产流程中定位i如下图，DDD落地实现离不开in-memory缓存、 CQRS、 DCI、EDA或Event Source几大大相关领域。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2017_3_15_9_4_9_819_1069.png\"},{\"type\":\"contents\",\"content\":\"\\n\\n\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20170315090529.jpg','2017-03-15 01:05:40','2020-08-20 15:44:07'),(184,'DoraCMS email校验问题','DoraCMS email校验问题','1','1','','email,邮件','2',NULL,'','最近DoraCMS新增了不少用户，却发现了一个问题。DoraCMS注册模块设计之初，并没有加入注册成功先验证邮箱的功能，个人觉得有点麻烦，普通用户没事也不会为不太关心的网站做激活','1','','','0:01',762,'2','0',NULL,0,'0',223981,'<p>最近DoraCMS新增了不少用户，却发现了一个问题。DoraCMS注册模块设计之初，并没有加入注册成功先验证邮箱的功能，个人觉得有点麻烦，普通用户没事也不会为不太关心的网站做激活，可能注册目的只是关心网站内容。为了减少用户操作，DoraCMS中这个邮箱验证被干掉了，早期的注册大概是这样一个流程：</p><p>1、注册信息填写</p><p>2、提交注册</p><p>3、根据提示到邮箱去点击激活链接</p><p>4、激活成功</p><p>5、可以正常登录网站了</p><p><br/></p><p>DoraCMS的注册流程：</p><p style=\"white-space: normal;\">1、注册信息填写</p><p style=\"white-space: normal;\">2、提交注册</p><p>3、到登录页面登录</p><p><br/></p><p>这里确实存在问题了，用户注册填写了邮箱，却没有进行邮箱校验，导致任意的邮箱都可以注册，于是出现了：</p><p><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_11_28_17_7_46_867_1000.jpg\" title=\"\" alt=\"DoraCMS邮箱校验.jpg\"/></p><p><br/></p><p>看这些短邮箱，一看就是假的。但是在DoraCMS中，邮箱其实是有作用的，目前在留言模块用户回复是用到邮件提醒的，如果邮箱是错误了，就没多大意义了，怎样让用户在注册时填一个真实的邮箱呢？我找了一个聚合的api，貌似可以用，大概是这么描述的：</p><p><br/></p><p><strong>接口地址：</strong><span class=\"url\">http://v.juhe.cn/verifyemail/query</span></p><p><strong>支持格式：</strong><span class=\"url\">json/xml</span></p><p><strong>请求方式：</strong><span class=\"url\">http get</span></p><p><strong>请求示例：</strong><span class=\"url\">http://v.juhe.cn/verifyemail/query?key=您申请的KEY&amp;email=info@mail.juhe.cn</span></p><p><strong>接口备注：</strong><span style=\"color:\">通过连接到邮件服务器并检查邮箱存在与否。</span></p><p><br/></p><p>问题是，它的要钱的，要出钱的事，生哥是不会干的，于是想了一下，把注册部分的代码改造了一下：</p><p>修改路由中的user.js，用户提交注册这样写：</p><pre class=\"brush:js;toolbar:false\">//&nbsp;用户注册\n&nbsp;&nbsp;&nbsp;&nbsp;router.post(&#39;/doReg&#39;,&nbsp;function(req,&nbsp;res,&nbsp;next)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;errors;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;userName&nbsp;=&nbsp;req.body.userName;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;email&nbsp;=&nbsp;req.body.email;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;password&nbsp;=&nbsp;req.body.password;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;confirmPsd&nbsp;=&nbsp;req.body.confirmPassword;\n//&nbsp;&nbsp;&nbsp;&nbsp;数据校验\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!validator.isUserName(userName)){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errors&nbsp;=&nbsp;&quot;用户名5-12个英文数字组合&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!validator.isPsd(password)&nbsp;||&nbsp;!validator.isLength(password,6,12)){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errors&nbsp;=&nbsp;&quot;6-12位，只能包含字母、数字和下划线&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(password&nbsp;!==&nbsp;confirmPsd)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errors&nbsp;=&nbsp;&quot;密码不匹配，请重新输入&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!validator.isEmail(email)){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errors&nbsp;=&nbsp;&quot;请填写正确的邮箱地址&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(errors){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end(errors);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;regMsg&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;email&nbsp;:&nbsp;email,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userName&nbsp;:&nbsp;userName\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;system.sendEmail(settings.email_notice_user_reg,regMsg,function(err){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(err&nbsp;&amp;&amp;&nbsp;err&nbsp;==&nbsp;&#39;notCurrentEmail&#39;){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end(&#39;乱写邮箱被我发现了吧！&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;邮箱和用户名都必须唯一\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;query=User.find().or([{&#39;email&#39;&nbsp;:&nbsp;email},{userName&nbsp;:&nbsp;userName}]);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;query.exec(function(err,user){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(user.length&nbsp;&gt;&nbsp;0){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errors&nbsp;=&nbsp;&quot;邮箱或用户名已存在！&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end(errors);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;newPsd&nbsp;=&nbsp;DbOpt.encrypt(password,settings.encrypt_key);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req.body.password&nbsp;=&nbsp;newPsd;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//发送系统消息给管理员\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;siteFunc.sendSystemNoticeByType(req,res,&#39;reg&#39;,userName);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DbOpt.addOne(User,req,&nbsp;res)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;});</pre><p><br/></p><p>先根据用户填写的邮箱发个邮件过去，因为DoraCMS用的nodemailer来发邮件，当邮件发送失败会返回错误码，这种情况是可以判断该邮箱不存在的，于是，我们根据返回的参数来判断是否可以进行注册，从源头上避免了乱用邮箱注册，如果邮箱是错误的：</p><p><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_11_28_17_14_46_377_1001.jpg\" title=\"\" alt=\"QQ截图20151128165158.jpg\"/></p><p><br/></p><p>就是这样了，如果存在就可以继续往下走咯，注册成功的同时也会顺便收到提醒邮件：</p><p><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_11_28_17_17_7_744_1003.jpg\" title=\"\" alt=\"DoraCMS注册提醒.jpg\"/></p><p>是不是比之前的处理方式好多呢？当然，再做一次邮件激活是再好不过了。如果你有更好的方法，记得留言哈！</p><p><br/></p><p><br/></p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"最近DoraCMS新增了不少用户，却发现了一个问题。DoraCMS注册模块设计之初，并没有加入注册成功先验证邮箱的功能，个人觉得有点麻烦，普通用户没事也不会为不太关心的网站做激活，可能注册目的只是关心网站内容。为了减少用户操作，DoraCMS中这个邮箱验证被干掉了，早期的注册大概是这样一个流程：\\n1、注册信息填写\\n2、提交注册\\n3、根据提示到邮箱去点击激活链接\\n4、激活成功\\n5、可以正常登录网站了\\n\\nDoraCMS的注册流程：\\n1、注册信息填写\\n2、提交注册\\n3、到登录页面登录\\n\\n这里确实存在问题了，用户注册填写了邮箱，却没有进行邮箱校验，导致任意的邮箱都可以注册，于是出现了：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_11_28_17_7_46_867_1000.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n看这些短邮箱，一看就是假的。但是在DoraCMS中，邮箱其实是有作用的，目前在留言模块用户回复是用到邮件提醒的，如果邮箱是错误了，就没多大意义了，怎样让用户在注册时填一个真实的邮箱呢？我找了一个聚合的api，貌似可以用，大概是这么描述的：\\n\\n接口地址：http://v.juhe.cn/verifyemail/query\\n支持格式：json/xml\\n请求方式：http get\\n请求示例：http://v.juhe.cn/verifyemail/query?key=您申请的KEY&amp;email=info@mail.juhe.cn\\n接口备注：通过连接到邮件服务器并检查邮箱存在与否。\\n\\n问题是，它的要钱的，要出钱的事，生哥是不会干的，于是想了一下，把注册部分的代码改造了一下：\\n修改路由中的user.js，用户提交注册这样写：\\n// 用户注册\\n    router.post(\'/doReg\', function(req, res, next) {\\n        var errors;\\n        var userName = req.body.userName;\\n        var email = req.body.email;\\n        var password = req.body.password;\\n        var confirmPsd = req.body.confirmPassword;\\n//    数据校验\\n        if(!validator.isUserName(userName)){\\n            errors = \\\"用户名5-12个英文数字组合\\\";\\n        }\\n        if(!validator.isPsd(password) || !validator.isLength(password,6,12)){\\n            errors = \\\"6-12位，只能包含字母、数字和下划线\\\";\\n        }\\n        if(password !== confirmPsd)\\n        {\\n            errors = \\\"密码不匹配，请重新输入\\\";\\n        }\\n        if(!validator.isEmail(email)){\\n            errors = \\\"请填写正确的邮箱地址\\\";\\n        }\\n        if(errors){\\n            res.end(errors);\\n        }else{\\n            var regMsg = {\\n                email : email,\\n                userName : userName\\n            };\\n            system.sendEmail(settings.email_notice_user_reg,regMsg,function(err){\\n                if(err &amp;&amp; err == \'notCurrentEmail\'){\\n                    res.end(\'乱写邮箱被我发现了吧！\');\\n                }else{\\n                    //        邮箱和用户名都必须唯一\\n                    var query=User.find().or([{\'email\' : email},{userName : userName}]);\\n                    query.exec(function(err,user){\\n                        if(user.length &gt; 0){\\n                            errors = \\\"邮箱或用户名已存在！\\\";\\n                            res.end(errors);\\n                        }else{\\n                            var newPsd = DbOpt.encrypt(password,settings.encrypt_key);\\n                            req.body.password = newPsd;\\n                            //发送系统消息给管理员\\n                            siteFunc.sendSystemNoticeByType(req,res,\'reg\',userName);\\n\\n                            DbOpt.addOne(User,req, res)\\n                        }\\n                    });\\n                }\\n\\n            });\\n        }\\n    });\\n\\n先根据用户填写的邮箱发个邮件过去，因为DoraCMS用的nodemailer来发邮件，当邮件发送失败会返回错误码，这种情况是可以判断该邮箱不存在的，于是，我们根据返回的参数来判断是否可以进行注册，从源头上避免了乱用邮箱注册，如果邮箱是错误的：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_11_28_17_14_46_377_1001.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n就是这样了，如果存在就可以继续往下走咯，注册成功的同时也会顺便收到提醒邮件：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_11_28_17_17_7_744_1003.jpg\"},{\"type\":\"contents\",\"content\":\"\\n是不是比之前的处理方式好多呢？当然，再做一次邮件激活是再好不过了。如果你有更好的方法，记得留言哈！\\n\\n\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1448701243000.jpg','2015-11-28 09:18:28','2020-08-20 15:44:14'),(185,'第9天response 响应渲染 —跳转插件开发','跳转插件开发','2','1','','跳转插件','2',NULL,'','跳转功能，顾名思义是打开一个链接，却跳转到另一个网址链接。看起来很神秘，其实都是在响应头信息做文章。\n响应头的状态码设置为302，那么就表示要客户端进行跳转。','1','','','0:01',762,'2','0',NULL,0,'0',223125,'<h3>跳转插件开发</h3><p>跳转功能，顾名思义是打开一个链接，却跳转到另一个网址链接。看起来很神秘，其实都是在响应头信息做文章。</p><p>响应头的状态码设置为302，那么就表示要客户端进行跳转。而跳转到哪里就需要指定响应头的<code>Location</code>。理论就这些，落到实处才是重点，下面我们就开发这个跳转插件。</p><pre>module.exports&nbsp;=&nbsp;function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;res.redirect&nbsp;=&nbsp;function(url){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.writeHead(302,{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Location:&nbsp;location(req,url)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;next();&nbsp;&nbsp;&nbsp;&nbsp;\n}\n\n//&nbsp;返回要跳转的URL绝对地址\nfunction&nbsp;location(req,url){\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;如果是完整的网址\n&nbsp;&nbsp;&nbsp;&nbsp;if(/^http:\\/\\//.test(url)){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;url;\n&nbsp;&nbsp;&nbsp;&nbsp;}else&nbsp;if(/^\\//.test(url)){&nbsp;//&nbsp;如果是本地根目录网址\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&#39;http://&#39;&nbsp;+&nbsp;req.headers.host&nbsp;+&nbsp;url;\n&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&#39;http://&#39;&nbsp;+&nbsp;req.headers.host&nbsp;+&nbsp;&#39;/&#39;&nbsp;+&nbsp;req.url&nbsp;+&nbsp;&#39;/&#39;&nbsp;+&nbsp;url;\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;\n}</pre><p>哇！这代码有些复杂了，其实没什么，location方法是用来返回三种不同的url形式，我们用一下例子做个说明。</p><p>在<code>index.js</code>中加入以下代码：</p><pre>exports.text&nbsp;=&nbsp;require(&quot;./lib/redirect&quot;);</pre><p>通过location方法，要达到的效果是：</p><ul class=\" list-paddingleft-2\"><li><p><a href=\"http://google.com\">http://google.com</a> &nbsp;直接返回 <a href=\"http://google.com\">http://google.com</a></p></li><li><p>/url2 返回 <a href=\"http://xxxxx/url2\">http://xxxxx/url2</a></p></li><li><p>url2 返回 <a href=\"http://xxxxx/url/url2\">http://xxxxx/url/url2</a></p></li></ul><p>下面做一个例子，来试验这几种用法：</p><pre>var&nbsp;fk&nbsp;=&nbsp;require(&quot;../..&quot;)\n&nbsp;&nbsp;&nbsp;,App&nbsp;=&nbsp;fk.App\n&nbsp;&nbsp;&nbsp;,redirect&nbsp;=&nbsp;fk.redirect\n&nbsp;&nbsp;&nbsp;,text&nbsp;=&nbsp;fk.text\n&nbsp;&nbsp;&nbsp;,app&nbsp;=&nbsp;new&nbsp;App;\n\n&nbsp;&nbsp;&nbsp;app.use(fk.text);\n&nbsp;&nbsp;&nbsp;app.use(fk.redirect);&nbsp;//&nbsp;加载跳转插件\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.get(&quot;/url1&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.redirect(&quot;http://baidu.com&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.get(&quot;/url2&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.redirect(&#39;/1url&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.get(&quot;/url3&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.redirect(&quot;2url&quot;)\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.get(&quot;/1url&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.text(&quot;1&nbsp;url&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.get(&quot;/url3/:u&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.text(req.params.u);\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.listen(3000)</pre><p>以下是视频演示</p><hr/><p><embed width=\"480\" height=\"400\" align=\"middle\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" quality=\"high\" allowfullscreen=\"true\" src=\"http://static.video.qq.com/TPout.swf?vid=z0116rzujj7\"/></p><hr/>','[{\"type\":\"contents\",\"content\":\"跳转插件开发\\n跳转功能，顾名思义是打开一个链接，却跳转到另一个网址链接。看起来很神秘，其实都是在响应头信息做文章。\\n响应头的状态码设置为302，那么就表示要客户端进行跳转。而跳转到哪里就需要指定响应头的Location。理论就这些，落到实处才是重点，下面我们就开发这个跳转插件。\\nmodule.exports = function(req,res,next){\\n    res.redirect = function(url){\\n        res.writeHead(302,{\\n            Location: location(req,url)\\n        })\\n        res.end();\\n    }\\n    next();    \\n}\\n\\n// 返回要跳转的URL绝对地址\\nfunction location(req,url){\\n    // 如果是完整的网址\\n    if(/^http:\\\\/\\\\//.test(url)){\\n        return url;\\n    }else if(/^\\\\//.test(url)){ // 如果是本地根目录网址\\n        return \'http://\' + req.headers.host + url;\\n    }else{\\n        return \'http://\' + req.headers.host + \'/\' + req.url + \'/\' + url;\\n    }  \\n}\\n哇！这代码有些复杂了，其实没什么，location方法是用来返回三种不同的url形式，我们用一下例子做个说明。\\n在index.js中加入以下代码：\\nexports.text = require(\\\"./lib/redirect\\\");\\n通过location方法，要达到的效果是：\\nhttp://google.com  直接返回 http://google.com\\n/url2 返回 http://xxxxx/url2\\nurl2 返回 http://xxxxx/url/url2\\n\\n下面做一个例子，来试验这几种用法：\\nvar fk = require(\\\"../..\\\")\\n   ,App = fk.App\\n   ,redirect = fk.redirect\\n   ,text = fk.text\\n   ,app = new App;\\n\\n   app.use(fk.text);\\n   app.use(fk.redirect); // 加载跳转插件\\n\\n\\n    app.get(\\\"/url1\\\",function(req,res){\\n        res.redirect(\\\"http://baidu.com\\\");\\n    })\\n\\n    app.get(\\\"/url2\\\",function(req,res){\\n        res.redirect(\'/1url\');\\n    })\\n\\n    app.get(\\\"/url3\\\",function(req,res){\\n        res.redirect(\\\"2url\\\")\\n    })\\n\\n    app.get(\\\"/1url\\\",function(req,res){\\n        res.text(\\\"1 url\\\");\\n    })\\n\\n    app.get(\\\"/url3/:u\\\",function(req,res){\\n        res.text(req.params.u);\\n    })\\n\\n\\n    app.listen(3000)\\n以下是视频演示\\n&lt;embed width=\\\"480\\\" height=\\\"400\\\" align=\\\"middle\\\" type=\\\"application/x-shockwave-flash\\\" allowscriptaccess=\\\"always\\\" quality=\\\"high\\\" allowfullscreen=\\\"true\\\" src=\\\"http://static.video.qq.com/TPout.swf?vid=z0116rzujj7\\\"&gt;\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445235462000.jpg','2015-10-19 06:22:10','2020-08-20 15:44:18'),(186,'ETag助力站点提交sitemap ~对站点服务器如何配置ETag','对站点服务器如何配置ETag','2','1','','ETag','2',NULL,'','最近百度准备开放sitemap，可谓对站长是个利好的消息，可以增加百度对站点抓取力度，之前站长往往会遇到站点老不收录的问题，想必在这次动作中会有所改观吧。但是百度强烈建议对sitemap开启etag，如何操作呢？','1','','','0:01',762,'2','0',NULL,0,'0',223178,'<h3 class=\"info-title\" style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_9_23_8_46_10_462_1002.jpg\" title=\"\" alt=\"QQ截图20150923084424.jpg\"/></h3><h3 class=\"info-title\">最近百度准备开放sitemap，可谓对站长是个利好的消息，可以增加百度对站点抓取力度，之前站长往往会遇到站点老不收录的问题，想必在这次动作中会有所改观吧。但是百度强烈建议对sitemap开启etag，有神马好处呢？官网是这么介绍的：</h3><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_9_23_8_47_25_545_1003.jpg\" title=\"\" alt=\"QQ截图20150923084730.jpg\"/></p><p><br/></p><p>下面为具体操作方法</p><h3 class=\"info-title\">【链接提交】ETag助力站点提交sitemap ~对站点服务器如何配置ETag</h3><p>原文链接：http://zhanzhang.baidu.com/college/articleinfo?id=457</p><h2 name=\"h2_article_title1\">一、Apache</h2><p><br/></p><p>Apache根据配置文件中的配置来设置Etag值，默认的Apache的FileEtag设置为：<br/>&nbsp; &nbsp; &nbsp; &nbsp;FileEtagINode Mtime Size<br/>&nbsp; &nbsp; &nbsp; &nbsp;也就是根据这三个属性来生成Etag值，他们之间通过一些算法来实现，并输出成hex的格式，相邻属性之间用-分隔，比如：&quot;2e681a-6-5d044840&quot;，这里面的三个段，分别代表了INode，MTime，Size根据算法算出的值的Hex格式，可以改变Apache的FileEtag设置，比如设置成FileEtagSize,那么得到的Etag可能为：&quot;6&quot;，设置了几个段，Etag值就有几个段。</p><p><strong>&nbsp;详细配置：</strong></p><p><strong>步骤1<br/></strong><strong>&nbsp; &nbsp; &nbsp; &nbsp;</strong>在要启用ETag的目录下增加.htaccess文件并在其中增加一行，如图：FileETagMTime Size</p><p><img src=\"http://bs.baidu.com/zhanzhang/files/085801442457344.png\"/></p><p>以覆盖默认的Innode MTime Size的ETag，因为默认的ETag使用到的Innode会导致相同的文件在分布式服务器上产生的ETag不同。<br/></p><p><strong>步骤</strong><span lang=\"EN-US\"><strong>2<br/></strong></span>&nbsp; &nbsp; &nbsp; &nbsp;如果<span lang=\"EN-US\">.htacces</span>文件已经存在，请确保要启用<span lang=\"EN-US\">ETag</span>的目录<span lang=\"EN-US\">/.htacces</span>文件中没有FileETagNone。如果存在<span lang=\"EN-US\">FileETag None</span>，请删去该行。</p><p>检查没有用mod_headers将ETag除去，即httpd.conf文件中没有出现下面的语句，<br/>&nbsp; &nbsp; &nbsp; &nbsp;LoadModuleheaders_module modules/mod_headers.so&nbsp;<br/>&nbsp; &nbsp; &nbsp; &nbsp;Headerunset ETag<img src=\"http://bs.baidu.com/zhanzhang/files/099591442457343.png\"/><br/>如果出现如图情况，请删除<span lang=\"EN-US\">Headerunset ETag</span>这一行。</p><p><strong>步骤</strong><span lang=\"EN-US\"><strong>3 &nbsp; &nbsp; &nbsp;</strong></span>重新启动<span lang=\"EN-US\">httpd</span>，就启用<span lang=\"EN-US\">ETag</span>了。</p><h2><span lang=\"EN-US\" name=\"h2_article_title1\">二、Nginx</span></h2><p><span lang=\"EN-US\" name=\"h2_article_title1\"><br/></span></p><p>步骤<span lang=\"EN-US\">1<br/></span>&nbsp; &nbsp; &nbsp; &nbsp;确认<span lang=\"EN-US\">Nginx</span>版本，命令：<span lang=\"EN-US\">Nginx</span>安装目录<span lang=\"EN-US\">/sbin/nginx&amp;ndash;v</span>，</p><p><img src=\"http://bs.baidu.com/zhanzhang/files/089551442457343.png\"/></p><p>版本为<span lang=\"EN-US\">1.7.3</span>及更高，继续步骤<span lang=\"EN-US\">2</span>；版本为<span lang=\"EN-US\">1.7.3</span>以下，<span lang=\"EN-US\">1.3.3</span>及以上，进行步骤<span lang=\"EN-US\">3</span>；版本为<span lang=\"EN-US\">1.3.3</span>以下，不支持<span lang=\"EN-US\">ETag</span>，请升级您的<span lang=\"EN-US\">Nginx</span>。</p><p>步骤<span lang=\"EN-US\">2<br/></span>&nbsp; &nbsp; &nbsp; &nbsp;确认没有关闭<span lang=\"EN-US\">ETag</span>：打开<span lang=\"EN-US\">Nginx</span>的配置文件<span lang=\"EN-US\">nginx.conf(</span>默认位置<span lang=\"EN-US\">Nginx</span>安装目录<span lang=\"EN-US\">/conf/)</span>，确保其中没有出现<span lang=\"EN-US\">etagoff;</span>，下图为出现的情况，请将此行删除。</p><p><img src=\"http://bs.baidu.com/zhanzhang/files/099881442457340.png\"/></p><p>确认没有使用<span lang=\"EN-US\">ngx_headers_more</span>清除<span lang=\"EN-US\">ETag</span>头：同样在配置文件中不能出现如下语句的任意一句，如果出现请将其删除。</p><p><img src=\"http://bs.baidu.com/zhanzhang/files/091721442457344.png\"/><br/>重新启动<span lang=\"EN-US\">Nginx</span>，就启用<span lang=\"EN-US\">ETag</span>功能了。</p><p>步骤<span lang=\"EN-US\">3</span></p><p>查看是否开启了<span lang=\"EN-US\">gzip</span>，且是否和<span lang=\"EN-US\">etag</span>出现冲突，出现冲突去步骤<span lang=\"EN-US\">4</span>，没有去步骤<span lang=\"EN-US\">2。<br/></span>打开<span lang=\"EN-US\">Nginx</span>的配置文件<span lang=\"EN-US\">nginx.conf(</span>默认位置<span lang=\"EN-US\">Nginx</span>安装目录<span lang=\"EN-US\">/conf/)</span>，其中出现<span lang=\"EN-US\">gzip on</span>；语句证明开启了<span lang=\"EN-US\">gzip</span>，如图</p><p><img src=\"http://bs.baidu.com/zhanzhang/files/061911442457341.png\"/></p><p>开启gzip时，可能与etag出现冲突，用浏览器多次请求此网站的静态元素，如果只返回200，不返回304，证明存在冲突，请去步骤4；没有冲突去步骤2。</p><p>步骤4<br/>&nbsp; &nbsp; &nbsp; &nbsp; 请关闭gzip，即将上一步中的gzipon;改为gzip off；然后去步骤2。</p><p>若不想关闭gzip，并要开启ETag，同时仍要坚持使用当前的Nginx版本，只能修改源码并重新编译。<br/>下载此版本安装包并解压，将其目录下/src/http/modules/ngx_http_gzip_filter_module.c<br/>文件中约309行左右的ngx_http_clear_etag(r);一行注释掉或删掉。如下图<img src=\"http://bs.baidu.com/zhanzhang/files/017681442457343.png\"/></p><p><span lang=\"EN-US\"><o:p></o:p></span></p><p style=\"text-align:center;\"><span lang=\"EN-US\">如果没有找到<span lang=\"EN-US\">ngx_http_clear_etag(r);</span>而是发现<span lang=\"EN-US\">ngx_http_weak_etag(r);</span>如下图，证明此<span lang=\"EN-US\">Nginx</span></span></p><p>没有<span lang=\"EN-US\">gzip</span>和<span lang=\"EN-US\">etag</span>冲突的问题，不必进行任何修改。<br/><img src=\"http://bs.baidu.com/zhanzhang/files/092721442457344.png\"/>重新编译源码安装<span lang=\"EN-US\">Nginx</span>，解决这个冲突，然后去步骤<span lang=\"EN-US\">2</span>。</p><h2><span lang=\"EN-US\" name=\"h2_article_title1\">三、IIS</span></h2><p><span lang=\"EN-US\" name=\"h2_article_title1\"><br/></span></p><p><span lang=\"EN-US\">IIS7</span>是默认开启<span lang=\"EN-US\">ETag</span>的，如果没有<span lang=\"EN-US\">ETag</span>，请按以下步骤设置。<span lang=\"EN-US\"><o:p></o:p></span></p><p>打开<span lang=\"EN-US\">Internet Information Services (IIS) Manager</span>，如图双击<span lang=\"EN-US\">HTTP</span>响应头部<span lang=\"EN-US\">(HTTPResponse Headers),<br/><img src=\"http://bs.baidu.com/zhanzhang/files/031411442457341.png\"/><span lang=\"EN-US\">&nbsp;&nbsp;</span>选择<span lang=\"EN-US\">No Grouping</span>标签，在空白处右键选择<span lang=\"EN-US\">Add</span>。<br/></span></p><p style=\"text-align:left;\"><img src=\"http://bs.baidu.com/zhanzhang/files/032701442457343.png\"/><span lang=\"EN-US\">&nbsp;</span>设置<span lang=\"EN-US\">Name</span>为<span lang=\"EN-US\">ETag</span>，<span lang=\"EN-US\">Value</span>为双引号</p><p style=\"text-align:left;\"><img src=\"http://bs.baidu.com/zhanzhang/files/088241442457341.png\"/>配置<span lang=\"EN-US\">web.config:­</span></p><p><span lang=\"EN-US\">&lt;system.webServer&gt;<o:p></o:p></span></p><p><span lang=\"EN-US\">&nbsp;&nbsp;...<o:p></o:p></span></p><p><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;httpProtocol&gt;<o:p></o:p></span></p><p><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;customHeaders&gt;<o:p></o:p></span></p><p><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;add name=&quot;ETag&quot;value=&quot;&amp;quot;&amp;quot;&quot; /&gt;<o:p></o:p></span></p><p><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/customHeaders&gt;<o:p></o:p></span></p><p><span lang=\"EN-US\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/httpProtocol&gt;<o:p></o:p></span></p><p><span lang=\"EN-US\">&nbsp;&nbsp;...<o:p></o:p></span></p><p><span lang=\"EN-US\">&lt;/system.webServer&gt;<o:p></o:p></span></p><p>完成。<br/><img src=\"http://bs.baidu.com/zhanzhang/files/017071442457342.png\"/></p><p>如果大家对ETag还有任何的疑问可以到站长社区［站长工具］<a id=\"thread_subject\" href=\"http://bbs.zhanzhang.baidu.com/thread-27774-1-1.html\">ETag助力Sitemap讨论帖</a>中进行讨论。<br/></p><p><br/></p>','[{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_9_23_8_46_10_462_1002.jpg\"},{\"type\":\"contents\",\"content\":\"\\n最近百度准备开放sitemap，可谓对站长是个利好的消息，可以增加百度对站点抓取力度，之前站长往往会遇到站点老不收录的问题，想必在这次动作中会有所改观吧。但是百度强烈建议对sitemap开启etag，有神马好处呢？官网是这么介绍的：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_9_23_8_47_25_545_1003.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n下面为具体操作方法\\n【链接提交】ETag助力站点提交sitemap ~对站点服务器如何配置ETag\\n原文链接：http://zhanzhang.baidu.com/college/articleinfo?id=457\\n一、Apache\\n\\nApache根据配置文件中的配置来设置Etag值，默认的Apache的FileEtag设置为：\\n       FileEtagINode Mtime Size\\n       也就是根据这三个属性来生成Etag值，他们之间通过一些算法来实现，并输出成hex的格式，相邻属性之间用-分隔，比如：\\\"2e681a-6-5d044840\\\"，这里面的三个段，分别代表了INode，MTime，Size根据算法算出的值的Hex格式，可以改变Apache的FileEtag设置，比如设置成FileEtagSize,那么得到的Etag可能为：\\\"6\\\"，设置了几个段，Etag值就有几个段。\\n 详细配置：\\n步骤1\\n       在要启用ETag的目录下增加.htaccess文件并在其中增加一行，如图：FileETagMTime Size\\n\"},{\"type\":\"image\",\"content\":\"http://bs.baidu.com/zhanzhang/files/085801442457344.png\"},{\"type\":\"contents\",\"content\":\"\\n以覆盖默认的Innode MTime Size的ETag，因为默认的ETag使用到的Innode会导致相同的文件在分布式服务器上产生的ETag不同。\\n步骤2\\n       如果.htacces文件已经存在，请确保要启用ETag的目录/.htacces文件中没有FileETagNone。如果存在FileETag None，请删去该行。\\n检查没有用mod_headers将ETag除去，即httpd.conf文件中没有出现下面的语句，\\n       LoadModuleheaders_module modules/mod_headers.so \\n       Headerunset ETag\"},{\"type\":\"image\",\"content\":\"http://bs.baidu.com/zhanzhang/files/099591442457343.png\"},{\"type\":\"contents\",\"content\":\"\\n如果出现如图情况，请删除Headerunset ETag这一行。\\n步骤3      重新启动httpd，就启用ETag了。\\n二、Nginx\\n\\n\\n步骤1\\n       确认Nginx版本，命令：Nginx安装目录/sbin/nginx&amp;ndash;v，\\n\"},{\"type\":\"image\",\"content\":\"http://bs.baidu.com/zhanzhang/files/089551442457343.png\"},{\"type\":\"contents\",\"content\":\"\\n版本为1.7.3及更高，继续步骤2；版本为1.7.3以下，1.3.3及以上，进行步骤3；版本为1.3.3以下，不支持ETag，请升级您的Nginx。\\n步骤2\\n       确认没有关闭ETag：打开Nginx的配置文件nginx.conf(默认位置Nginx安装目录/conf/)，确保其中没有出现etagoff;，下图为出现的情况，请将此行删除。\\n\"},{\"type\":\"image\",\"content\":\"http://bs.baidu.com/zhanzhang/files/099881442457340.png\"},{\"type\":\"contents\",\"content\":\"\\n确认没有使用ngx_headers_more清除ETag头：同样在配置文件中不能出现如下语句的任意一句，如果出现请将其删除。\\n\"},{\"type\":\"image\",\"content\":\"http://bs.baidu.com/zhanzhang/files/091721442457344.png\"},{\"type\":\"contents\",\"content\":\"\\n重新启动Nginx，就启用ETag功能了。\\n步骤3\\n查看是否开启了gzip，且是否和etag出现冲突，出现冲突去步骤4，没有去步骤2。\\n打开Nginx的配置文件nginx.conf(默认位置Nginx安装目录/conf/)，其中出现gzip on；语句证明开启了gzip，如图\\n\"},{\"type\":\"image\",\"content\":\"http://bs.baidu.com/zhanzhang/files/061911442457341.png\"},{\"type\":\"contents\",\"content\":\"\\n开启gzip时，可能与etag出现冲突，用浏览器多次请求此网站的静态元素，如果只返回200，不返回304，证明存在冲突，请去步骤4；没有冲突去步骤2。\\n步骤4\\n        请关闭gzip，即将上一步中的gzipon;改为gzip off；然后去步骤2。\\n若不想关闭gzip，并要开启ETag，同时仍要坚持使用当前的Nginx版本，只能修改源码并重新编译。\\n下载此版本安装包并解压，将其目录下/src/http/modules/ngx_http_gzip_filter_module.c\\n文件中约309行左右的ngx_http_clear_etag(r);一行注释掉或删掉。如下图\"},{\"type\":\"image\",\"content\":\"http://bs.baidu.com/zhanzhang/files/017681442457343.png\"},{\"type\":\"contents\",\"content\":\"\\n\\n如果没有找到ngx_http_clear_etag(r);而是发现ngx_http_weak_etag(r);如下图，证明此Nginx\\n没有gzip和etag冲突的问题，不必进行任何修改。\\n\"},{\"type\":\"image\",\"content\":\"http://bs.baidu.com/zhanzhang/files/092721442457344.png\"},{\"type\":\"contents\",\"content\":\"重新编译源码安装Nginx，解决这个冲突，然后去步骤2。\\n三、IIS\\n\\n\\nIIS7是默认开启ETag的，如果没有ETag，请按以下步骤设置。\\n打开Internet Information Services (IIS) Manager，如图双击HTTP响应头部(HTTPResponse Headers),\\n\"},{\"type\":\"image\",\"content\":\"http://bs.baidu.com/zhanzhang/files/031411442457341.png\"},{\"type\":\"contents\",\"content\":\"  选择No Grouping标签，在空白处右键选择Add。\\n\\n\"},{\"type\":\"image\",\"content\":\"http://bs.baidu.com/zhanzhang/files/032701442457343.png\"},{\"type\":\"contents\",\"content\":\" 设置Name为ETag，Value为双引号\\n\"},{\"type\":\"image\",\"content\":\"http://bs.baidu.com/zhanzhang/files/088241442457341.png\"},{\"type\":\"contents\",\"content\":\"配置web.config:­\\n&lt;system.webServer&gt;\\n  ...\\n       &lt;httpProtocol&gt;\\n           &lt;customHeaders&gt;\\n                &lt;add name=\\\"ETag\\\"value=\\\"&amp;quot;&amp;quot;\\\" /&gt;\\n           &lt;/customHeaders&gt;\\n       &lt;/httpProtocol&gt;\\n  ...\\n&lt;/system.webServer&gt;\\n完成。\\n\"},{\"type\":\"image\",\"content\":\"http://bs.baidu.com/zhanzhang/files/017071442457342.png\"},{\"type\":\"contents\",\"content\":\"\\n如果大家对ETag还有任何的疑问可以到站长社区［站长工具］ETag助力Sitemap讨论帖中进行讨论。\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444894693000.jpg','2015-09-23 00:49:06','2020-08-20 15:44:24'),(187,'第7天 Post方法与上传——上传的数据结构','上传的数据结构','2','1','','数据结构','2',NULL,'','表单上传来的请求，也是采用post方法，不过表单的写法和发送来的数据结构都不同。','1','','','0:01',762,'2','0',NULL,0,'0',223183,'<h3>上传的数据结构</h3><p>表单上传来的请求，也是采用post方法，不过表单的写法和发送来的数据结构都不同。表单的写法如下：</p><pre>&lt;form&nbsp;method=&quot;post&quot;&nbsp;action=&quot;&nbsp;...&nbsp;&quot;&nbsp;&nbsp;enctype=&quot;multipart/form-data&quot;&gt;</pre><p>要让表单支持上传，还必须加入 <code>enctype=&quot;multipart/form-data&quot;</code> 属性，至于上传的数据结构，我们需要编写一个表单界面，然后服务器端读取请求信息体，来看一下数据结构。</p><p>表单代码如下：</p><pre>&lt;!doctype&nbsp;html&gt;\n&lt;html&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;write&nbsp;article&lt;/title&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;body&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;form&nbsp;action=&quot;http://localhost:3000/post&quot;&nbsp;enctype=&quot;multipart/form-data&quot;&nbsp;method=&quot;post&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;&lt;input&nbsp;type=&quot;text&quot;&nbsp;name=&quot;title&quot;/&gt;&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;&lt;textarea&nbsp;type=&quot;text&quot;&nbsp;name=&quot;content&quot;&nbsp;&gt;&lt;/textarea&gt;&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;&lt;input&nbsp;type=&quot;file&quot;&nbsp;name=&quot;img&quot;/&gt;&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;&nbsp;type=&quot;submit&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/form&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/body&gt;\n&lt;/html&gt;</pre><p>然后编写服务器端代码：</p><pre>var&nbsp;fk&nbsp;=&nbsp;require(&quot;../..&quot;)\n&nbsp;&nbsp;&nbsp;,App&nbsp;=&nbsp;fk.App\n&nbsp;&nbsp;&nbsp;,app&nbsp;=&nbsp;new&nbsp;App\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.post(&quot;/post&quot;,function(req,res){\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;data&nbsp;=&nbsp;“”;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req.on(&quot;data&quot;,function(chunk){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data&nbsp;+=&nbsp;chunk;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req.on(&quot;end&quot;,function(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(data.toString());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.listen(3000)</pre><p>打开表单页面，输入如下信息：&nbsp;</p><p><img alt=\"\" src=\"http://jsera.qiniudn.com/picture/brighthas-gke52NJofx\"/>&nbsp;</p><p>提交后，在服务器终端会打印出：</p><pre>-----------------------------7ddc8352a02ea\nContent-Disposition:&nbsp;form-data;&nbsp;name=&quot;title&quot;\n\ntitle\n-----------------------------7ddc8352a02ea\nContent-Disposition:&nbsp;form-data;&nbsp;name=&quot;content&quot;\n\ncontent\n-----------------------------7ddc8352a02ea\nContent-Disposition:&nbsp;form-data;&nbsp;name=&quot;img&quot;;&nbsp;filename=&quot;favicon2.ico&quot;\nContent-Type:&nbsp;image/x-icon\n\n（图片数据略）\n-----------------------------7ddc8352a02ea--</pre><p>看起来很奇怪，不过仔细分析就会发现 <code>------7ddc8352a02ea</code> 表示数据起始，<code>------7ddc8352a02ea--</code> 表示数据结束。下面把\\r\\n也显示出来。</p><pre>-----------------------------7ddc8352a02ea&nbsp;\\r\\n\nContent-Disposition:&nbsp;form-data;&nbsp;name=&quot;title&quot;&nbsp;\\r\\n\\r\\n\n\ntitle&nbsp;\\r\\n\n-----------------------------7ddc8352a02ea&nbsp;\\r\\n\nContent-Disposition:&nbsp;form-data;&nbsp;name=&quot;content&quot;&nbsp;\\r\\n\\r\\n\n\ncontent&nbsp;\\r\\n\n-----------------------------7ddc8352a02ea&nbsp;\\r\\n\\r\\n\nContent-Disposition:&nbsp;form-data;&nbsp;name=&quot;img&quot;;&nbsp;filename=&quot;favicon2.ico&quot;&nbsp;\\r\\n\nContent-Type:&nbsp;image/x-icon&nbsp;\\r\\n\\r\\n\n\n（图片数据略）&nbsp;\\r\\n\n-----------------------------7ddc8352a02ea--&nbsp;\\r\\n</pre><p>通过这样的分析，我们知道了Content-Disposition: form-data; name=&quot;content&quot; 信息头和信息体之间是 <code>\\r\\n\\r\\n</code>。</p><p>这里还有个问题，就是 <code>------7ddc8352a02ea</code> 这个信息分割字符串是每次提交都不同，那如何得到他呢？ 可以通过，req.headers[&quot;content-type&quot;] 得到，不过还需要一些处理。</p><p>到此为止，我们分析并收集了一些信息，对于扩展post.js插件很有帮助。大体分析就到这里，下一节将实际编码，来扩展插件功能。</p>','[{\"type\":\"contents\",\"content\":\"上传的数据结构\\n表单上传来的请求，也是采用post方法，不过表单的写法和发送来的数据结构都不同。表单的写法如下：\\n&lt;form method=\\\"post\\\" action=\\\" ... \\\"  enctype=\\\"multipart/form-data\\\"&gt;\\n要让表单支持上传，还必须加入 enctype=\\\"multipart/form-data\\\" 属性，至于上传的数据结构，我们需要编写一个表单界面，然后服务器端读取请求信息体，来看一下数据结构。\\n表单代码如下：\\n&lt;!doctype html&gt;\\n&lt;html&gt;\\n    &lt;head&gt;\\n        &lt;title&gt;write article&lt;/title&gt;\\n    &lt;/head&gt;\\n    &lt;body&gt;\\n        &lt;form action=\\\"http://localhost:3000/post\\\" enctype=\\\"multipart/form-data\\\" method=\\\"post\\\"&gt;\\n            &lt;p&gt;&lt;input type=\\\"text\\\" name=\\\"title\\\"/&gt;&lt;/p&gt;\\n            &lt;p&gt;&lt;textarea type=\\\"text\\\" name=\\\"content\\\" &gt;&lt;/textarea&gt;&lt;/p&gt;\\n            &lt;p&gt;&lt;input type=\\\"file\\\" name=\\\"img\\\"/&gt;&lt;/p&gt;\\n            &lt;input  type=\\\"submit\\\" /&gt;\\n        &lt;/form&gt;\\n    &lt;/body&gt;\\n&lt;/html&gt;\\n然后编写服务器端代码：\\nvar fk = require(\\\"../..\\\")\\n   ,App = fk.App\\n   ,app = new App\\n\\n\\n    app.post(\\\"/post\\\",function(req,res){\\n\\n        var data = “”;\\n        req.on(\\\"data\\\",function(chunk){\\n            data += chunk;\\n        })\\n        req.on(\\\"end\\\",function(){\\n            console.log(data.toString());\\n        })\\n\\n    })\\n\\n\\n    app.listen(3000)\\n打开表单页面，输入如下信息： \\n\"},{\"type\":\"image\",\"content\":\"http://jsera.qiniudn.com/picture/brighthas-gke52NJofx\"},{\"type\":\"contents\",\"content\":\" \\n提交后，在服务器终端会打印出：\\n-----------------------------7ddc8352a02ea\\nContent-Disposition: form-data; name=\\\"title\\\"\\n\\ntitle\\n-----------------------------7ddc8352a02ea\\nContent-Disposition: form-data; name=\\\"content\\\"\\n\\ncontent\\n-----------------------------7ddc8352a02ea\\nContent-Disposition: form-data; name=\\\"img\\\"; filename=\\\"favicon2.ico\\\"\\nContent-Type: image/x-icon\\n\\n（图片数据略）\\n-----------------------------7ddc8352a02ea--\\n看起来很奇怪，不过仔细分析就会发现 ------7ddc8352a02ea 表示数据起始，------7ddc8352a02ea-- 表示数据结束。下面把\\\\r\\\\n也显示出来。\\n-----------------------------7ddc8352a02ea \\\\r\\\\n\\nContent-Disposition: form-data; name=\\\"title\\\" \\\\r\\\\n\\\\r\\\\n\\n\\ntitle \\\\r\\\\n\\n-----------------------------7ddc8352a02ea \\\\r\\\\n\\nContent-Disposition: form-data; name=\\\"content\\\" \\\\r\\\\n\\\\r\\\\n\\n\\ncontent \\\\r\\\\n\\n-----------------------------7ddc8352a02ea \\\\r\\\\n\\\\r\\\\n\\nContent-Disposition: form-data; name=\\\"img\\\"; filename=\\\"favicon2.ico\\\" \\\\r\\\\n\\nContent-Type: image/x-icon \\\\r\\\\n\\\\r\\\\n\\n\\n（图片数据略） \\\\r\\\\n\\n-----------------------------7ddc8352a02ea-- \\\\r\\\\n\\n通过这样的分析，我们知道了Content-Disposition: form-data; name=\\\"content\\\" 信息头和信息体之间是 \\\\r\\\\n\\\\r\\\\n。\\n这里还有个问题，就是 ------7ddc8352a02ea 这个信息分割字符串是每次提交都不同，那如何得到他呢？ 可以通过，req.headers[\\\"content-type\\\"] 得到，不过还需要一些处理。\\n到此为止，我们分析并收集了一些信息，对于扩展post.js插件很有帮助。大体分析就到这里，下一节将实际编码，来扩展插件功能。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444981794000.jpg','2015-10-16 07:52:19','2020-08-20 15:44:23'),(188,'第4天 路由——路由功能的实现','路由功能的实现','2','1','','路由功能的实现','2',NULL,'','首先要在App.js的构造函数内，加入 this._route_post_handles = {}和 this._route_get_handles = {}用于储存路由处理器。','1','','','0:01',762,'2','0',NULL,0,'0',222997,'<h3>路由功能的实现</h3><p>首先要在App.js的构造函数内，加入 <code>this._route_post_handles = {}</code>和 <code>this._route_get_handles = {}</code>用于储存路由处理器。</p><p>然后，我们在App.js的构造器内的handle函数，做一些改动。加入 <code>handle = self._route_get_handles[req.url]</code> 和 &nbsp;<code>handle = self._route_get_handles[req.url]</code> 代码 ，最后 handle(req,res) 执行就可以了。</p><p>而App.prototype.get / App.prototype.post 的代码也需要修改，修改十分简单，只要把handle注入到 self._route_get_handles 或 self._route_post_handles 里即可。</p><pre>App.prototype.get&nbsp;=&nbsp;function(route,handle){\n&nbsp;&nbsp;&nbsp;&nbsp;this._route_get_handles[route]&nbsp;=&nbsp;handle;\n}\n\nApp.prototype.post&nbsp;=&nbsp;function(route,handle){\n&nbsp;&nbsp;&nbsp;&nbsp;this._route_post_handles[route]&nbsp;=&nbsp;handle;\n}</pre><p>在编码过程中，有一处BUG，值得注意，就是在App.js构造函数的顶端代码：</p><pre>function&nbsp;App(){\n\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;handle(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(middleList.length&nbsp;===&nbsp;0){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.....</pre><p>这里 <code>if(middleList.length === 0){</code> 是个BUG，因为如果我们没有加入static或其他插件时，GET/POST路由处理器就不会被执行。所以删除了上面这段代码。这个代码的存在，在早期可能有用，但随着项目的迭代， 会修补很多历史性代码。</p><p>下一节，列出更改后的App.js代码。</p>','[{\"type\":\"contents\",\"content\":\"路由功能的实现\\n首先要在App.js的构造函数内，加入 this._route_post_handles = {}和 this._route_get_handles = {}用于储存路由处理器。\\n然后，我们在App.js的构造器内的handle函数，做一些改动。加入 handle = self._route_get_handles[req.url] 和  handle = self._route_get_handles[req.url] 代码 ，最后 handle(req,res) 执行就可以了。\\n而App.prototype.get / App.prototype.post 的代码也需要修改，修改十分简单，只要把handle注入到 self._route_get_handles 或 self._route_post_handles 里即可。\\nApp.prototype.get = function(route,handle){\\n    this._route_get_handles[route] = handle;\\n}\\n\\nApp.prototype.post = function(route,handle){\\n    this._route_post_handles[route] = handle;\\n}\\n在编码过程中，有一处BUG，值得注意，就是在App.js构造函数的顶端代码：\\nfunction App(){\\n\\n    function handle(req,res){\\n        if(middleList.length === 0){        \\n        }else{\\n        .....\\n这里 if(middleList.length === 0){ 是个BUG，因为如果我们没有加入static或其他插件时，GET/POST路由处理器就不会被执行。所以删除了上面这段代码。这个代码的存在，在早期可能有用，但随着项目的迭代， 会修补很多历史性代码。\\n下一节，列出更改后的App.js代码。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444892076000.jpg','2015-09-20 10:55:31','2020-08-20 15:44:24'),(189,'DoraCMS开源版本正式发布','DoraCMS开源版本正式发布','1','1','','doracms,内容管理系统,nodejs','2',NULL,'','DoraCMS从框架搭建开始至今已经走过了快四个月的时间，时间过得很快，DoraCMS的基础功能也趋于稳定，于是决定自今日起DoraCMS正式开源。','1','','','0:01',762,'2','0',NULL,1,'0',223473,'<p>&nbsp;&nbsp;DoraCMS从框架搭建开始至今已经走过了快四个月的时间，时间过得很快，DoraCMS的基础功能也趋于稳定，于是决定自今日起DoraCMS正式开源。</p><p>&nbsp; DoraCMS 特点</p><p>&nbsp;1、基于NodeJS编写，代码简单，易于入手<br/></p><p>&nbsp;2、支持无限级分类</p><p>&nbsp;3、支持无限属性拓展</p><p>&nbsp;4、支持类别模板，即不同类别可以定义不同模板和详情页</p><p>&nbsp;5、完善的seo机制。多方面考虑搜索引擎优化</p><p>&nbsp;6、80%代码注释，易二次开发</p><p>&nbsp;7、轻量级</p><p>&nbsp;8、完全开源</p><p>&nbsp; 为什么开源？</p><p>&nbsp;DoraCMS是我独立开发的基于NodeJs+express 的内容管理系统，包括了内容管理所必须的所有基础功能，但是个人的能力毕竟有限，很多东西想不全面，很多地方可能还有很大的问题或bug而一时难以发现。开源的目的，就是通过DoraCMS这个项目和广大的开发者一起去探索NodeJS相关技术方面的知识。初学者可以通过DoraCMS初步了解通过NodeJS开发内容管理系统的基本流程和方法；熟悉NodeJS的同学可以从中发现问题和拓展，在此也真诚希望使用DoraCMS做二次开发的童鞋们在发现问题或者有更好解决方案的时候及时在我的博客留下脚印或在&nbsp;<a href=\"https://git.oschina.net/doramart/DoraCMS\" target=\"_blank\" title=\"DoraCMS\">开源中国</a>&nbsp;上issues me，针对确实存在的问题和改善建议我都会仔细考虑并合入开源代码库中。</p><p>目前DoraCMS以获得开源中国推荐：</p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_51_28_328_1041.jpg\" title=\"\" alt=\"DoraCMS开源版本发布.jpg\"/></p><p><br/></p><p>所以，感兴趣的童鞋可以放心使用并做二次开发。</p><p><br/></p><p>已被开源中国作为开源软件收录：</p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_51_33_563_1042.jpg\" title=\"\" alt=\"DoraCMS开源版本发布1.jpg\"/></p><p><br/></p><p>开源只是开始，后续计划对DoraCMS在代码结构和模块化方面会有更大的变更，遵循的原则是，简单、易用、适合快速开发，我们拭目以待吧。</p><p><br/></p><p><br/></p><p>相关链接：&nbsp;</p><p><br/></p><p><a href=\"http://www.html-js.cn/details/Ey20NbBi.html\" target=\"_blank\" title=\"DoraCMS操作文档\">DoraCMS内容管理系统操作文档(一)</a></p><p><a href=\"http://www.html-js.cn/details/VkldQTPs.html\" target=\"_blank\" title=\"DoraCMS操作文档\">DoraCMS内容管理系统操作文档(二)</a></p><p><a href=\"http://7xkr1n.com1.z0.glb.clouddn.com/@/cms/DoraCMS开发指南.doc\" target=\"_blank\" title=\"DoraCMS开发文档\">DoraCMS内容管理系统开发文档</a>&nbsp;（右键链接另存为）</p><p><a href=\"https://git.oschina.net/doramart/DoraCMS\" target=\"_blank\" title=\"DoraCMS源码下载\">DoraCMS源码下载</a></p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"  DoraCMS从框架搭建开始至今已经走过了快四个月的时间，时间过得很快，DoraCMS的基础功能也趋于稳定，于是决定自今日起DoraCMS正式开源。\\n  DoraCMS 特点\\n 1、基于NodeJS编写，代码简单，易于入手\\n 2、支持无限级分类\\n 3、支持无限属性拓展\\n 4、支持类别模板，即不同类别可以定义不同模板和详情页\\n 5、完善的seo机制。多方面考虑搜索引擎优化\\n 6、80%代码注释，易二次开发\\n 7、轻量级\\n 8、完全开源\\n  为什么开源？\\n DoraCMS是我独立开发的基于NodeJs+express 的内容管理系统，包括了内容管理所必须的所有基础功能，但是个人的能力毕竟有限，很多东西想不全面，很多地方可能还有很大的问题或bug而一时难以发现。开源的目的，就是通过DoraCMS这个项目和广大的开发者一起去探索NodeJS相关技术方面的知识。初学者可以通过DoraCMS初步了解通过NodeJS开发内容管理系统的基本流程和方法；熟悉NodeJS的同学可以从中发现问题和拓展，在此也真诚希望使用DoraCMS做二次开发的童鞋们在发现问题或者有更好解决方案的时候及时在我的博客留下脚印或在 开源中国 上issues me，针对确实存在的问题和改善建议我都会仔细考虑并合入开源代码库中。\\n目前DoraCMS以获得开源中国推荐：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_51_28_328_1041.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n所以，感兴趣的童鞋可以放心使用并做二次开发。\\n\\n已被开源中国作为开源软件收录：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_51_33_563_1042.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n开源只是开始，后续计划对DoraCMS在代码结构和模块化方面会有更大的变更，遵循的原则是，简单、易用、适合快速开发，我们拭目以待吧。\\n\\n\\n相关链接： \\n\\nDoraCMS内容管理系统操作文档(一)\\nDoraCMS内容管理系统操作文档(二)\\nDoraCMS内容管理系统开发文档 （右键链接另存为）\\nDoraCMS源码下载\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444890076000.jpg','2015-08-18 14:14:32','2020-08-20 15:44:25'),(190,'Node.js API实例讲解——Buffer的写入方法','Buffer的写入方法','2','1','','nodejs教程,前端开发','2',NULL,'','Buffer的写入方法。node.js 为读取和写入Buffer对象的类型数据，提供了相关方法','1','','','0:01',762,'2','0',NULL,0,'0',223700,'<h3>Buffer的写入方法</h3><p>node.js 为读取和写入Buffer对象的类型数据，提供了相关方法。</p><h3 id=\"buf-writexxx-value-offset-noassert-\">buf.writeXXX(value, offset, [noAssert]);</h3><pre class=\"code\">value&nbsp;参数，要写入的值，这个值必须是整数或浮点数，不可省略\noffset&nbsp;参数，写入的起始位置，不可省略。\n\nnoAssert[可选]参数，\n默认false当超出buf的范围时会抛出异常，\n设置true超出buf范围不会抛出异常，写入范围内的byte，丢弃超出的部分。</pre><p>node.js 读取和写入数据，支持的类型有： Int8八位有符号整数、UInt8八位无符号整数、Int16LE/Int16BE十六位有符号整数、UInt16LE/UInt16BE十六位无符号整数、UInt32LE/UInt32BE三十二位无符号整数、Int32LE/Int32BE三十二位有符号整数、FloatLE/FloatBE三十二位单精度浮点数、DoubleLE/DoubleBE六十四位双精度浮点数。</p><p>首先我们通过写入一个整数，对比这几种数据结构。</p><p>例1</p><pre class=\"code\">var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer(4),&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;num&nbsp;=&nbsp;0x0c;&nbsp;//&nbsp;0x0c是整数12的十六进制形式\nbuf.fill();&nbsp;//&nbsp;清空\n\nbuf.writeInt8(num,0);\nconsole.log(buf);&nbsp;//buf.fill();\n\nbuf.writeUInt8(num,0);\nconsole.log(buf);&nbsp;//buf.fill();\n\nbuf.writeInt16BE(num,0);\nconsole.log(buf);&nbsp;//buf.fill();\n\nbuf.writeUInt16BE(num,0);\nconsole.log(buf);&nbsp;//buf.fill();\n\nbuf.writeInt16LE(num,0);\nconsole.log(buf);&nbsp;//buf.fill();\n\nbuf.writeUInt16LE(num,0);\nconsole.log(buf);&nbsp;//buf.fill();\n\nbuf.writeInt32BE(num,0);\nconsole.log(buf);&nbsp;//buf.fill();\n\nbuf.writeUInt32BE(num,0);\nconsole.log(buf);&nbsp;//buf.fill();\n\nbuf.writeInt32LE(num,0);\nconsole.log(buf);&nbsp;//buf.fill();\n\nbuf.writeUInt32LE(num,0);\nconsole.log(buf);&nbsp;//buf.fill();</pre><p>通过这个例子说明，LE 和 BE的区别是数据结构的排列顺序正好颠倒，例如Int16BE用&lt;00 0c=&quot;&quot;&gt;结构储存12，Int16LE用&lt;0c 00=&quot;&quot;&gt;结构储存。UIntXXX表示无符号IntXXX表示有符号。另外，我们温习一下，八位占用1个byte，16位占用2个byte，32位占用4个byte，64占用8个byte，位数的由来是因为一个byte有8个bit。位数越高表达的数的范围就越大。</p><p>浮点和整数大同小异，例：</p><pre class=\"code\">var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer(8),&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;num&nbsp;=&nbsp;210.567;\nbuf.fill();\n\nbuf.writeFloatBE(num,0);\nconsole.log(buf);&nbsp;//buf.fill();\n\nbuf.writeFloatLE(num,0);\nconsole.log(buf);&nbsp;//buf.fill();\n\nbuf.writeDoubleBE(num,0);\nconsole.log(buf);&nbsp;//buf.fill();\n\nbuf.writeDoubleLE(num,0);\nconsole.log(buf);&nbsp;//buf.fill</pre><p>还有一个buf.fill方法，用来填充Buffer对象的，但这个方法并不是表面理解的那样。<span class=\"invade-word\">god</span></p><p><span class=\"invade-word\">fuck</span>前面用到了不带参数的fill方法，可以清空整个Buffer对象。</p><p>下面我们详细分析一下这个方法的用法。</p><h3 id=\"buf-fill-value-offset-end-\">buf.fill(value, [offset], [end])</h3><pre class=\"code\">value&nbsp;参数，表示填充值&nbsp;[但这里要注意:fill内部只会用值数据的第一个byte进行填充]\noffset[可选]参数，填充的开始位置，默认0，如果超出buf范围会抛出异常。\nend[可选]参数，填充的结束位置，默认buf.length，如果超出buf范围会抛出异常。</pre><p>例1</p><pre class=\"code\">var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer(4);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n\nbuf.fill();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;清空\nconsole.log(buf);&nbsp;&nbsp;//var&nbsp;value&nbsp;=&nbsp;new&nbsp;Buffer(&quot;你好&quot;,&quot;utf16le&quot;);&nbsp;\nconsole.log(value);//buf.fill(&quot;你好&quot;);&nbsp;&nbsp;//&nbsp;填充整个buf\nconsole.log(buf);&nbsp;&nbsp;//</pre><p>这个例子我们看到“你好”占用的第一个字节 0x60 填充了整个buf，之所以采用utf16le，因为这是fill方法内部的默认编码。</p><p>例2</p><pre class=\"code\">var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer(4);&nbsp;&nbsp;\n\nbuf.fill(0);\nbuf.fill(&quot;你好&quot;,2);&nbsp;&nbsp;//&nbsp;填充buf的3~4的byte\nconsole.log(buf);&nbsp;&nbsp;&nbsp;&nbsp;//buf.fill(0);\nbuf.fill(&quot;你好&quot;,2,3);//&nbsp;填充buf的第三个byte\nconsole.log(buf);&nbsp;&nbsp;&nbsp;&nbsp;//</pre>','[{\"type\":\"contents\",\"content\":\"Buffer的写入方法\\nnode.js 为读取和写入Buffer对象的类型数据，提供了相关方法。\\nbuf.writeXXX(value, offset, [noAssert]);\\nvalue 参数，要写入的值，这个值必须是整数或浮点数，不可省略\\noffset 参数，写入的起始位置，不可省略。\\n\\nnoAssert[可选]参数，\\n默认false当超出buf的范围时会抛出异常，\\n设置true超出buf范围不会抛出异常，写入范围内的byte，丢弃超出的部分。\\nnode.js 读取和写入数据，支持的类型有： Int8八位有符号整数、UInt8八位无符号整数、Int16LE/Int16BE十六位有符号整数、UInt16LE/UInt16BE十六位无符号整数、UInt32LE/UInt32BE三十二位无符号整数、Int32LE/Int32BE三十二位有符号整数、FloatLE/FloatBE三十二位单精度浮点数、DoubleLE/DoubleBE六十四位双精度浮点数。\\n首先我们通过写入一个整数，对比这几种数据结构。\\n例1\\nvar buf = new Buffer(4), \\n    num = 0x0c; // 0x0c是整数12的十六进制形式\\nbuf.fill(); // 清空\\n\\nbuf.writeInt8(num,0);\\nconsole.log(buf); //buf.fill();\\n\\nbuf.writeUInt8(num,0);\\nconsole.log(buf); //buf.fill();\\n\\nbuf.writeInt16BE(num,0);\\nconsole.log(buf); //buf.fill();\\n\\nbuf.writeUInt16BE(num,0);\\nconsole.log(buf); //buf.fill();\\n\\nbuf.writeInt16LE(num,0);\\nconsole.log(buf); //buf.fill();\\n\\nbuf.writeUInt16LE(num,0);\\nconsole.log(buf); //buf.fill();\\n\\nbuf.writeInt32BE(num,0);\\nconsole.log(buf); //buf.fill();\\n\\nbuf.writeUInt32BE(num,0);\\nconsole.log(buf); //buf.fill();\\n\\nbuf.writeInt32LE(num,0);\\nconsole.log(buf); //buf.fill();\\n\\nbuf.writeUInt32LE(num,0);\\nconsole.log(buf); //buf.fill();\\n通过这个例子说明，LE 和 BE的区别是数据结构的排列顺序正好颠倒，例如Int16BE用&lt;00 0c=\\\"\\\"&gt;结构储存12，Int16LE用&lt;0c 00=\\\"\\\"&gt;结构储存。UIntXXX表示无符号IntXXX表示有符号。另外，我们温习一下，八位占用1个byte，16位占用2个byte，32位占用4个byte，64占用8个byte，位数的由来是因为一个byte有8个bit。位数越高表达的数的范围就越大。\\n浮点和整数大同小异，例：\\nvar buf = new Buffer(8), \\n    num = 210.567;\\nbuf.fill();\\n\\nbuf.writeFloatBE(num,0);\\nconsole.log(buf); //buf.fill();\\n\\nbuf.writeFloatLE(num,0);\\nconsole.log(buf); //buf.fill();\\n\\nbuf.writeDoubleBE(num,0);\\nconsole.log(buf); //buf.fill();\\n\\nbuf.writeDoubleLE(num,0);\\nconsole.log(buf); //buf.fill\\n还有一个buf.fill方法，用来填充Buffer对象的，但这个方法并不是表面理解的那样。god\\nfuck前面用到了不带参数的fill方法，可以清空整个Buffer对象。\\n下面我们详细分析一下这个方法的用法。\\nbuf.fill(value, [offset], [end])\\nvalue 参数，表示填充值 [但这里要注意:fill内部只会用值数据的第一个byte进行填充]\\noffset[可选]参数，填充的开始位置，默认0，如果超出buf范围会抛出异常。\\nend[可选]参数，填充的结束位置，默认buf.length，如果超出buf范围会抛出异常。\\n例1\\nvar buf = new Buffer(4);                      \\n\\nbuf.fill();        // 清空\\nconsole.log(buf);  //var value = new Buffer(\\\"你好\\\",\\\"utf16le\\\"); \\nconsole.log(value);//buf.fill(\\\"你好\\\");  // 填充整个buf\\nconsole.log(buf);  //\\n这个例子我们看到“你好”占用的第一个字节 0x60 填充了整个buf，之所以采用utf16le，因为这是fill方法内部的默认编码。\\n例2\\nvar buf = new Buffer(4);  \\n\\nbuf.fill(0);\\nbuf.fill(\\\"你好\\\",2);  // 填充buf的3~4的byte\\nconsole.log(buf);    //buf.fill(0);\\nbuf.fill(\\\"你好\\\",2,3);// 填充buf的第三个byte\\nconsole.log(buf);    //\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444890584000.jpg','2015-08-01 13:01:16','2020-08-20 15:44:26'),(191,'关于ejs模板引擎数据格式化的问题','关于ejs模板引擎数据格式化的问题','1','1','','nodejs,ejs','2',NULL,'','ejs 模板数据格式化问题，一直困扰了很久，网上关于类似的文章特别少，很多东西都需要自己尝试，今天在google上又搜了一下相关的文档，才终于解决，其实很简单，没有想象的复杂。','1','','','0:01',762,'2','0',NULL,0,'0',224589,'<p>&nbsp;&nbsp;&nbsp; ejs 模板数据格式化问题，一直困扰了很久，网上关于类似的文章特别少，很多东西都需要自己尝试，今天在google上又搜了一下相关的文档，才终于解决，其实很简单，没有想象的复杂。</p><p><br/></p><p>由于也是nodejs的初学者，还没有自己写框架的能力，本blog用的是nodeJs+express 的框架基础完成的，express 本身就集成了ejs，直接用就可以了。网上有这么介绍使用方法的：</p><p><br/></p><p style=\"text-align: center;\"><img style=\"width: 627px; height: 432px;\" alt=\"QQ截图20150622200159.png\" src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_6_22_20_4_18_663_1000.png\" title=\"\" height=\"432\" width=\"627\"/></p><p><br/></p><p>按照上述方法尝试，发现总会提示&nbsp; ejs 找不到，但是我的ejs是存在的，后来分析原因，可能是由于作者并没有使用express框架。废话不多说，介绍一下我的方法，和上述类似，就是有一点点区别：</p><p><br/></p><p>1、安装 moment ,日期格式化插件，轻量级</p><pre class=\"brush:js;toolbar:false\">npm&nbsp;install&nbsp;moment&nbsp;--save</pre><p></p><p>2、app.js 中加入</p><pre class=\"brush:js;toolbar:false\">//数据格式化\napp.locals.myDateFormat&nbsp;=&nbsp;function(date){\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;moment(date).format(&#39;HH:mm&nbsp;MM-DD-YYYY&#39;);\n};\n//字符截取\napp.locals.cutMoreWords&nbsp;=&nbsp;function(str,length){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;newStr&nbsp;=&nbsp;str;\n&nbsp;&nbsp;&nbsp;&nbsp;if(str.length&nbsp;&gt;&nbsp;length){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newStr&nbsp;=&nbsp;str.substring(0,length)&nbsp;+&nbsp;&quot;...&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;newStr;\n};</pre><p></p><p>3、前端引用：</p><pre class=\"brush:js;toolbar:false\">&lt;div&nbsp;class=&quot;col-md-9&nbsp;col-sm-9&nbsp;col-xs-12&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h2&gt;&lt;a&nbsp;href=&quot;/details/&lt;%=item._id%&gt;.html&quot;&gt;&lt;%=item.title%&gt;&lt;/a&gt;&lt;/h2&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;blog-des&quot;&gt;&lt;%-item.discription%&gt;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a&nbsp;href=&quot;/details/&lt;%=item._id%&gt;&quot;&nbsp;class=&quot;more&quot;&gt;查看更多&nbsp;&lt;i&nbsp;class=&quot;fa&nbsp;fa-long-arrow-right&quot;&gt;&lt;/i&gt;&lt;/a&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul&nbsp;class=&quot;blog-info&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;i&nbsp;class=&quot;fa&nbsp;fa-calendar&quot;&gt;&lt;/i&gt;&nbsp;&lt;%=myDateFormat(item.date)%&gt;&lt;/li&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;i&nbsp;class=&quot;fa&nbsp;fa-eye&quot;&gt;&lt;/i&gt;&nbsp;&lt;%=item.clickNum%&gt;&lt;/li&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;i&nbsp;class=&quot;fa&nbsp;fa-tags&quot;&gt;&lt;/i&gt;&nbsp;&lt;%=item.tags%&gt;&lt;/li&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ul&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;</pre><p>这里直接用 &lt;%=myDateFormat(item.date)%&gt;&nbsp; 来格式化数据就可以了，是不是很简单？<img src=\"http://img.baidu.com/hi/jx2/j_0007.gif\"/></p>','[{\"type\":\"contents\",\"content\":\"    ejs 模板数据格式化问题，一直困扰了很久，网上关于类似的文章特别少，很多东西都需要自己尝试，今天在google上又搜了一下相关的文档，才终于解决，其实很简单，没有想象的复杂。\\n\\n由于也是nodejs的初学者，还没有自己写框架的能力，本blog用的是nodeJs+express 的框架基础完成的，express 本身就集成了ejs，直接用就可以了。网上有这么介绍使用方法的：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_6_22_20_4_18_663_1000.png\"},{\"type\":\"contents\",\"content\":\"\\n\\n按照上述方法尝试，发现总会提示  ejs 找不到，但是我的ejs是存在的，后来分析原因，可能是由于作者并没有使用express框架。废话不多说，介绍一下我的方法，和上述类似，就是有一点点区别：\\n\\n1、安装 moment ,日期格式化插件，轻量级\\nnpm install moment --save\\n\\n2、app.js 中加入\\n//数据格式化\\napp.locals.myDateFormat = function(date){\\n    return moment(date).format(\'HH:mm MM-DD-YYYY\');\\n};\\n//字符截取\\napp.locals.cutMoreWords = function(str,length){\\n    var newStr = str;\\n    if(str.length &gt; length){\\n        newStr = str.substring(0,length) + \\\"...\\\"\\n    }\\n    return newStr;\\n};\\n\\n3、前端引用：\\n&lt;div class=\\\"col-md-9 col-sm-9 col-xs-12\\\"&gt;\\n                    &lt;h2&gt;&lt;a href=\\\"/details/&lt;%=item._id%&gt;.html\\\"&gt;&lt;%=item.title%&gt;&lt;/a&gt;&lt;/h2&gt;\\n                    &lt;div class=\\\"blog-des\\\"&gt;&lt;%-item.discription%&gt;&lt;/div&gt;\\n                    &lt;a href=\\\"/details/&lt;%=item._id%&gt;\\\" class=\\\"more\\\"&gt;查看更多 &lt;i class=\\\"fa fa-long-arrow-right\\\"&gt;&lt;/i&gt;&lt;/a&gt;\\n                    &lt;ul class=\\\"blog-info\\\"&gt;\\n                        &lt;li&gt;&lt;i class=\\\"fa fa-calendar\\\"&gt;&lt;/i&gt; &lt;%=myDateFormat(item.date)%&gt;&lt;/li&gt;\\n                        &lt;li&gt;&lt;i class=\\\"fa fa-eye\\\"&gt;&lt;/i&gt; &lt;%=item.clickNum%&gt;&lt;/li&gt;\\n                        &lt;li&gt;&lt;i class=\\\"fa fa-tags\\\"&gt;&lt;/i&gt; &lt;%=item.tags%&gt;&lt;/li&gt;\\n                    &lt;/ul&gt;\\n                &lt;/div&gt;\\n这里直接用 &lt;%=myDateFormat(item.date)%&gt;  来格式化数据就可以了，是不是很简单？\"},{\"type\":\"image\",\"content\":\"http://img.baidu.com/hi/jx2/j_0007.gif\"},{\"type\":\"contents\",\"content\":\"\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1434974039000.png','2015-07-02 03:37:28','2020-08-20 15:44:27'),(192,'Get与Post方法请求——更新后的代码','更新后的代码','2','1','','get方法,post方法','2',NULL,'','Get与Post方法请求更新后的代码','1','','','0:01',762,'2','0',NULL,0,'0',223397,'<h3>更新后的代码</h3><p>以下是今天更新后的代码：</p><p><code>App.js</code> 内容</p><pre>var&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\n\nmodule.exports&nbsp;=&nbsp;App;\n\nfunction&nbsp;App(){\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;插件有序列表\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;middleList&nbsp;=&nbsp;this._middleList&nbsp;=&nbsp;[];\n\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;self&nbsp;=&nbsp;this;\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;DOTO&nbsp;,&nbsp;&nbsp;GET方法的处理函数\n&nbsp;&nbsp;&nbsp;&nbsp;this._getHandle&nbsp;=&nbsp;null;\n\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;DOTO&nbsp;,&nbsp;&nbsp;POST方法的处理函数\n&nbsp;&nbsp;&nbsp;&nbsp;this._postHandle&nbsp;=&nbsp;null;\n\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;request事件响应函数\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;handle(req,res){\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(middleList.length&nbsp;===&nbsp;0){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;循环执行插件\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;middleIndex&nbsp;=&nbsp;0;&nbsp;//&nbsp;插件索引\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;execMiddle();\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;执行这个函数时，会自动执行下一个middle插件。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;至于这个函数的执行，是由插件所控制。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;next(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;middleIndex&nbsp;+=&nbsp;1;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;execMiddle();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;执行插件函数\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;execMiddle(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;middle&nbsp;=&nbsp;middleList[middleIndex];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(middle){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;middle(req,res,next);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;判断是GET还是POST方法\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch(req.method){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&quot;GET&quot;:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(self._getHandle){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._getHandle(req,res);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&quot;POST&quot;:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(self._postHandle){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._postHandle(req,res);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;this._server&nbsp;=&nbsp;http.createServer(handle);\n\n}\n\n//&nbsp;加入功能栈\nApp.prototype.use&nbsp;=&nbsp;function(middle){\n&nbsp;&nbsp;&nbsp;&nbsp;this._middleList.push(middle);\n}\n\nApp.prototype.get&nbsp;=&nbsp;function(handle){\n&nbsp;&nbsp;&nbsp;&nbsp;this._getHandle&nbsp;=&nbsp;handle;\n}\n\nApp.prototype.post&nbsp;=&nbsp;function(handle){\n&nbsp;&nbsp;&nbsp;&nbsp;this._postHandle&nbsp;=&nbsp;handle;\n}\n\n//&nbsp;监听端口\nApp.prototype.listen&nbsp;=&nbsp;function(){\n&nbsp;&nbsp;&nbsp;&nbsp;this._server.listen.apply(this._server,arguments);\n}</pre><hr/><p><code>static.js</code> 内容<span class=\"invade-word\"></span></p><pre>var&nbsp;url&nbsp;=&nbsp;require(&quot;url&quot;),\n&nbsp;&nbsp;&nbsp;&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\n\n//&nbsp;把URL转换成资源路径\nfunction&nbsp;url2path(url_str){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;urlObj&nbsp;=&nbsp;url.parse(url_str);&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;path&nbsp;=&nbsp;urlObj.path;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;path;\n}\n\nmodule.exports&nbsp;=&nbsp;function&nbsp;static(parent_path){\n\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;function(req,res,next){&nbsp;&nbsp;//&nbsp;这个插件无需调用next。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;path&nbsp;=&nbsp;url2path(req.url);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;callback(err,data){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(err){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;res.statusCode&nbsp;=&nbsp;404;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;如果找不到资源，直接next()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.write(data);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end();&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fs.readFile(parent_path+path,callback);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n}</pre>','[{\"type\":\"contents\",\"content\":\"更新后的代码\\n以下是今天更新后的代码：\\nApp.js 内容\\nvar http = require(\\\"http\\\");\\n\\nmodule.exports = App;\\n\\nfunction App(){\\n    // 插件有序列表\\n    var middleList = this._middleList = [];\\n\\n    var self = this;\\n    // DOTO ,  GET方法的处理函数\\n    this._getHandle = null;\\n\\n    // DOTO ,  POST方法的处理函数\\n    this._postHandle = null;\\n\\n    // request事件响应函数\\n    function handle(req,res){\\n\\n\\n        if(middleList.length === 0){        \\n        }else{\\n\\n            // 循环执行插件\\n            var middleIndex = 0; // 插件索引\\n\\n            execMiddle();\\n\\n            // 执行这个函数时，会自动执行下一个middle插件。\\n            // 至于这个函数的执行，是由插件所控制。\\n            function next(){\\n                middleIndex += 1;\\n                execMiddle();\\n            }\\n\\n            // 执行插件函数\\n            function execMiddle(){\\n                var middle = middleList[middleIndex];\\n                if(middle){\\n                    middle(req,res,next);\\n                }else{\\n                   // 判断是GET还是POST方法\\n                   switch(req.method){\\n                         case \\\"GET\\\":\\n                               if(self._getHandle){\\n                                    self._getHandle(req,res);\\n                               }\\n                         break;\\n                         case \\\"POST\\\":\\n                                if(self._postHandle){\\n                                      self._postHandle(req,res);\\n                                }\\n                         break;\\n                   }                          \\n                }\\n            }        \\n\\n        }\\n\\n\\n    }\\n\\n    this._server = http.createServer(handle);\\n\\n}\\n\\n// 加入功能栈\\nApp.prototype.use = function(middle){\\n    this._middleList.push(middle);\\n}\\n\\nApp.prototype.get = function(handle){\\n    this._getHandle = handle;\\n}\\n\\nApp.prototype.post = function(handle){\\n    this._postHandle = handle;\\n}\\n\\n// 监听端口\\nApp.prototype.listen = function(){\\n    this._server.listen.apply(this._server,arguments);\\n}\\nstatic.js 内容\\nvar url = require(\\\"url\\\"),\\n    fs = require(\\\"fs\\\");\\n\\n// 把URL转换成资源路径\\nfunction url2path(url_str){\\n    var urlObj = url.parse(url_str); \\n    var path = urlObj.path;\\n    return path;\\n}\\n\\nmodule.exports = function static(parent_path){\\n\\n    return function(req,res,next){  // 这个插件无需调用next。\\n       var path = url2path(req.url);\\n       function callback(err,data){\\n             if(err){\\n                 // res.statusCode = 404;\\n                 // 如果找不到资源，直接next()\\n                 next();\\n             }\\n             else{\\n                res.write(data);\\n                res.end();  \\n             }\\n       }\\n       fs.readFile(parent_path+path,callback);\\n    }\\n\\n}\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444892258000.jpg','2015-09-20 10:49:11','2020-08-20 15:44:24'),(193,'DoraCMS版本更新V1.0.4','DoraCMS版本更新V1.0.4','1','1','','版本更新','2',NULL,'','近期对DoraCMS进行了bug修复和功能更新，更新主要针对后台模块，主要提取了一些公共js，尽量减少冗余代码，另外加入了批量删除的功能。在这里简要说明一下批量删除的处理方式——递归。','1','','','0:01',762,'2','0',NULL,1,'0',223152,'<p style=\"text-align: center;\"><img alt=\"overview_osx_hero.jpg\" src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_10_1_9_58_45_869_1000.jpg\" title=\"\"/></p><p><br/></p><p>近期对DoraCMS进行了bug修复和功能更新，主要包括以下几方面：</p><p><br/></p><p>- 1、抽取出了后台的搜索模块</p><p>- 2、加入了批量删除功能</p><p>- 3、标签模块修复了搜索bug</p><p>- 4、修复前台icon图标不显示的问题</p><p>- 5、后台添加了登录日志管理</p><p>- 6、后台数据加载加入了loading</p><p>- 7、统一了后台数据显示表格样式</p><p>- 8、修复了时间格式化问题（上午和下午显示的小时数一致）</p><p>- 9、修复了管理首页留言记录样式问题</p><p>- 10、删除单条记录和批量删除提取为公共js</p><p>- 11、修复了一个兄弟提到的保存记录没有容错处理的问题</p><p>- 12、修复了一些小bug。</p><p>&nbsp;<br/></p><p>更新主要针对后台模块，主要提取了一些公共js，尽量减少冗余代码，另外加入了批量删除的功能。在这里简要说明一下批量删除的处理方式——递归。看主要代码：</p><pre class=\"brush:js;toolbar:false\">var&nbsp;params&nbsp;=&nbsp;url.parse(req.url,true);\nvar&nbsp;ids&nbsp;=&nbsp;params.query.ids;\nvar&nbsp;idsArr&nbsp;=&nbsp;ids.split(&#39;,&#39;);\nvar&nbsp;batchDel&nbsp;=&nbsp;function(targetId,n){\n	targetObj.remove({&#39;_id&#39;:targetId},function(err){\n		if(err){\n			res.end(err);\n		}else{\n			idsArr.splice(n,1);\n			if(idsArr.length&nbsp;&gt;&nbsp;0){\n				for(var&nbsp;i=0;i&lt;idsArr.length;i++){\n					batchDel(idsArr[i],i);\n				}\n			}else{\n				res.end(&quot;success&quot;);\n			}\n\n		}\n	});\n};\nbatchDel(idsArr[0],0);</pre><p>删除第一条记录之后，查询剩下的目标id，当还存在记录，则返回继续执行，这样可以保证在记录删除完毕之后返回处理结果。<br/></p><p><br/></p><p>相关文档：</p><p><br/></p><p><a href=\"http://www.html-js.cn/details/VymuSlpGg.html\" target=\"_blank\" class=\"ng-binding\" style=\"box-sizing: border-box; color: rgb(60, 141, 188); text-decoration: none; font-family: &#39;Source Sans Pro&#39;, &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; white-space: normal; background-color: rgb(255, 255, 255);\">DoraCMS V1.0.7升级指南</a></p><p><a href=\"http://www.html-js.cn/details/41npHTMWe.html\" target=\"_blank\" class=\"ng-binding\" style=\"box-sizing: border-box; color: rgb(60, 141, 188); text-decoration: none; font-family: &#39;Source Sans Pro&#39;, &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; white-space: normal; background-color: rgb(255, 255, 255);\">DoraCMS版本更新 V1.0.6</a></p>','[{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_10_1_9_58_45_869_1000.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n近期对DoraCMS进行了bug修复和功能更新，主要包括以下几方面：\\n\\n- 1、抽取出了后台的搜索模块\\n- 2、加入了批量删除功能\\n- 3、标签模块修复了搜索bug\\n- 4、修复前台icon图标不显示的问题\\n- 5、后台添加了登录日志管理\\n- 6、后台数据加载加入了loading\\n- 7、统一了后台数据显示表格样式\\n- 8、修复了时间格式化问题（上午和下午显示的小时数一致）\\n- 9、修复了管理首页留言记录样式问题\\n- 10、删除单条记录和批量删除提取为公共js\\n- 11、修复了一个兄弟提到的保存记录没有容错处理的问题\\n- 12、修复了一些小bug。\\n \\n更新主要针对后台模块，主要提取了一些公共js，尽量减少冗余代码，另外加入了批量删除的功能。在这里简要说明一下批量删除的处理方式——递归。看主要代码：\\nvar params = url.parse(req.url,true);\\nvar ids = params.query.ids;\\nvar idsArr = ids.split(\',\');\\nvar batchDel = function(targetId,n){\\n\\ttargetObj.remove({\'_id\':targetId},function(err){\\n\\t\\tif(err){\\n\\t\\t\\tres.end(err);\\n\\t\\t}else{\\n\\t\\t\\tidsArr.splice(n,1);\\n\\t\\t\\tif(idsArr.length &gt; 0){\\n\\t\\t\\t\\tfor(var i=0;i&lt;idsArr.length;i++){\\n\\t\\t\\t\\t\\tbatchDel(idsArr[i],i);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}else{\\n\\t\\t\\t\\tres.end(\\\"success\\\");\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\t});\\n};\\nbatchDel(idsArr[0],0);\\n删除第一条记录之后，查询剩下的目标id，当还存在记录，则返回继续执行，这样可以保证在记录删除完毕之后返回处理结果。\\n\\n相关文档：\\n\\nDoraCMS V1.0.7升级指南\\nDoraCMS版本更新 V1.0.6\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444895647000.jpg','2015-09-30 07:47:09','2020-08-20 15:44:23'),(194,'第10天 cookie与session— session插件分析','session插件分析','2','1','','session插件','2',NULL,'','Cookie和Session都为了用来保存状态信息，都是保存客户端状态的机制，它们都是为了解决HTTP无状态的问题而所做的努力。Session可以用Cookie来实现，也可以用URL回写的机制来实现。用Cookie来实现的Session可以认为是对Cookie更高级的应用。','1','','','0:01',762,'2','0',NULL,0,'0',223240,'<h3>第10天 cookie与session</h3><p>Cookie和Session都为了用来保存状态信息，都是保存客户端状态的机制，它们都是为了解决HTTP无状态的问题而所做的努力。</p><p>Session可以用Cookie来实现，也可以用URL回写的机制来实现。用Cookie来实现的Session可以认为是对Cookie更高级的应用。</p><p>Cookie和Session有以下明显的不同点：</p><ul class=\" list-paddingleft-2\"><li><p>Cookie将状态保存在客户端，Session将状态保存在服务器端；</p></li><li><p>Cookies是服务器在本地机器上存储的小段文本并随每一个请求发送至同一个服务器。Cookie最早在RFC2109中实现，后续RFC2965做了增强。网络服务器用HTTP头向客户端发送cookies，在客户终端，浏览器解析这些cookies并将它们保存为一个本地文件，它会自动将同一服务器的任何请求绑定这些cookies。</p></li><li><p>Session并没有在HTTP的协议中定义，Session是针对每一个用户的，变量的值保存在服务器上，用一个sessionID来区分是哪个用户session变量,这个值是通过用户的浏览器在访问的时候返回给服务器，当客户禁用cookie时，这个值也可能设置为由get来返回给服务器；</p></li><li><p>就安全性来说：当你访问一个使用session 的站点，同时在自己机子上建立一个cookie，建议在服务器端的SESSION机制更安全些.因为它不会任意读取客户存储的信息。</p></li></ul><h3>session插件分析</h3><p>Session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。</p><p>当程序需要为某个客户端的请求创建一个session的时候，服务器首先检查这个客户端的请求里是否已包含了一个session标识 - 称为 session id，如果已包含一个session id则说明以前已经为此客户端创建过session，服务器就按照session id把这个 session检索出来使用（如果检索不到，可能会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个 session id将被在本次响应中返回给客户端保存。</p><p>服务器给每个Session分配一个唯一的JSESSIONID，并通过Cookie发送给客户端。</p><p>当客户端发起新的请求的时候，将在Cookie头中携带这个JSESSIONID。这样服务器能够找到这个客户端对应的Session。\n流程如下图所示：</p><p><img alt=\"\" src=\"http://jsera.qiniudn.com/picture/brighthas-gk86wLkizl\"/>&nbsp;</p><h4 id=\"-cookie-http-\">与Cookie相关的HTTP扩展头</h4><ul class=\" list-paddingleft-2\"><li><p>Cookie：客户端将服务器设置的Cookie返回到服务器；</p></li><li><p>Set-Cookie：服务器向客户端设置Cookie；</p></li><li><p>Cookie2 (RFC2965)）：客户端指示服务器支持Cookie的版本；</p></li><li><p>Set-Cookie2 (RFC2965)：服务器向客户端设置Cookie。</p></li></ul><h4 id=\"cookie-\">Cookie的流程</h4><p>服务器在响应消息中用Set-Cookie头将Cookie的内容回送给客户端，客户端在新的请求中将相同的内容携带在Cookie头中发送给服务器。从而实现会话的保持。 <img alt=\"\" src=\"http://jsera.qiniudn.com/picture/brighthas-l1kKFLJofg\"/> <span class=\"invade-word\">book</span></p><h4 id=\"session-\">session插件</h4><p>session插件的实现，要读取cookie的JSESESSIONID，如果有的话，就在cache查找对应的值，而没有的话就说明第一次登陆，如果JSESESSIONID对应的值没有，说明session失效。</p><p>读取客户端cookie后，转码成JSON对象，响应头写入cookie信息，也需要把JSON对象转换为特殊的字符串形式，这些在下一节做详细说明。</p>','[{\"type\":\"contents\",\"content\":\"第10天 cookie与session\\nCookie和Session都为了用来保存状态信息，都是保存客户端状态的机制，它们都是为了解决HTTP无状态的问题而所做的努力。\\nSession可以用Cookie来实现，也可以用URL回写的机制来实现。用Cookie来实现的Session可以认为是对Cookie更高级的应用。\\nCookie和Session有以下明显的不同点：\\nCookie将状态保存在客户端，Session将状态保存在服务器端；\\nCookies是服务器在本地机器上存储的小段文本并随每一个请求发送至同一个服务器。Cookie最早在RFC2109中实现，后续RFC2965做了增强。网络服务器用HTTP头向客户端发送cookies，在客户终端，浏览器解析这些cookies并将它们保存为一个本地文件，它会自动将同一服务器的任何请求绑定这些cookies。\\nSession并没有在HTTP的协议中定义，Session是针对每一个用户的，变量的值保存在服务器上，用一个sessionID来区分是哪个用户session变量,这个值是通过用户的浏览器在访问的时候返回给服务器，当客户禁用cookie时，这个值也可能设置为由get来返回给服务器；\\n就安全性来说：当你访问一个使用session 的站点，同时在自己机子上建立一个cookie，建议在服务器端的SESSION机制更安全些.因为它不会任意读取客户存储的信息。\\n\\nsession插件分析\\nSession机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。\\n当程序需要为某个客户端的请求创建一个session的时候，服务器首先检查这个客户端的请求里是否已包含了一个session标识 - 称为 session id，如果已包含一个session id则说明以前已经为此客户端创建过session，服务器就按照session id把这个 session检索出来使用（如果检索不到，可能会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个 session id将被在本次响应中返回给客户端保存。\\n服务器给每个Session分配一个唯一的JSESSIONID，并通过Cookie发送给客户端。\\n当客户端发起新的请求的时候，将在Cookie头中携带这个JSESSIONID。这样服务器能够找到这个客户端对应的Session。流程如下图所示：\\n\"},{\"type\":\"image\",\"content\":\"http://jsera.qiniudn.com/picture/brighthas-gk86wLkizl\"},{\"type\":\"contents\",\"content\":\" \\n与Cookie相关的HTTP扩展头\\nCookie：客户端将服务器设置的Cookie返回到服务器；\\nSet-Cookie：服务器向客户端设置Cookie；\\nCookie2 (RFC2965)）：客户端指示服务器支持Cookie的版本；\\nSet-Cookie2 (RFC2965)：服务器向客户端设置Cookie。\\n\\nCookie的流程\\n服务器在响应消息中用Set-Cookie头将Cookie的内容回送给客户端，客户端在新的请求中将相同的内容携带在Cookie头中发送给服务器。从而实现会话的保持。 \"},{\"type\":\"image\",\"content\":\"http://jsera.qiniudn.com/picture/brighthas-l1kKFLJofg\"},{\"type\":\"contents\",\"content\":\" book\\nsession插件\\nsession插件的实现，要读取cookie的JSESESSIONID，如果有的话，就在cache查找对应的值，而没有的话就说明第一次登陆，如果JSESESSIONID对应的值没有，说明session失效。\\n读取客户端cookie后，转码成JSON对象，响应头写入cookie信息，也需要把JSON对象转换为特殊的字符串形式，这些在下一节做详细说明。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445236513000.jpg','2015-10-19 06:36:53','2020-08-20 15:44:16'),(195,'Node.js API实例讲解——创建Buffer实例','创建Buffer实例','2','1','','nodejs教程,前端开发','2',NULL,'','参数size定义了数组大小，Buffer长度是不可变的。注意：new Buffer(size) 时，并非“一定会”创建一个内容为“空”的对象，可以借助 buf.fill()测底清空。','1','','','0:01',762,'2','0',NULL,0,'0',223582,'<h3>创建Buffer实例</h3><p>node.js 提供了几种方式来创建Buffer实例。</p><h3 id=\"new-buffer-size-\">new Buffer(size)</h3><p>参数size定义了数组大小，Buffer长度是不可变的。</p><p>注意：new Buffer(size) 时，并非“一定会”创建一个内容为“空”的对象，可以借助 buf.fill()测底清空。</p><p>测试</p><pre class=\"code\">&nbsp;var&nbsp;buf1&nbsp;=&nbsp;new&nbsp;Buffer(3);\n&nbsp;console.log(buf1);&nbsp;&nbsp;&nbsp;//&nbsp;打印类似//&nbsp;并不一定等于下面，所以不要依赖new&nbsp;Buffer(size)方式创建&quot;空&quot;Buffer\n&nbsp;buf1.fill()\n&nbsp;console.log(buf1);&nbsp;&nbsp;&nbsp;//</pre><p>测试2.</p><pre class=\"code\">&nbsp;var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer(5);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;设置Buffer长度为5\n&nbsp;console.log(buf.length);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;长度为5\n&nbsp;buf.write(&quot;hello&nbsp;world&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;11个字符\n&nbsp;console.log(buf.toString());&nbsp;&nbsp;//&nbsp;只打印&nbsp;hello，因Buffer长度固定为5\n&nbsp;console.log(buf.length);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;打印5，说明长度没变。</pre><h3 id=\"new-buffer-array-\">new Buffer(array)</h3><p>要求是octet数组，也就是btye数组。</p><p>一个btye是八位bit，简单的说就是 从 0 ~ 255</p><p>测试1.<span class=\"invade-word\">sex</span></p><pre class=\"code\">&nbsp;var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer([0,2,42,255]);\n&nbsp;console.log(buf[3])&nbsp;&nbsp;//&nbsp;打印出255</pre><p>测试2 当超出0~255范围时,内部会求256的余数。</p><pre class=\"code\">&nbsp;var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer([12,257,258,259]);\n&nbsp;console.log(buf[1]);&nbsp;//&nbsp;打印&nbsp;1\n&nbsp;console.log(buf[2]);&nbsp;//&nbsp;打印&nbsp;2\n&nbsp;console.log(buf[3]);&nbsp;//&nbsp;打印&nbsp;3</pre><p>等价于</p><pre class=\"code\">&nbsp;console.log(257%256);&nbsp;//&nbsp;打印&nbsp;1\n&nbsp;console.log(258%256);&nbsp;//&nbsp;打印&nbsp;2\n&nbsp;console.log(259%256);&nbsp;//&nbsp;打印&nbsp;3</pre><p>测试3 当数组是浮点数，会取整。</p><pre class=\"code\">&nbsp;var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer([12,22.4,23.5,24.6]);\n&nbsp;console.log(buf[1]);&nbsp;//&nbsp;打印&nbsp;22\n&nbsp;console.log(buf[2]);&nbsp;//&nbsp;打印&nbsp;23\n&nbsp;console.log(buf[3]);&nbsp;//&nbsp;打印&nbsp;24</pre><p>测试4 当数组的值是字符串，如果这个值是数字形式会当作数字，否则会当作0。</p><pre class=\"code\">&nbsp;var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer([12,&quot;a&quot;,&quot;9a&quot;,&quot;9&quot;]);\n&nbsp;console.log(buf[1]);&nbsp;//&nbsp;打印&nbsp;0\n&nbsp;console.log(buf[2]);&nbsp;//&nbsp;打印&nbsp;0\n&nbsp;console.log(buf[3]);&nbsp;//&nbsp;打印&nbsp;9</pre><h3 id=\"new-buffer-str-encoding-\">new Buffer(str, [encoding])</h3><p>可以通过字符串创建一个Buffer实例，第二个参数表示字符编码方式（可选）。</p><p>Buffer支持的编码：</p><p>&#39;ascii&#39;编码，只为7位的ASCII的数据。这个编码方法非常快！</p><p>&#39;utf8&#39; 编码，支持Unicode字符。</p><p>&#39;utf16le&#39; 编码，小端编码的Unicode字符。对（u10000 ~ u10FFFF）支持。</p><p>&#39;ucs2&#39; 是 &#39;utf16le&#39; 编码的别名。</p><p>&#39;base64&#39; 是 Base64字符串编码。</p><p>&#39;hex&#39; 表示十六进制编码，每个byte编码为两个十六进制字符。</p><p>测试1，不指定编码方式，默认是utf8编码。</p><pre class=\"code\">&nbsp;var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer(&quot;世界你好&quot;);&nbsp;//&nbsp;默认utf8编码\n&nbsp;console.log(buf.toString());&nbsp;&nbsp;//&nbsp;打印出&nbsp;&quot;世界你好&quot;</pre><p>测试2，用编码&#39;ascii&#39;创建Buffer实例。如果应用都英文，采用ascii编码会很快速。</p><pre class=\"code\">&nbsp;var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer(&quot;世界你好&quot;,&quot;ascii&quot;);&nbsp;//&nbsp;默认utf8编码\n&nbsp;console.log(buf.toString());&nbsp;&nbsp;//&nbsp;打印出乱码，因为中文不在ascii编码集内。\n&nbsp;var&nbsp;buf2&nbsp;=&nbsp;new&nbsp;Buffer(&quot;hello&nbsp;world&quot;,&quot;ascii&quot;);\n&nbsp;console.log(buf2.toString())&nbsp;//&nbsp;打印出&quot;hello&nbsp;world&quot;</pre><p>测试2，用编码ucs2也就是utf16le编码创建Buffer实例。我们会发现buf.length不是2而是4，这个原因是utf16le编码表示一个字符要用2个btye。</p><pre class=\"code\">&nbsp;var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer(&quot;你好&quot;,&quot;utf16le&quot;);&nbsp;//&nbsp;使用utf16le编码\n&nbsp;console.log(buf.toString(&quot;ucs2&quot;));&nbsp;&nbsp;//&nbsp;打印“你好”\n&nbsp;console.log(buf.length)&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;打印出&nbsp;4\n&nbsp;var&nbsp;buf2&nbsp;=&nbsp;new&nbsp;Buffer(&quot;ab&quot;,&quot;utf16le&quot;);&nbsp;//&nbsp;使用utf16le编码\n&nbsp;console.log(buf2.toString(&quot;ucs2&quot;));&nbsp;&nbsp;//&nbsp;打印“ab”\n&nbsp;console.log(buf2.length)&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;打印出&nbsp;4</pre><p>测试3，用默认编码utf8创建Buffer实例。我们会发现buf.length和buf2.length的长度不同，这个原因是因为utf8编码可以智能的转换编码方式。</p><p>utf8表示一个中文字符需要3个byte，而utf16le只需要2个byte，而utf8表示一个英文字母只需1个byte，而utf16le还是需要2个byte。所以，各有优缺点，在实际应用中灵活选择编码方式。</p><p>如果中英文混合字符串那么统一采用utf8比较省空间，绝大多数都是中文的情况采用ucs2（utf16le）编码比较省空间。</p><pre class=\"code\">&nbsp;var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer(&quot;ab&quot;);&nbsp;//&nbsp;使用默认的utf8编码\n&nbsp;console.log(buf.length)&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;打印出&nbsp;2\n\n&nbsp;var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer(&quot;你好&quot;);\n&nbsp;console.log(buf2.length);&nbsp;&nbsp;&nbsp;//&nbsp;打印出&nbsp;6</pre><p>测试4，hex编码字符串。</p><pre class=\"code\">&nbsp;var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer(&quot;你好&quot;);\n&nbsp;console.log(buf.length);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;打印6，也就是6个byte。\n&nbsp;var&nbsp;hexstr&nbsp;=&nbsp;buf.toString(&quot;hex&quot;);&nbsp;&nbsp;//&nbsp;HEX编码把每个byte编译为两个十六进制字符。\n&nbsp;console.log(hexstr);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;打印出&nbsp;e4bda0e5a5bd，是hex编码后的值。\n\n&nbsp;console.log(hexstr.length);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;打印出&nbsp;12\n&nbsp;//&nbsp;以下是把hex编码字符串转换为UTF8字符串。\n&nbsp;var&nbsp;buf2&nbsp;=&nbsp;new&nbsp;Buffer(hexstr,&quot;hex&quot;);&nbsp;&nbsp;//&nbsp;通过hex编码创建一个新Buffer实例。\n&nbsp;console.log(buf2.toString());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;打印&nbsp;”你好“</pre><h3 id=\"buf-slice-start-end-\">buf.slice([start], [end])</h3><p>创建Buffer对象，还可以slice方法从已有Buffer对象划分出新的Buffer对象。</p><p>start[可选]参数，表示截取的起始位置,默认 0。</p><p><span class=\"invade-word\">w</span>end[可选]参数，表示截取的结束位置，默认buf.length 。</p><p>测试1，不带任何参数。</p><pre class=\"code\">&nbsp;var&nbsp;buf1&nbsp;=&nbsp;new&nbsp;Buffer(&quot;你好&quot;);&nbsp;\n&nbsp;var&nbsp;buf2&nbsp;=&nbsp;buf1.slice();\n&nbsp;console.log(buf2.toString())&nbsp;&nbsp;//&nbsp;打印“你好”，说明截取了全部buf1的字节。</pre><p>测试2，带参数。</p><pre class=\"code\">&nbsp;var&nbsp;buf1&nbsp;=&nbsp;new&nbsp;Buffer(&quot;你好&quot;);&nbsp;\n&nbsp;var&nbsp;buf2&nbsp;=&nbsp;buf1.slice(3);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;从buf1的3位置开始截取\n&nbsp;console.log(buf2.toString())&nbsp;&nbsp;//&nbsp;打印“好”，说明截取了全部buf1&nbsp;3~6的字节。\n\n&nbsp;var&nbsp;buf3&nbsp;=&nbsp;new&nbsp;Buffer(&quot;世界你好&quot;);&nbsp;\n&nbsp;var&nbsp;buf4&nbsp;=&nbsp;buf3.slice(3,9);\n&nbsp;console.log(buf4.toString())&nbsp;&nbsp;//&nbsp;打印“界你”，截取了全部buf3&nbsp;3~9&nbsp;的字节。</pre><h5 id=\"-buffer-\">本节主要讲解了 创建Buffer对象的各种方法。</h5>','[{\"type\":\"contents\",\"content\":\"创建Buffer实例\\nnode.js 提供了几种方式来创建Buffer实例。\\nnew Buffer(size)\\n参数size定义了数组大小，Buffer长度是不可变的。\\n注意：new Buffer(size) 时，并非“一定会”创建一个内容为“空”的对象，可以借助 buf.fill()测底清空。\\n测试\\n var buf1 = new Buffer(3);\\n console.log(buf1);   // 打印类似// 并不一定等于下面，所以不要依赖new Buffer(size)方式创建\\\"空\\\"Buffer\\n buf1.fill()\\n console.log(buf1);   //\\n测试2.\\n var buf = new Buffer(5);      // 设置Buffer长度为5\\n console.log(buf.length);      // 长度为5\\n buf.write(\\\"hello world\\\");     // 11个字符\\n console.log(buf.toString());  // 只打印 hello，因Buffer长度固定为5\\n console.log(buf.length);      // 打印5，说明长度没变。\\nnew Buffer(array)\\n要求是octet数组，也就是btye数组。\\n一个btye是八位bit，简单的说就是 从 0 ~ 255\\n测试1.sex\\n var buf = new Buffer([0,2,42,255]);\\n console.log(buf[3])  // 打印出255\\n测试2 当超出0~255范围时,内部会求256的余数。\\n var buf = new Buffer([12,257,258,259]);\\n console.log(buf[1]); // 打印 1\\n console.log(buf[2]); // 打印 2\\n console.log(buf[3]); // 打印 3\\n等价于\\n console.log(257%256); // 打印 1\\n console.log(258%256); // 打印 2\\n console.log(259%256); // 打印 3\\n测试3 当数组是浮点数，会取整。\\n var buf = new Buffer([12,22.4,23.5,24.6]);\\n console.log(buf[1]); // 打印 22\\n console.log(buf[2]); // 打印 23\\n console.log(buf[3]); // 打印 24\\n测试4 当数组的值是字符串，如果这个值是数字形式会当作数字，否则会当作0。\\n var buf = new Buffer([12,\\\"a\\\",\\\"9a\\\",\\\"9\\\"]);\\n console.log(buf[1]); // 打印 0\\n console.log(buf[2]); // 打印 0\\n console.log(buf[3]); // 打印 9\\nnew Buffer(str, [encoding])\\n可以通过字符串创建一个Buffer实例，第二个参数表示字符编码方式（可选）。\\nBuffer支持的编码：\\n\'ascii\'编码，只为7位的ASCII的数据。这个编码方法非常快！\\n\'utf8\' 编码，支持Unicode字符。\\n\'utf16le\' 编码，小端编码的Unicode字符。对（u10000 ~ u10FFFF）支持。\\n\'ucs2\' 是 \'utf16le\' 编码的别名。\\n\'base64\' 是 Base64字符串编码。\\n\'hex\' 表示十六进制编码，每个byte编码为两个十六进制字符。\\n测试1，不指定编码方式，默认是utf8编码。\\n var buf = new Buffer(\\\"世界你好\\\"); // 默认utf8编码\\n console.log(buf.toString());  // 打印出 \\\"世界你好\\\"\\n测试2，用编码\'ascii\'创建Buffer实例。如果应用都英文，采用ascii编码会很快速。\\n var buf = new Buffer(\\\"世界你好\\\",\\\"ascii\\\"); // 默认utf8编码\\n console.log(buf.toString());  // 打印出乱码，因为中文不在ascii编码集内。\\n var buf2 = new Buffer(\\\"hello world\\\",\\\"ascii\\\");\\n console.log(buf2.toString()) // 打印出\\\"hello world\\\"\\n测试2，用编码ucs2也就是utf16le编码创建Buffer实例。我们会发现buf.length不是2而是4，这个原因是utf16le编码表示一个字符要用2个btye。\\n var buf = new Buffer(\\\"你好\\\",\\\"utf16le\\\"); // 使用utf16le编码\\n console.log(buf.toString(\\\"ucs2\\\"));  // 打印“你好”\\n console.log(buf.length)    // 打印出 4\\n var buf2 = new Buffer(\\\"ab\\\",\\\"utf16le\\\"); // 使用utf16le编码\\n console.log(buf2.toString(\\\"ucs2\\\"));  // 打印“ab”\\n console.log(buf2.length)    // 打印出 4\\n测试3，用默认编码utf8创建Buffer实例。我们会发现buf.length和buf2.length的长度不同，这个原因是因为utf8编码可以智能的转换编码方式。\\nutf8表示一个中文字符需要3个byte，而utf16le只需要2个byte，而utf8表示一个英文字母只需1个byte，而utf16le还是需要2个byte。所以，各有优缺点，在实际应用中灵活选择编码方式。\\n如果中英文混合字符串那么统一采用utf8比较省空间，绝大多数都是中文的情况采用ucs2（utf16le）编码比较省空间。\\n var buf = new Buffer(\\\"ab\\\"); // 使用默认的utf8编码\\n console.log(buf.length)    // 打印出 2\\n\\n var buf = new Buffer(\\\"你好\\\");\\n console.log(buf2.length);   // 打印出 6\\n测试4，hex编码字符串。\\n var buf = new Buffer(\\\"你好\\\");\\n console.log(buf.length);           // 打印6，也就是6个byte。\\n var hexstr = buf.toString(\\\"hex\\\");  // HEX编码把每个byte编译为两个十六进制字符。\\n console.log(hexstr);               // 打印出 e4bda0e5a5bd，是hex编码后的值。\\n\\n console.log(hexstr.length);        // 打印出 12\\n // 以下是把hex编码字符串转换为UTF8字符串。\\n var buf2 = new Buffer(hexstr,\\\"hex\\\");  // 通过hex编码创建一个新Buffer实例。\\n console.log(buf2.toString());     // 打印 ”你好“\\nbuf.slice([start], [end])\\n创建Buffer对象，还可以slice方法从已有Buffer对象划分出新的Buffer对象。\\nstart[可选]参数，表示截取的起始位置,默认 0。\\nwend[可选]参数，表示截取的结束位置，默认buf.length 。\\n测试1，不带任何参数。\\n var buf1 = new Buffer(\\\"你好\\\"); \\n var buf2 = buf1.slice();\\n console.log(buf2.toString())  // 打印“你好”，说明截取了全部buf1的字节。\\n测试2，带参数。\\n var buf1 = new Buffer(\\\"你好\\\"); \\n var buf2 = buf1.slice(3);     // 从buf1的3位置开始截取\\n console.log(buf2.toString())  // 打印“好”，说明截取了全部buf1 3~6的字节。\\n\\n var buf3 = new Buffer(\\\"世界你好\\\"); \\n var buf4 = buf3.slice(3,9);\\n console.log(buf4.toString())  // 打印“界你”，截取了全部buf3 3~9 的字节。\\n本节主要讲解了 创建Buffer对象的各种方法。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444889382000.jpg','2015-08-02 09:36:51','2020-08-20 15:44:26'),(196,'一则经典技术面试题目的解读','一则经典技术面试题目的解读','2','1','','面试','2',NULL,'','从浏览器地址栏输入网址，到网页彻底打开，中间都发生了什么？这是一道经典面试题，以前我以为只有我喜欢出这道题，后来在微博上发现其他技术大牛也出这道题。','1','','','0:01',762,'2','0',NULL,0,'0',223290,'<p style=\"text-align: center;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_10_13_8_14_50_845_1001.jpg\" title=\"\" alt=\"640.jpg\"/></p><p><br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;从浏览器地址栏输入网址，到网页彻底打开，中间都发生了什么？</p><p>&nbsp; &nbsp; &nbsp; 这是一道经典面试题，以前我以为只有我喜欢出这道题，后来在微博上发现其他技术大牛也出这道题。</p><p>&nbsp; &nbsp; &nbsp; 这道题其实测试的不是具体特定的技术，而是对整个上网这个概念以及背后流程的理解。</p><p>&nbsp; &nbsp; &nbsp; 我先说一下我所理解或者说我所期待的大概的答题要点，后面再解释这道题的目的和意义，实际上所谓上网这个过程分为三个大的区块，一块是客户端，一块是网络传输层，一块是服务端。</p><p><br/></p><p>&nbsp; &nbsp; &nbsp; &nbsp;从输入网址开始，这个网址在客户端就会有一个解析，首先浏览器如果有钩子，可能会直接对这个网址做出判断和反馈，比如国内大部分第三方浏览器(IE浏览器基础上加壳的那种)，都会直接把地址输入关键词后应该跳转到微软搜索页的那个url劫持掉，所以第一步是浏览器对url的判断和劫持，第二步是本地host文件的判断，在360崛起之前，host文件也是各种木马和流氓软件最爱处理修改的文件，不声不响就把你的hao123给劫持了，而且你几乎看不出来哪里改了。</p><p><br/></p><p>&nbsp; &nbsp; &nbsp; &nbsp;那么逃脱本地客户端的判断后，这个域名查询请求会发到服务商的dns服务器，服务商的dns服务器会检查缓存，如果不存在你要访问的这个域名或者缓存状态已经过期，会访问根域名服务器，根域名服务器也会先检查缓存，如果无法直接返回结果，会检查这个域名是哪个dns服务器负责解析的，然后将请求转发过去，获得这个域名所对应的ip，然后返回给本地服务商的dns,本地服务商的dns就更新缓存，然后把ip返回给客户端。</p><p><br/></p><p>&nbsp; &nbsp; &nbsp; &nbsp;当然这里本地dns服务商也可能基于某种目的劫持域名，至于GFW，在这里只能说呵呵吧， 但另一个众所周知的案例是，如果你的IE地址栏输入错关键词，应该默认是跳转到微软的搜索页，假设你用的是原版ie，并且本地没有装各种会给ie加插件的工具，那么你的请求应该是微软搜索页的，但是在地方电信这块依然会被劫持掉，改为当地电信的搜索结果页。所以有时候，有些用户会把自己电脑上网配置的dns修改为更可信赖的公共dns，而不是地方电信的dns。（地方电信的劫持能力当然不止是dns，还包括内容替换，强插。不过这是后面的内容。）</p><p><br/></p><p>&nbsp; &nbsp; &nbsp; &nbsp;关于解析到ip，复杂点的还可以说说cdn的原理和机制，以及针对不同地区用户智能解析的机制。不过这里就不展开了，当然展开了我也未必说的清楚。</p><p><br/></p><p>&nbsp; &nbsp; &nbsp; &nbsp;到了ip这里，浏览器发出请求，去指定ip获取指定的文件，这里涉及路由寻址和报文传输，当然如果细说我也说不清了，但是至少知道用tracert可以跟踪路由就好。然后到了指定ip，服务器会在80端口有一个守护进程接受这个请求，细说的话这里还有三次握手的协议，那么下面就是webserver是怎么工作的，静态页面的处理比较简单，动态脚本还需要一个解释器系统工作，执行一段代码后将返回结果输出。这里可能又涉及有服务端缓存的，数据库，负载均衡和轮询等等，也就是可能后面不是一台主机，而是一个集群。再往下变成架构师专题了，就更不能展开了。</p><p><br/></p><p>&nbsp; &nbsp; &nbsp; &nbsp; 但是到这里没完，为什么呢，返回的这个内容页往往又包含了大量的嵌入页面请求，比如css，比如各种小图标，小图片，这又涉及浏览器发出请求，这里也存在一些需要注意的逻辑，比如浏览器在发出请求时，对数量和排队的限制。此外，这个内容页可能还涉及了一些可执行代码，是在浏览器上执行的，这也对你看到什么有重要的影响。</p><p><br/></p><p>&nbsp; &nbsp; &nbsp; &nbsp; 但是到这里依然还没完，在到了目标机房，以及数据返回你的电脑时，都存在一个在子网被劫持被篡改的风险，ARP欺骗，ARP协议是什么，为什么你要访问的内容会被劫持会被篡改。此外，在传输中会不会被侦听，会不会被篡改，上文提过，除了GFW，还有强大的地方电信。</p><p><br/></p><p>&nbsp; &nbsp; &nbsp; &nbsp;啰嗦这么一堆，可能有人会觉得，我就应聘一个服务端程序员/前端技术/运维工程师，我需要知道这些么？那么问题来了，通常我问这个题目的时候，还会包含一到两个引申题目。</p><p><br/></p><p>&nbsp; &nbsp; &nbsp; &nbsp;题目1：如果有个用户跟你说，你的网站/游戏很卡很慢，你该怎么分析，怎么响应？</p><p><br/></p><p>&nbsp; &nbsp; &nbsp; &nbsp;题目2：如果有个用户跟你说，打开你的网站会弹出淫荡小广告或杀毒软件报有木马，你该怎么分析，怎么响应？</p><p><br/></p><p>&nbsp; &nbsp; &nbsp; 看到这些，相信很多人都会发现，哎呀，这还真是个常见问题啊。而这种常见问题的排查，其实就涉及了如上的每个步骤。卡和慢究竟是客户端，网络层还是传输层的问题？如何快速排查和定位出问题，以及影响范围？ 这个思考题今天不展开，但是如果没有上面那个流程的认识，这个题目你肯定不可能给出好的结果。</p><p><br/></p><p>&nbsp; &nbsp; &nbsp; 说一个观点，全栈工程师为什么现在这么被看重，是因为大部分问题出现的时候，问题并不会告诉你，它是属于哪个领域的，而需要你来摸索，排查，如果你不具备综合的视野和开阔的思路，你很可能无法找到问题的关键所在。你的能力又怎么体现呢？</p><p><br/></p><p>&nbsp; &nbsp; &nbsp; 其实是不是我们同时需要精通前端，精通网络协议，精通服务端，这个的确太难，但是有一个整体框架的思路，再去精通其中一个领域，你的能力和视野就会上一个台阶，至少在排查问题，技术协同等各个方面会显得更专业，更有自信。</p><p><br/></p><p>&nbsp; &nbsp; &nbsp; &nbsp;我刚开始接触互联网的时候，刚开始写web程序的时候，那真是一窍不通，我写一个cgi程序，我想让他运行起来，我都糊里糊涂，不知道这个东西是怎么运行的，我跑一个webserver，设置目录权限，糊里糊涂，以及最早看着coolfire的一个黑客手册照猫画虎去拿别人服务器权限的时候，还是糊里糊涂，很长时间都不知道这玩意到底原理是虾米。 我总在想，那些年就没有人跟我讲这些，帮我梳理一下，所以当时很多东西做出来，但是不明白其发生作用的机制，更不明白如何更好的调优和细化。</p><p><br/></p><p>&nbsp; &nbsp; &nbsp; &nbsp;梳理一下这些，其实花不了太多时间和精力，而梳理后对认识问题的提升，是巨大的，对技术协同意识的提升，也是巨大的。</p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"     \"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_10_13_8_14_50_845_1001.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n    从浏览器地址栏输入网址，到网页彻底打开，中间都发生了什么？\\n      这是一道经典面试题，以前我以为只有我喜欢出这道题，后来在微博上发现其他技术大牛也出这道题。\\n      这道题其实测试的不是具体特定的技术，而是对整个上网这个概念以及背后流程的理解。\\n      我先说一下我所理解或者说我所期待的大概的答题要点，后面再解释这道题的目的和意义，实际上所谓上网这个过程分为三个大的区块，一块是客户端，一块是网络传输层，一块是服务端。\\n\\n       从输入网址开始，这个网址在客户端就会有一个解析，首先浏览器如果有钩子，可能会直接对这个网址做出判断和反馈，比如国内大部分第三方浏览器(IE浏览器基础上加壳的那种)，都会直接把地址输入关键词后应该跳转到微软搜索页的那个url劫持掉，所以第一步是浏览器对url的判断和劫持，第二步是本地host文件的判断，在360崛起之前，host文件也是各种木马和流氓软件最爱处理修改的文件，不声不响就把你的hao123给劫持了，而且你几乎看不出来哪里改了。\\n\\n       那么逃脱本地客户端的判断后，这个域名查询请求会发到服务商的dns服务器，服务商的dns服务器会检查缓存，如果不存在你要访问的这个域名或者缓存状态已经过期，会访问根域名服务器，根域名服务器也会先检查缓存，如果无法直接返回结果，会检查这个域名是哪个dns服务器负责解析的，然后将请求转发过去，获得这个域名所对应的ip，然后返回给本地服务商的dns,本地服务商的dns就更新缓存，然后把ip返回给客户端。\\n\\n       当然这里本地dns服务商也可能基于某种目的劫持域名，至于GFW，在这里只能说呵呵吧， 但另一个众所周知的案例是，如果你的IE地址栏输入错关键词，应该默认是跳转到微软的搜索页，假设你用的是原版ie，并且本地没有装各种会给ie加插件的工具，那么你的请求应该是微软搜索页的，但是在地方电信这块依然会被劫持掉，改为当地电信的搜索结果页。所以有时候，有些用户会把自己电脑上网配置的dns修改为更可信赖的公共dns，而不是地方电信的dns。（地方电信的劫持能力当然不止是dns，还包括内容替换，强插。不过这是后面的内容。）\\n\\n       关于解析到ip，复杂点的还可以说说cdn的原理和机制，以及针对不同地区用户智能解析的机制。不过这里就不展开了，当然展开了我也未必说的清楚。\\n\\n       到了ip这里，浏览器发出请求，去指定ip获取指定的文件，这里涉及路由寻址和报文传输，当然如果细说我也说不清了，但是至少知道用tracert可以跟踪路由就好。然后到了指定ip，服务器会在80端口有一个守护进程接受这个请求，细说的话这里还有三次握手的协议，那么下面就是webserver是怎么工作的，静态页面的处理比较简单，动态脚本还需要一个解释器系统工作，执行一段代码后将返回结果输出。这里可能又涉及有服务端缓存的，数据库，负载均衡和轮询等等，也就是可能后面不是一台主机，而是一个集群。再往下变成架构师专题了，就更不能展开了。\\n\\n        但是到这里没完，为什么呢，返回的这个内容页往往又包含了大量的嵌入页面请求，比如css，比如各种小图标，小图片，这又涉及浏览器发出请求，这里也存在一些需要注意的逻辑，比如浏览器在发出请求时，对数量和排队的限制。此外，这个内容页可能还涉及了一些可执行代码，是在浏览器上执行的，这也对你看到什么有重要的影响。\\n\\n        但是到这里依然还没完，在到了目标机房，以及数据返回你的电脑时，都存在一个在子网被劫持被篡改的风险，ARP欺骗，ARP协议是什么，为什么你要访问的内容会被劫持会被篡改。此外，在传输中会不会被侦听，会不会被篡改，上文提过，除了GFW，还有强大的地方电信。\\n\\n       啰嗦这么一堆，可能有人会觉得，我就应聘一个服务端程序员/前端技术/运维工程师，我需要知道这些么？那么问题来了，通常我问这个题目的时候，还会包含一到两个引申题目。\\n\\n       题目1：如果有个用户跟你说，你的网站/游戏很卡很慢，你该怎么分析，怎么响应？\\n\\n       题目2：如果有个用户跟你说，打开你的网站会弹出淫荡小广告或杀毒软件报有木马，你该怎么分析，怎么响应？\\n\\n      看到这些，相信很多人都会发现，哎呀，这还真是个常见问题啊。而这种常见问题的排查，其实就涉及了如上的每个步骤。卡和慢究竟是客户端，网络层还是传输层的问题？如何快速排查和定位出问题，以及影响范围？ 这个思考题今天不展开，但是如果没有上面那个流程的认识，这个题目你肯定不可能给出好的结果。\\n\\n      说一个观点，全栈工程师为什么现在这么被看重，是因为大部分问题出现的时候，问题并不会告诉你，它是属于哪个领域的，而需要你来摸索，排查，如果你不具备综合的视野和开阔的思路，你很可能无法找到问题的关键所在。你的能力又怎么体现呢？\\n\\n      其实是不是我们同时需要精通前端，精通网络协议，精通服务端，这个的确太难，但是有一个整体框架的思路，再去精通其中一个领域，你的能力和视野就会上一个台阶，至少在排查问题，技术协同等各个方面会显得更专业，更有自信。\\n\\n       我刚开始接触互联网的时候，刚开始写web程序的时候，那真是一窍不通，我写一个cgi程序，我想让他运行起来，我都糊里糊涂，不知道这个东西是怎么运行的，我跑一个webserver，设置目录权限，糊里糊涂，以及最早看着coolfire的一个黑客手册照猫画虎去拿别人服务器权限的时候，还是糊里糊涂，很长时间都不知道这玩意到底原理是虾米。 我总在想，那些年就没有人跟我讲这些，帮我梳理一下，所以当时很多东西做出来，但是不明白其发生作用的机制，更不明白如何更好的调优和细化。\\n\\n       梳理一下这些，其实花不了太多时间和精力，而梳理后对认识问题的提升，是巨大的，对技术协同意识的提升，也是巨大的。\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444895549000.jpg','2015-10-13 00:15:01','2020-08-20 15:44:23'),(197,'请用 Node.js 4.0.0','请用 Node.js 4.0.0','2','1','','node 4.0','2',NULL,'','对NodeJS 还比较陌生，DoraCMS 刚才看了下还是基于 v1.10.34，后续深入研究一下4.0','1','','','0:01',762,'2','0',NULL,0,'0',223188,'<p>2015年9月9日，Node.js 重装上阵。社区在经过大半年的分裂，终于放出首个 Node.js 与 io.js 的融合版本&amp;mdash;&amp;mdash;Node.js 4.0.0 版本。</p><p>Node.js 4.0.0 首次将 Node.js 和 io.js 项目的代码库融合到了一起，所以这次发布不仅包含所有 io.js 对 Node.js 作出的改进，也包含 Node.js 的 0.12 中的所有后续新增功能，而这些功能之前 io.js 的用户是享受不到的，例如朴老师之前就为 Node.js 提交了很多补丁，但 io.js 小于 4 的版本的用户是享受不到的。</p><p>站在今天，要开始开发一个新的 Node.js 项目，请用 Node.js 4.0.0。因为 4.0.0 是 Node.js 的未来，它才是真正的 “1.0”。</p><h2>io.js 的历史使命已经完成</h2><p>最初，io.js 是从 Node.js 分支出来的一个分叉项目。自从今年年初（2015年），Joyent 公司就将 Node.js 项目转手给了 io.js 社区，而这个社区的活跃程度超乎人们的想象，不到一年的功夫他为 Node.js 吸引到了来自全世界的百余名为之贡献核心代码的新开发者。年中前后，舆论认为，分道扬镳并不符合大家的共同利益，一个囊括了 io.js 和 Node.js 的所有功能的合并版 Node.js 4.0.0 呼之欲出。</p><p>io.js 的历史使命已经完成，大家也算是重新回到了正途。真是合久必分，分久必合！</p><h2>4.0.0 是真正的 “1.0”</h2><p>但是，考虑到上个 Node.js 的版本号才到 0.12.x，为什么版本号会上升的这么快以至于直接到了 4.0.0 呢？</p><p>这是因为，4.0.0 的前身 io.js 项目采用的是语义化版本编号法（semver），亦即&lt;主要&gt;.&lt;次要&gt;.&lt;补丁&gt;。而以前 joyent 公司的版本编号方法采用的是奇偶编号法。而这次合并之后，整个项目都将采用语义化版本编号法。历史上，io.js 从主项目分裂出来后不久，便发布了第一个主要版本号，1.0。</p><p>此次发布是为了防止与后续 Node.js 的 0.X 维护计划发生版本碰撞，同时避免与任何现有的 io.js 版本号发生碰撞，才决定将融合的版本号编号为 4.0.0。之后的版本也将沿用&lt;主要&gt;.&lt;次要&gt;.&lt;补丁&gt;编号法。</p><h2>3.x 曾是 4.x 的试验场</h2><p>当 io.js 首次发布的时候，它就将其内的 v8 引擎升级到了最新版本，而当时 Node.js 的 v8 已经好几年没升级了。伴随着 v8 的升级，一个新的 nan 版本也随之发布。</p><p>io.js 随后一直紧跟 v8 更新的步伐，可不幸的是，io.js v3 中包含的 v8 的变化实在是太大了，以至于不单一个新的 nan 必需随之升级，连 nan 中的 API 本身也要随着变化，要求所有 C++ 模块的代码也必须进行修改。</p><p>io.js 的维护者知道这是一个很大的变化，而且 C++ 模块的作者需要一些时间来追赶 io.js v3 中引入的变化。所以在 v4 之前的 v3 发布的几周内，已经开始鼓励模块的作者对新版本进行升级和测试，以对抗版本升级带来的模块不可用问题。</p><p>这次，虽然 Node.js v4 将包含一个更加高版本的 v8，但已经受到了 nan 的当前版本的支持。这意味着，谁升级了 nan 跟上了 io.js v3 的步伐，谁就自动跟上了 Node.js v4 的升级步伐。所以 3.x 其实是 4.x 的试验场。</p><h2>三大内部依赖的版本升级</h2><p>冰冻三尺非一日之寒，Node.js 是在三个重要的依赖项目之上建立起来的，亦即 v8、libuv、npm。这些项目都是由其他外部团队独立维护的，Node.js 只是将他们的源代码复制过来，放到自己的项目中加以利用。为了享受这些依赖的上游新版本带来的新功能，Node.js 需要不断跟上他们的版本。</p><p>当年创建 io.js 项目的一个原因就是 Node.js 的长线而难以预测的发布周期，相比于原 Joyent 公司的 Node.js 0.12.7 ， io.js 项目对依赖的跟进速度要快得多。Node.js 4.0.0 则将这些外部依赖的推进到了几乎是最先进的版本，见下表。</p><table><thead><tr class=\"firstRow\"><th><br/></th><th>Node.js 4.0.0</th><th>原 Joyent 公司的 Node.js 0.12.7</th></tr></thead><tbody><tr><td>内含 v8 版本</td><td>4.5.103 (2015-07-08)</td><td>3.28.71 (2014-08-12)</td></tr><tr><td>内含 libuv 版本</td><td>1.7.3 (2015-08-28)</td><td>1.6.1 (2015-06-06)</td></tr><tr><td>内含 npm 版本</td><td>2.14.2 (2015-08-27)</td><td>2.11.3 (2015-06-11)</td></tr></tbody></table><p>Node.js 4.0.0 可以让您享受最尖端的技术，保持项目的先进性。其中对 v8 的升级几乎做到了与 Chromium / Google Chrome 同步，达到了 4.5.x，它提供了很多新的语言功能。ECMA-262 是 JavaScript 语言规范的最新版本，而且好多新特性数都是开箱即用的。这些新特性包括：</p><ul class=\" list-paddingleft-2\"><li><p>classes - 各种 ‘类’，再也无需用 CoffeeScript 的语法糖写类了</p></li><li><p>typed arrays － 类型数组</p></li><li><p>generators - 未来的.js 代码中将有无数生成器，不学一点就看不懂 JS 代码了哦</p></li><li><p>collections － 集合、映射、弱集合、弱映射</p></li><li><p>arrow functions － 箭向函数</p></li><li><p>block scoping － 使用 let 、const 作用域，块辖域</p></li><li><p>template strings － 模板字串</p></li><li><p>promises － 用标准化了的方法进行延迟和异步计算</p></li><li><p>symbols － 唯一的、不可修改的数据</p></li></ul><h2>物联网</h2><p>物联网开发者们也会对 Node.js 4.0.0 感到高兴，因为它将对 ARM 平台的支持扩展到了 ARMv6、ARMv7、以及最新的 64 位 ARMv8 处理器。</p><h2>模块作者更应重视</h2><p>上文提到，3.x 曾是 4.x 的试验场，这需要引起 C++ 模块作者的重视，但受影响的不光是 C++ 模块。</p><p>从历史上看，在一次 Node.js 版本的发生升级时，大多数的 C++ 模块开发作者只是简单地升级自己的 nan 的版本到支持 Node.js 的最新版本的那一个。但不幸的是，模块也依赖于其他模块，问题没那么简单：存在模块依赖的模块、存在模块依赖的模块依赖的模块、存在模块依赖的模块依赖的模块等等。这些深层依赖关系链意味着，升级模块不是那么简单，很可能需要相当多的时间来协调好上下游代码的升级节奏。</p><p>C++ 模块有多少呢？现在不到 600 个模块是直接依赖于 nan 的，但如果你计算一下依赖于这约 600 个模块的其他模块的数量，你会发现数量一下子上升到了约三万多个。换句话说，间接依赖于 nan 的模块数量约有三万多个，受升级影响可能无法正常工作的模块约有三万多个。</p><p>这是个庞大的工程，这是个协作的工程，这是属于每个社区成员的工程。让我们大家携手，多多提交补丁，尽快让整个 npm 社区的模块生态系统完成升级。</p><h2>升级看点</h2><p>这次升级的改动是建立在 v3.x 代码基之上的，关于 2.5.0 - 3.0.0 的改动请见我之前发表的《io.js 2.5.0 - 3.0.0 升级看点及社区动态》：</p><p><a href=\"https://cnodejs.org/topic/55c1fb135965fe2c74f477f8\" target=\"_blank\">https://cnodejs.org/topic/55c1fb135965fe2c74f477f8</a></p><p>如果您是从 0.12.x 升级过来的，必须同时补上 v3.x、v2.x、v1.x 这三课。</p><p>Node.js 4.0 相对于 v3.x 最值得关注的改进记录包括：</p><ul class=\" list-paddingleft-2\"><li><p><strong>child_process</strong>:&nbsp;ChildProcess.prototype.send()&nbsp;和&nbsp;process.send() 跨平台的异步操作作为一个可选的回调参数，可在消息发送时候调用。例如&nbsp;.send(message [, sendHandle][, callback])</p></li><li><p><strong>node</strong>: 将 “io.js” 代码重命名为 “Node.js”</p></li><li><p><strong>node-gyp</strong>: 该版本绑定了一个更新版的 node-gyp 支持所有版本的 Node.js 和 io.js。</p></li><li><p><strong>npm</strong>: 版本从 2.13.3 更新到 2.14.2, 包含一个安全更新</p></li><li><p><strong>timers</strong>: 提示定时器的性能，和一些小 bug 修复</p></li><li><p><strong>util</strong>:&nbsp;util.is*()&nbsp;函数被废弃，文档中已经注明废弃。建议用户寻找更可靠的替代方案</p></li><li><p><strong>v8</strong>: 版本从 4.4.63.30 升级到 4.5.103.30</p></li><li><p>实现新的&nbsp;TypedArray&nbsp;原型方法:&nbsp;copyWithin(),&nbsp;every(),&nbsp;fill(),&nbsp;filter(),&nbsp;find(),findIndex(),&nbsp;forEach(),&nbsp;indexOf(),&nbsp;join(),&nbsp;lastIndexOf(),&nbsp;map(),&nbsp;reduce(),reduceRight(),&nbsp;reverse(),&nbsp;slice(),&nbsp;some(),&nbsp;sort()</p></li><li><p>实现新的&nbsp;TypedArray.from()&nbsp;和&nbsp;TypedArray.of()&nbsp;函数</p></li><li><p>实现 arrow 函数</p></li></ul>','[{\"type\":\"contents\",\"content\":\"2015年9月9日，Node.js 重装上阵。社区在经过大半年的分裂，终于放出首个 Node.js 与 io.js 的融合版本&amp;mdash;&amp;mdash;Node.js 4.0.0 版本。\\nNode.js 4.0.0 首次将 Node.js 和 io.js 项目的代码库融合到了一起，所以这次发布不仅包含所有 io.js 对 Node.js 作出的改进，也包含 Node.js 的 0.12 中的所有后续新增功能，而这些功能之前 io.js 的用户是享受不到的，例如朴老师之前就为 Node.js 提交了很多补丁，但 io.js 小于 4 的版本的用户是享受不到的。\\n站在今天，要开始开发一个新的 Node.js 项目，请用 Node.js 4.0.0。因为 4.0.0 是 Node.js 的未来，它才是真正的 “1.0”。\\nio.js 的历史使命已经完成\\n最初，io.js 是从 Node.js 分支出来的一个分叉项目。自从今年年初（2015年），Joyent 公司就将 Node.js 项目转手给了 io.js 社区，而这个社区的活跃程度超乎人们的想象，不到一年的功夫他为 Node.js 吸引到了来自全世界的百余名为之贡献核心代码的新开发者。年中前后，舆论认为，分道扬镳并不符合大家的共同利益，一个囊括了 io.js 和 Node.js 的所有功能的合并版 Node.js 4.0.0 呼之欲出。\\nio.js 的历史使命已经完成，大家也算是重新回到了正途。真是合久必分，分久必合！\\n4.0.0 是真正的 “1.0”\\n但是，考虑到上个 Node.js 的版本号才到 0.12.x，为什么版本号会上升的这么快以至于直接到了 4.0.0 呢？\\n这是因为，4.0.0 的前身 io.js 项目采用的是语义化版本编号法（semver），亦即&lt;主要&gt;.&lt;次要&gt;.&lt;补丁&gt;。而以前 joyent 公司的版本编号方法采用的是奇偶编号法。而这次合并之后，整个项目都将采用语义化版本编号法。历史上，io.js 从主项目分裂出来后不久，便发布了第一个主要版本号，1.0。\\n此次发布是为了防止与后续 Node.js 的 0.X 维护计划发生版本碰撞，同时避免与任何现有的 io.js 版本号发生碰撞，才决定将融合的版本号编号为 4.0.0。之后的版本也将沿用&lt;主要&gt;.&lt;次要&gt;.&lt;补丁&gt;编号法。\\n3.x 曾是 4.x 的试验场\\n当 io.js 首次发布的时候，它就将其内的 v8 引擎升级到了最新版本，而当时 Node.js 的 v8 已经好几年没升级了。伴随着 v8 的升级，一个新的 nan 版本也随之发布。\\nio.js 随后一直紧跟 v8 更新的步伐，可不幸的是，io.js v3 中包含的 v8 的变化实在是太大了，以至于不单一个新的 nan 必需随之升级，连 nan 中的 API 本身也要随着变化，要求所有 C++ 模块的代码也必须进行修改。\\nio.js 的维护者知道这是一个很大的变化，而且 C++ 模块的作者需要一些时间来追赶 io.js v3 中引入的变化。所以在 v4 之前的 v3 发布的几周内，已经开始鼓励模块的作者对新版本进行升级和测试，以对抗版本升级带来的模块不可用问题。\\n这次，虽然 Node.js v4 将包含一个更加高版本的 v8，但已经受到了 nan 的当前版本的支持。这意味着，谁升级了 nan 跟上了 io.js v3 的步伐，谁就自动跟上了 Node.js v4 的升级步伐。所以 3.x 其实是 4.x 的试验场。\\n三大内部依赖的版本升级\\n冰冻三尺非一日之寒，Node.js 是在三个重要的依赖项目之上建立起来的，亦即 v8、libuv、npm。这些项目都是由其他外部团队独立维护的，Node.js 只是将他们的源代码复制过来，放到自己的项目中加以利用。为了享受这些依赖的上游新版本带来的新功能，Node.js 需要不断跟上他们的版本。\\n当年创建 io.js 项目的一个原因就是 Node.js 的长线而难以预测的发布周期，相比于原 Joyent 公司的 Node.js 0.12.7 ， io.js 项目对依赖的跟进速度要快得多。Node.js 4.0.0 则将这些外部依赖的推进到了几乎是最先进的版本，见下表。\\n\\nNode.js 4.0.0原 Joyent 公司的 Node.js 0.12.7内含 v8 版本4.5.103 (2015-07-08)3.28.71 (2014-08-12)内含 libuv 版本1.7.3 (2015-08-28)1.6.1 (2015-06-06)内含 npm 版本2.14.2 (2015-08-27)2.11.3 (2015-06-11)\\nNode.js 4.0.0 可以让您享受最尖端的技术，保持项目的先进性。其中对 v8 的升级几乎做到了与 Chromium / Google Chrome 同步，达到了 4.5.x，它提供了很多新的语言功能。ECMA-262 是 JavaScript 语言规范的最新版本，而且好多新特性数都是开箱即用的。这些新特性包括：\\nclasses - 各种 ‘类’，再也无需用 CoffeeScript 的语法糖写类了\\ntyped arrays － 类型数组\\ngenerators - 未来的.js 代码中将有无数生成器，不学一点就看不懂 JS 代码了哦\\ncollections － 集合、映射、弱集合、弱映射\\narrow functions － 箭向函数\\nblock scoping － 使用 let 、const 作用域，块辖域\\ntemplate strings － 模板字串\\npromises － 用标准化了的方法进行延迟和异步计算\\nsymbols － 唯一的、不可修改的数据\\n\\n物联网\\n物联网开发者们也会对 Node.js 4.0.0 感到高兴，因为它将对 ARM 平台的支持扩展到了 ARMv6、ARMv7、以及最新的 64 位 ARMv8 处理器。\\n模块作者更应重视\\n上文提到，3.x 曾是 4.x 的试验场，这需要引起 C++ 模块作者的重视，但受影响的不光是 C++ 模块。\\n从历史上看，在一次 Node.js 版本的发生升级时，大多数的 C++ 模块开发作者只是简单地升级自己的 nan 的版本到支持 Node.js 的最新版本的那一个。但不幸的是，模块也依赖于其他模块，问题没那么简单：存在模块依赖的模块、存在模块依赖的模块依赖的模块、存在模块依赖的模块依赖的模块等等。这些深层依赖关系链意味着，升级模块不是那么简单，很可能需要相当多的时间来协调好上下游代码的升级节奏。\\nC++ 模块有多少呢？现在不到 600 个模块是直接依赖于 nan 的，但如果你计算一下依赖于这约 600 个模块的其他模块的数量，你会发现数量一下子上升到了约三万多个。换句话说，间接依赖于 nan 的模块数量约有三万多个，受升级影响可能无法正常工作的模块约有三万多个。\\n这是个庞大的工程，这是个协作的工程，这是属于每个社区成员的工程。让我们大家携手，多多提交补丁，尽快让整个 npm 社区的模块生态系统完成升级。\\n升级看点\\n这次升级的改动是建立在 v3.x 代码基之上的，关于 2.5.0 - 3.0.0 的改动请见我之前发表的《io.js 2.5.0 - 3.0.0 升级看点及社区动态》：\\nhttps://cnodejs.org/topic/55c1fb135965fe2c74f477f8\\n如果您是从 0.12.x 升级过来的，必须同时补上 v3.x、v2.x、v1.x 这三课。\\nNode.js 4.0 相对于 v3.x 最值得关注的改进记录包括：\\nchild_process: ChildProcess.prototype.send() 和 process.send() 跨平台的异步操作作为一个可选的回调参数，可在消息发送时候调用。例如 .send(message [, sendHandle][, callback])\\nnode: 将 “io.js” 代码重命名为 “Node.js”\\nnode-gyp: 该版本绑定了一个更新版的 node-gyp 支持所有版本的 Node.js 和 io.js。\\nnpm: 版本从 2.13.3 更新到 2.14.2, 包含一个安全更新\\ntimers: 提示定时器的性能，和一些小 bug 修复\\nutil: util.is*() 函数被废弃，文档中已经注明废弃。建议用户寻找更可靠的替代方案\\nv8: 版本从 4.4.63.30 升级到 4.5.103.30\\n实现新的 TypedArray 原型方法: copyWithin(), every(), fill(), filter(), find(),findIndex(), forEach(), indexOf(), join(), lastIndexOf(), map(), reduce(),reduceRight(), reverse(), slice(), some(), sort()\\n实现新的 TypedArray.from() 和 TypedArray.of() 函数\\n实现 arrow 函数\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444895036000.jpg','2015-09-11 04:22:21','2020-08-20 15:44:24'),(198,'第10天 cookie与session— session插件开发','session插件开发','2','1','','session插件','2',NULL,'','上一节的分析，我们了解了cookie和session的关系。接下来，将实际的开发session插件，以下是session插件源代码。','1','','','0:01',762,'2','0',NULL,0,'0',224444,'<h3>session插件开发</h3><p>上一节的分析，我们了解了cookie和session的关系。接下来，将实际的开发session插件，以下是session插件源代码。</p><pre>var&nbsp;sid&nbsp;=&nbsp;Date.now()&nbsp;,&nbsp;cache&nbsp;=&nbsp;{}\n\nmodule.exports&nbsp;=&nbsp;function(req,res,next){\n\n&nbsp;&nbsp;&nbsp;&nbsp;Object.defineProperty(req,&quot;session&quot;,{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get:&nbsp;function(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cache[this.sessionId];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set:&nbsp;function(value){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cache[this.sessionId]&nbsp;=&nbsp;value;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;&nbsp;if(!(req.headers.cookie&nbsp;&amp;&amp;&nbsp;(req.sessionId&nbsp;=&nbsp;parse(req.headers.cookie).sessionId))){\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req.sessionId&nbsp;=&nbsp;sid&nbsp;+=&nbsp;1;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.setHeader(&quot;Set-Cookie&quot;,[&quot;sessionId=&quot;+req.sessionId])\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;next();\n\n}\n\n//&nbsp;把cookie字符串转换为json对象\nfunction&nbsp;parse(str){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;arr&nbsp;=&nbsp;str.split(&quot;;&quot;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,obj&nbsp;=&nbsp;{}\n\n&nbsp;&nbsp;&nbsp;&nbsp;arr.forEach(function(field){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;o&nbsp;=&nbsp;field.split(&quot;=&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obj[o[0].trim()]&nbsp;=&nbsp;o[1];\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;obj;\n}</pre><p><code>sid</code>是一个生成ID的时间阀，每次需要生成性的sessionId时候会 +1 ， <code>cache</code>是保存session id对应的数据，这个数据用户可通过req.session = xxx 自定义，也可通过req.session进行访问。<code>parse</code>方法是用来把cookie的字符串形式转换为json对象。</p><p>通过 <code>if(!(req.headers.cookie &amp;&amp; (req.sessionId = parse(req.headers.cookie).sessionId)))</code>判断req.sessionId是否存在，如果不存在那么就创建一个并把sessionId信息写入到响应头发送给客户端。</p><p>最后，还要在<code>index.js</code>文件中加入：</p><pre>exports.session&nbsp;=&nbsp;require(&quot;./lib/session&quot;);</pre><p>有了session插件后，明天开发博客系统就有了保证，因为登录状态需要记录在session里。下一节，我们用session插件，做一个数字累加的例子。</p>','[{\"type\":\"contents\",\"content\":\"session插件开发\\n上一节的分析，我们了解了cookie和session的关系。接下来，将实际的开发session插件，以下是session插件源代码。\\nvar sid = Date.now() , cache = {}\\n\\nmodule.exports = function(req,res,next){\\n\\n    Object.defineProperty(req,\\\"session\\\",{\\n        get: function(){\\n            return cache[this.sessionId];\\n        },\\n        set: function(value){\\n            cache[this.sessionId] = value;\\n        }\\n    })\\n\\n    if(!(req.headers.cookie &amp;&amp; (req.sessionId = parse(req.headers.cookie).sessionId))){\\n\\n        req.sessionId = sid += 1;\\n        res.setHeader(\\\"Set-Cookie\\\",[\\\"sessionId=\\\"+req.sessionId])\\n    }\\n\\n    next();\\n\\n}\\n\\n// 把cookie字符串转换为json对象\\nfunction parse(str){\\n    var arr = str.split(\\\";\\\")\\n       ,obj = {}\\n\\n    arr.forEach(function(field){\\n        var o = field.split(\\\"=\\\");\\n        obj[o[0].trim()] = o[1];\\n    })\\n\\n    return obj;\\n}\\nsid是一个生成ID的时间阀，每次需要生成性的sessionId时候会 +1 ， cache是保存session id对应的数据，这个数据用户可通过req.session = xxx 自定义，也可通过req.session进行访问。parse方法是用来把cookie的字符串形式转换为json对象。\\n通过 if(!(req.headers.cookie &amp;&amp; (req.sessionId = parse(req.headers.cookie).sessionId)))判断req.sessionId是否存在，如果不存在那么就创建一个并把sessionId信息写入到响应头发送给客户端。\\n最后，还要在index.js文件中加入：\\nexports.session = require(\\\"./lib/session\\\");\\n有了session插件后，明天开发博客系统就有了保证，因为登录状态需要记录在session里。下一节，我们用session插件，做一个数字累加的例子。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445236679000.jpg','2015-10-19 06:38:29','2020-08-20 15:44:16'),(199,'第6天 路由功能——query.js 插件开发','query.js 插件开发','2','1','','路由插件','2',NULL,'','query.js的作用很简单，就是把 url 问号后的参数，转换为json对象，然后保存在req.query中即可。','1','','','0:01',762,'2','0',NULL,1,'0',223907,'<h3>query.js 插件开发</h3><p>query.js的作用很简单，就是把 url 问号后的参数，转换为json对象，然后保存在req.query中即可。</p><p>我们知道，所有的插件都会通过<code>app.use(middle)</code>的形式加入，而插件的写法是<code>function middle(req,res,next){ }</code>。所以第一步就要在lib目录下建立一个query.js文件。下面是插件的源代码和说明。</p><pre>var&nbsp;url&nbsp;=&nbsp;require(&quot;url&quot;),\n&nbsp;&nbsp;&nbsp;&nbsp;qs&nbsp;=&nbsp;require(&quot;querystring&quot;);\n\nfunction&nbsp;query(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;querystring&nbsp;=&nbsp;url.parse(req.url).query;&nbsp;//&nbsp;请求参数部分\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;判断是否有参数\n&nbsp;&nbsp;&nbsp;&nbsp;if(querystring){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;queryObj&nbsp;=&nbsp;qs.parse(querystring);&nbsp;&nbsp;//&nbsp;转换为json格式\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req.query&nbsp;=&nbsp;queryObj;&nbsp;&nbsp;//&nbsp;赋值\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;next();\n}\n\nmodule.exports&nbsp;=&nbsp;query;</pre><p>这个中间件，使用了node.js核心模块 <code>querystring</code>，它有个方法<code>parse</code>可以把字符串形式的查询参数字符串，转换为json格式。</p><p>最后我们修改<code>stuwebfk/index.js</code> 加入以下代码</p><pre>exports.App&nbsp;=&nbsp;require(&quot;./lib/App&quot;);\nexports.static&nbsp;=&nbsp;require(&quot;./lib/static&quot;);\nexports.query&nbsp;=&nbsp;require(&quot;./lib/query&quot;);</pre><p>这样外界就可以通过require得到query模块了。</p><p>下面我们做一个例子，用来测试query插件的作用。</p><pre>var&nbsp;App&nbsp;=&nbsp;require(&quot;../..&quot;).App,\n&nbsp;&nbsp;&nbsp;&nbsp;query&nbsp;=&nbsp;require(&quot;../..&quot;).query,\n&nbsp;&nbsp;&nbsp;&nbsp;app&nbsp;=&nbsp;new&nbsp;App;\n\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;加入query中间件\n&nbsp;&nbsp;&nbsp;&nbsp;app.use(query);\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.get(&quot;/about&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.write(&quot;my&nbsp;name&nbsp;is&nbsp;&quot;+req.query.name);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end();\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.listen(3000);</pre><p>运行程序，并打开浏览器，输入 localhost:3000/about?name=okok , 这时候浏览器的内容应该是&nbsp;</p><pre>my&nbsp;name&nbsp;is&nbsp;okok</pre><p>思考一下整个插件的开发过程，并自己动手实际的开发，然后进行下一步的开发。下一节，我们要通过<code>req.params</code>的形式得到<code>:xxx</code>形式的url参数。</p>','[{\"type\":\"contents\",\"content\":\"query.js 插件开发\\nquery.js的作用很简单，就是把 url 问号后的参数，转换为json对象，然后保存在req.query中即可。\\n我们知道，所有的插件都会通过app.use(middle)的形式加入，而插件的写法是function middle(req,res,next){ }。所以第一步就要在lib目录下建立一个query.js文件。下面是插件的源代码和说明。\\nvar url = require(\\\"url\\\"),\\n    qs = require(\\\"querystring\\\");\\n\\nfunction query(req,res,next){\\n    var querystring = url.parse(req.url).query; // 请求参数部分\\n    // 判断是否有参数\\n    if(querystring){\\n        var queryObj = qs.parse(querystring);  // 转换为json格式\\n        req.query = queryObj;  // 赋值\\n    }\\n\\n    next();\\n}\\n\\nmodule.exports = query;\\n这个中间件，使用了node.js核心模块 querystring，它有个方法parse可以把字符串形式的查询参数字符串，转换为json格式。\\n最后我们修改stuwebfk/index.js 加入以下代码\\nexports.App = require(\\\"./lib/App\\\");\\nexports.static = require(\\\"./lib/static\\\");\\nexports.query = require(\\\"./lib/query\\\");\\n这样外界就可以通过require得到query模块了。\\n下面我们做一个例子，用来测试query插件的作用。\\nvar App = require(\\\"../..\\\").App,\\n    query = require(\\\"../..\\\").query,\\n    app = new App;\\n\\n    // 加入query中间件\\n    app.use(query);\\n\\n    app.get(\\\"/about\\\",function(req,res){\\n        res.write(\\\"my name is \\\"+req.query.name);\\n        res.end();\\n    })\\n\\n    app.listen(3000);\\n运行程序，并打开浏览器，输入 localhost:3000/about?name=okok , 这时候浏览器的内容应该是 \\nmy name is okok\\n思考一下整个插件的开发过程，并自己动手实际的开发，然后进行下一步的开发。下一节，我们要通过req.params的形式得到:xxx形式的url参数。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444891932000.jpg','2015-10-14 13:18:43','2020-08-20 15:44:23'),(200,'第6天 路由功能——插件补完','第6天 路由功能——插件补完','2','1','','路由插件','2',NULL,'','今天我们的任务，主要是补完stuwebfk框架的功能，这些功能通过中间件的方式进行开发。通过这些功能，请求处理器可以知道客户端的request请求数据。','1','','','0:01',762,'2','0',NULL,1,'0',223259,'<h3>第6天 路由功能——插件补完</h3><p>今天我们的任务，主要是补完stuwebfk框架的功能，这些功能通过中间件的方式进行开发。通过这些功能，请求处理器可以知道客户端的request请求数据。</p><p>（小帅哥若有所思的问：昨天我明白了泛式的写法，但具体有什么用还是不知道，难道只是为了随意更改*的泛式写法吗？）</p><p>这个问题很好！因为这也是今天要做的。泛式路由要想发挥作用，还需要一些功能。今天开发的功能很实用，可以说完成今天的开发，就可以使用stuwebfk框架进行真正的项目开发了。听起来很兴奋，那么就让我们开始吧！</p><p>我们还需要几个功能插件，才能发挥泛式路由的作用。这些功能包括：</p><ul class=\" list-paddingleft-2\"><li><p>把请求参数转换为json对象，通过req.query访问到。例如： /abc?name=leo 要转换成 req.query.name 的形式。</p></li><li><p>把泛式的<code>:name</code> 写法，转换为 req.params.name 的访问形式。</p></li></ul><p>有了以上2个插件，才能发挥路由的真正作用。下面我们定义这2个插件为 <code>query.js</code> &nbsp;、<code>params.js</code>。<span class=\"invade-word\">fuck</span></p><p>下一节，先从开发query.js插件（中间件）入手。</p>','[{\"type\":\"contents\",\"content\":\"第6天 路由功能——插件补完\\n今天我们的任务，主要是补完stuwebfk框架的功能，这些功能通过中间件的方式进行开发。通过这些功能，请求处理器可以知道客户端的request请求数据。\\n（小帅哥若有所思的问：昨天我明白了泛式的写法，但具体有什么用还是不知道，难道只是为了随意更改*的泛式写法吗？）\\n这个问题很好！因为这也是今天要做的。泛式路由要想发挥作用，还需要一些功能。今天开发的功能很实用，可以说完成今天的开发，就可以使用stuwebfk框架进行真正的项目开发了。听起来很兴奋，那么就让我们开始吧！\\n我们还需要几个功能插件，才能发挥泛式路由的作用。这些功能包括：\\n把请求参数转换为json对象，通过req.query访问到。例如： /abc?name=leo 要转换成 req.query.name 的形式。\\n把泛式的:name 写法，转换为 req.params.name 的访问形式。\\n\\n有了以上2个插件，才能发挥路由的真正作用。下面我们定义这2个插件为 query.js  、params.js。fuck\\n下一节，先从开发query.js插件（中间件）入手。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444891946000.jpg','2015-10-14 13:16:34','2020-08-20 15:44:23'),(201,'提升操作效率！Windows 10 快捷键汇总表格','Windows 10 快捷键汇总表格','1','1','','win10,操作系统','2',NULL,'','微软已经正式发布了最新的 Windows 10 操作系统了，我们已经提供了镜像下载、性能对比等。除了大量的新功能和界面改进，Windows 10中同样包含了一批新的键盘快捷键，以下为整理的表格，熟练的话可以大大提高操作效率，很实用，推荐大家收藏。','1','','','0:01',762,'2','0',NULL,1,'0',222908,'<p>&nbsp;&nbsp;&nbsp;&nbsp;微软已经正式发布了最新的 Windows 10 操作系统了，我们已经提供了镜像下载、性能对比等。除了大量的新功能和界面改进，Windows 10中同样包含了一批新的键盘快捷键，以下为整理的表格，熟练的话可以大大提高操作效率，很实用，推荐大家收藏。</p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_2_22_16_26_820_1000.jpg\" title=\"\" alt=\"win10-shortcuts.jpg\"/></p><p><br/></p><p><br/></p><table class=\"entry-table\" cellpadding=\"8\" cellspacing=\"0\" width=\"100%\" data-sort=\"sortDisabled\"><tbody><tr class=\"firstRow\"><th rowspan=\"1\" colspan=\"2\">Windows 10 快捷键汇总</th></tr><tr><td width=\"35%\">Win键 + Tab</td><td width=\"65%\">激活任务视图</td></tr><tr><td width=\"35%\">Win键 + A</td><td width=\"65%\">激活操作中心</td></tr><tr><td width=\"35%\">Win键 + C</td><td width=\"65%\">通过语音激活Cortana</td></tr><tr><td width=\"35%\">Win键 + D</td><td width=\"65%\">显示桌面</td></tr><tr><td width=\"35%\">Win键 + E</td><td _hover-ignore=\"1\" width=\"65%\">打开文件管理器</td></tr><tr><td width=\"35%\">Win键 + G</td><td width=\"65%\">打开Xbox游戏录制工具栏，供用户录制游戏视频或截屏</td></tr><tr><td width=\"35%\">Win键 + H</td><td width=\"65%\">激活Windows 10应用的分享功能</td></tr><tr><td width=\"35%\">Win键 + I</td><td width=\"65%\">打开Windows 10设置</td></tr><tr><td width=\"35%\">Win键 + K</td><td width=\"65%\">激活无线显示器连接或音频设备连接</td></tr><tr><td width=\"35%\">Win键 + L</td><td width=\"65%\">锁定屏幕</td></tr><tr><td width=\"35%\">Win键 + P</td><td width=\"65%\">投影屏幕</td></tr><tr><td width=\"35%\">Win键 + R</td><td width=\"65%\">运行</td></tr><tr><td width=\"35%\">Win键 + S</td><td width=\"65%\">激活Cortana</td></tr><tr><td width=\"35%\">Win键 + X</td><td width=\"65%\">打开高级用户功能</td></tr><tr><td width=\"35%\">Win键 + 左/右/上/下</td><td width=\"65%\">移动应用窗口</td></tr><tr><td width=\"35%\">Win键 + Ctrl + D</td><td width=\"65%\">创建一个新的虚拟桌面</td></tr><tr><td width=\"35%\">Win键 + Ctrl + F4</td><td width=\"65%\">关闭虚拟桌面</td></tr><tr><td width=\"35%\">Win键 + Ctrl + 左/右</td><td width=\"65%\">切换虚拟桌面</td></tr><tr><td width=\"35%\">Win键 + Shift + 左/右</td><td width=\"65%\">将应用从一个显示屏移至另一个显示屏</td></tr><tr><td width=\"35%\">Win键 + 1/2/3</td><td width=\"65%\">打开任务栏中固定的程序，1代表任务栏中第一个应用图标</td></tr></tbody></table><p><br/></p>','[{\"type\":\"contents\",\"content\":\"    微软已经正式发布了最新的 Windows 10 操作系统了，我们已经提供了镜像下载、性能对比等。除了大量的新功能和界面改进，Windows 10中同样包含了一批新的键盘快捷键，以下为整理的表格，熟练的话可以大大提高操作效率，很实用，推荐大家收藏。\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_2_22_16_26_820_1000.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n\\nWindows 10 快捷键汇总Win键 + Tab激活任务视图Win键 + A激活操作中心Win键 + C通过语音激活CortanaWin键 + D显示桌面Win键 + E打开文件管理器Win键 + G打开Xbox游戏录制工具栏，供用户录制游戏视频或截屏Win键 + H激活Windows 10应用的分享功能Win键 + I打开Windows 10设置Win键 + K激活无线显示器连接或音频设备连接Win键 + L锁定屏幕Win键 + P投影屏幕Win键 + R运行Win键 + S激活CortanaWin键 + X打开高级用户功能Win键 + 左/右/上/下移动应用窗口Win键 + Ctrl + D创建一个新的虚拟桌面Win键 + Ctrl + F4关闭虚拟桌面Win键 + Ctrl + 左/右切换虚拟桌面Win键 + Shift + 左/右将应用从一个显示屏移至另一个显示屏Win键 + 1/2/3打开任务栏中固定的程序，1代表任务栏中第一个应用图标\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444889533000.jpg','2015-08-02 14:16:39','2020-08-20 15:44:26'),(202,'DoraCMS目前存在的问题','DoraCMS目前存在的问题','1','1','','DoraCMS','2',NULL,'','今天咋cnodejs上，前端的faceair提了几个很重要的问题，我觉得很有必要优化一下','1','','','0:01',762,'2','0',NULL,0,'0',223381,'<p>今天咋cnodejs上，前端的<a class=\"dark reply_author\" href=\"https://cnodejs.org/user/faceair\">faceair</a>提了几个很重要的问题，我觉得很有必要优化一下：</p><p><br/></p><ol class=\" list-paddingleft-2\"><li><p><code>node_modules</code> 就不要放在源码里面了, 有的模块需要编译, 不同的系统间不兼容</p></li><li><p>可以多用mongoose的实例和静态方法, 不要在路由里面做大量逻辑操作, 也方便方法的复用</p></li><li><p>进路由的参数都没有过滤, 攻击者可以自己构造mongo查询, 返回意想不到的结果 (keyword: mongodb注入)</p></li><li><p>如上的批量删除别这么写… 可以用mongodb的<a target=\"_blank\" href=\"https://docs.mongodb.org/manual/reference/operator/query/in/\">$in操作符</a> <code>targetObj.remove({_id: {$in: idsArr}}, callback)</code></p></li></ol><p><br/></p><p>其中第三条确实忽略了，后面重点处理后台参数校验问题，保障服务端安全性，mongoose的实例和静态方法我还不是很熟悉，后面要深入了解一下。</p><p>之前写的递归的批量删除是这样的：</p><pre class=\"brush:js;toolbar:false\">var&nbsp;params&nbsp;=&nbsp;url.parse(req.url,true);\nvar&nbsp;ids&nbsp;=&nbsp;params.query.ids;\nvar&nbsp;idsArr&nbsp;=&nbsp;ids.split(&#39;,&#39;);\nvar&nbsp;batchDel&nbsp;=&nbsp;function(targetId,n){\n&nbsp;&nbsp;&nbsp;&nbsp;targetObj.remove({&#39;_id&#39;:targetId},function(err){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(err){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end(err);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;idsArr.splice(n,1);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(idsArr.length&nbsp;&gt;&nbsp;0){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var&nbsp;i=0;i&lt;idsArr.length;i++){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;batchDel(idsArr[i],i);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end(&quot;success&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;});};\n&nbsp;&nbsp;&nbsp;&nbsp;batchDel(idsArr[0],0);</pre><p>其实 mongoose 有更简单的方式处理：<br/></p><pre class=\"brush:js;toolbar:false\">var&nbsp;params&nbsp;=&nbsp;url.parse(req.url,true);\nvar&nbsp;ids&nbsp;=&nbsp;params.query.ids;\nvar&nbsp;idsArr&nbsp;=&nbsp;ids.split(&#39;,&#39;);\ntargetObj.remove({&#39;_id&#39;:{$in:&nbsp;idsArr}},function(err){\n	if(err){\n		res.end(err);\n	}else{\n		res.end(&quot;success&quot;);\n	}\n});</pre><p><br/></p>','[{\"type\":\"contents\",\"content\":\"今天咋cnodejs上，前端的faceair提了几个很重要的问题，我觉得很有必要优化一下：\\n\\nnode_modules 就不要放在源码里面了, 有的模块需要编译, 不同的系统间不兼容\\n可以多用mongoose的实例和静态方法, 不要在路由里面做大量逻辑操作, 也方便方法的复用\\n进路由的参数都没有过滤, 攻击者可以自己构造mongo查询, 返回意想不到的结果 (keyword: mongodb注入)\\n如上的批量删除别这么写… 可以用mongodb的$in操作符 targetObj.remove({_id: {$in: idsArr}}, callback)\\n\\n\\n其中第三条确实忽略了，后面重点处理后台参数校验问题，保障服务端安全性，mongoose的实例和静态方法我还不是很熟悉，后面要深入了解一下。\\n之前写的递归的批量删除是这样的：\\nvar params = url.parse(req.url,true);\\nvar ids = params.query.ids;\\nvar idsArr = ids.split(\',\');\\nvar batchDel = function(targetId,n){\\n    targetObj.remove({\'_id\':targetId},function(err){\\n        if(err){\\n            res.end(err);\\n        }else{\\n            idsArr.splice(n,1);\\n            if(idsArr.length &gt; 0){\\n                for(var i=0;i&lt;idsArr.length;i++){\\n                    batchDel(idsArr[i],i);\\n                }\\n            }else{\\n                res.end(\\\"success\\\");\\n            }\\n \\n        }\\n    });};\\n    batchDel(idsArr[0],0);\\n其实 mongoose 有更简单的方式处理：\\nvar params = url.parse(req.url,true);\\nvar ids = params.query.ids;\\nvar idsArr = ids.split(\',\');\\ntargetObj.remove({\'_id\':{$in: idsArr}},function(err){\\n\\tif(err){\\n\\t\\tres.end(err);\\n\\t}else{\\n\\t\\tres.end(\\\"success\\\");\\n\\t}\\n});\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444895955000.jpg','2015-10-01 14:32:00','2020-08-20 15:44:23'),(203,'NodeJS独立开发web框架——静态服务器开发(2)','服务器返回主页功能','2','1','','静态服务器','2',NULL,'','下面我们编写一个单独的html文件，当有请求时，会把它作为响应数据。\n首先，创建 day01/public文件夹，然后在public文件夹内创建一个index.html网页文档。','1','','','0:01',762,'2','0',NULL,0,'0',224447,'<h3>服务器返回主页功能</h3><p>下面我们编写一个单独的html文件，当有请求时，会把它作为响应数据。</p><p>首先，创建 <code>day01/public</code>文件夹，然后在<code>public</code>文件夹内创建一个<code>index.html</code>网页文档。</p><h4 id=\"-html\">下面编写一段html</h4><pre>&lt;!doctype&nbsp;html&gt;\n&lt;html&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;utf-8&quot;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;node.js&nbsp;你好&lt;/title&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;body&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;hr&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;b&gt;&lt;i&gt;node.js&nbsp;你好！javascript&nbsp;你好！&lt;/i&gt;&lt;/b&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;hr&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/body&gt;\n&lt;/html&gt;</pre><p>静态html文档有了，如何让服务器读取呢? 这就需要用到另一个模块，<code>File System</code> 模块。通过<code>var fs = require(&quot;fs&quot;)</code>可以得到该模块对象。</p><p>通过 <code>fs.readFile</code> 或 <code>fs.readFileSync</code> 方法可以读取文件内容，两者的区别是一个是异步的，一个是同步的。异步就是底层的读取数据操作和主程序是两个进程，也就是说不会阻塞，而同步正好相反。下面我们修改<code>handle</code>函数让他读取到<code>index.html</code>文档的内容，会采用异步和同步两种方式实现，功能效果是一致的。</p><p>把 httpServer.js文件拷贝一份叫httpServer2.js，我们将扩展httpServer.js程序的功能。</p><hr/><h4 id=\"handle-\">handle函数添加读取主页功能</h4><h5 id=\"-\">同步实现方法</h5><pre>var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);&nbsp;&nbsp;&nbsp;//&nbsp;得到File&nbsp;System模块对象\nfunction&nbsp;handle(request,response){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;data&nbsp;=&nbsp;fs.readFileSync(__dirname+&quot;/public/index.html&quot;);&nbsp;&nbsp;//&nbsp;读完文档数据并返回后，程序才能继续。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.write(data);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end();\n}</pre><h5 id=\"-\">异步实现方法</h5><pre>var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);&nbsp;&nbsp;&nbsp;//&nbsp;得到File&nbsp;System模块对象\nfunction&nbsp;handle(request,response){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;回调函数，当底层得到文档后，会调用该函数。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;callback(err,data){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.write(data);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;异步方式不会阻塞主程序进程\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fs.readFile(__dirname+&quot;/public/index.html&quot;,callback);&nbsp;&nbsp;\n\n}</pre><p>一般在node.js实际开发中都采用异步方式，因为node.js的优势就在于非阻塞I/O异步，这样性能会很高。</p><p>浏览器访问效果</p><p><img alt=\"\" src=\"http://jsera.qiniudn.com/picture/brighthas-lkfKJg1sMg\"/></p><p>下一节，通过对程序进一步扩展，指定静态服务器目录，让客户端可以访问该目录内的所有文件。</p>','[{\"type\":\"contents\",\"content\":\"服务器返回主页功能\\n下面我们编写一个单独的html文件，当有请求时，会把它作为响应数据。\\n首先，创建 day01/public文件夹，然后在public文件夹内创建一个index.html网页文档。\\n下面编写一段html\\n&lt;!doctype html&gt;\\n&lt;html&gt;\\n    &lt;head&gt;\\n        &lt;meta charset=\\\"utf-8\\\"/&gt;\\n        &lt;title&gt;node.js 你好&lt;/title&gt;\\n    &lt;/head&gt;\\n    &lt;body&gt;\\n        &lt;hr&gt;\\n        &lt;b&gt;&lt;i&gt;node.js 你好！javascript 你好！&lt;/i&gt;&lt;/b&gt;\\n        &lt;hr&gt;\\n    &lt;/body&gt;\\n&lt;/html&gt;\\n静态html文档有了，如何让服务器读取呢? 这就需要用到另一个模块，File System 模块。通过var fs = require(\\\"fs\\\")可以得到该模块对象。\\n通过 fs.readFile 或 fs.readFileSync 方法可以读取文件内容，两者的区别是一个是异步的，一个是同步的。异步就是底层的读取数据操作和主程序是两个进程，也就是说不会阻塞，而同步正好相反。下面我们修改handle函数让他读取到index.html文档的内容，会采用异步和同步两种方式实现，功能效果是一致的。\\n把 httpServer.js文件拷贝一份叫httpServer2.js，我们将扩展httpServer.js程序的功能。\\nhandle函数添加读取主页功能\\n同步实现方法\\nvar fs = require(\\\"fs\\\");   // 得到File System模块对象\\nfunction handle(request,response){\\n       var data = fs.readFileSync(__dirname+\\\"/public/index.html\\\");  // 读完文档数据并返回后，程序才能继续。\\n       response.write(data);\\n       response.end();\\n}\\n异步实现方法\\nvar fs = require(\\\"fs\\\");   // 得到File System模块对象\\nfunction handle(request,response){\\n       // 回调函数，当底层得到文档后，会调用该函数。\\n       function callback(err,data){\\n             response.write(data);\\n             response.end();       \\n       }\\n       // 异步方式不会阻塞主程序进程\\n       fs.readFile(__dirname+\\\"/public/index.html\\\",callback);  \\n\\n}\\n一般在node.js实际开发中都采用异步方式，因为node.js的优势就在于非阻塞I/O异步，这样性能会很高。\\n浏览器访问效果\\n\"},{\"type\":\"image\",\"content\":\"http://jsera.qiniudn.com/picture/brighthas-lkfKJg1sMg\"},{\"type\":\"contents\",\"content\":\"\\n下一节，通过对程序进一步扩展，指定静态服务器目录，让客户端可以访问该目录内的所有文件。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444892532000.jpg','2015-09-02 14:37:05','2020-08-20 15:44:25'),(204,'DoraCMS后台登录慢的问题','DoraCMS后台登录慢的问题','1','1','','后台登录','2',NULL,'','最近有部分doracms用户遇到后台登录非常卡的问题，细心的童鞋应该看到了，是请求google front超时了，我把这部分代码去掉了，对整体没有影响，主要改了以下两个文件','1','','','0:01',762,'2','0',NULL,0,'0',223720,'<p>最近有部分doracms用户遇到后台登录非常卡的问题，细心的童鞋应该看到了，是请求google front超时了，我把这部分代码去掉了，对整体没有影响，主要改了以下两个文件</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_3_10_20_49_38_526_1003.jpg\" title=\"\" alt=\"QQ截图20160310204626.jpg\"/></p><p><br/></p><p>直接去掉文件的第一行代码（import google front）就可以了，代码已经提交，更新下就可以了</p>','[{\"type\":\"contents\",\"content\":\"最近有部分doracms用户遇到后台登录非常卡的问题，细心的童鞋应该看到了，是请求google front超时了，我把这部分代码去掉了，对整体没有影响，主要改了以下两个文件\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_3_10_20_49_38_526_1003.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n直接去掉文件的第一行代码（import google front）就可以了，代码已经提交，更新下就可以了\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20160310204814.jpg','2016-03-10 12:50:19','2020-08-20 15:44:09'),(205,'Express 4.8.x—koajs框架快速掌握','koajs框架快速掌握','2','1','','koajs框架','2',NULL,'','koa 是一个新的Web框架，其目的是为Web应用程序的API更精简，更具表现力，更坚实而设计。通过利用generator，koa让你不再面对回调，可大大增加错误处理能力。','1','','','0:01',762,'2','0',NULL,0,'0',225206,'<h3>koajs框架快速掌握</h3><p>koa 是一个新的Web框架，其目的是为Web应用程序的API更精简，更具表现力，更坚实而设计。通过利用generator，koa让你不再面对回调，可大大增加错误处理能力。兴亚内没有捆绑任何中间件，提供了一个优雅的方法，使开发web程序更快速和愉快。</p><h4 id=\"-\">安装</h4><p>node version &gt; 0.11.x&nbsp;</p><p>你可以安装 n 工具，这样可轻松安装node ，并在各版本轻松切换。</p><pre>$&nbsp;npm&nbsp;install&nbsp;-g&nbsp;n\n$&nbsp;n&nbsp;0.11.13\n$&nbsp;node&nbsp;--harmony&nbsp;my-koa-app.js</pre><p>这里通过<code>--harmony</code> 参数，让node支持 generator。</p><h4 id=\"-\">使用例子</h4><p>下面是个例子：</p><pre>var&nbsp;koa&nbsp;=&nbsp;require(&#39;koa&#39;);\nvar&nbsp;app&nbsp;=&nbsp;koa();\n\napp.use(function&nbsp;*(){\n&nbsp;&nbsp;this.body&nbsp;=&nbsp;&#39;Hello&nbsp;World&#39;;\n});\n\napp.listen(3000);</pre><p>运行后，浏览器访问 localhost:3000 可以看到 <code>Hello World</code>。</p><h4 id=\"-\">中间件</h4><p>koa的中间件类似express，但仅仅是类似，下面是个中间件例子：</p><pre>var&nbsp;koa&nbsp;=&nbsp;require(&#39;koa&#39;);\nvar&nbsp;app&nbsp;=&nbsp;koa();\n\n//&nbsp;logger&nbsp;中间件\napp.use(function&nbsp;*(next){\n&nbsp;&nbsp;var&nbsp;start&nbsp;=&nbsp;new&nbsp;Date;\n&nbsp;&nbsp;yield&nbsp;next;\n&nbsp;&nbsp;var&nbsp;ms&nbsp;=&nbsp;new&nbsp;Date&nbsp;-&nbsp;start;\n&nbsp;&nbsp;console.log(&#39;%s&nbsp;%s&nbsp;-&nbsp;%s&#39;,&nbsp;this.method,&nbsp;this.url,&nbsp;ms);\n});\n\napp.use(function&nbsp;*(){\n&nbsp;&nbsp;console.log(“first&nbsp;run”);\n&nbsp;&nbsp;this.body&nbsp;=&nbsp;&#39;Hello&nbsp;World&#39;;\n});\n\napp.listen(3000);</pre><p>我们开发了 logger 中间件，浏览器访问 &nbsp;localhost:3000 在终端打印出：</p><pre>first&nbsp;run\nGET&nbsp;/&nbsp;-&nbsp;6</pre><p>为什么 first run 先运行了呢，因为 <code>yield next</code>这句，它会等待最终响应后，才继续它下面的语句。这种语法特色采用了 <code>co</code> 库风格，电子书相关章节介绍过了，这里不做过多解释。</p><h4 id=\"-\">错误处理</h4><pre>app.on(&#39;error&#39;,&nbsp;function(err){\n&nbsp;&nbsp;log.error(&#39;server&nbsp;error&#39;,&nbsp;err);\n});</pre><p>也可以传递 cxt 上下文对象，这样可以响应错误信息。</p><pre>app.on(&#39;error&#39;,&nbsp;function(err,&nbsp;ctx){\n&nbsp;&nbsp;log.error(&#39;server&nbsp;error&#39;,&nbsp;err,&nbsp;ctx);\n});</pre><h4 id=\"-\">上下文对象</h4><p>上下文对象封装了 request 和 response 对象，提供相关的方法，每次请求都会创建一个新的上下文对象。</p><pre>app.use(function&nbsp;*(){\n&nbsp;&nbsp;this;&nbsp;//&nbsp;上下文对象\n&nbsp;&nbsp;this.request;&nbsp;//&nbsp;&nbsp;得到请求对象\n&nbsp;&nbsp;this.response;&nbsp;//&nbsp;响应对象\n});</pre><p>很多请求和响应对象的方法，绑定到了上下文对象上。</p><h4 id=\"request-\">request 请求对象属性与方法：</h4><ul class=\" list-paddingleft-2\"><li><p>ctx.header</p></li><li><p>ctx.method</p></li><li><p>ctx.method=</p></li><li><p>ctx.url</p></li><li><p>ctx.url=</p></li><li><p>ctx.originalUrl</p></li><li><p>ctx.path</p></li><li><p>ctx.path=</p></li><li><p>ctx.query</p></li><li><p>ctx.query=</p></li><li><p>ctx.querystring</p></li><li><p>ctx.querystring=</p></li><li><p>ctx.host</p></li><li><p>ctx.hostname</p></li><li><p>ctx.fresh</p></li><li><p>ctx.stale</p></li><li><p>ctx.socket</p></li><li><p>ctx.protocol</p></li><li><p>ctx.secure</p></li><li><p>ctx.ip</p></li><li><p>ctx.ips</p></li><li><p>ctx.subdomains</p></li><li><p>ctx.is()</p></li><li><p>ctx.accepts()</p></li><li><p>ctx.acceptsEncodings()</p></li><li><p>ctx.acceptsCharsets()</p></li><li><p>ctx.acceptsLanguages()</p></li><li><p>ctx.get()</p></li></ul><p>这些属性可以通过 this.url 调用，也可通过 this.req.url 方式调用。这些属性和express一样，这里不过多介绍。</p><h4 id=\"response-\">response 响应对象的方法</h4><ul class=\" list-paddingleft-2\"><li><p>ctx.body</p></li><li><p>ctx.body=</p></li></ul><p>body是响应的内容，它可以设置 String / Buffer / JSON 类型</p><ul class=\" list-paddingleft-2\"><li><p>ctx.status</p></li><li><p>ctx.status=</p></li><li><p>ctx.length=</p></li><li><p>ctx.length</p></li><li><p>ctx.type=</p></li><li><p>ctx.type</p></li><li><p>ctx.headerSent</p></li><li><p>ctx.redirect()</p></li><li><p>ctx.attachment()</p></li><li><p>ctx.set()</p></li><li><p>ctx.remove()</p></li><li><p>ctx.lastModified=</p></li><li><p>ctx.etag=</p></li></ul><p>可参看 ： <a href=\"http://koajs.com/\">http://koajs.com/</a>koa中间件： <a href=\"https://github.com/koajs/koa/wiki#middleware\">https://github.com/koajs/koa/wiki#middleware</a><span class=\"invade-word\">this</span></p><p>掌握了express也就等于掌握了koa。相对来说，express 更成熟，koa更新颖快捷，可根据自身，选择开发框架。</p>','[{\"type\":\"contents\",\"content\":\"koajs框架快速掌握\\nkoa 是一个新的Web框架，其目的是为Web应用程序的API更精简，更具表现力，更坚实而设计。通过利用generator，koa让你不再面对回调，可大大增加错误处理能力。兴亚内没有捆绑任何中间件，提供了一个优雅的方法，使开发web程序更快速和愉快。\\n安装\\nnode version &gt; 0.11.x \\n你可以安装 n 工具，这样可轻松安装node ，并在各版本轻松切换。\\n$ npm install -g n\\n$ n 0.11.13\\n$ node --harmony my-koa-app.js\\n这里通过--harmony 参数，让node支持 generator。\\n使用例子\\n下面是个例子：\\nvar koa = require(\'koa\');\\nvar app = koa();\\n\\napp.use(function *(){\\n  this.body = \'Hello World\';\\n});\\n\\napp.listen(3000);\\n运行后，浏览器访问 localhost:3000 可以看到 Hello World。\\n中间件\\nkoa的中间件类似express，但仅仅是类似，下面是个中间件例子：\\nvar koa = require(\'koa\');\\nvar app = koa();\\n\\n// logger 中间件\\napp.use(function *(next){\\n  var start = new Date;\\n  yield next;\\n  var ms = new Date - start;\\n  console.log(\'%s %s - %s\', this.method, this.url, ms);\\n});\\n\\napp.use(function *(){\\n  console.log(“first run”);\\n  this.body = \'Hello World\';\\n});\\n\\napp.listen(3000);\\n我们开发了 logger 中间件，浏览器访问  localhost:3000 在终端打印出：\\nfirst run\\nGET / - 6\\n为什么 first run 先运行了呢，因为 yield next这句，它会等待最终响应后，才继续它下面的语句。这种语法特色采用了 co 库风格，电子书相关章节介绍过了，这里不做过多解释。\\n错误处理\\napp.on(\'error\', function(err){\\n  log.error(\'server error\', err);\\n});\\n也可以传递 cxt 上下文对象，这样可以响应错误信息。\\napp.on(\'error\', function(err, ctx){\\n  log.error(\'server error\', err, ctx);\\n});\\n上下文对象\\n上下文对象封装了 request 和 response 对象，提供相关的方法，每次请求都会创建一个新的上下文对象。\\napp.use(function *(){\\n  this; // 上下文对象\\n  this.request; //  得到请求对象\\n  this.response; // 响应对象\\n});\\n很多请求和响应对象的方法，绑定到了上下文对象上。\\nrequest 请求对象属性与方法：\\nctx.header\\nctx.method\\nctx.method=\\nctx.url\\nctx.url=\\nctx.originalUrl\\nctx.path\\nctx.path=\\nctx.query\\nctx.query=\\nctx.querystring\\nctx.querystring=\\nctx.host\\nctx.hostname\\nctx.fresh\\nctx.stale\\nctx.socket\\nctx.protocol\\nctx.secure\\nctx.ip\\nctx.ips\\nctx.subdomains\\nctx.is()\\nctx.accepts()\\nctx.acceptsEncodings()\\nctx.acceptsCharsets()\\nctx.acceptsLanguages()\\nctx.get()\\n\\n这些属性可以通过 this.url 调用，也可通过 this.req.url 方式调用。这些属性和express一样，这里不过多介绍。\\nresponse 响应对象的方法\\nctx.body\\nctx.body=\\n\\nbody是响应的内容，它可以设置 String / Buffer / JSON 类型\\nctx.status\\nctx.status=\\nctx.length=\\nctx.length\\nctx.type=\\nctx.type\\nctx.headerSent\\nctx.redirect()\\nctx.attachment()\\nctx.set()\\nctx.remove()\\nctx.lastModified=\\nctx.etag=\\n\\n可参看 ： http://koajs.com/koa中间件： https://github.com/koajs/koa/wiki#middlewarethis\\n掌握了express也就等于掌握了koa。相对来说，express 更成熟，koa更新颖快捷，可根据自身，选择开发框架。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445060297000.jpg','2015-10-17 05:39:56','2020-08-20 15:44:19'),(206,'DoraCMS 分页改造','DoraCMS 分页改造','1','1','','分页','2',NULL,'','一直准备改造DoraCMS 的分页，今天有空处理了一下。之前的分页是基于angularJS，但是不太好控制，多余的页码也不方便显示。于是重新改造了，直接使用原生的js去显示分页，后台返回数据不变','1','','','0:01',762,'2','0',NULL,0,'0',223170,'<p>一直准备改造DoraCMS 的分页，今天有空处理了一下。之前的分页是基于angularJS，但是不太好控制，多余的页码也不方便显示。于是重新改造了，直接使用原生的js去显示分页，后台返回数据不变，后台返回到前台主要参数：</p><p><br/></p><p>pageInfo.currentPage ： 当前页码</p><p>pageInfo.totalItems ： 总记录数</p><p>pageInfo.limit ： 每页显示记录数</p><p><br/></p><p>具体实现：<br/></p><pre class=\"brush:js;toolbar:false\">&lt;!--分页模块--&gt;\n&lt;div&nbsp;class=&quot;pagenation&nbsp;text-center&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%var&nbsp;localUrl;var&nbsp;param&nbsp;=&#39;&#39;;%&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%if(pageType&nbsp;==&nbsp;&#39;index&#39;){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localUrl&nbsp;=&nbsp;&quot;/page&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else&nbsp;if(pageType&nbsp;==&nbsp;&#39;cate&#39;){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localUrl&nbsp;=&nbsp;&#39;/&#39;+&nbsp;cateInfo.defaultUrl&nbsp;+&nbsp;&#39;___&#39;&nbsp;+&nbsp;cateInfo._id;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else&nbsp;if(pageType&nbsp;==&nbsp;&#39;search&#39;){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;param&nbsp;=&nbsp;&#39;?searchKey=&#39;&nbsp;+&nbsp;pageInfo.searchKey;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localUrl&nbsp;=&nbsp;&#39;/content/searchResult/items&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;%&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%var&nbsp;totalItems&nbsp;=&nbsp;pageInfo.totalItems;var&nbsp;limit&nbsp;=&nbsp;pageInfo.limit%&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%var&nbsp;totalPage&nbsp;=&nbsp;Math.ceil(totalItems&nbsp;/&nbsp;limit)&nbsp;;%&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;page_start&nbsp;=&nbsp;pageInfo.currentPage&nbsp;-&nbsp;2&nbsp;&gt;&nbsp;0&nbsp;?&nbsp;pageInfo.currentPage&nbsp;-&nbsp;2&nbsp;:&nbsp;1;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;page_end&nbsp;=&nbsp;page_start&nbsp;+&nbsp;4&nbsp;&gt;=&nbsp;totalPage&nbsp;?&nbsp;totalPage&nbsp;:&nbsp;page_start&nbsp;+&nbsp;4;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;%&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%if(pageInfo.currentPage&nbsp;!=&nbsp;1){%&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a&nbsp;href=&quot;&lt;%=localUrl%&gt;—1.html&lt;%=param%&gt;&quot;&gt;«&lt;/a&gt;&lt;/li&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%}%&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%&nbsp;if&nbsp;(page_start&nbsp;&gt;&nbsp;1)&nbsp;{&nbsp;%&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a&gt;...&lt;/a&gt;&lt;/li&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%&nbsp;}&nbsp;%&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%for(var&nbsp;i=page_start;i&lt;=page_end;i++){%&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%if(i&nbsp;==&nbsp;pageInfo.currentPage){%&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&nbsp;class=&quot;active&quot;&gt;&lt;a&gt;&lt;%=i%&gt;&lt;/a&gt;&lt;/li&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%}else{%&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a&nbsp;href=&quot;&lt;%=localUrl%&gt;—&lt;%=i%&gt;.html&lt;%=param%&gt;&quot;&gt;&lt;%=i%&gt;&lt;/a&gt;&lt;/li&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%}%&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%}%&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%&nbsp;if&nbsp;(page_end&nbsp;&lt;&nbsp;totalPage&nbsp;)&nbsp;{&nbsp;%&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a&gt;...&lt;/a&gt;&lt;/li&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%&nbsp;}&nbsp;%&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%if(pageInfo.currentPage&nbsp;!=&nbsp;totalPage){%&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a&nbsp;href=&quot;&lt;%=localUrl%&gt;—&lt;%=totalPage%&gt;.html&lt;%=param%&gt;&quot;&gt;»&lt;/a&gt;&lt;/li&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%}%&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ul&gt;\n&lt;/div&gt;</pre><p></p>','[{\"type\":\"contents\",\"content\":\"一直准备改造DoraCMS 的分页，今天有空处理了一下。之前的分页是基于angularJS，但是不太好控制，多余的页码也不方便显示。于是重新改造了，直接使用原生的js去显示分页，后台返回数据不变，后台返回到前台主要参数：\\n\\npageInfo.currentPage ： 当前页码\\npageInfo.totalItems ： 总记录数\\npageInfo.limit ： 每页显示记录数\\n\\n具体实现：\\n&lt;!--分页模块--&gt;\\n&lt;div class=\\\"pagenation text-center\\\"&gt;\\n    &lt;ul&gt;\\n        &lt;%var localUrl;var param =\'\';%&gt;\\n        &lt;%if(pageType == \'index\'){\\n            localUrl = \\\"/page\\\";\\n        }else if(pageType == \'cate\'){\\n            localUrl = \'/\'+ cateInfo.defaultUrl + \'___\' + cateInfo._id;\\n        }else if(pageType == \'search\'){\\n            param = \'?searchKey=\' + pageInfo.searchKey;\\n            localUrl = \'/content/searchResult/items\';\\n        }\\n        %&gt;\\n\\n        &lt;%var totalItems = pageInfo.totalItems;var limit = pageInfo.limit%&gt;\\n        &lt;%var totalPage = Math.ceil(totalItems / limit) ;%&gt;\\n\\n        &lt;%\\n        var page_start = pageInfo.currentPage - 2 &gt; 0 ? pageInfo.currentPage - 2 : 1;\\n        var page_end = page_start + 4 &gt;= totalPage ? totalPage : page_start + 4;\\n        %&gt;\\n\\n        &lt;%if(pageInfo.currentPage != 1){%&gt;\\n        &lt;li&gt;&lt;a href=\\\"&lt;%=localUrl%&gt;—1.html&lt;%=param%&gt;\\\"&gt;«&lt;/a&gt;&lt;/li&gt;\\n        &lt;%}%&gt;\\n\\n        &lt;% if (page_start &gt; 1) { %&gt;\\n        &lt;li&gt;&lt;a&gt;...&lt;/a&gt;&lt;/li&gt;\\n        &lt;% } %&gt;\\n\\n        &lt;%for(var i=page_start;i&lt;=page_end;i++){%&gt;\\n            &lt;%if(i == pageInfo.currentPage){%&gt;\\n                 &lt;li class=\\\"active\\\"&gt;&lt;a&gt;&lt;%=i%&gt;&lt;/a&gt;&lt;/li&gt;\\n            &lt;%}else{%&gt;\\n                 &lt;li&gt;&lt;a href=\\\"&lt;%=localUrl%&gt;—&lt;%=i%&gt;.html&lt;%=param%&gt;\\\"&gt;&lt;%=i%&gt;&lt;/a&gt;&lt;/li&gt;\\n            &lt;%}%&gt;\\n        &lt;%}%&gt;\\n\\n        &lt;% if (page_end &lt; totalPage ) { %&gt;\\n        &lt;li&gt;&lt;a&gt;...&lt;/a&gt;&lt;/li&gt;\\n        &lt;% } %&gt;\\n\\n        &lt;%if(pageInfo.currentPage != totalPage){%&gt;\\n            &lt;li&gt;&lt;a href=\\\"&lt;%=localUrl%&gt;—&lt;%=totalPage%&gt;.html&lt;%=param%&gt;\\\"&gt;»&lt;/a&gt;&lt;/li&gt;\\n        &lt;%}%&gt;\\n    &lt;/ul&gt;\\n&lt;/div&gt;\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444895353000.jpg','2015-09-17 03:45:14','2020-08-20 15:44:24'),(207,'第6天 路由功能——params.js 插件开发','params.js 插件开发','2','1','','路由插件','2',NULL,'','params.js 中间件可以把:xxx路由解析出来的数据，保存到req.params中。但这个插件开发有些难度，原因是如何知道url和:xxx对应？','1','','','0:01',762,'2','0',NULL,0,'0',223180,'<h3>params.js 插件开发</h3><p>params.js 中间件可以把<code>:xxx</code>路由解析出来的数据，保存到req.params中。但这个插件开发有些难度，原因是如何知道url和<code>:xxx</code>对应？首先就要知道那个路由器，然后还要解析出对应的url。越想越复杂。所以，我们需要修改App.js代码，这个功能集成到泛式路由部分。</p><p>首先，需要对pathRegexp.js模块进行修改，通过修改可以知道某个路由规则下的参数名称。例如 &nbsp;/about/:name/:age 要得到一个数组 [&quot;name&quot;,&quot;age&quot;];</p><p><code>pathRegexp.js</code> 修改后的代码是：</p><pre>module.exports&nbsp;=&nbsp;pathRegexp;\nfunction&nbsp;pathRegexp(path)&nbsp;{\n\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;paramNames&nbsp;=&nbsp;[];\n\n&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;=&nbsp;path\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;这个方法用把&nbsp;*&nbsp;替换成正则表达式的&nbsp;[0-9a-zA-Z\\-_]*&nbsp;形式。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;上一节介绍了，这里用了&nbsp;[0-9a-zA-Z\\-_]*&nbsp;目的是一种限定。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;如果用&nbsp;.*&nbsp;那么&nbsp;/article/:name&nbsp;就会有个bug，/article/ok/abc&nbsp;也是匹配的\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;这是因为&nbsp;.*&nbsp;匹配的话&nbsp;ok/abc&nbsp;也是匹配&nbsp;.*&nbsp;的，因为&nbsp;/&nbsp;也符合。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.replace(/((\\*{1}(?=\\/))|(\\*{1}(?=$)))/g,&nbsp;&quot;[0-9a-zA-Z\\-_]*&quot;)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;这个方法是把&nbsp;:xxx&nbsp;的形式替换成&nbsp;&nbsp;[0-9a-zA-Z\\-_]*&nbsp;&nbsp;正则表达式形式。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;这个方法还有个作用，就是例如：把&nbsp;:name的，提取出&nbsp;name&nbsp;，并保存到paramNames数组中。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;保存到paramNames中的目的是，当有匹配这个路由时，通过paramNames可以得到对应的值。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;这也是为什么要采用&nbsp;([0-9a-zA-Z\\-_]*)&nbsp;的形式&nbsp;，而不是直接&nbsp;[0-9a-zA-Z\\-_]*&nbsp;用这个，\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;因为&nbsp;([0-9a-zA-Z\\-_]*)&nbsp;形式是正则表达式组的形式，通过通过正则表达式的&nbsp;RegExp.$1&nbsp;...&nbsp;$n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;与paramNames就可得到参数名对应的值&nbsp;&nbsp;，例如：\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;/article/:id&nbsp;&nbsp;的如果url是&nbsp;/article/id001&nbsp;，那么就有办法得到&nbsp;id=&quot;id001&quot;，因为paramNames数组\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;现在是&nbsp;[&quot;id&quot;]&nbsp;，那么，/article/:id&nbsp;由这个方法转换后，转换为&nbsp;/^\\/article\\/([0-9a-zA-Z\\-_]*)\\/?$/&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;这个形式。通过&nbsp;&nbsp;/^\\/article\\/([0-9a-zA-Z\\-_]*)\\/?$/g.test(&quot;/article/id001&quot;)&nbsp;得到true。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;当正则表达式调用了test方法，那么RegExp表达式类的静态值$1&nbsp;$2&nbsp;...&nbsp;就会重写！\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;那么，这里RegExp.$1值就是id001。而&nbsp;paramNames[0]&nbsp;的值是&nbsp;id，这样就能得到\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;id和对应的值。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;具体实验代码如下：\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;/^\\/article\\/([0-9a-zA-Z\\-_]*)\\/?$/g.test(&quot;/article/id001&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;console.log(RegExp.$1);&nbsp;&nbsp;//&nbsp;打印出&nbsp;id001\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.replace(/(:(.*?(?=\\/)))|(:(.*?(?=$)))/g,function&nbsp;()&nbsp;{\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;arguments的第一个和最后两个参数，并不是我们想要的$1&nbsp;...&nbsp;$n的匹配值，\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;所以&nbsp;len&nbsp;是匹配的数量\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;len&nbsp;=&nbsp;arguments.length&nbsp;-&nbsp;3;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;len;&nbsp;i++)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;avg&nbsp;=&nbsp;arguments[i&nbsp;+&nbsp;1];\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;由于正则嵌套分组，所以要判断匹配字符串是否有&nbsp;&quot;&nbsp;:&nbsp;&quot;&nbsp;前缀，\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;目的是得到&nbsp;:name的name部分和&nbsp;:age&nbsp;的&nbsp;age部分。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(typeof&nbsp;avg&nbsp;===&nbsp;&quot;string&quot;&nbsp;&amp;&amp;&nbsp;avg[0]&nbsp;!==&nbsp;&quot;:&quot;)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paramNames.push(avg);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;([0-9a-zA-Z\\-_]*)&quot;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;把&nbsp;/article/:id/&nbsp;的转换为&nbsp;/article/:id\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.replace(/\\/$/g,&nbsp;&quot;&quot;)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;把&nbsp;/&nbsp;转换为&nbsp;\\/&nbsp;，因为这是字符串形式，最后通过&nbsp;new&nbsp;RegExp(path)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;生成时，必须要经过这个转换。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.replace(/\\//g,&nbsp;&quot;\\\\\\/&quot;)\n\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;regexp&nbsp;=&nbsp;new&nbsp;RegExp(&quot;^&quot;&nbsp;+&nbsp;path&nbsp;+&nbsp;&quot;\\\\/?$&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;regexp.paramNames&nbsp;=&nbsp;paramNames;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;regexp;\n}</pre><p>paramNames这个数组中就储存着参数名称，然后直接赋值给regexp.paramNames = paramNames。下一步，要在App.js中做文章，把每次符合对应正则的请求url，解析出<code>:xxx</code>对应的值。</p><p>首先，我们要在App.js中的handle函数里，加入 req.params = {} 用于储存，代码如下：</p><pre>function&nbsp;App(){\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;request事件响应函数\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;handle(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req.params&nbsp;=&nbsp;{};\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre><p>最后，要在 App.js 中的findHandle函数内做文章，看下面代码。</p><pre>function&nbsp;findHandle(route_handles){&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(pass){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;得到URL中对应&nbsp;:XXX&nbsp;的值，并保存在req.params中。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;route_handle.route.paramNames.forEach(function(name,index){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req.params[name]&nbsp;=&nbsp;RegExp[&quot;$&quot;+(index+1)];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handle&nbsp;=&nbsp;route_handle.handle;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;\n}</pre><p>通过这三个部分的代码，让stuwebfk框架具备了req.params特性。而本节题目是params.js插件，看来是错了，因为并没有建立params.js这个模块，而是为了实现这个功能，修改了 <code>App.js</code> 和 <code>pathRegexp.js</code> 。 这里有些JS语言相对高级的用法，稍后会在最后一节中，加以总结。</p><p>下面，通过视频的方式，演示此功能。</p><hr/><p><embed width=\"480\" height=\"400\" align=\"middle\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" quality=\"high\" allowfullscreen=\"true\" src=\"http://static.video.qq.com/TPout.swf?vid=k0115dpjwub\"/></p><hr/><p>下面是测试代码：</p><pre>var&nbsp;App&nbsp;=&nbsp;require(&quot;../..&quot;).App,\n&nbsp;&nbsp;&nbsp;&nbsp;query&nbsp;=&nbsp;require(&quot;../..&quot;).query,\n&nbsp;&nbsp;&nbsp;&nbsp;app&nbsp;=&nbsp;new&nbsp;App;\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.get(&quot;/about/:name/:age&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.write(&quot;my&nbsp;name&nbsp;is&nbsp;&quot;+req.params.name+&quot;\\n&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.write(&quot;my&nbsp;age&nbsp;is&nbsp;&quot;+req.params.age)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end();\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.listen(3000);</pre><p>现在的框架具备了req.query和req.params的属性，也是必须具备的，否则就无法实际开发。下一节对今天开发的一些代码做一下总结，这样可以跟深入的理解开发细节。</p>','[{\"type\":\"contents\",\"content\":\"params.js 插件开发\\nparams.js 中间件可以把:xxx路由解析出来的数据，保存到req.params中。但这个插件开发有些难度，原因是如何知道url和:xxx对应？首先就要知道那个路由器，然后还要解析出对应的url。越想越复杂。所以，我们需要修改App.js代码，这个功能集成到泛式路由部分。\\n首先，需要对pathRegexp.js模块进行修改，通过修改可以知道某个路由规则下的参数名称。例如  /about/:name/:age 要得到一个数组 [\\\"name\\\",\\\"age\\\"];\\npathRegexp.js 修改后的代码是：\\nmodule.exports = pathRegexp;\\nfunction pathRegexp(path) {\\n\\n    var paramNames = [];\\n\\n    path = path\\n\\n        // 这个方法用把 * 替换成正则表达式的 [0-9a-zA-Z\\\\-_]* 形式。\\n        // 上一节介绍了，这里用了 [0-9a-zA-Z\\\\-_]* 目的是一种限定。\\n        // 如果用 .* 那么 /article/:name 就会有个bug，/article/ok/abc 也是匹配的\\n        // 这是因为 .* 匹配的话 ok/abc 也是匹配 .* 的，因为 / 也符合。\\n        .replace(/((\\\\*{1}(?=\\\\/))|(\\\\*{1}(?=$)))/g, \\\"[0-9a-zA-Z\\\\-_]*\\\")\\n\\n        // 这个方法是把 :xxx 的形式替换成  [0-9a-zA-Z\\\\-_]*  正则表达式形式。\\n        // 这个方法还有个作用，就是例如：把 :name的，提取出 name ，并保存到paramNames数组中。\\n        // 保存到paramNames中的目的是，当有匹配这个路由时，通过paramNames可以得到对应的值。\\n        // 这也是为什么要采用 ([0-9a-zA-Z\\\\-_]*) 的形式 ，而不是直接 [0-9a-zA-Z\\\\-_]* 用这个，\\n        // 因为 ([0-9a-zA-Z\\\\-_]*) 形式是正则表达式组的形式，通过通过正则表达式的 RegExp.$1 ... $n \\n        // 与paramNames就可得到参数名对应的值  ，例如：\\n        //  /article/:id  的如果url是 /article/id001 ，那么就有办法得到 id=\\\"id001\\\"，因为paramNames数组\\n        // 现在是 [\\\"id\\\"] ，那么，/article/:id 由这个方法转换后，转换为 /^\\\\/article\\\\/([0-9a-zA-Z\\\\-_]*)\\\\/?$/ \\n        // 这个形式。通过  /^\\\\/article\\\\/([0-9a-zA-Z\\\\-_]*)\\\\/?$/g.test(\\\"/article/id001\\\") 得到true。\\n        // 当正则表达式调用了test方法，那么RegExp表达式类的静态值$1 $2 ... 就会重写！\\n        // 那么，这里RegExp.$1值就是id001。而 paramNames[0] 的值是 id，这样就能得到\\n        // id和对应的值。\\n        // 具体实验代码如下：\\n        //  /^\\\\/article\\\\/([0-9a-zA-Z\\\\-_]*)\\\\/?$/g.test(\\\"/article/id001\\\");\\n        //  console.log(RegExp.$1);  // 打印出 id001\\n        .replace(/(:(.*?(?=\\\\/)))|(:(.*?(?=$)))/g,function () {\\n\\n            // arguments的第一个和最后两个参数，并不是我们想要的$1 ... $n的匹配值，\\n            // 所以 len 是匹配的数量\\n            var len = arguments.length - 3;\\n            for (var i = 0; i &lt; len; i++) {\\n                var avg = arguments[i + 1];\\n\\n                 // 由于正则嵌套分组，所以要判断匹配字符串是否有 \\\" : \\\" 前缀，\\n                 // 目的是得到 :name的name部分和 :age 的 age部分。\\n                if (typeof avg === \\\"string\\\" &amp;&amp; avg[0] !== \\\":\\\") {\\n                    paramNames.push(avg);\\n                }\\n            }\\n            return \\\"([0-9a-zA-Z\\\\-_]*)\\\"\\n\\n        })\\n\\n        // 把 /article/:id/ 的转换为 /article/:id\\n        .replace(/\\\\/$/g, \\\"\\\")\\n\\n        // 把 / 转换为 \\\\/ ，因为这是字符串形式，最后通过 new RegExp(path)\\n        // 生成时，必须要经过这个转换。\\n        .replace(/\\\\//g, \\\"\\\\\\\\\\\\/\\\")\\n\\n    var regexp = new RegExp(\\\"^\\\" + path + \\\"\\\\\\\\/?$\\\");\\n    regexp.paramNames = paramNames;\\n    return regexp;\\n}\\nparamNames这个数组中就储存着参数名称，然后直接赋值给regexp.paramNames = paramNames。下一步，要在App.js中做文章，把每次符合对应正则的请求url，解析出:xxx对应的值。\\n首先，我们要在App.js中的handle函数里，加入 req.params = {} 用于储存，代码如下：\\nfunction App(){\\n    // request事件响应函数\\n    function handle(req,res){\\n            req.params = {};\\n    }\\n}\\n最后，要在 App.js 中的findHandle函数内做文章，看下面代码。\\nfunction findHandle(route_handles){ \\n        if(pass){\\n            // 得到URL中对应 :XXX 的值，并保存在req.params中。\\n            route_handle.route.paramNames.forEach(function(name,index){\\n                req.params[name] = RegExp[\\\"$\\\"+(index+1)];\\n            })\\n            handle = route_handle.handle;\\n            break;\\n        }\\n    }    \\n}\\n通过这三个部分的代码，让stuwebfk框架具备了req.params特性。而本节题目是params.js插件，看来是错了，因为并没有建立params.js这个模块，而是为了实现这个功能，修改了 App.js 和 pathRegexp.js 。 这里有些JS语言相对高级的用法，稍后会在最后一节中，加以总结。\\n下面，通过视频的方式，演示此功能。\\n&lt;embed width=\\\"480\\\" height=\\\"400\\\" align=\\\"middle\\\" type=\\\"application/x-shockwave-flash\\\" allowscriptaccess=\\\"always\\\" quality=\\\"high\\\" allowfullscreen=\\\"true\\\" src=\\\"http://static.video.qq.com/TPout.swf?vid=k0115dpjwub\\\"&gt;\\n下面是测试代码：\\nvar App = require(\\\"../..\\\").App,\\n    query = require(\\\"../..\\\").query,\\n    app = new App;\\n\\n\\n    app.get(\\\"/about/:name/:age\\\",function(req,res){\\n        res.write(\\\"my name is \\\"+req.params.name+\\\"\\\\n\\\");\\n        res.write(\\\"my age is \\\"+req.params.age)\\n        res.end();\\n    })\\n\\n    app.listen(3000);\\n现在的框架具备了req.query和req.params的属性，也是必须具备的，否则就无法实际开发。下一节对今天开发的一些代码做一下总结，这样可以跟深入的理解开发细节。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444891922000.jpg','2015-10-14 13:41:42','2020-08-20 15:44:23'),(208,'第4天 路由——发布0.0.3版本','发布0.0.3版本','2','1','','版本发布','2',NULL,'','下面的内容和之前基本一样，作为温故。之后的版本发布就不会详说了，除非有新的内容。还需要说明一点，example下的代码','1','','','0:01',762,'2','0',NULL,1,'0',222849,'<h3>发布0.0.3版本</h3><p>下面的内容和之前基本一样，作为温故。之后的版本发布就不会详说了，除非有新的内容。还需要说明一点，example下的代码，随着版本的不断迭代升级，早期的代码可能无法运行，所以example下的只作为过程中的测试代码。</p><p>下一节，会总结一下本周的一些要点。</p><hr/><p>先把发布到npmjs上，然后再发布到github上，最后生成tag版本标签，再次上传tag版本标签到github。<span class=\"invade-word\"></span></p><hr/><h4 id=\"-npmjs\">上传到npmjs</h4><ul class=\" list-paddingleft-2\"><li><p>npm init</p></li><li><p>npm publish</p></li></ul><hr/><h4 id=\"-github\">上传到github</h4><ul class=\" list-paddingleft-2\"><li><p>git add .</p></li><li><p>git commit -am &quot;add get/post methods. &quot;</p></li><li><p>git push</p></li></ul><hr/><h4 id=\"-tag0-0-3-github\">上传tag0.0.3版本标签到github</h4><ul class=\" list-paddingleft-2\"><li><p>运行 <code>git tag -a 0.0.3 -m &quot;publish version 0.0.3&quot;</code> 这条命令创建一个版本0.0.3</p></li><li><p>然后运行 <code>git push --tags</code> &nbsp;上传版本到github。</p></li></ul>','[{\"type\":\"contents\",\"content\":\"发布0.0.3版本\\n下面的内容和之前基本一样，作为温故。之后的版本发布就不会详说了，除非有新的内容。还需要说明一点，example下的代码，随着版本的不断迭代升级，早期的代码可能无法运行，所以example下的只作为过程中的测试代码。\\n下一节，会总结一下本周的一些要点。\\n先把发布到npmjs上，然后再发布到github上，最后生成tag版本标签，再次上传tag版本标签到github。\\n上传到npmjs\\nnpm init\\nnpm publish\\n\\n上传到github\\ngit add .\\ngit commit -am \\\"add get/post methods. \\\"\\ngit push\\n\\n上传tag0.0.3版本标签到github\\n运行 git tag -a 0.0.3 -m \\\"publish version 0.0.3\\\" 这条命令创建一个版本0.0.3\\n然后运行 git push --tags  上传版本到github。\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444892043000.jpg','2015-09-20 11:01:35','2020-08-20 15:44:24'),(209,'css3 常见问题','css3 常见问题','1','1','','css3,html','2',NULL,'','css小技巧集锦，css3目测在今后的移动开发中会占据重要的位置，移动开发才刚起步，还有很多细节需要深入研究。这里汇集我平时在做移动开发中遇到的一些特殊性的问题，为今后开发提供帮助。','1','','','0:01',762,'2','0',NULL,0,'0',223136,'<p>1、box-sizing:&nbsp;content-box|border-box|inherit&nbsp;</p><p><br/></p><p>以前用到过，今天碰到又差点忘记了，在firefox下 结构如下：</p><pre class=\"brush:html;toolbar:false\">&lt;li&nbsp;class=&quot;selected&quot;&gt;&lt;a&gt;公告&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a&gt;制度&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a&gt;学堂&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a&gt;服务商风采&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a&gt;服务厅&lt;/a&gt;&lt;/li&gt;</pre><p>分别设置 li &nbsp;和 a 的高度：</p><pre class=\"brush:html;toolbar:false\">.tabpanel-c&gt;.tabp-head&nbsp;ul&nbsp;li{height:&nbsp;2.5em;&nbsp;line-height:&nbsp;2.5em;&nbsp;list-style-type:&nbsp;none;&nbsp;color:&nbsp;#7e7e7e;&nbsp;cursor:&nbsp;pointer;&nbsp;-webkit-box-flex:&nbsp;1;&nbsp;-moz-box-flex:&nbsp;1;&nbsp;-ms-box-flex:&nbsp;1;&nbsp;text-align:&nbsp;center;}\n.tabpanel-c&gt;.tabp-head&nbsp;ul&nbsp;li&nbsp;a{display:&nbsp;inline-block;}\n.tabpanel-c&gt;.tabp-head&nbsp;ul&nbsp;li.selected{color:&nbsp;#d03737;}\n.tabpanel-c&gt;.tabp-head&nbsp;ul&nbsp;li.selected&nbsp;a{&nbsp;height:2.5em;&nbsp;border-bottom:&nbsp;2px&nbsp;solid&nbsp;#d03737;&nbsp;box-sizing:border-box;}</pre><p>如果不设置box-sizing属性，a的边框会把li撑下去，是不合理的，在chrome下正常</p>','[{\"type\":\"contents\",\"content\":\"1、box-sizing: content-box|border-box|inherit \\n\\n以前用到过，今天碰到又差点忘记了，在firefox下 结构如下：\\n&lt;li class=\\\"selected\\\"&gt;&lt;a&gt;公告&lt;/a&gt;&lt;/li&gt;\\n&lt;li&gt;&lt;a&gt;制度&lt;/a&gt;&lt;/li&gt;\\n&lt;li&gt;&lt;a&gt;学堂&lt;/a&gt;&lt;/li&gt;\\n&lt;li&gt;&lt;a&gt;服务商风采&lt;/a&gt;&lt;/li&gt;\\n&lt;li&gt;&lt;a&gt;服务厅&lt;/a&gt;&lt;/li&gt;\\n分别设置 li  和 a 的高度：\\n.tabpanel-c&gt;.tabp-head ul li{height: 2.5em; line-height: 2.5em; list-style-type: none; color: #7e7e7e; cursor: pointer; -webkit-box-flex: 1; -moz-box-flex: 1; -ms-box-flex: 1; text-align: center;}\\n.tabpanel-c&gt;.tabp-head ul li a{display: inline-block;}\\n.tabpanel-c&gt;.tabp-head ul li.selected{color: #d03737;}\\n.tabpanel-c&gt;.tabp-head ul li.selected a{ height:2.5em; border-bottom: 2px solid #d03737; box-sizing:border-box;}\\n如果不设置box-sizing属性，a的边框会把li撑下去，是不合理的，在chrome下正常\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444889556000.jpg','2015-08-14 08:49:35','2020-08-20 15:44:25'),(210,'DoraCMS近期遇到的问题','DoraCMS近期遇到的问题','1','1','','常见问题','2',NULL,'','近期很多用DoraCMS做开发的同学遇到了很多问题，有的已经答复了，但是有的还没有找到答案，，最近实在是很忙，DoraCMS 后面计划还会进一步优化，让安装变的更简单','1','','','0:01',762,'2','0',NULL,0,'0',223234,'<p style=\"text-align: center;\">&nbsp;&nbsp;<img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_49_18_490_1040.jpg\" title=\"\" alt=\"img20151224185512.jpg\"/></p><p>近期很多用DoraCMS做开发的同学遇到了很多问题，有的已经答复了，但是有的还没有找到答案，，最近实在是很忙，DoraCMS 后面计划还会进一步优化，让安装变的更简单，也会针对node兼容性问题进行优化，另外，虽然写了说明文档和开发文档，但是后期的改动也比较大，计划在后面会出一个稳定版本，然后针对稳定版本录一个视频教程，这样会更加直观。</p><p>最近太忙了，暂列入计划之中。&nbsp;</p>','[{\"type\":\"contents\",\"content\":\"  \"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_49_18_490_1040.jpg\"},{\"type\":\"contents\",\"content\":\"\\n近期很多用DoraCMS做开发的同学遇到了很多问题，有的已经答复了，但是有的还没有找到答案，，最近实在是很忙，DoraCMS 后面计划还会进一步优化，让安装变的更简单，也会针对node兼容性问题进行优化，另外，虽然写了说明文档和开发文档，但是后期的改动也比较大，计划在后面会出一个稳定版本，然后针对稳定版本录一个视频教程，这样会更加直观。\\n最近太忙了，暂列入计划之中。 \\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444894786000.jpg','2015-09-24 12:33:05','2020-08-20 15:44:24'),(211,'Express 4.8.x—JADE模版引擎','JADE模版引擎','2','1','','JADE模版引擎','2',NULL,'','​jade 可以减少编写 html ，下面是个例子','1','','','0:01',762,'2','0',NULL,0,'0',224002,'<h3>JADE模版引擎</h3><p>jade 可以减少编写 html ，下面是个例子：</p><pre>doctype&nbsp;html\nhtml(lang=&quot;en&quot;)\n&nbsp;&nbsp;head\n&nbsp;&nbsp;&nbsp;&nbsp;title=&nbsp;pageTitle\n&nbsp;&nbsp;&nbsp;&nbsp;script(type=&#39;text/javascript&#39;).\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(foo)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bar(1&nbsp;+&nbsp;5)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;body\n&nbsp;&nbsp;&nbsp;&nbsp;h1&nbsp;Jade&nbsp;-&nbsp;node&nbsp;template&nbsp;engine\n&nbsp;&nbsp;&nbsp;&nbsp;#container.col\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;youAreUsingJade\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;You&nbsp;are&nbsp;amazing\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;Get&nbsp;on&nbsp;it!\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jade&nbsp;is&nbsp;a&nbsp;terse&nbsp;and&nbsp;simple\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;templating&nbsp;language&nbsp;with&nbsp;a\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strong&nbsp;focus&nbsp;on&nbsp;performance\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and&nbsp;powerful&nbsp;features.</pre><p>下面是转换后的 html</p><pre>&lt;!DOCTYPE&nbsp;html&gt;\n&lt;html&nbsp;lang=&quot;en&quot;&gt;\n&nbsp;&nbsp;&lt;head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Jade&lt;/title&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(foo)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bar(1&nbsp;+&nbsp;5)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/script&gt;\n&nbsp;&nbsp;&lt;/head&gt;\n&nbsp;&nbsp;&lt;body&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;Jade&nbsp;-&nbsp;node&nbsp;template&nbsp;engine&lt;/h1&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id=&quot;container&quot;&nbsp;class=&quot;col&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;You&nbsp;are&nbsp;amazing&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jade&nbsp;is&nbsp;a&nbsp;terse&nbsp;and&nbsp;simple\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;templating&nbsp;language&nbsp;with&nbsp;a\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strong&nbsp;focus&nbsp;on&nbsp;performance\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and&nbsp;powerful&nbsp;features.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&lt;/body&gt;\n&lt;/html&gt;</pre><h4 id=\"-jade-\">基本上jade是以缩进的方式编写，比如：</h4><pre>html\n&nbsp;&nbsp;&nbsp;&nbsp;head\n&nbsp;&nbsp;&nbsp;&nbsp;body</pre><p>转换后的html是：</p><pre>&lt;html&gt;\n&nbsp;&nbsp;&lt;head&gt;&lt;/head&gt;\n&nbsp;&nbsp;&lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;</pre><h4 id=\"-javascript-\">编写网页 javascript 代码</h4><pre>head\n&nbsp;&nbsp;&nbsp;&nbsp;script(type=&#39;text/javascript&#39;).\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(foo)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bar(1&nbsp;+&nbsp;5)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p>转换后的html</p><pre>&lt;head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(foo)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bar(1&nbsp;+&nbsp;5)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/script&gt;\n&lt;/head&gt;</pre><h4 id=\"-\">单行内容</h4><pre>p&nbsp;You&nbsp;are&nbsp;amazing</pre><p>转换后</p><pre>&lt;p&gt;\nYou&nbsp;are&nbsp;amazing\n&lt;/p&gt;</pre><h4 id=\"-\">多行内容</h4><pre>&nbsp;&nbsp;p.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jade&nbsp;is&nbsp;a&nbsp;terse&nbsp;and&nbsp;simple\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;templating&nbsp;language&nbsp;with&nbsp;a\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strong&nbsp;focus&nbsp;on&nbsp;performance\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and&nbsp;powerful&nbsp;features.</pre><p>注意 <code>p.</code> 后面的 <code>.</code> &nbsp;。</p><h2 id=\"-\">循环</h2><p>尽管已经支持 JavaScript 原生代码，Jade 还是支持了一些特殊的标签，它们可以让模板更加易于理解，其中之一就是 <code>each</code>, 这种形式：</p><pre>each&nbsp;VAL[,&nbsp;KEY]&nbsp;in&nbsp;OBJ</pre><p>一个遍历数组的例子 ：</p><pre>-&nbsp;var&nbsp;items&nbsp;=&nbsp;[&quot;one&quot;,&nbsp;&quot;two&quot;,&nbsp;&quot;three&quot;]\neach&nbsp;item&nbsp;in&nbsp;items\n&nbsp;&nbsp;li=&nbsp;item</pre><p>渲染为:</p><pre>&lt;li&gt;one&lt;/li&gt;\n&lt;li&gt;two&lt;/li&gt;\n&lt;li&gt;three&lt;/li&gt;</pre><p>遍历一个数组同时带上索引：</p><pre>items&nbsp;=&nbsp;[&quot;one&quot;,&nbsp;&quot;two&quot;,&nbsp;&quot;three&quot;]\neach&nbsp;item,&nbsp;i&nbsp;in&nbsp;items\n&nbsp;&nbsp;li&nbsp;#{item}:&nbsp;#{i}</pre><p>渲染为:</p><pre>&lt;li&gt;one:&nbsp;0&lt;/li&gt;\n&lt;li&gt;two:&nbsp;1&lt;/li&gt;\n&lt;li&gt;three:&nbsp;2&lt;/li&gt;</pre><p>遍历一个数组的键值：</p><pre>obj&nbsp;=&nbsp;{&nbsp;foo:&nbsp;&#39;bar&#39;&nbsp;}\neach&nbsp;val,&nbsp;key&nbsp;in&nbsp;obj\n&nbsp;&nbsp;li&nbsp;#{key}:&nbsp;#{val}</pre><p>将会渲染为：<code>&lt;li&gt;foo: bar&lt;/li&gt;</code></p><p>Jade 在内部会把这些语句转换成原生的 JavaScript 语句，就像使用 <code>users.forEach(function(user){</code>, 词法作用域和嵌套会像在普通的 JavaScript 中一样：</p><pre>each&nbsp;user&nbsp;in&nbsp;users\n&nbsp;&nbsp;each&nbsp;role&nbsp;in&nbsp;user.roles\n&nbsp;&nbsp;&nbsp;&nbsp;li=&nbsp;role</pre><p>如果你喜欢，也可以使用 <code>for</code> ：</p><pre>for&nbsp;user&nbsp;in&nbsp;users\n&nbsp;&nbsp;for&nbsp;role&nbsp;in&nbsp;user.roles\n&nbsp;&nbsp;&nbsp;&nbsp;li=&nbsp;role</pre><h2 id=\"-\">条件语句</h2><p>Jade 条件语句和使用了(<code>-</code>) 前缀的 JavaScript 语句是一致的,然后它允许你不使用圆括号，这样会看上去对设计师更友好一点，\n同时要在心里记住这个表达式渲染出的是 <em>常规</em> JavaScript：</p><pre>for&nbsp;user&nbsp;in&nbsp;users\n&nbsp;&nbsp;if&nbsp;user.role&nbsp;==&nbsp;&#39;admin&#39;\n&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;#{user.name}&nbsp;is&nbsp;an&nbsp;admin\n&nbsp;&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;p=&nbsp;user.name</pre><p>和下面的使用了常规 JavaScript 的代码是相等的：</p><pre>for&nbsp;user&nbsp;in&nbsp;users\n&nbsp;&nbsp;-&nbsp;if&nbsp;(user.role&nbsp;==&nbsp;&#39;admin&#39;)\n&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;#{user.name}&nbsp;is&nbsp;an&nbsp;admin\n&nbsp;&nbsp;-&nbsp;else\n&nbsp;&nbsp;&nbsp;&nbsp;p=&nbsp;user.name</pre><p>Jade 同时支持 <code>unless</code>, 这和 <code>if (!(expr))</code> 是等价的：</p><pre>for&nbsp;user&nbsp;in&nbsp;users\n&nbsp;&nbsp;unless&nbsp;user.isAnonymous\n&nbsp;&nbsp;&nbsp;&nbsp;p\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Click&nbsp;to&nbsp;view\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a(href=&#39;/users/&#39;&nbsp;+&nbsp;user.id)=&nbsp;user.name</pre><h2 id=\"-\">模板继承</h2><p>Jade 支持通过 <code>block</code> 和 <code>extends</code> 关键字来实现模板继承。 一个块就是一个 Jade 的 block ，它将在子模板中实现，同时是支持递归的。</p><p>Jade 块如果没有内容，Jade 会添加默认内容，下面的代码默认会输出 <code>block scripts</code>, <code>block content</code>, 和 <code>block foot</code>.</p><pre>html\n&nbsp;&nbsp;head\n&nbsp;&nbsp;&nbsp;&nbsp;h1&nbsp;My&nbsp;Site&nbsp;-&nbsp;#{title}\n&nbsp;&nbsp;&nbsp;&nbsp;block&nbsp;scripts\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;script(src=&#39;/jquery.js&#39;)\n&nbsp;&nbsp;body\n&nbsp;&nbsp;&nbsp;&nbsp;block&nbsp;content\n&nbsp;&nbsp;&nbsp;&nbsp;block&nbsp;foot\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#footer\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;some&nbsp;footer&nbsp;content</pre><p>现在我们来继承这个布局，简单创建一个新文件，像下面那样直接使用 <code>extends</code>，给定路径（可以选择带 <code>.jade</code> 扩展名或者不带）. 你可以定义一个或者更多的块来覆盖父级块内容, 注意到这里的 <code>foot</code> 块 <em>没有</em> 定义，所以它还会输出父级的 &quot;some footer content&quot;。</p><pre>extends&nbsp;extend-layout\n\nblock&nbsp;scripts\n&nbsp;&nbsp;script(src=&#39;/jquery.js&#39;)\n&nbsp;&nbsp;script(src=&#39;/pets.js&#39;)\n\nblock&nbsp;content\n&nbsp;&nbsp;h1=&nbsp;title\n&nbsp;&nbsp;each&nbsp;pet&nbsp;in&nbsp;pets\n&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;pet</pre><p>同样可以在一个子块里添加块，就像下面实现的块 <code>content</code> 里又定义了两个可以被实现的块 <code>sidebar</code> 和 <code>primary</code>，或者子模板直接实现 <code>content</code>。</p><pre>extends&nbsp;regular-layout\n\nblock&nbsp;content\n&nbsp;&nbsp;.sidebar\n&nbsp;&nbsp;&nbsp;&nbsp;block&nbsp;sidebar\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;nothing\n&nbsp;&nbsp;.primary\n&nbsp;&nbsp;&nbsp;&nbsp;block&nbsp;primary\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;nothing</pre><p>参看中文详细教程 <a href=\"https://github.com/visionmedia/jade/blob/master/Readme_zh-cn.md\">https://github.com/visionmedia/jade/blob/master/Readme_zh-cn.md</a></p>','[{\"type\":\"contents\",\"content\":\"JADE模版引擎\\njade 可以减少编写 html ，下面是个例子：\\ndoctype html\\nhtml(lang=\\\"en\\\")\\n  head\\n    title= pageTitle\\n    script(type=\'text/javascript\').\\n      if (foo) {\\n         bar(1 + 5)\\n      }\\n  body\\n    h1 Jade - node template engine\\n    #container.col\\n      if youAreUsingJade\\n        p You are amazing\\n      else\\n        p Get on it!\\n      p.\\n        Jade is a terse and simple\\n        templating language with a\\n        strong focus on performance\\n        and powerful features.\\n下面是转换后的 html\\n&lt;!DOCTYPE html&gt;\\n&lt;html lang=\\\"en\\\"&gt;\\n  &lt;head&gt;\\n    &lt;title&gt;Jade&lt;/title&gt;\\n    &lt;script type=\\\"text/javascript\\\"&gt;\\n      if (foo) {\\n         bar(1 + 5)\\n      }\\n    &lt;/script&gt;\\n  &lt;/head&gt;\\n  &lt;body&gt;\\n    &lt;h1&gt;Jade - node template engine&lt;/h1&gt;\\n    &lt;div id=\\\"container\\\" class=\\\"col\\\"&gt;\\n      &lt;p&gt;You are amazing&lt;/p&gt;\\n      &lt;p&gt;\\n        Jade is a terse and simple\\n        templating language with a\\n        strong focus on performance\\n        and powerful features.\\n      &lt;/p&gt;\\n    &lt;/div&gt;\\n  &lt;/body&gt;\\n&lt;/html&gt;\\n基本上jade是以缩进的方式编写，比如：\\nhtml\\n    head\\n    body\\n转换后的html是：\\n&lt;html&gt;\\n  &lt;head&gt;&lt;/head&gt;\\n  &lt;body&gt;&lt;/body&gt;\\n&lt;/html&gt;\\n编写网页 javascript 代码\\nhead\\n    script(type=\'text/javascript\').\\n      if (foo) {\\n         bar(1 + 5)\\n      }\\n转换后的html\\n&lt;head&gt;\\n    &lt;script type=\\\"text/javascript\\\"&gt;\\n      if (foo) {\\n         bar(1 + 5)\\n      }\\n    &lt;/script&gt;\\n&lt;/head&gt;\\n单行内容\\np You are amazing\\n转换后\\n&lt;p&gt;\\nYou are amazing\\n&lt;/p&gt;\\n多行内容\\n  p.\\n        Jade is a terse and simple\\n        templating language with a\\n        strong focus on performance\\n        and powerful features.\\n注意 p. 后面的 .  。\\n循环\\n尽管已经支持 JavaScript 原生代码，Jade 还是支持了一些特殊的标签，它们可以让模板更加易于理解，其中之一就是 each, 这种形式：\\neach VAL[, KEY] in OBJ\\n一个遍历数组的例子 ：\\n- var items = [\\\"one\\\", \\\"two\\\", \\\"three\\\"]\\neach item in items\\n  li= item\\n渲染为:\\n&lt;li&gt;one&lt;/li&gt;\\n&lt;li&gt;two&lt;/li&gt;\\n&lt;li&gt;three&lt;/li&gt;\\n遍历一个数组同时带上索引：\\nitems = [\\\"one\\\", \\\"two\\\", \\\"three\\\"]\\neach item, i in items\\n  li #{item}: #{i}\\n渲染为:\\n&lt;li&gt;one: 0&lt;/li&gt;\\n&lt;li&gt;two: 1&lt;/li&gt;\\n&lt;li&gt;three: 2&lt;/li&gt;\\n遍历一个数组的键值：\\nobj = { foo: \'bar\' }\\neach val, key in obj\\n  li #{key}: #{val}\\n将会渲染为：&lt;li&gt;foo: bar&lt;/li&gt;\\nJade 在内部会把这些语句转换成原生的 JavaScript 语句，就像使用 users.forEach(function(user){, 词法作用域和嵌套会像在普通的 JavaScript 中一样：\\neach user in users\\n  each role in user.roles\\n    li= role\\n如果你喜欢，也可以使用 for ：\\nfor user in users\\n  for role in user.roles\\n    li= role\\n条件语句\\nJade 条件语句和使用了(-) 前缀的 JavaScript 语句是一致的,然后它允许你不使用圆括号，这样会看上去对设计师更友好一点，同时要在心里记住这个表达式渲染出的是 常规 JavaScript：\\nfor user in users\\n  if user.role == \'admin\'\\n    p #{user.name} is an admin\\n  else\\n    p= user.name\\n和下面的使用了常规 JavaScript 的代码是相等的：\\nfor user in users\\n  - if (user.role == \'admin\')\\n    p #{user.name} is an admin\\n  - else\\n    p= user.name\\nJade 同时支持 unless, 这和 if (!(expr)) 是等价的：\\nfor user in users\\n  unless user.isAnonymous\\n    p\\n      | Click to view\\n      a(href=\'/users/\' + user.id)= user.name\\n模板继承\\nJade 支持通过 block 和 extends 关键字来实现模板继承。 一个块就是一个 Jade 的 block ，它将在子模板中实现，同时是支持递归的。\\nJade 块如果没有内容，Jade 会添加默认内容，下面的代码默认会输出 block scripts, block content, 和 block foot.\\nhtml\\n  head\\n    h1 My Site - #{title}\\n    block scripts\\n      script(src=\'/jquery.js\')\\n  body\\n    block content\\n    block foot\\n      #footer\\n        p some footer content\\n现在我们来继承这个布局，简单创建一个新文件，像下面那样直接使用 extends，给定路径（可以选择带 .jade 扩展名或者不带）. 你可以定义一个或者更多的块来覆盖父级块内容, 注意到这里的 foot 块 没有 定义，所以它还会输出父级的 \\\"some footer content\\\"。\\nextends extend-layout\\n\\nblock scripts\\n  script(src=\'/jquery.js\')\\n  script(src=\'/pets.js\')\\n\\nblock content\\n  h1= title\\n  each pet in pets\\n    include pet\\n同样可以在一个子块里添加块，就像下面实现的块 content 里又定义了两个可以被实现的块 sidebar 和 primary，或者子模板直接实现 content。\\nextends regular-layout\\n\\nblock content\\n  .sidebar\\n    block sidebar\\n      p nothing\\n  .primary\\n    block primary\\n      p nothing\\n参看中文详细教程 https://github.com/visionmedia/jade/blob/master/Readme_zh-cn.md\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445059766000.jpg','2015-10-17 05:31:33','2020-08-20 15:44:22'),(212,'第6天 路由功能——更新后的代码','第6天 路由功能——更新后的代码','2','1','','路由功能','2',NULL,'','路由功能更新后的代码，包括了lib/query.js，lib/pathRegexp.js和​App.js','1','','','0:01',762,'2','0',NULL,0,'0',223139,'<h3>更新后的代码</h3><p>以下是今天更新后的代码。</p><p><code>lib/query.js</code> 代码</p><pre>var&nbsp;url&nbsp;=&nbsp;require(&quot;url&quot;),\n&nbsp;&nbsp;&nbsp;&nbsp;qs&nbsp;=&nbsp;require(&quot;querystring&quot;);\n\nfunction&nbsp;query(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;querystring&nbsp;=&nbsp;url.parse(req.url).query;&nbsp;//&nbsp;请求参数部分\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;判断是否有参数\n&nbsp;&nbsp;&nbsp;&nbsp;if(querystring){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;queryObj&nbsp;=&nbsp;qs.parse(querystring);&nbsp;&nbsp;//&nbsp;转换为json格式\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req.query&nbsp;=&nbsp;queryObj;&nbsp;&nbsp;//&nbsp;赋值\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;next();\n}\n\nmodule.exports&nbsp;=&nbsp;query;</pre><p><code>lib/pathRegexp.js</code>代码</p><pre>module.exports&nbsp;=&nbsp;pathRegexp;\nfunction&nbsp;pathRegexp(path)&nbsp;{\n\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;paramNames&nbsp;=&nbsp;[];\n\n&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;=&nbsp;path\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.replace(/((\\*{1}(?=\\/))|(\\*{1}(?=$)))/g,&nbsp;&quot;[0-9a-zA-Z\\-_]*&quot;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.replace(/(:(.*?(?=\\/)))|(:(.*?(?=$)))/g,function&nbsp;()&nbsp;{\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;len&nbsp;=&nbsp;arguments.length&nbsp;-&nbsp;3;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;len;&nbsp;i++)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;avg&nbsp;=&nbsp;arguments[i&nbsp;+&nbsp;1];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(typeof&nbsp;avg&nbsp;===&nbsp;&quot;string&quot;&nbsp;&amp;&amp;&nbsp;avg[0]&nbsp;!==&nbsp;&quot;:&quot;)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paramNames.push(avg);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;([0-9a-zA-Z\\-_]*)&quot;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.replace(/\\/$/g,&nbsp;&quot;&quot;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.replace(/\\//g,&nbsp;&quot;\\\\\\/&quot;)\n\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;regexp&nbsp;=&nbsp;new&nbsp;RegExp(&quot;^&quot;&nbsp;+&nbsp;path&nbsp;+&nbsp;&quot;\\\\/?$&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;regexp.paramNames&nbsp;=&nbsp;paramNames;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;regexp;\n}</pre><p><code>App.js</code> 代码</p><pre>var&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;)\n&nbsp;&nbsp;&nbsp;,pathRegexp&nbsp;=&nbsp;require(&quot;./pathRegexp&quot;)\n&nbsp;&nbsp;&nbsp;,url&nbsp;=&nbsp;require(&quot;url&quot;);\n\nmodule.exports&nbsp;=&nbsp;App;\n\nfunction&nbsp;App(){\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;插件有序列表\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;middleList&nbsp;=&nbsp;this._middleList&nbsp;=&nbsp;[];\n\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;self&nbsp;=&nbsp;this;\n\n&nbsp;&nbsp;&nbsp;&nbsp;this._route_post_handles&nbsp;=&nbsp;[]&nbsp;//最新修改\n\n&nbsp;&nbsp;&nbsp;&nbsp;this._route_get_handles&nbsp;=&nbsp;[]&nbsp;//最新修改\n\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;request事件响应函数\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;handle(req,res){\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req.params&nbsp;=&nbsp;{};\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;循环执行插件\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;middleIndex&nbsp;=&nbsp;0;&nbsp;//&nbsp;插件索引\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;execMiddle();\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;执行这个函数时，会自动执行下一个middle插件。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;至于这个函数的执行，是由插件所控制。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;next(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;middleIndex&nbsp;+=&nbsp;1;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;execMiddle();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;执行插件函数\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;execMiddle(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;middle&nbsp;=&nbsp;middleList[middleIndex];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(middle){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;middle(req,res,next);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;handle;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;把&nbsp;/abc?age=12&nbsp;转为&nbsp;/abc\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;path&nbsp;=&nbsp;url.parse(req.url).pathname;&nbsp;&nbsp;//最新修改\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;找到路由对应的路由处理器。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;findHandle(route_handles){&nbsp;//最新修改\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var&nbsp;i=0,len=route_handles.length;&nbsp;i&lt;len&nbsp;;&nbsp;i++){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;route_handle&nbsp;=&nbsp;route_handles[i];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;pass&nbsp;=&nbsp;route_handle.route.test(path);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(pass){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;route_handle.route.paramNames.forEach(function(name,index){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req.params[name]&nbsp;=&nbsp;RegExp[&quot;$&quot;+(index+1)];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handle&nbsp;=&nbsp;route_handle.handle;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;判断是GET还是POST方法\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch(req.method){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&quot;GET&quot;:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;handle&nbsp;=&nbsp;self._route_get_handles[req.url]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;findHandle(self._route_get_handles);&nbsp;//最新修改\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&quot;POST&quot;:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;handle&nbsp;=&nbsp;self._route_post_handles[req.url]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;findHandle(self._route_post_handles);&nbsp;//最新修改\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(handle){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handle(req,res);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;没找到指定处理器，返回404\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.statusCode&nbsp;=&nbsp;404;&nbsp;//最新修改\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end();&nbsp;//最新修改\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;this._server&nbsp;=&nbsp;http.createServer(handle);\n\n}\n\n//&nbsp;加入功能栈\nApp.prototype.use&nbsp;=&nbsp;function(middle){\n&nbsp;&nbsp;&nbsp;&nbsp;this._middleList.push(middle);\n}\n\nApp.prototype.get&nbsp;=&nbsp;function(route,handle){&nbsp;//最新修改\n&nbsp;&nbsp;&nbsp;&nbsp;this._route_get_handles.push({route:pathRegexp(route),handle:handle})\n}\n\nApp.prototype.post&nbsp;=&nbsp;function(route,handle){&nbsp;//最新修改\n&nbsp;&nbsp;&nbsp;&nbsp;this._route_post_handles.push({route:pathRegexp(route),handle:handle})\n}\n\n//&nbsp;监听端口\nApp.prototype.listen&nbsp;=&nbsp;function(){\n&nbsp;&nbsp;&nbsp;&nbsp;this._server.listen.apply(this._server,arguments);\n}</pre>','[{\"type\":\"contents\",\"content\":\"更新后的代码\\n以下是今天更新后的代码。\\nlib/query.js 代码\\nvar url = require(\\\"url\\\"),\\n    qs = require(\\\"querystring\\\");\\n\\nfunction query(req,res,next){\\n    var querystring = url.parse(req.url).query; // 请求参数部分\\n    // 判断是否有参数\\n    if(querystring){\\n        var queryObj = qs.parse(querystring);  // 转换为json格式\\n        req.query = queryObj;  // 赋值\\n    }\\n\\n    next();\\n}\\n\\nmodule.exports = query;\\nlib/pathRegexp.js代码\\nmodule.exports = pathRegexp;\\nfunction pathRegexp(path) {\\n\\n    var paramNames = [];\\n\\n    path = path\\n        .replace(/((\\\\*{1}(?=\\\\/))|(\\\\*{1}(?=$)))/g, \\\"[0-9a-zA-Z\\\\-_]*\\\")\\n        .replace(/(:(.*?(?=\\\\/)))|(:(.*?(?=$)))/g,function () {\\n\\n            var len = arguments.length - 3;\\n            for (var i = 0; i &lt; len; i++) {\\n                var avg = arguments[i + 1];\\n                if (typeof avg === \\\"string\\\" &amp;&amp; avg[0] !== \\\":\\\") {\\n                    paramNames.push(avg);\\n                }\\n            }\\n            return \\\"([0-9a-zA-Z\\\\-_]*)\\\"\\n\\n        })\\n        .replace(/\\\\/$/g, \\\"\\\")\\n        .replace(/\\\\//g, \\\"\\\\\\\\\\\\/\\\")\\n\\n    var regexp = new RegExp(\\\"^\\\" + path + \\\"\\\\\\\\/?$\\\");\\n    regexp.paramNames = paramNames;\\n    return regexp;\\n}\\nApp.js 代码\\nvar http = require(\\\"http\\\")\\n   ,pathRegexp = require(\\\"./pathRegexp\\\")\\n   ,url = require(\\\"url\\\");\\n\\nmodule.exports = App;\\n\\nfunction App(){\\n    // 插件有序列表\\n    var middleList = this._middleList = [];\\n\\n    var self = this;\\n\\n    this._route_post_handles = [] //最新修改\\n\\n    this._route_get_handles = [] //最新修改\\n\\n    // request事件响应函数\\n    function handle(req,res){\\n\\n        req.params = {};\\n\\n        // 循环执行插件\\n        var middleIndex = 0; // 插件索引\\n\\n        execMiddle();\\n\\n        // 执行这个函数时，会自动执行下一个middle插件。\\n        // 至于这个函数的执行，是由插件所控制。\\n        function next(){\\n            middleIndex += 1;\\n            execMiddle();\\n        }\\n\\n        // 执行插件函数\\n        function execMiddle(){\\n            var middle = middleList[middleIndex];\\n            if(middle){\\n                middle(req,res,next);\\n            }else{\\n               var handle;\\n\\n               // 把 /abc?age=12 转为 /abc\\n               var path = url.parse(req.url).pathname;  //最新修改\\n\\n               // 找到路由对应的路由处理器。\\n               function findHandle(route_handles){ //最新修改\\n                    for(var i=0,len=route_handles.length; i&lt;len ; i++){\\n                        var route_handle = route_handles[i];\\n                        var pass = route_handle.route.test(path);\\n                        if(pass){\\n                            route_handle.route.paramNames.forEach(function(name,index){\\n                                req.params[name] = RegExp[\\\"$\\\"+(index+1)];\\n                            })\\n                            handle = route_handle.handle;\\n                            break;\\n                        }\\n                    }    \\n               }\\n\\n               // 判断是GET还是POST方法\\n               switch(req.method){\\n                     case \\\"GET\\\":\\n                         // handle = self._route_get_handles[req.url]\\n                         findHandle(self._route_get_handles); //最新修改\\n                     break;\\n                     case \\\"POST\\\":\\n                         // handle = self._route_post_handles[req.url]\\n                         findHandle(self._route_post_handles); //最新修改\\n                     break;\\n               }\\n\\n               if(handle){\\n                   handle(req,res);\\n               }else{\\n                   // 没找到指定处理器，返回404\\n                   res.statusCode = 404; //最新修改\\n                   res.end(); //最新修改\\n               }\\n            }\\n        }        \\n\\n    }\\n\\n    this._server = http.createServer(handle);\\n\\n}\\n\\n// 加入功能栈\\nApp.prototype.use = function(middle){\\n    this._middleList.push(middle);\\n}\\n\\nApp.prototype.get = function(route,handle){ //最新修改\\n    this._route_get_handles.push({route:pathRegexp(route),handle:handle})\\n}\\n\\nApp.prototype.post = function(route,handle){ //最新修改\\n    this._route_post_handles.push({route:pathRegexp(route),handle:handle})\\n}\\n\\n// 监听端口\\nApp.prototype.listen = function(){\\n    this._server.listen.apply(this._server,arguments);\\n}\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444980716000.jpg','2015-10-16 07:33:24','2020-10-10 16:37:57'),(213,'DoraCMS 版本更新 V1.1.0','DoraCMS 版本更新 V1.1.0','1','1','','版本更新','2',NULL,'','经过半年，DoraCMS迎来了第十个版本更新，本次更新内容如下。模板编辑。由于在前一个版本中，模板跟源码独立出来了，于是考虑到用更简单的方式来改模板，比如一点小改动，原本可以在ftp或ssh上来改，有没有更好的方式呢，在这个版本中，这一块做了优化','1','','','0:01',762,'2','0',NULL,1,'0',230955,'<p>经过半年，DoraCMS迎来了第十个版本更新，本次更新内容如下：</p><h3><a class=\"anchor\" id=\"版本更新-2016年1月4日15-56-41\" href=\"https://git.oschina.net/doramart/DoraCMS#%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0-2016%E5%B9%B41%E6%9C%884%E6%97%A515-56-41\"></a>版本更新 2016年1月4日15:56:41</h3><h3><a class=\"anchor\" id=\"版本号v1-1-0\" href=\"https://git.oschina.net/doramart/DoraCMS#%E7%89%88%E6%9C%AC%E5%8F%B7v1-1-0\"></a>版本号v1.1.0</h3><h3><a class=\"anchor\" id=\"更新内容-\" href=\"https://git.oschina.net/doramart/DoraCMS#%E6%9B%B4%E6%96%B0%E5%86%85%E5%AE%B9-\"></a>更新内容：</h3><ul class=\"task-list list-paddingleft-2\"><li><p>1、优化后台分页</p></li><li><p>2、添加了模板编辑功能</p></li><li><p>3、根据@chinakids的建议优化了后台左侧菜单回选代码</p></li><li><p>4、优化后台首页显示，{{}}改成ng-bind避免未及时加载而出现的大括号</p></li><li><p>5、下拉菜单样式的统一</p></li><li><p>6、新增了添加本地模板的功能</p></li><li><p>7、优化了图片上传和文件上传，图片上传可以设置默认不压缩</p></li><li><p>8、优化了文件真实类型校验</p></li><li><p>9、修复了用户注册校验的bug</p></li><li><p>10、修复了扩展路由访问不到页面的bug</p></li><li><p>11、修复了添加或删除模板单元的缓存问题</p></li><li><p>12、优化了uploadify组件</p></li><li><p>13、优化了搜索结果关键字高亮</p></li><li><p>14、增加了一个系统模板doraGallery</p></li><li><p>15、修复了一些明显的bug</p></li></ul><p><br/></p><p>下面介绍下主要变更：</p><p>1、模板编辑。由于在前一个版本中，模板跟源码独立出来了，于是考虑到用更简单的方式来改模板，比如一点小改动，原本可以在ftp或ssh上来改，有没有更好的方式呢，在这个版本中，这一块做了优化：</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_5_8_40_9_879_1000.jpg\" title=\"\" alt=\"DoraCMS版本更新1.jpg\"/></p><p><br/></p><p>在后台编辑会不会更方便呢，加链接、备案信息、样式等，点击更新刷新前台就有效果了。</p><p><br/></p><p>2、本地模板上传，在前面也有介绍，用户可以自己制作模板导入到DoraCMS中，我们提供了模板基础文件，可以下载下来修改合适信息后导入到DoraCMS:<br/></p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_5_8_43_24_261_1001.jpg\" title=\"\" alt=\"DoraCMS版本更新2.jpg\"/></p><p><br/></p><p>让风格修改更加简单。具体如何操作请查看<a href=\"http://html-js.cn/details/V1jJfO4Ul.html\" target=\"_blank\" class=\"ng-binding\" style=\"box-sizing: border-box; color: rgb(60, 141, 188); text-decoration: none; font-family: &#39;Source Sans Pro&#39;, &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; white-space: normal; background-color: rgb(255, 255, 255);\">DoraCMS模板概述</a></p><p><br/></p><p>3、后台新增了一个系统模板doraGallery。<br/></p><p><br/></p><p style=\"text-align: center;\"><img src=\"http://7xkr1n.com1.z0.glb.clouddn.com/cmsSource20151231154837.jpg\"/></p><p><br/></p><p>这个模板是之前做的静态页，这次修改成DoraCMS模板了。ps:做模板比较费事，如果你有好的资源可以发给我，我会选择一些优秀的做成系统模板，好东西需要一起分享嘛<img src=\"http://img.baidu.com/hi/face/i_f01.gif\"/></p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"经过半年，DoraCMS迎来了第十个版本更新，本次更新内容如下：\\n版本更新 2016年1月4日15:56:41\\n版本号v1.1.0\\n更新内容：\\n1、优化后台分页\\n2、添加了模板编辑功能\\n3、根据@chinakids的建议优化了后台左侧菜单回选代码\\n4、优化后台首页显示，{{}}改成ng-bind避免未及时加载而出现的大括号\\n5、下拉菜单样式的统一\\n6、新增了添加本地模板的功能\\n7、优化了图片上传和文件上传，图片上传可以设置默认不压缩\\n8、优化了文件真实类型校验\\n9、修复了用户注册校验的bug\\n10、修复了扩展路由访问不到页面的bug\\n11、修复了添加或删除模板单元的缓存问题\\n12、优化了uploadify组件\\n13、优化了搜索结果关键字高亮\\n14、增加了一个系统模板doraGallery\\n15、修复了一些明显的bug\\n\\n\\n下面介绍下主要变更：\\n1、模板编辑。由于在前一个版本中，模板跟源码独立出来了，于是考虑到用更简单的方式来改模板，比如一点小改动，原本可以在ftp或ssh上来改，有没有更好的方式呢，在这个版本中，这一块做了优化：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_5_8_40_9_879_1000.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n在后台编辑会不会更方便呢，加链接、备案信息、样式等，点击更新刷新前台就有效果了。\\n\\n2、本地模板上传，在前面也有介绍，用户可以自己制作模板导入到DoraCMS中，我们提供了模板基础文件，可以下载下来修改合适信息后导入到DoraCMS:\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_5_8_43_24_261_1001.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n让风格修改更加简单。具体如何操作请查看DoraCMS模板概述\\n\\n3、后台新增了一个系统模板doraGallery。\\n\\n\"},{\"type\":\"image\",\"content\":\"http://7xkr1n.com1.z0.glb.clouddn.com/cmsSource20151231154837.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n这个模板是之前做的静态页，这次修改成DoraCMS模板了。ps:做模板比较费事，如果你有好的资源可以发给我，我会选择一些优秀的做成系统模板，好东西需要一起分享嘛\"},{\"type\":\"image\",\"content\":\"http://img.baidu.com/hi/face/i_f01.gif\"},{\"type\":\"contents\",\"content\":\"\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20160105083347.jpg','2016-01-05 00:50:12','2020-08-20 15:44:12'),(214,'Node.js API实例讲解——什么是流Stream','什么是流Stream','2','1','','前端开发,nodejs教程','2',NULL,'','流，通俗来说是可读、可写或可读写的对象。比如打开一个文件流，就可以对文件流对象进行读写操作，比如一个request http请求，也是一个流对象，流对象继承了EventEmitter','1','','','0:01',762,'2','0',NULL,0,'0',223489,'<h3>什么是流Stream</h3><p>流，通俗来说是可读、可写或可读写的对象。比如打开一个文件流，就可以对文件流对象进行读写操作，比如一个request http请求，也是一个流对象，流对象继承了EventEmitter（参看“事件机制”一章）。</p><p>流stream这个模块本身提供了抽象类作为扩展基础，之后章节介绍的文件系统、网络系统、加密解密、压缩解压模块中都使用了流，根据自身系统的需要扩展了stream模块的抽象类。</p><p>node.js 提供了流的抽象类。</p><p>stream.Readable 可读抽象类。</p><p>stream.Writable 可写抽象类。</p>','[{\"type\":\"contents\",\"content\":\"什么是流Stream\\n流，通俗来说是可读、可写或可读写的对象。比如打开一个文件流，就可以对文件流对象进行读写操作，比如一个request http请求，也是一个流对象，流对象继承了EventEmitter（参看“事件机制”一章）。\\n流stream这个模块本身提供了抽象类作为扩展基础，之后章节介绍的文件系统、网络系统、加密解密、压缩解压模块中都使用了流，根据自身系统的需要扩展了stream模块的抽象类。\\nnode.js 提供了流的抽象类。\\nstream.Readable 可读抽象类。\\nstream.Writable 可写抽象类。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444889722000.jpg','2015-08-01 13:16:44','2020-10-17 15:34:40'),(215,'Node.js API实例讲解——http.IncomingMessage','http.IncomingMessage','2','1','','nodejs,http.IncomingMessage','2',NULL,'','http.IncomingMessage,它的实例我们简称msg。这个实例的产生是被动的，可以由5种场景产生','1','','','0:01',762,'2','0',NULL,0,'0',227412,'<h3>http.IncomingMessage</h3><p>它的实例我们简称msg。这个实例的产生是被动的，可以由5种场景产生。</p><pre class=\"code\">//这里的request就是msg对象\nvar&nbsp;server&nbsp;=&nbsp;http.createServer(function(request,response){&nbsp;...&nbsp;})\n\nvar&nbsp;server&nbsp;=&nbsp;http.createServer();\nserver.on(&quot;request&quot;,function(request,response){&nbsp;...&nbsp;})\n\n//&nbsp;response&nbsp;是msg对象&nbsp;&nbsp;\nvar&nbsp;request&nbsp;=&nbsp;http.request(options,&nbsp;function(response)&nbsp;{&nbsp;...&nbsp;})\n\nvar&nbsp;request&nbsp;=&nbsp;http.request(options);\nrequest.on(&quot;response&quot;,function(response){&nbsp;...&nbsp;})\n\nvar&nbsp;request&nbsp;=&nbsp;http.get(options,function(response){})</pre><p>msg并不一定代表请求对象，有时候也代表响应对象。msg可以理解为另一端socket发送来（或返回来）的数据，所以http.IncomingMessage是stream.Readable的子类，也就是只读的。</p><h4 id=\"-\">事件</h4><h5 id=\"-data-\">&#39;data&#39;事件</h5><p>当接收到数据时会产生这个事件，事件监听器会接收到数据。注意，如果不对这个事件添加监听器，那么数据会丢失。</p><pre class=\"code\">incomingMessage.on(&#39;data&#39;,function(chunk){&nbsp;...&nbsp;});</pre><p>chunk 是个数据片段，Buffer类型。</p><h5 id=\"-end-\">&#39;end&#39; 事件</h5><p>如果在这个之后不会再产生数据了，那么就会发出这个事件。这个事件只发生一次。</p><pre class=\"code\">incomingMessage.on(&#39;end&#39;,function(){&nbsp;...&nbsp;})</pre><h5 id=\"-close-\">&#39;close&#39; 事件</h5><p>这个事件的产生是当服务器端response.end() 调用之前客户端关闭造成的。看如下代码：</p><pre class=\"code\">var&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\nvar&nbsp;server&nbsp;=&nbsp;http.createServer();\nserver.on(&quot;request&quot;,function(req,res){\n\n&nbsp;&nbsp;&nbsp;&nbsp;req.on(&quot;close&quot;,function(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;close&quot;)\n&nbsp;&nbsp;&nbsp;&nbsp;})\n&nbsp;&nbsp;&nbsp;&nbsp;res.write(&quot;hello!&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;res.end();\n})\nserver.listen(8080);</pre><p>这里的res.end() 不会被调用，当浏览器访问服务器，然后关闭浏览器，这时req就会发出close事件。</p><h4 id=\"incomingmessage-\">incomingMessage对象的属性信息</h4><h5 id=\"message-headers-\">message.headers 得到头部信息</h5><p>下面的例子将获得一个浏览器发送来的请求的头部信息，然后进行详细分析。看代码：</p><pre class=\"code\">//&nbsp;服务器\nvar&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\nvar&nbsp;server&nbsp;=&nbsp;http.createServer();\nserver.on(&quot;request&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;console.log(req.headers)\n})\nserver.listen(8080)</pre><p>然后通过浏览器访问，会得到下面的信息，当然不同浏览器的信息稍有不同。</p><pre class=\"code\">{&nbsp;\n&nbsp;&nbsp;host:&nbsp;&#39;localhost:8080&#39;,\n&nbsp;&nbsp;connection:&nbsp;&#39;keep-alive&#39;,\n&nbsp;&nbsp;accept:&nbsp;&#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;,\n&nbsp;&nbsp;&#39;user-agent&#39;:&nbsp;&#39;Mozilla/5.0&nbsp;(Windows&nbsp;NT&nbsp;6.1)&nbsp;AppleWebKit/537.31&nbsp;(KHTML,&nbsp;like&nbsp;Gecko)&nbsp;Chrome/26.0.141\n0.43&nbsp;Safari/537.31&#39;,\n&nbsp;&nbsp;&#39;accept-encoding&#39;:&nbsp;&#39;gzip,deflate,sdch&#39;,\n&nbsp;&nbsp;&#39;accept-language&#39;:&nbsp;&#39;zh-CN,zh;q=0.8&#39;,\n&nbsp;&nbsp;&#39;accept-charset&#39;:&nbsp;&#39;GBK,utf-8;q=0.7,*;q=0.3&#39;,\n&nbsp;&nbsp;cookie:&nbsp;&#39;connect.sid=s%3AknJhNxKEK7nxXiYIsNfY%2BINl.%2B6HPsMaN6rEj9Hlm0e6CKp8lc6md2dHA9lo0xJs2szM&#39;\n}</pre><p>下面对这些信息进行详细说明。</p><p>host , 客户端指定自己想访问的WEB服务器的域名/IP 地址和端口号。</p><p>connection , 有两个值close（告诉WEB服务器或者代理服务器，在完成本次请求的响应后，断开连接，不要等待本次连接的后续请求了）。keepalive（告诉WEB服务器或者代理服务器，在完成本次请求的响应后，保持连接，等待本次连接的后续请求）。</p><p>accept, 告诉WEB服务器自己接受什么介质类型，<em>/</em> 表示任何类型，type/* 表示该类型下的所有子类型，type/sub-type。</p><p>user-agent, 浏览器表明自己的身份（是哪种浏览器）。</p><p>accept-encoding , 浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法 &nbsp;（gzip，deflate）</p><p>accept-language , 浏览器申明自己接收的语言跟字符集的区别。</p><p>accept-charset , 浏览器申明自己接收的字符集。</p><p>下面是查看服务器发回来的响应信息的代码。</p><pre class=\"code\">//&nbsp;客户端\nvar&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\nvar&nbsp;req&nbsp;=&nbsp;http.get(&quot;http://www.google.com/&quot;\n,function(res){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(res.headers)\n})</pre><p>运行后控制台打印如下信息：</p><pre class=\"code\">{&nbsp;\n&nbsp;&nbsp;location:&nbsp;&#39;http://www.google.com.hk/url?sa=p&amp;hl=zh-CN&amp;pref=hkredirect&amp;pval=yes&amp;q=http://www.google\n.com.hk/&amp;ust=1365300533439727&amp;usg=AFQjCNG7gOne9e40NICfSf7Od0fvo4_ldg&#39;,\n&nbsp;&nbsp;&#39;cache-control&#39;:&nbsp;&#39;private&#39;,\n&nbsp;&nbsp;&#39;content-type&#39;:&nbsp;&#39;text/html;&nbsp;charset=UTF-8&#39;,\n&nbsp;&nbsp;&#39;set-cookie&#39;:&nbsp;[&nbsp;&#39;PREF=ID=5472e4793df80ea7:FF=0:NW=1:TM=1365300503:LM=1365300503:S=j3_mzrMxXuiqPI0d\n;&nbsp;expires=Tue,&nbsp;07-Apr-2015&nbsp;02:08:23&nbsp;GMT;&nbsp;path=/;&nbsp;domain=.google.com&#39;&nbsp;],\n&nbsp;&nbsp;date:&nbsp;&#39;Sun,&nbsp;07&nbsp;Apr&nbsp;2013&nbsp;02:08:23&nbsp;GMT&#39;,\n&nbsp;&nbsp;server:&nbsp;&#39;gws&#39;,\n&nbsp;&nbsp;&#39;content-length&#39;:&nbsp;&#39;376&#39;,\n&nbsp;&nbsp;&#39;x-xss-protection&#39;:&nbsp;&#39;1;&nbsp;mode=block&#39;,\n&nbsp;&nbsp;&#39;x-frame-options&#39;:&nbsp;&#39;SAMEORIGIN&#39;&nbsp;\n}</pre><p>下面对这些信息进行详细说明。</p><p>Cache- Control指定请求和响应遵循的缓存机制。在请求消息或响应消息中设置 Cache-Control并不会修改另一个消息处理过程中的缓存处理过程。请求时的缓存指令包括no-cache、no-store、max-age、 max-stale、min-fresh、only-if-cached，响应消息中的指令包括public、private、no-cache、no- store、no-transform、must-revalidate、proxy-revalidate、max-age。各个消息中的指令含义如 下： Public指示响应可被任何缓存区缓存。Private指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效。 no-cache指示请求或响应消息不能缓存 no-store用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。max-age指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应。min-fresh指示客户机可以接收响应时间小于当前时间加上指定时间的响应。max-stale指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。&nbsp;</p><p>Location响应头用于重定向接收者到一个新URI地址。</p><p>Content-Type实体头用于向接收方指示实体的介质类型。</p><p>set-cookie设置和页面关联的Cookie。</p><p>expires 指定应该在什么时候认为文档已经过期，从而不再缓存它。</p><p>server 服务器名字。</p><p>content-length &nbsp;表示内容长度。</p><p>x-xss-protection &nbsp;XSS筛选器,主要用于防御反射型跨站攻击，网站一般都会设置为 0 。<span class=\"invade-word\">googog</span></p><p>x-frame-options 可用于指示是否应该允许浏览器呈现在一个页面FRAME 或 IFRAME 中。 以确保网站内容是不是嵌入到其它网站。使用X-Frame-Options 有两种可能的值：DENY ：该页无法显示在一个框架中。SAMEORIGHT ：页面只能显示在页面本网站的框架中。</p><h5 id=\"message-httpversion-http-1-1-1-0-1-1-\">message.httpVersion http版本 1.1或1.0，基本都是1.1了。</h5><h5 id=\"message-method-get-post\">message.method 请求方法，这个只存在于请求对象中。 GET/POST</h5><h5 id=\"message-url-url-\">message.url 请求url，这只存在于请求对象中。看例子</h5><pre class=\"code\">//&nbsp;服务器\nvar&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\nvar&nbsp;server&nbsp;=&nbsp;http.createServer();\nserver.on(&quot;request&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;console.log(req.url)\n})\nserver.listen(8080)</pre><p><span class=\"invade-word\">yellow</span>通过浏览器访问 <a href=\"http://localhost:8080/article?id=1221212\">http://localhost:8080/article?id=1221212</a> ， 控制台会打印：</p><pre class=\"code\">/article?id=1221212</pre><h5 id=\"message-statuscode-\">message.statusCode 响应状态代码，只存在于响应对象中。</h5><p>例如 404 表示未找到资源。来做个例子。</p><pre class=\"code\">//&nbsp;客户端\nvar&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\nvar&nbsp;req&nbsp;=&nbsp;http.get(&quot;http://www.google.com/idsddd.html&quot;\n,function(res){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(res.statusCode);&nbsp;//&nbsp;404\n})</pre><h5 id=\"message-socket-net-socket-node-js-socket-\">message.socket 这个是底层的net.Socket对象。（参看“node.js中的Socket对象”一节）</h5><h4 id=\"-\">三个方法</h4><p>要知道 IncommingMessage是stream.Readable子类。</p><p>关于 message.setEncoding([encoding]) / message.pause() / message.resume() 三个方法，这里就不介绍了，可以参看 stream.Readable 一章节。</p><h4 id=\"-\">【小结】</h4><p>本节介绍的是个特殊的对象，它的产生是被动的，它可能是服务器端监听到的请求者信息，也可能是客户端接收到的响应信息。所以在各个例子中，它可能扮演req或res，其实类型都是IncommingMessage。</p>','[{\"type\":\"contents\",\"content\":\"http.IncomingMessage\\n它的实例我们简称msg。这个实例的产生是被动的，可以由5种场景产生。\\n//这里的request就是msg对象\\nvar server = http.createServer(function(request,response){ ... })\\n\\nvar server = http.createServer();\\nserver.on(\\\"request\\\",function(request,response){ ... })\\n\\n// response 是msg对象  \\nvar request = http.request(options, function(response) { ... })\\n\\nvar request = http.request(options);\\nrequest.on(\\\"response\\\",function(response){ ... })\\n\\nvar request = http.get(options,function(response){})\\nmsg并不一定代表请求对象，有时候也代表响应对象。msg可以理解为另一端socket发送来（或返回来）的数据，所以http.IncomingMessage是stream.Readable的子类，也就是只读的。\\n事件\\n\'data\'事件\\n当接收到数据时会产生这个事件，事件监听器会接收到数据。注意，如果不对这个事件添加监听器，那么数据会丢失。\\nincomingMessage.on(\'data\',function(chunk){ ... });\\nchunk 是个数据片段，Buffer类型。\\n\'end\' 事件\\n如果在这个之后不会再产生数据了，那么就会发出这个事件。这个事件只发生一次。\\nincomingMessage.on(\'end\',function(){ ... })\\n\'close\' 事件\\n这个事件的产生是当服务器端response.end() 调用之前客户端关闭造成的。看如下代码：\\nvar http = require(\\\"http\\\");\\nvar server = http.createServer();\\nserver.on(\\\"request\\\",function(req,res){\\n\\n    req.on(\\\"close\\\",function(){\\n        console.log(\\\"close\\\")\\n    })\\n    res.write(\\\"hello!\\\");\\n    // res.end();\\n})\\nserver.listen(8080);\\n这里的res.end() 不会被调用，当浏览器访问服务器，然后关闭浏览器，这时req就会发出close事件。\\nincomingMessage对象的属性信息\\nmessage.headers 得到头部信息\\n下面的例子将获得一个浏览器发送来的请求的头部信息，然后进行详细分析。看代码：\\n// 服务器\\nvar http = require(\\\"http\\\");\\nvar server = http.createServer();\\nserver.on(\\\"request\\\",function(req,res){\\n   console.log(req.headers)\\n})\\nserver.listen(8080)\\n然后通过浏览器访问，会得到下面的信息，当然不同浏览器的信息稍有不同。\\n{ \\n  host: \'localhost:8080\',\\n  connection: \'keep-alive\',\\n  accept: \'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\',\\n  \'user-agent\': \'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.141\\n0.43 Safari/537.31\',\\n  \'accept-encoding\': \'gzip,deflate,sdch\',\\n  \'accept-language\': \'zh-CN,zh;q=0.8\',\\n  \'accept-charset\': \'GBK,utf-8;q=0.7,*;q=0.3\',\\n  cookie: \'connect.sid=s%3AknJhNxKEK7nxXiYIsNfY%2BINl.%2B6HPsMaN6rEj9Hlm0e6CKp8lc6md2dHA9lo0xJs2szM\'\\n}\\n下面对这些信息进行详细说明。\\nhost , 客户端指定自己想访问的WEB服务器的域名/IP 地址和端口号。\\nconnection , 有两个值close（告诉WEB服务器或者代理服务器，在完成本次请求的响应后，断开连接，不要等待本次连接的后续请求了）。keepalive（告诉WEB服务器或者代理服务器，在完成本次请求的响应后，保持连接，等待本次连接的后续请求）。\\naccept, 告诉WEB服务器自己接受什么介质类型，/ 表示任何类型，type/* 表示该类型下的所有子类型，type/sub-type。\\nuser-agent, 浏览器表明自己的身份（是哪种浏览器）。\\naccept-encoding , 浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法  （gzip，deflate）\\naccept-language , 浏览器申明自己接收的语言跟字符集的区别。\\naccept-charset , 浏览器申明自己接收的字符集。\\n下面是查看服务器发回来的响应信息的代码。\\n// 客户端\\nvar http = require(\\\"http\\\");\\nvar req = http.get(\\\"http://www.google.com/\\\"\\n,function(res){\\n    console.log(res.headers)\\n})\\n运行后控制台打印如下信息：\\n{ \\n  location: \'http://www.google.com.hk/url?sa=p&amp;hl=zh-CN&amp;pref=hkredirect&amp;pval=yes&amp;q=http://www.google\\n.com.hk/&amp;ust=1365300533439727&amp;usg=AFQjCNG7gOne9e40NICfSf7Od0fvo4_ldg\',\\n  \'cache-control\': \'private\',\\n  \'content-type\': \'text/html; charset=UTF-8\',\\n  \'set-cookie\': [ \'PREF=ID=5472e4793df80ea7:FF=0:NW=1:TM=1365300503:LM=1365300503:S=j3_mzrMxXuiqPI0d\\n; expires=Tue, 07-Apr-2015 02:08:23 GMT; path=/; domain=.google.com\' ],\\n  date: \'Sun, 07 Apr 2013 02:08:23 GMT\',\\n  server: \'gws\',\\n  \'content-length\': \'376\',\\n  \'x-xss-protection\': \'1; mode=block\',\\n  \'x-frame-options\': \'SAMEORIGIN\' \\n}\\n下面对这些信息进行详细说明。\\nCache- Control指定请求和响应遵循的缓存机制。在请求消息或响应消息中设置 Cache-Control并不会修改另一个消息处理过程中的缓存处理过程。请求时的缓存指令包括no-cache、no-store、max-age、 max-stale、min-fresh、only-if-cached，响应消息中的指令包括public、private、no-cache、no- store、no-transform、must-revalidate、proxy-revalidate、max-age。各个消息中的指令含义如 下： Public指示响应可被任何缓存区缓存。Private指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效。 no-cache指示请求或响应消息不能缓存 no-store用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。max-age指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应。min-fresh指示客户机可以接收响应时间小于当前时间加上指定时间的响应。max-stale指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。 \\nLocation响应头用于重定向接收者到一个新URI地址。\\nContent-Type实体头用于向接收方指示实体的介质类型。\\nset-cookie设置和页面关联的Cookie。\\nexpires 指定应该在什么时候认为文档已经过期，从而不再缓存它。\\nserver 服务器名字。\\ncontent-length  表示内容长度。\\nx-xss-protection  XSS筛选器,主要用于防御反射型跨站攻击，网站一般都会设置为 0 。googog\\nx-frame-options 可用于指示是否应该允许浏览器呈现在一个页面FRAME 或 IFRAME 中。 以确保网站内容是不是嵌入到其它网站。使用X-Frame-Options 有两种可能的值：DENY ：该页无法显示在一个框架中。SAMEORIGHT ：页面只能显示在页面本网站的框架中。\\nmessage.httpVersion http版本 1.1或1.0，基本都是1.1了。\\nmessage.method 请求方法，这个只存在于请求对象中。 GET/POST\\nmessage.url 请求url，这只存在于请求对象中。看例子\\n// 服务器\\nvar http = require(\\\"http\\\");\\nvar server = http.createServer();\\nserver.on(\\\"request\\\",function(req,res){\\n   console.log(req.url)\\n})\\nserver.listen(8080)\\nyellow通过浏览器访问 http://localhost:8080/article?id=1221212 ， 控制台会打印：\\n/article?id=1221212\\nmessage.statusCode 响应状态代码，只存在于响应对象中。\\n例如 404 表示未找到资源。来做个例子。\\n// 客户端\\nvar http = require(\\\"http\\\");\\nvar req = http.get(\\\"http://www.google.com/idsddd.html\\\"\\n,function(res){\\n    console.log(res.statusCode); // 404\\n})\\nmessage.socket 这个是底层的net.Socket对象。（参看“node.js中的Socket对象”一节）\\n三个方法\\n要知道 IncommingMessage是stream.Readable子类。\\n关于 message.setEncoding([encoding]) / message.pause() / message.resume() 三个方法，这里就不介绍了，可以参看 stream.Readable 一章节。\\n【小结】\\n本节介绍的是个特殊的对象，它的产生是被动的，它可能是服务器端监听到的请求者信息，也可能是客户端接收到的响应信息。所以在各个例子中，它可能扮演req或res，其实类型都是IncommingMessage。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444890635000.jpg','2015-08-09 14:05:18','2020-08-20 15:44:25'),(216,'NodeJS独立开发web框架——静态服务器开发(3)','服务器返回任意页功能','2','1','','静态服务器','2',NULL,'','这一节，要进一步扩展，通过设置指定一个静态资源目录，让浏览器可以访问任意该目录内的任意文件。','1','','','0:01',762,'2','0',NULL,0,'0',223330,'<h3>服务器返回任意页功能</h3><p>这一节，要进一步扩展，通过设置指定一个静态资源目录，让浏览器可以访问任意该目录内的任意文件。</p><p>（小帅哥问：我们怎么知道浏览器要访问什么文件？）</p><p>这个问题问的很好！ 前几节我们知道有个request请求对象，这个对象是只读的，这个对象内就包含了要请求那个文件的信息。</p><p>但这个信息体现形式是网址形式，如何解释网址，是由服务器端程序来做的，而我们要做的就是解释网址信息的工作。</p><p>这个网址信息通过 <code>request.url</code> 就可得到，而这个网址信息还需要过滤一下。比如 url是 <code>/A/B?ccsds</code>，我们真正想要的是 <code>/A/B</code>，再比如<code>/A/B/book.html?id=001</code>，我们真正想要的是<code>/A/B/book.html</code>。</p><p>url的解析要用到URL模块，通过<code>var url &nbsp;= require(&quot;url&quot;)</code>可以得到该模块对象。下面先开发一个把url转换成路径的工具函数。</p><pre>var&nbsp;url&nbsp;=&nbsp;require(&quot;url&quot;);\n\n//&nbsp;把URL转换成资源路径\nfunction&nbsp;url2path(url_str){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;urlObj&nbsp;=&nbsp;url.parse(url_str);&nbsp;&nbsp;//&nbsp;把url信息封装成JSON对象\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;path&nbsp;=&nbsp;urlObj.path;&nbsp;&nbsp;//&nbsp;得到路径信息\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;path;\n}</pre><p>接下来把功能整合起来，修改handle函数让他具备静态服务器功能。&nbsp;</p><pre>function&nbsp;handle(request,response){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;callback(err,data){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.write(data);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;path&nbsp;=&nbsp;url2path(request.url);&nbsp;//&nbsp;得到path\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;data&nbsp;=&nbsp;fs.readFile(__dirname+&quot;/public&quot;+path,callback);&nbsp;&nbsp;&nbsp;//&nbsp;这里指定public是静态资源目录\n}</pre><p>下面为了测试需要，要在public目录下再建立两个文件，一个是<code>a.txt</code>和<code>b.html</code> 。</p><hr/><p>看下面视频演示效果</p><p><embed width=\"480\" height=\"400\" align=\"middle\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" quality=\"high\" allowfullscreen=\"true\" src=\"http://static.video.qq.com/TPout.swf?vid=v0115paw51c\"/></p><hr/><p>（小胖突然想到什么似的，问道：那如果文件不存在怎么办？）</p><p>这个问题就是马上要修补的功能，现在的程序如果找不到文件，服务器端就会出错，看一下之前介绍的 <code>callback(err,data)</code>回调函数 ，这个函数会接收到两个参数，err表示错误，data表示读取到的数据，如果读取不到数据或内部出错，err就会存在 。</p><p>所以可以把callback加固一下，通过判断err是否存在，如果存在就通知浏览器客户端404代码，404表示不存在资源。</p><pre>function&nbsp;callback(err,data){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(err){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.statusCode&nbsp;=&nbsp;404;&nbsp;&nbsp;//&nbsp;设置状态码，表示没找到资源。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.write(data);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n}</pre><p>这样，当客户端访问的资源不存在时，就不会让服务器崩溃，而浏览器接收到404就知道资源不存在，展示给客户一个不存在的提示页面。</p><hr/><p>本节实现了在服务器端，指定一个public静态服务器目录，从而让客户端访问该目录和子目录下的全部文件，当没有文件时，响应404未找到资源编码。</p><p>下一节，整合一下，形成一个模块，该模块将是 stuwebfk 的雏形。</p>','[{\"type\":\"contents\",\"content\":\"服务器返回任意页功能\\n这一节，要进一步扩展，通过设置指定一个静态资源目录，让浏览器可以访问任意该目录内的任意文件。\\n（小帅哥问：我们怎么知道浏览器要访问什么文件？）\\n这个问题问的很好！ 前几节我们知道有个request请求对象，这个对象是只读的，这个对象内就包含了要请求那个文件的信息。\\n但这个信息体现形式是网址形式，如何解释网址，是由服务器端程序来做的，而我们要做的就是解释网址信息的工作。\\n这个网址信息通过 request.url 就可得到，而这个网址信息还需要过滤一下。比如 url是 /A/B?ccsds，我们真正想要的是 /A/B，再比如/A/B/book.html?id=001，我们真正想要的是/A/B/book.html。\\nurl的解析要用到URL模块，通过var url  = require(\\\"url\\\")可以得到该模块对象。下面先开发一个把url转换成路径的工具函数。\\nvar url = require(\\\"url\\\");\\n\\n// 把URL转换成资源路径\\nfunction url2path(url_str){\\n    var urlObj = url.parse(url_str);  // 把url信息封装成JSON对象\\n    var path = urlObj.path;  // 得到路径信息\\n    return path;\\n}\\n接下来把功能整合起来，修改handle函数让他具备静态服务器功能。 \\nfunction handle(request,response){\\n       function callback(err,data){\\n             response.write(data);\\n             response.end();       \\n       }\\n       var path = url2path(request.url); // 得到path\\n       var data = fs.readFile(__dirname+\\\"/public\\\"+path,callback);   // 这里指定public是静态资源目录\\n}\\n下面为了测试需要，要在public目录下再建立两个文件，一个是a.txt和b.html 。\\n看下面视频演示效果\\n&lt;embed width=\\\"480\\\" height=\\\"400\\\" align=\\\"middle\\\" type=\\\"application/x-shockwave-flash\\\" allowscriptaccess=\\\"always\\\" quality=\\\"high\\\" allowfullscreen=\\\"true\\\" src=\\\"http://static.video.qq.com/TPout.swf?vid=v0115paw51c\\\"&gt;\\n（小胖突然想到什么似的，问道：那如果文件不存在怎么办？）\\n这个问题就是马上要修补的功能，现在的程序如果找不到文件，服务器端就会出错，看一下之前介绍的 callback(err,data)回调函数 ，这个函数会接收到两个参数，err表示错误，data表示读取到的数据，如果读取不到数据或内部出错，err就会存在 。\\n所以可以把callback加固一下，通过判断err是否存在，如果存在就通知浏览器客户端404代码，404表示不存在资源。\\nfunction callback(err,data){\\n      if(err){\\n           response.statusCode = 404;  // 设置状态码，表示没找到资源。\\n      }else{\\n           response.write(data);\\n      }\\n      response.end();       \\n}\\n这样，当客户端访问的资源不存在时，就不会让服务器崩溃，而浏览器接收到404就知道资源不存在，展示给客户一个不存在的提示页面。\\n本节实现了在服务器端，指定一个public静态服务器目录，从而让客户端访问该目录和子目录下的全部文件，当没有文件时，响应404未找到资源编码。\\n下一节，整合一下，形成一个模块，该模块将是 stuwebfk 的雏形。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444892524000.jpg','2015-09-02 14:41:31','2020-08-20 15:44:25'),(217,'DoraCMS报Redis connection to 127.0.0.1:6379 问题','DoraCMS报Redis 错误提示','1','1',NULL,'Redis','2',NULL,'','关于DoraCMS报 Error: Redis connection to 127.0.0.1:6379 failed 错误的问题','1','','','0:01',762,'2','0',NULL,1,'0',231302,'<p>近来有些同学在运行DoraCSM出现错误提示：</p><pre class=\"brush:js;toolbar:false\">Error:&nbsp;Redis&nbsp;connection&nbsp;to&nbsp;127.0.0.1:6379&nbsp;failed&nbsp;-&nbsp;connect&nbsp;ECONNREFUSED\n&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;RedisClient.on_error&nbsp;(E:\\myWeb\\nodework\\doracms1.0\\node_modules\\redis\\index.js:196:24)\n&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;Socket.&lt;anonymous&gt;&nbsp;(E:\\myWeb\\nodework\\doracms1.0\\node_modules\\redis\\index.js:106:14)\n&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;Socket.emit&nbsp;(events.js:107:17)\n&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;net.js:459:14\n&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;process._tickCallback&nbsp;(node.js:355:11)</pre><p>在此说明一下，DoraCMS 在V1.0.2版本中加入了redis缓存：<br/></p><p><br/></p><p><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_9_17_17_37_17_805_1000.jpg\" title=\"\" alt=\"QQ截图20150917173608.jpg\"/></p><p><br/></p><p>这里缓存了用户信息和站点地图，细心的同学可以在app.js 中找到配置：</p><pre class=\"brush:js;toolbar:false\">app.use(session({\n&nbsp;&nbsp;&nbsp;&nbsp;secret:&nbsp;settings.session_secret,\n&nbsp;&nbsp;&nbsp;&nbsp;store:&nbsp;new&nbsp;RedisStore({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;port:&nbsp;settings.redis_port,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;host:&nbsp;settings.redis_host,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass&nbsp;:&nbsp;settings.redis_psd,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ttl:&nbsp;1800&nbsp;//&nbsp;过期时间\n&nbsp;&nbsp;&nbsp;&nbsp;}),\n&nbsp;&nbsp;&nbsp;&nbsp;resave:&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;saveUninitialized:&nbsp;true\n}));</pre><p>这里就设置了redis的相关信息（ip，端口号和密码），用过redis的同学一看应该就能明白，下面就介绍如何让DoraCMS不报这个错误。</p><p><br/></p><p>1、下载redis，根据您服务器的版本下载redis，您可以到官网上下载：<a href=\"http://redis.io/download\" _src=\"http://redis.io/download\">http://redis.io/download</a> </p><p><br/></p><p>这里提供一个windows下的版本&nbsp;</p><p style=\"line-height: 16px;\"><img style=\"vertical-align: middle; margin-right: 2px;\" src=\"http://www.html-js.cn/ueditor/dialogs/attachment/fileTypeImages/icon_rar.gif\"/><a style=\"font-size:12px; color:#0066cc;\" href=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_9_17_17_41_54_463_1001.zip\" title=\"redis-2.4.5-win32-win64.zip\">redis-2.4.5-win32-win64.zip</a></p><p><br/></p><p>2、解压后可以看到如下目录（我解压到了&nbsp;D:\\softbak\\redis2.4.5\\64bit 路径下）<br/></p><p><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_9_17_17_44_10_553_1002.jpg\" title=\"\" alt=\"QQ截图20150917174212.jpg\"/></p><p><br/></p><p>3、执行&nbsp;redis-server.exe，出现如下界面表示启动成功：</p><p><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_9_17_17_46_35_400_1003.jpg\" title=\"\" alt=\"QQ截图20150917174534.jpg\"/></p><p><br/></p><p>4、找到setting.js 文件（/doracms1.0/models/db/settings.js），配置redis相关参数：</p><pre class=\"brush:js;toolbar:false\">redis_host:&nbsp;&#39;127.0.0.1&#39;,\nredis_port:&nbsp;6379,\nredis_psd&nbsp;:&nbsp;&#39;&#39;,\nredis_db:&nbsp;0,</pre><p><br/></p><p>redis_port 默认为6379，不需要改，默认密码为空 （因为是直接启动的redis-server.exe，默认不需要密码）</p><p>redis_db 可以不用管</p><p><br/></p><p>5、在项目根目录下执行cmd，启动服务（npm start）,就不会报错了。</p><p><br/></p><p>注意：本地调试redis可以不设置密码，放到服务器上必须设置密码，具体可以参考另一篇文章：</p><p><br/></p><p><a href=\"http://www.html-js.cn/details/41Fa_JG0.html\" target=\"_blank\" title=\"redis未授权访问漏洞\">Redis 未授权访问漏洞</a></p>','[{\"type\":\"contents\",\"content\":\"近来有些同学在运行DoraCSM出现错误提示：\\nError: Redis connection to 127.0.0.1:6379 failed - connect ECONNREFUSED\\n    at RedisClient.on_error (E:\\\\myWeb\\\\nodework\\\\doracms1.0\\\\node_modules\\\\redis\\\\index.js:196:24)\\n    at Socket.&lt;anonymous&gt; (E:\\\\myWeb\\\\nodework\\\\doracms1.0\\\\node_modules\\\\redis\\\\index.js:106:14)\\n    at Socket.emit (events.js:107:17)\\n    at net.js:459:14\\n    at process._tickCallback (node.js:355:11)\\n在此说明一下，DoraCMS 在V1.0.2版本中加入了redis缓存：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_9_17_17_37_17_805_1000.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n这里缓存了用户信息和站点地图，细心的同学可以在app.js 中找到配置：\\napp.use(session({\\n    secret: settings.session_secret,\\n    store: new RedisStore({\\n        port: settings.redis_port,\\n        host: settings.redis_host,\\n        pass : settings.redis_psd,\\n        ttl: 1800 // 过期时间\\n    }),\\n    resave: true,\\n    saveUninitialized: true\\n}));\\n这里就设置了redis的相关信息（ip，端口号和密码），用过redis的同学一看应该就能明白，下面就介绍如何让DoraCMS不报这个错误。\\n\\n1、下载redis，根据您服务器的版本下载redis，您可以到官网上下载：http://redis.io/download \\n\\n这里提供一个windows下的版本 \\n\"},{\"type\":\"image\",\"content\":\"http://www.html-js.cn/ueditor/dialogs/attachment/fileTypeImages/icon_rar.gif\"},{\"type\":\"contents\",\"content\":\"redis-2.4.5-win32-win64.zip\\n\\n2、解压后可以看到如下目录（我解压到了 D:\\\\softbak\\\\redis2.4.5\\\\64bit 路径下）\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_9_17_17_44_10_553_1002.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n3、执行 redis-server.exe，出现如下界面表示启动成功：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_9_17_17_46_35_400_1003.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n4、找到setting.js 文件（/doracms1.0/models/db/settings.js），配置redis相关参数：\\nredis_host: \'127.0.0.1\',\\nredis_port: 6379,\\nredis_psd : \'\',\\nredis_db: 0,\\n\\nredis_port 默认为6379，不需要改，默认密码为空 （因为是直接启动的redis-server.exe，默认不需要密码）\\nredis_db 可以不用管\\n\\n5、在项目根目录下执行cmd，启动服务（npm start）,就不会报错了。\\n\\n注意：本地调试redis可以不设置密码，放到服务器上必须设置密码，具体可以参考另一篇文章：\\n\\nRedis 未授权访问漏洞\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444895146000.jpg','2015-09-17 09:54:22','2020-08-20 15:44:24'),(218,NULL,NULL,NULL,'1',NULL,'','2',NULL,'',NULL,'1','','','0:01',NULL,'1','1','',0,'0',92482,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/20200202/1580632161511119312.png','2020-08-17 08:12:16','2020-08-17 08:12:16'),(219,'vue ssr 性能问题分析','vue ssr 性能问题分析','1','1','','','2',NULL,'','近期比较忙，也遇到了很棘手的问题，vue ssr 内存泄漏，一直找不到问题根源，目前项目慢慢稳定下来，现在总结一下','1','','','0:01',762,'2','0',NULL,0,'0',225837,'<p class=\"p1\">近期比较忙，也遇到了很棘手的问题，<span class=\"s1\">vue ssr </span>内存泄漏，一直找不到问题根源，目前项目慢慢稳定下来，内存也维持在正常水平，通过alinode监测内存情况表现正常（由于我的服务器上部署了多个项目，维持在60%是正常状态）<span class=\"s1\">:</span></p><p style=\"text-align:center\"><img src=\"https://cdn.html-js.cn/cms/upload/images/ueditor/893703885091377152.jpg\" title=\"img20170804175327.jpg\" alt=\"img20170804175327.jpg\" width=\"500\" height=\"283\"/></p><p class=\"p1\">服务端渲染除了需要了解基本原理之外，需要特别注意性能问题，起初将<span class=\"s1\">doracms2.0</span>部署到阿里云服务器上（内存<span class=\"s1\">1G</span>），过了一晚上跑到<span class=\"s1\">300</span>多<span class=\"s1\">M</span>，很明显的内存泄漏了，之前也有考虑过<span class=\"s1\">ssr</span>是否适合内容比较多的应用，也有想过是否改架构，但作为<span class=\"s1\">vue ssr</span>实践，有必要</p><p class=\"p1\">去了解下哪些地方会引起内存问题。</p><p class=\"p2\"><br/></p><p class=\"p1\"><span style=\"color: rgb(0, 176, 240);\">1、合理使用缓存。</span><span class=\"s1\">vue ssr </span>官方案例中用到了<span class=\"s1\">lru-cache</span>，以缓解性能方面的问题，要知道<span class=\"s1\">lru-cache</span>缓存数据都是存内存的，需要合理使用，原则上讲缓存静态内容，经常变动频繁的内容最好不要缓存。</p><p class=\"p1\"><br/></p><p class=\"p1\"><span style=\"color: rgb(0, 176, 240);\">2、axios 的使用。</span><span class=\"s1\">axios </span>允许客户端和服务端发起请求，但是使用不当也会造成内存泄漏，在<span class=\"s1\">vue ssr</span>项目中，可以考虑将<span class=\"s1\">axios</span>封装一下，</p><p class=\"p1\">针对不同环境进行调用，具体用法可以参考下面的文章。</p><p class=\"p1\"><a href=\"https://www.mmxiaowu.com/article/58666e94b31b4b0734dd01be\" target=\"_blank\" title=\"Vue2 SSR 缓存 Api 数据\">Vue2 SSR 缓存 Api 数据</a></p><p class=\"p1\"><br/></p><p class=\"p1\"><span style=\"color: rgb(0, 176, 240);\">3、合理使用 v-once </span>。官网介绍如下：</p><p class=\"p1\">只渲染元素和组件一次。随后的重新渲染,元素<span class=\"s1\">/</span>组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。一般用在</p><p class=\"p1\">渲染数据比较多的列表，而且内容不会经常变动。</p><pre class=\"brush:html;toolbar:false\">&lt;!--&nbsp;单个元素&nbsp;--&gt;\n&lt;span&nbsp;v-once&gt;This&nbsp;will&nbsp;never&nbsp;change:&nbsp;{{msg}}&lt;/span&gt;\n&lt;!--&nbsp;有子元素&nbsp;--&gt;\n&lt;div&nbsp;v-once&gt;\n&nbsp;&nbsp;&lt;h1&gt;comment&lt;/h1&gt;\n&nbsp;&nbsp;&lt;p&gt;{{msg}}&lt;/p&gt;\n&lt;/div&gt;\n&lt;!--&nbsp;组件&nbsp;--&gt;\n&lt;my-component&nbsp;v-once&nbsp;:comment=&quot;msg&quot;&gt;&lt;/my-component&gt;\n&lt;!--&nbsp;v-for&nbsp;指令--&gt;\n&lt;ul&gt;\n&nbsp;&nbsp;&lt;li&nbsp;v-for=&quot;i&nbsp;in&nbsp;list&quot;&nbsp;v-once&gt;{{i}}&lt;/li&gt;\n&lt;/ul&gt;</pre><p class=\"p1\">我在几个组件用到了该标签：</p><p class=\"p3\">header<span class=\"s2\">,</span>footer<span class=\"s2\">,</span>topicItem<span class=\"s2\">等</span></p><pre class=\"brush:js;toolbar:false\">&lt;el-col&nbsp;v-for=&quot;(nav,index)&nbsp;in&nbsp;headerNav&quot;&nbsp;:key=&quot;index&quot;&nbsp;v-once&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;router-link&nbsp;:to=&quot;{path:&nbsp;&#39;/&#39;+nav.defaultUrl+&nbsp;&#39;___&#39;+nav._id}&quot;&gt;{{nav.name}}&lt;/router-link&gt;\n&lt;/el-col&gt;</pre><p class=\"p2\"><br/></p><p class=\"p1\"><span style=\"color: rgb(0, 176, 240);\">4、合理使用keep-alive。</span>主要用于保留组件状态或避免重新渲染。要知道，重复渲染数据量大的列表代价很大。</p><p class=\"p1\"><br/></p><p class=\"p3\"><span style=\"color: rgb(0, 176, 240);\">5、vue ssr 中的 runInNewContext 属性（2.3.1+）</span><span class=\"s2\">。官方解释非常详细了：</span></p><p class=\"p1\">默认情况下，对于每次渲染，<span class=\"s1\">bundle renderer </span>将创建一个新的<span class=\"s1\"> V8 </span>上下文并重新执行整个<span class=\"s1\"> bundle</span>。这具有一些好处<span class=\"s1\"> - </span>例如，应用程序代码与服务器进程隔离，我们无需担心文档中提到的状态单例问题。然而，这种模式有一些相当大的性能开销，因为重新创建上下文并执行整个<span class=\"s1\"> bundle </span>还是相当昂贵的，特别是当应用很大的时候。<span class=\"s1\"> </span>出于向后兼容的考虑，此选项默认为<span class=\"s1\"> true</span>，但建议你尽可能使用<span class=\"s1\"> runInNewContext: false </span>或<span class=\"s1\"> runInNewContext: &#39;once&#39;</span>。</p><p class=\"p2\"><br/></p><p class=\"p4\"><a href=\"https://ssr.vuejs.org/zh/api.html#runinnewcontext\">https://ssr.vuejs.org/zh/api.html#runinnewcontext</a></p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"近期比较忙，也遇到了很棘手的问题，vue ssr 内存泄漏，一直找不到问题根源，目前项目慢慢稳定下来，内存也维持在正常水平，通过alinode监测内存情况表现正常（由于我的服务器上部署了多个项目，维持在60%是正常状态）:\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/ueditor/893703885091377152.jpg\"},{\"type\":\"contents\",\"content\":\"\\n服务端渲染除了需要了解基本原理之外，需要特别注意性能问题，起初将doracms2.0部署到阿里云服务器上（内存1G），过了一晚上跑到300多M，很明显的内存泄漏了，之前也有考虑过ssr是否适合内容比较多的应用，也有想过是否改架构，但作为vue ssr实践，有必要\\n去了解下哪些地方会引起内存问题。\\n\\n1、合理使用缓存。vue ssr 官方案例中用到了lru-cache，以缓解性能方面的问题，要知道lru-cache缓存数据都是存内存的，需要合理使用，原则上讲缓存静态内容，经常变动频繁的内容最好不要缓存。\\n\\n2、axios 的使用。axios 允许客户端和服务端发起请求，但是使用不当也会造成内存泄漏，在vue ssr项目中，可以考虑将axios封装一下，\\n针对不同环境进行调用，具体用法可以参考下面的文章。\\nVue2 SSR 缓存 Api 数据\\n\\n3、合理使用 v-once 。官网介绍如下：\\n只渲染元素和组件一次。随后的重新渲染,元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。一般用在\\n渲染数据比较多的列表，而且内容不会经常变动。\\n&lt;!-- 单个元素 --&gt;\\n&lt;span v-once&gt;This will never change: {{msg}}&lt;/span&gt;\\n&lt;!-- 有子元素 --&gt;\\n&lt;div v-once&gt;\\n  &lt;h1&gt;comment&lt;/h1&gt;\\n  &lt;p&gt;{{msg}}&lt;/p&gt;\\n&lt;/div&gt;\\n&lt;!-- 组件 --&gt;\\n&lt;my-component v-once :comment=\\\"msg\\\"&gt;&lt;/my-component&gt;\\n&lt;!-- v-for 指令--&gt;\\n&lt;ul&gt;\\n  &lt;li v-for=\\\"i in list\\\" v-once&gt;{{i}}&lt;/li&gt;\\n&lt;/ul&gt;\\n我在几个组件用到了该标签：\\nheader,footer,topicItem等\\n&lt;el-col v-for=\\\"(nav,index) in headerNav\\\" :key=\\\"index\\\" v-once&gt;\\n     &lt;router-link :to=\\\"{path: \'/\'+nav.defaultUrl+ \'___\'+nav._id}\\\"&gt;{{nav.name}}&lt;/router-link&gt;\\n&lt;/el-col&gt;\\n\\n4、合理使用keep-alive。主要用于保留组件状态或避免重新渲染。要知道，重复渲染数据量大的列表代价很大。\\n\\n5、vue ssr 中的 runInNewContext 属性（2.3.1+）。官方解释非常详细了：\\n默认情况下，对于每次渲染，bundle renderer 将创建一个新的 V8 上下文并重新执行整个 bundle。这具有一些好处 - 例如，应用程序代码与服务器进程隔离，我们无需担心文档中提到的状态单例问题。然而，这种模式有一些相当大的性能开销，因为重新创建上下文并执行整个 bundle 还是相当昂贵的，特别是当应用很大的时候。 出于向后兼容的考虑，此选项默认为 true，但建议你尽可能使用 runInNewContext: false 或 runInNewContext: \'once\'。\\n\\nhttps://ssr.vuejs.org/zh/api.html#runinnewcontext\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/img20170804175327.jpeg','2017-08-04 09:48:34','2020-08-20 15:44:06'),(220,'DoraCMS 将支持七牛云存储','DoraCMS 将支持七牛云存储','1','1','','','2',NULL,'','七牛是比较靠谱的云存储解决方案厂商，近期对doracms功能进行扩展，针对上传（主要是缩略图上传','1','','','0:01',762,'2','0',NULL,0,'0',226520,'<p class=\"p1\">七牛是比较靠谱的云存储解决方案厂商，近期对<span class=\"s1\">doracms</span>功能进行扩展，针对上传（主要是缩略图上传，文档编辑内容中的图片和附件等）支持七牛云存储，</p><p class=\"p1\">对于图片等类型站点还是比较有用的，静态文件托管<span class=\"s1\">cdn</span>，访问速度更快，七牛提供的多种针对图片的<span class=\"s1\">api</span>也非常有用，大概是这样配的：</p><p style=\"text-align:center\"><img src=\"https://cdn.html-js.cn/ueditor/images/935141422833733632.png\" title=\"配置七牛.png\" alt=\"配置七牛.png\" width=\"550\" height=\"230\"/></p><p class=\"p1\">提供开关，需要存储到云服务的童鞋打开开关并配置相关信息就行了，该功能将在下个版本加入。</p>','[{\"type\":\"contents\",\"content\":\"七牛是比较靠谱的云存储解决方案厂商，近期对doracms功能进行扩展，针对上传（主要是缩略图上传，文档编辑内容中的图片和附件等）支持七牛云存储，\\n对于图片等类型站点还是比较有用的，静态文件托管cdn，访问速度更快，七牛提供的多种针对图片的api也非常有用，大概是这样配的：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/ueditor/images/935141422833733632.png\"},{\"type\":\"contents\",\"content\":\"\\n提供开关，需要存储到云服务的童鞋打开开关并配置相关信息就行了，该功能将在下个版本加入。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/img20171129135227.jpg','2017-11-27 13:42:48','2020-08-20 15:44:04'),(221,'真正的出路：重读任正非2012实验室讲话','真正的出路：重读任正非2012实验室讲话','2','1','','','2',NULL,'','当年的巨大中华（巨龙，大唐，中兴，华为）现在也只有华为一直能笑傲江湖，原因有很多，其中任正非起了非常大的作用。不管你是否认可华为的企业文化，华为一直在突破自我，挑战极限。','1','','','0:01',762,'2','0',NULL,0,'0',230314,'<p><span><strong>来源：心声社区，财经会议资讯（ID：fci0630）</strong></span></p><p>&nbsp;</p><p>当年的巨大中华（巨龙，大唐，中兴，华为）现在也只有华为一直能笑傲江湖，原因有很多，其中任正非起了非常大的作用。不管你是否认可华为的企业文化，华为一直在突破自我，挑战极限。任正非的讲话非常坦率与实在，而且富有洞察力。在这个全民反思为什么缺芯的时刻，非常值得回看一下<span>2012</span>实验室讲话，你会更加佩服他的魄力与睿智。</p><p><br /></p><p>另外，请注意这个讲话是以<span>Q&amp;A</span>形式出现的，完全没有稿子，都是直接思路最真实的反应。文章很长，请耐心读完，你会有收获的。</p><p><br /></p><p>任总：首先，我不是专家，和专家沟通我本来就有压力，可能你们提到的很多敏感问题我都回答不清楚，那么我回答不清楚的就叫下面谁来替我回答。现在咱们开始开会，看看大家怎么说法，怎么开法，听听大家的。</p><p><br /></p><p>没有产权保护，创新的冲动就会受抑制</p><p><br /></p><p><span>Q</span>：杨强（诺亚方舟实验室主任）：我来自诺亚方舟实验室，之前是香港科技大学的教授。您刚刚讲的一个主题是“创新”，我们都知道，我们中国直到现在还没有产生一个诺贝尔奖，我想从这个角度来看看，咱们华为怎么样来“创新”，想听听您的观点，为什么我们中国直到现在还没有一个诺贝尔奖，产生的必要条件是什么？</p><p><br /></p><p><span>A</span>：任总：香港，我认为是藏龙卧虎的地方，香港很多人从欧美留学回来主要就集中在教书了，所以香港的教育质量很好。我多次跟广东政府讲，要允许香港的学校来内地、广东腹地创办学校，把他们的师资能量释放一下。</p><p><br /></p><p>我先不讲诺贝尔奖的获得，重要的是怎么能创造对人类的价值。中国创造不了价值是因为缺少土壤，这个土壤就是产权保护制度。在硅谷，大家拼命的加班，说不定一夜暴富了。我有一个好朋友，当年我去美国的时候，他的公司比我们还大，他抱着这个一夜暴富的想法，二十多年也没暴富。像他一样的千百万人，有可能就这样为人类社会奋斗毕生，也有可能会挤压某一个人成功，那就是乔布斯，那就是<span>Facebook</span>。也就是说财产保护制度，让大家看到了<span> </span>“一夜暴富”的可能性。没有产权保护，创新的冲动就会受抑制。</p><p><br /></p><p>第二个，中国缺少宽容，人家又没危害你，你干嘛这么关注人家。你们看，现在网上，有些人都往优秀的人身上吐口水，那优秀的人敢优秀吗？我们没有清晰的产权保护制度，没有一个宽容的精神，所以中国在“创新”问题上是有障碍的。</p><p><br /></p><p>大家也知道<span>Facebook</span>这个东西，它能出现并没有什么了不起的，这个东西要是在中国出现的话，它有可能被拷贝抄袭多遍，不要说原创人会被抛弃，连最先的抄袭者也会家破人亡，被抛弃了。在美国有严格的知识产权保护制度，你是不能抄的，你抄了就罚你几十亿美金。这么严格的保护制度，谁都知道不能随便侵犯他人。实际上保护知识产权是我们自己的需要，而不是别人用来打压我们的手段，如果认识到这一点，几十年、上百年后我们国家的科技就有希望了。但是科技不是一个急功近利的问题，一个理论的突破，构成社会价值贡献需要二三十年。</p><p><br /></p><p>雅各布突破<span>CDMA</span>的时候是<span>60</span>年代，是我们搞文化大革命的时候。我们怎么能一看到高通赚钱了，就感慨怎么我们不是高通呢？二三十年前我们还觉得谁读书、谁愚蠢，所以我们今天把心平静下来，踏踏实实做点事，也可能四五十年以后我们就有希望了。但是我们现在平静不下来。</p><p><br /></p><p>为什么呢？幸好你是香港的大学教授而不是中国内地的大学教授，否则你要比论文数量，你又产不出这么多来，就只能去抄，你去抄论文还有什么诺贝尔奖呢？不可能嘛，因此我们必须要改变学术环境。</p><p><br /></p><p>要构成一个突破，需要几代人付出极大的努力</p><p><br /></p><p><span>Q</span>：李航（诺亚方舟实验室首席科学家）：我来自诺亚方舟实验室，一个半月前加入公司，非常荣幸加入华为，在您和其他领导带领的这个伟大的公司工作。华为想在下一个台阶中有很大的作为，创新力是不可缺少的，请问您觉得怎样才能使华为更具创新力？</p><p><br /></p><p><span>A</span>：任总：在我们公司的创新问题上，第一，一定要强调价值理论，不是为了创新而创新，一定是为了创造价值。但未来的价值点还是个假设体系，现在是不清晰的。我们假设未来是什么，我们假设数据流量的管道会变粗，变得像太平洋一样粗，建个诺亚方舟把我们救一救，这个假设是否准确，我们并不清楚。如果真的像太平洋一样粗，也许华为押对宝了。如果只有长江、黄河那么粗，那么华为公司是不是会完蛋呢？这个世界上完蛋的公司很多，北电就是押宝押错了。中国的小网通也是押错宝了，押早了。小网通刚死，宽带就来了。它如果晚诞生几年，就生逢其时了。</p><p><br /></p><p>英雄常常是生不逢时的。有一些人性格很刚烈，大家不认同，我说你就生错时代了，你如果生在抗战时代说不定就是英雄，说不定就能当将军。我们是从人类社会的需求和价值基础上，假设将来数据流量会越流越大，但这不一定符合社会规律。马克思理论假设的前提是那时候没有汽车、没有飞机，他说的物质极大丰富，准确定义是什么呢？因为马克思没有拿出标准的数学公式来，我们还以为有更高的标准。所以我们现在的假设是要接受长期批判的，如果假设不对，那我们就要修正。首席科学家要带领我们往哪里突破。</p><p><br /></p><p>第二，在创新问题上，我们要更多的宽容失败。宽容失败也要有具体的评价机制，不是所有的领域都允许大规模的宽容失败，因为你们是高端研究领域，我认为模糊区域更多。有一些区域并不是模糊的，就不允许他们乱来，比如说工程的承包等都是可以清晰数量化的，做不好就说明管理能力低。但你们进入的是模糊区域，我们不知道它未来会是什么样子，会做成什么。</p><p><br /></p><p>因此，你们在思想上要放得更开，将你可以到外面去喝咖啡，与人思想碰撞，把你的感慨写出来，发到网上，引领一代新人思考。也许不止是华为看到你了，社会也看到你了，没关系，我们是要给社会做贡献的。当你的感慨可以去影响别人的时候，别人就顺着一路走下去，也许他就走成功了。所以在创新问题上，更多的是一种承前启后。</p><p><br /></p><p>我今天给你们讲的话，也许你们成功的时候我已经不在人世了。但是不能因为我不在人世，咱们讲话就一定要有局限性。你们科学家也不能因为这样就有局限性。也许你对人类的预测，你最终也看不见，但是我觉得这并不一定错误。比方说飞机的涡轮发动机的理论是中国人吴仲华写的，中科院工程热物理研究所所长。他在<span>50</span>年代写了涡轮机械三元流动的方程，发表了论文。英国按照这个理论做了第一代斯贝发动机。后来，访问英国时，问我们可不可以引进它的生产，英国说可以呀，小平很高兴，就站起来向英国科学家致敬。</p><p><br /></p><p>英国的所有科学家都站起来向中国致敬，为什么致敬，因为这个技术是中国发明的。问是谁发明的，回到中国就查，查到是吴仲华写的三元理论。当时他在哪？正在湖北五七干校养猪，赶快把他接过来，到北京当工程热物理研究所所长，让他穿上西装再出国，这是一个例子。(注：飞豹的发动机就是这个斯贝发动机）</p><p><br /></p><p>第二个例子，今天汉语非常好使用，主要是因为有汉语拼音。这得感谢<span>55</span>年全国文字改革会议的民主氛围。以及汉语拼音伟大的贡献者周有光，复旦大学教授，现在已经<span>100</span>多岁了。他过去致力于工业救国，一直学经济。后来晚年才改研究语言的。到<span>1979</span>年，他认为要到国际标准化组织去陈述中国对文字的观点，别人就邀请他去了。</p><p><br /></p><p>上飞机之前，单位告诉他，因为你是外方邀请的，中国不负责所有差旅费，所以他上飞机的时候连一个美金也没有。于是他一分钱也没有就去了巴黎。他用三年的努力，给国际标准化组织争取到中国要使用这个方法来拼音文字。不然，我们的汉字就无法溶入电脑时代，多伟大呀！我们的文字改革经历了几百年，今天汉字变得这么简单，年轻人学文化这么容易，都是靠这么奋斗来的。因此，要构成一个突破，需要几代人付出极大的努力，所以我们不能今天说明天能在哪里登陆，这不是诺曼底。</p><p><br /></p><p>华为公司一定要在优势方面集中发挥</p><p><br /></p><p><span>Q</span>：<span>RENZHE ZHAO</span>（首席材料专家）：我来自材料实验室，刚刚您讲到的石墨烯就是材料的一种，现在我们主要是业界现有的材料评估引进，以及与供应商和高校合作开发，做一些科研课题。我想问一下任总，您希望华为公司在材料上的研究深度是怎样的，是希望我们和别人一起合作研究，还是想让我们华为的材料人才做自主研发？</p><p><br /></p><p><span>A</span>：任总：前一段时间，我认为用物理方法来解决问题已趋近饱和，要重视数学方法的突起。那天与何庭波、李英涛交流时，他们说，石墨烯的出现，也许会打破人类预测。</p><p><br /></p><p>我曾在和能源业务讲话时提过，华为公司的优势在于数理逻辑，不在物理界面。华为公司一定要在优势方面集中发挥。所以在材料科学方面，我更多的倾向于材料应用上的研究，而不是在材料的创造发明上。比如日本正在从整机收缩到部件，从部件收缩到材料，这对我们公司是一个天大的好时机，日本拼命做材料科学研究的时候，我们研究的是怎么用这些东西，使产品比美国做得好，我们就用了巧力。大家都认为日本和德国的机器可靠，为什么不让日本人、德国人做我们的中间试验，把关我们产品的质量，好坏让日本员工、德国员工去定义。</p><p><br /></p><p>中国的宗教是玄学，玄学是模糊科学，对创造发明有好处，但对做可靠的产品不一定有好处。我们要花精力理解你做这个创造发明对我有什么用，从这个角度出发，我们和世界达成互补性的经济关系，多交一些朋友，才能有助于达成主要的战略目标。所以在材料科学上我更多倾向于应用，即应用最新科技材料。我们的基站为什么还达不到更高的水平，因为还有一些日本的材料成本太高，目前我们还不敢用。材料实验室能不能研究怎么用日本的材料，研究明白了，材料价格降下来时，我们就用来武装自己，产品一下子就世界优秀了。我们不是要做一个全方位的综合科学院，什么都做，最后一事无成。</p><p><br /></p><p>我给你四亿美金每年的研发费用，给你两万人</p><p><br /></p><p><span>Q</span>：宾兵（芯片平台与关键技术开发部部长）：任总，我叫宾兵，来自海思的平台与关键技术部。在您刚才所讲的芯片构筑战略竞争力，刚好我们部门承接了几项战略规划任务，同时我们也看到在一些基础研究方面和一些国外公司比还是有很大差距的。我们看到您在巴展的讲话，提出一个词叫作强攻，就是集中力量去在城墙上打一个缺口，今天就想请教任总，就这个强攻策略给我们一些指导，给我们海思这些参与强攻的年轻人一点冲劲，谢谢。</p><p><br /></p><p><span>A:</span>任总：我今天不针对平台讲这个问题，我就随便讲讲芯片的设计问题，在几年以后，我们在硬件系统，特别是低流量的硬件系统，应该是有系统性的突破了。我们的末端产品的大量硬件会标准化、通用化、简单化，这些成果我们可以固化，这样，我们的研发队伍，至少有几千个设计电路的熟练工程师就挤压出来了，他们可以投入到芯片开发中去。我给何庭波说，你的芯片设计能不能发展到二万人，这些有电路设计成功经验的人把复杂的大电路变成微电路以后，经过一轮洗礼，就是芯片设计专家了。我们有两万人强攻这个未来的管道科学，我们从高端到低端这个垂直体系，难道不能整合吗？</p><p><br /></p><p>世界有两次整合是非常典型的成功案例。第一个案例就是<span>IBM</span>，<span>IBM</span>在<span>PC</span>机上就是抄了苹果的后路。在<span>PC</span>个人机上，<span>IBM</span>有巨大的贡献，但是在新技术产业扩张的时候，<span>IBM</span>已经应对不过来了，<span>IBM</span>就发明了一个兼容机，这个兼容机谁都可以去造，你给我点钱就行了，就是他横向把这个个人电脑整合完成了，这个是对人类的贡献，<span>IBM</span>的横向整合是很成功的。纵向整合我们现在讲的是苹果，它是纵向整合的成功案例。</p><p><br /></p><p>华为应该怎么整合？我们认为应该沿着管道来整合，通讯网络管道就是太平洋，是黄河、长江，企业网是城市自来水管网，终端是水龙头。如果我们沿着这个整合，都是管道，对我们都是有用的。</p><p><br /></p><p>怎么强攻，这个要靠你说了算，我只能给你人、给你钱。林彪攻城时，队伍是纵向布置的，攻城的部队，集中撕开一个口子，然后，两个主力就从口子进去，向两边扩展。进而又进去四个师，向纵深，向两侧扩大战果。我们在研发上，有没有平均使用兵力的情况呢？所以我对何庭波说，我给你四亿美金每年的研发费用，给你两万人，何庭波一听吓坏了，但我还是要给，一定要站立起来，适当减少对美国的依赖。</p><p><br /></p><p><span>Q</span>：<span>JASON</span>（芯片专家）：任总您好！我是网络芯片的<span>JASON</span>，我<span>05</span>年从美国回来加入海思，到现在已经<span>7</span>个年头了。今天我的问题是，刚任总也提到，美国的高科技产业的蓬勃发展主要靠知识产权保护和风险投资。现在我们看到芯片的投资资金量越来越大，可是我们过去的芯片投资主要靠产品线，产品线当前盈利的压力特别大，所以在短期看不到明显收益的芯片投资越来越犹豫，请问任总在这方面能不能给我们一些指导，我们在没有风险投资的情况下，怎样来平衡这个长期投资和短期利益之间的矛盾，谢谢！</p><p><br /></p><p>对未来的投资不能手软</p><p><br /></p><p><span>A</span>：任总：如果在短期投资和长期利益上没有看得很清楚的人，实际上他就不是将军。将军就要有战略意识，没有战略意识怎么叫将军呢？这是第一个问题。第二个问题又要讲到耗散结构，华为公司实际上是处在一个相对较好的时期，要加大投入，把这些优势耗散掉，形成新的优势。整个社会都在衰退，经济可能会循环衰退，我们虽然跟自己过去相比下降了，但和旁边相比，活得很滋润，我们今年的纯利会到<span>20-30</span>亿美金。因此，对未来的投资不能手软。不敢用钱是我们缺少领袖，缺少将军，缺少对未来的战略。</p><p><br /></p><p>华为能从当年三十门四十门模拟交换机的代理商走到今天，没有将军的长远眼光我们就不能走到今天。为什么我们后继就产生不了将军呢？是文化机制问题，考核机制问题。所以我们这次在广州召开的组织结构改革会上吵了一下午。胡厚崑最后说了一句话：我们的利益机制要从“授予”改成“获取”，授予就是我们上面来评，该你多少钱该他多少钱，大家都希望多拿钱。以后我们改成“获取”、“分享”。就是我们整个考核机制要倒过来，以利益为中心。</p><p><br /></p><p>为什么我们机关这么庞大，是因为机关来分钱，机关先给自己留一块，自己发的好好的，工资也涨的好好的，剩下的让阿富汗的弟兄们分，结果他们也拿不到多少。那这样的话，就是一种不能鼓励产生英雄的机制，不能产生战略的机制，所以我们现在要调整过来。</p><p><br /></p><p>在调整的这个过渡时期，我们呼唤更多有战略眼光的人走到管理岗位上来。我们看问题要长远，我们今天就是来赌博，赌博就是战略眼光。我们赌什么呢，赌管道会像太平洋一样粗。</p><p><br /></p><p>我们要做到太平洋的流量体系，有没有可能做到？我就举个例子来说明：比如空中客车和波音的的竞争，波音就假定了这个世界是个网络型的世界，点到点的飞行，这样就不需要枢纽中转就可以直达这个小城市，因此波音没有做大客机，波音在小的点对点上改进，点对点的飞行。而空中客车假定是“枢纽”型，到法兰克福先坐大飞机，再转小飞机，所以三百人的飞机就首先问世了。</p><p><br /></p><p>我们今天就要假设未来的架构是什么样的架构？如果我们假设都不清楚，我们对未来就是一个赌博，就是赌这个带宽是多少。我们没有先进武器，拿大刀长矛去砍飞毛腿是砍不掉的，我们需要有东西去对付他。我们不指望都有英明领袖，我们是共同来推动大家都有战略眼光。</p><p><br /></p><p>断了我们粮食的时候，备份系统要能用得上</p><p><br /></p><p><span>Q</span>：李金喜（终端<span>OS</span>开发部部长）：我来自中央软件院欧拉实验室，负责面向消费者<span>BG</span>构建终端操作系统能力。当前在终端<span>OS</span>领域，<span>Android</span>、<span>iOS</span>、<span>Windows Phone 8</span>三足鼎立，形成了各自的生态圈，留给其他终端<span>OS</span>的机会窗已经很小，请问公司对终端操作系统有何期望和要求？</p><p><br /></p><p><span>A</span>：任总：如果说这三个操作系统都给华为一个平等权利，那我们的操作系统是不需要的。为什么不可以用别人的优势呢？微软的总裁、思科的<span>CEO</span>和我聊天的时候，他们都说害怕华为站起来，举起世界的旗帜反垄断。我给他们说我才不反垄断，我左手打着微软的伞，右手打着<span>CISCO</span>的伞，你们卖高价，我只要卖低一点，也能赚大把的钱。我为什么一定要把伞拿掉，让太阳晒在我脑袋上，脑袋上流着汗，把地上的小草都滋润起来，小草用低价格和我竞争，打得我头破血流。</p><p><br /></p><p>我们现在做终端操作系统是出于战略的考虑，如果他们突然断了我们的粮食，<span>Android </span>系统不给我用了，<span>Windows Phone 8</span>系统也不给我用了，我们是不是就傻了？同样的，我们在做高端芯片的时候，我并没有反对你们买美国的高端芯片。我认为你们要尽可能的用他们的高端芯片，好好的理解它。只有他们不卖给我们的时候，我们的东西稍微差一点，也要凑合能用上去。我们不能有狭隘的自豪感，这种自豪感会害死我们。我们的目的就是要赚钱，是要拿下上甘岭。拿不下上甘岭，拿下华尔街也行。</p><p><br /></p><p>我们不要狭隘，我们做操作系统，和做高端芯片是一样的道理。主要是让别人允许我们用，而不是断了我们的粮食。断了我们粮食的时候，备份系统要能用得上。</p><p><br /></p><p>我们的目的要简单一点</p><p><br /></p><p><span>Q</span>：<span>Georgo</span>（图灵开发部部长）：我以前在国外做过三家<span>CPU</span>设计公司，目标都是挑战<span>Intel</span>，三家公司最终都没成功。我现在负责嵌入式处理器，想请任总谈一下对嵌入式处理器的期望和要求？</p><p><br /></p><p><span>A</span>：任总：我希望海归不要狭隘，不要学了钱学森和邓稼先的故事，就激励你们走他们一样的政治道路。他们是在中国和整个世界处在政治孤立的情况下，毅然回到中国。但我认为你们回到香港也是中国，香港税收只是大陆税收的三分之一。我们最终还是要走向全球化的体系，遇到美国的障碍是很正常的。大家都看了《大漠英雄》，我们和当年的情况完全不一样，当年做原子弹的人绝大多数都没有见过原子弹是什么样，他们用的方程是我们初中学过的平衡方程，他们在手摇计算机上摇出来了原子弹。</p><p><br /></p><p>而我们今天的创造发明不是以自力更生为基础的，我们是一个开放的体系，向全世界开放，而且通过互联网获得巨大的能力，华为也获得巨大的基础。</p><p><br /></p><p>所以说我们要跳出狭隘的圈子看到未来的结果。我们今天是有能力，但不要把自己的能力设计得完全脱离我们实际。我们若要完全背负起人类的包袱，背负起社会的包袱，背负起中国民族振兴的包袱，就背得太重了<span>……</span>我那天给何庭波的批示上讲，你能不能伴着华盛顿的音乐，跳一支《春江花月夜》？</p><p><br /></p><p>背上了包袱，为了中华民族，为了五千年，为了更伟大的目标，你还能跳得动么？所以我认为我们的目的要简单一点，我们也担负不起重任来，我们能往前走一点就是胜利，不要以为一定要走多远。</p><p><br /></p><p>封闭系统必然要能量耗尽，要死亡的</p><p><br /></p><p><span>Q</span>：胡波（无线网络芯片开发部部长）：我叫胡波，是来自海思，做无线网络芯片的。过去几年我们在产品线做无线网络芯片做的还是不错的，后续的发展趋势是我们的一些主力产品都要使用自研的芯片，在这个过程中我们可能就会遇到竞合的压力<span>……</span></p><p><br /></p><p><span>A</span>：任总：何庭波翻译一下，我没听懂。</p><p><br /></p><p>何庭波：就是说如果用了我们的芯片，就不用供应商的芯片了，供应商就给我们施加供货压力。</p><p><br /></p><p>任总：我刚才已经讲，我们是一个开放的体系。我们还是要用供应商的芯片，主要还是和供应商合作，甚至优先使用它们的芯片。我们的高端芯片主要是容灾用。低端芯片哪个用哪个不用这是一个重大的策略问题，我建议大家要好好商量研究。你刚才讲的我们不用供应商的系统，就可能是我们建立了一个封闭的系统，封闭系统必然要能量耗尽，要死亡的。我们刚讲人力资源封闭系统，能量耗尽，一定要死亡的，技术系统也不能做封闭系统。怎么科学合理地去平衡这个世界呢？这是一个很难的题目，我不能一句话给你讲明。</p><p><br /></p><p>你帮我，我帮你，这是公共关系进行战略性的平衡</p><p><br /></p><p><span>Q</span>：楚庆（海思战略与业务发展部部长）：听了任总战略攻关和创新号召后，我们都很兴奋。第一个问题是：现在我们其实差的很远，而且美国战略高地我们没有办法布局，那么在产业布局上，在地域选择上有没有一些指导性的原则？第二个问题是：我们做这些产业布局，按照我们传统的做法，都是去当地招几个很厉害的人，把他们放到我们的研发部，但这种做法对包括日本这些社会，可能会引起反感和激烈的反弹，那么在产业布局的深度上我们有没有新的考虑？</p><p><br /></p><p><span>A:</span>任总：关于公共关系我们做了一个决议，估计你们很快就能看到了，我们是如何平衡这个世界的关系，包括我这次去圣彼德堡发言。普京当选总统，当天我就发了贺电，通过友人转给他。我们也是想平衡俄罗斯的关系，我们也要平衡日本关系，包括加拿大的关系。我们要在加拿大建个大的研究所，加拿大政府知道这个消息肯定很高兴。当然，我们还要号召我们的员工到新西兰去旅游，<span>10</span>月份以后慧通公司会推出新西兰旅游计划，希望你们去旅游，你帮我，我帮你，这是公共关系进行战略性的平衡。实在不行，我们就要多从新西兰多买点奶粉，你既然给了我们国家宽带网，我总要给你们新西兰作点贡献，我也要为公司的生存平衡发展作贡献。</p><p><br /></p><p>战略布局，我们唯一觉得困难的是美国。别的国家没有困难，英国这些国家是非常欢迎我们大规模投资的。我们把加拿大的人才用尽了吗？英国人才用尽了吗？这个世界的人才除了美国就没有了吗？我不相信，比如<span>Facebook</span>扎克伯格是新加坡公民，不是美国公民，就可以招聘他，不受美国限制呀。我们不要狭隘的认为我们已经无路可走了。你们让我到华盛顿白宫旁边的花园里建个办公室，我是没办法。</p><p><br /></p><p>我们可能坚持做几十年都不用，但是还得做</p><p><br /></p><p><span>Q</span>：柳春笙（芯片领域专家）：任总您好，我叫柳春笙，来自海思后端设计部。我是去年<span>10</span>月底从美国回来加入海思的。首先就是海思的定位问题，我们做技术的都有一种自恋情节，认为做的都是关键技术，都是公司核心竞争力之一。但是也有很多声音说，海思就是给公司降低成本的。我们下面的兄弟确实都很辛苦，产品线对成本的要求都非常高，经常为了一点点的成本大家加班加得很辛苦，我们挣的每一分都是辛苦钱。请问任总，公司对海思的定位是怎么样？</p><p><br /></p><p><span>A</span>：公司运转是依靠两个轮子，一个轮子是商业模式，一个轮子是技术创新。我们今天要讨论的是技术创新的轮子。</p><p><br /></p><p>对海思的定位，它肯定是一个重要的体系，但是你的自恋情节不能取，我刚开始来就说闭合系统，如果海思有自恋，要求做的东西我们一定要用，不用的话就不光荣，那就是一个闭合系统。我们总有一天能量耗尽，就会死亡，所以我们要做开放系统。你的系统可能被放弃，但并不影响你个人的成就。这就是人力资源政策要跟上来的问题。</p><p><br /></p><p>我们先排除政治观念，讲一下这个问题，比如我们国家的高铁。中国自己也生产高铁，株洲机车厂是当时最先进的国产厂。当时高铁投标的时候，株洲没中标，都是西方国家，比如德国的、法国的、日本的合资工厂中标。株洲曾经是我们国家最强的机车厂，而德国、法国、日本都是找差一些的机车厂合资，合资厂吃得肥肥的，结果株洲也没有吃亏。这就是铁道部处理的艺术水平了。铁道部是怎么做的？为什么株洲没有叫苦？把你们合资企业赚的钱都给株洲，进行技术研究，我总有一天会用你的。到现在已经确定下来，<span>250</span>公里的高铁，株洲可以投标了。</p><p><br /></p><p>我们在价值平衡上，即使做成功了暂时没有用，还要继续做下去。但是如果个人感到没希望了，可以通过循环流动，流动到其他部门，换新人再来上。我们可能坚持做几十年都不用，但是还得做，一旦公司出现战略性的漏洞，我们不是几百亿美金的损失，而是几千亿美金的损失。我们公司今天积累了这么多的财富，这些财富可能就是因为那一个点，让别人卡住，最后死掉。所以，可能几十年还得在这个地方奋斗，这个岗位、这个项目是不能撤掉的，但是人员可以流动的。少林寺还可以有<span>CEO</span>，和尚也可以云游的，但是庙需要定在那里，这是公司的战略旗帜，不能动掉的。</p><p><br /></p><p>再比如说你知不知道什么时候打核战争？现在没有，那就应该停下来核的研究吗？你说我们的核科学产生了多少科学家，你看那些功勋一大排一大排都是。不要说邓稼先，活着的也还有很多，但什么时候甩过原子弹呀？所以海思一定要从战略上认识它的战略地位。</p><p><br /></p><p>我们一定要耐得住寂寞，板凳要做十年冷</p><p><br /></p><p><span>Q:</span>王志敏（海思技术规划部副部长）：任总您好，我是王志敏，来自海思战略技术规划部，这是一个涉及产业链的问题。您刚才提到的战略攻关是我们非常重要的工作之一。半导体行业的战略攻关与后端生产制造非常相关，同时亚太区半导体的产业环境也在完善，在这个特殊的时期和阶段，我们公司是否会把半导体产业基础做得更加稳固？</p><p><br /></p><p><span>A:</span>任总：我讲第一点，我们不能为了获取这个体系的利益而去做半导体生产产业。半导体的生产是化学问题和物理问题，不是我们的优势，我们的优势就是数据逻辑，就是在软件、电路设计上的数学逻辑。我们即使做了个工厂，做个<span>12</span>英寸，外面做<span>16</span>英寸的，就把我们抛弃了。我们在制造行业，是不可能持续领先的。</p><p><br /></p><p>第二点，我们一定要耐得住寂寞，板凳要做十年冷。特别是基础研究。在<span>50</span>、<span>60</span>年代的电影演员是没有啥钱的，我曾经听过在八十年代初期，我们中央顶级的明星刘欢、王刚等从北京到太原的演唱会，走一次穴能赚多少钱呢？赚<span>20</span>元人民币。但是怎么能说中华民族的文化他们就没有贡献呢？我们去俄罗斯的最大感受是什么？就是普希金、屠格涅夫、托尔斯泰等等这些人，俄罗斯的文化、文明，俄罗斯是文化大国，他的文化对整个区域都产生了影响。</p><p><br /></p><p>这两天看王国维的电视剧，王国维是鲁迅先生骂的“不耻于人类的狗屎堆”,今天回过头看这个人的哲学思想是很伟大的，当年张之洞去开矿山、办工厂，李鸿章搞洋务的时候，王国维说：“振兴中华要靠哲学”。但是，他还是被抛进历史的垃圾堆，作为清华大学教授，最后投湖自尽，自杀了。中国有两个痛苦的灵魂，以前说最痛苦的灵魂是鲁迅，现在往前走一步，王国维也是中国最痛苦的灵魂。王国维讲哲学才能改变中国，今天来看确实是这样的。英国、美国、日本、法国、德国及整个欧洲社会，他们在哲学体系上搞清楚了。他们国家几百年没有动乱过。</p><p><br /></p><p>而我们的政策一会儿左，一会儿右，就是从上到下我们的价值观上没有统一，哲学观点没有统一。今天重新纪念王国维是来源于王国维这句话，是因为他对中国洋务运动的批判，中国应该先搞哲学，来改造人们的思想，国家才能有新的机制和体制产生，王国维以前是一个“不耻于人类的狗屎堆”，现在我们觉得他是很伟大的。还有一个伟大的人是李鸿章，李鸿章也是“不耻于人民的狗屎堆”，是中国最大的“卖国者”，不仅自己“卖国”，他去和日本谈判签《马关条约》的时候把儿子也带去了，让儿子也参与了《马关条约》的签订，结果爆发了五四运动。但是今天重新来看历史，重新来看《血色黄昏》，李鸿章是中华民族伟大的英雄，以后大家会重新去理解这个结论。所以不要为一时半时有没有光荣和功勋去计较。为千秋万代、中华民族要做出历史贡献。</p><p><br /></p><p>在看待历史问题的时候，特别是做基础科学的人，更多要看到你对未来产生的历史价值和贡献。我们公司要宽容“歪瓜裂枣”的奇思异想，以前一说歪瓜裂枣，他们把<span> </span>“裂”写成劣等的“劣”。我说你们搞错了，枣是裂的最甜，瓜是歪的最甜，他们虽然不被大家看好，但我们从战略眼光上看好这些人。今天我们重新看王国维、李鸿章，实际上他们就是历史的歪瓜裂枣。从事基础研究的人，有时候不需要急功近利，所以我们从来不让你们去比论文数量这些东西，就是想让你们能够踏踏实实地做学问。但做得也不够好，为什么说不够好呢，就是我们的价值观也不能完全做到统一，统一的价值观是经过多少代人的磨合才有可能的，现在我们也不能肯定，但是我们尽力去做。</p><p><br /></p><p>必须要靠自己</p><p><br /></p><p><span>Q</span>：牛社团（技术规划专家）：我来自公司技术规划部。我有几个问题，第一个是电信产业原来的业务单一，只是语音业务，所有我们公司产品都有标准规范，按标准规范去做就可以了。但现在整个移动互联网发展起来后，整个产业的业务范围已经超出了语音这个单一的业务范围，整个产业未来的方向肯定是包括像苹果、谷歌这样的终端和云端的公司。我司整个网络产品后面怎么去和终端云端产业链进行合作？公司两三年前在业界提出了<span> </span>“端管云”的概念，现在“端”都由苹果和谷歌控制着，所有的游戏规则都由他们来定义，在云端华为也没有很好的云服务，也没有话语权。</p><p><br /></p><p>做为运营商和设备商，你所有的控制点、商业模式的价值点，你的游戏规则定制点只能在网络层去挖掘。所以这两年我们也在考虑，在网络层里哪些东西是需要网络提供服务的，提出了一些互联网厂商在网络层面去支持的解决方案。这些方案我们和运营商、<span>OTT</span>交流也是获得了认可的，但是在公司内部要和各部门推动去解决及协调资源比较困难。</p><p><br /></p><p><span>A</span>：任总：你要看到，我们在不断讲管道，管道不仅限于电信，这是第一点比较大的变化。第二点，是否绑定客户的问题，要看到我们自己在其中发挥的重要作用，而不仅仅是依附谁不依附谁的问题。我们的优势在管道方面，而在终端我们基本不存在任何优势。能不能产生优势要用新的模式来思维，而不是把所有的生存希望寄托在运营商身上。国际歌早就给我们唱了，从来就没有救世主，也不靠神仙皇帝，一定要靠我们自己。我跟很多女孩讲，你不能把你的希望寄托在嫁一个好老公身上，人生有五六十年，要是十年二十年他就拜拜了，你后面要怎么办？所以你必须要靠自己。</p><p><br /></p><p>终端一定会有非常厉害的发展，但是机会不一定就是我们的。我和爱立信高层领导会谈的时候，他很高兴地说：我们终于不做终端了，你们去做终端了。人家笑我们不见得不对，就看我们能不能有所突破，终端这两年有了很大进步，但未必能进步到最后。</p><p><br /></p><p>我们要耐住寂寞慢慢往前走</p><p><br /></p><p><span>Q</span>：莫道春（连接器专家）：我负责公司连接器的<span>TMG</span>，这个领域<span>TOP</span>的供应商都是来自于美国，台湾和国内的供应商都只做低端的东西，或者说是山寨别人的东西。我们会不会扶持一些国内和台湾的供应商，来保证我们在产品的成本、供货方面的安全？</p><p><br /></p><p><span>A</span>：婆婆肯定是不能替媳妇生孩子的，生孩子是要靠儿子和媳妇的努力，我们能扶起来的也未必不是阿斗，所以我们不是扶持而是选择。公司的内部政策也从培养制改成了选拔制，中国和西方不一样，西方是因为没有人，必须要靠把你培养起来担负这个任务，中国遍地都是人，我就把最好的选来干就行了。因此我们对待供应商也是选择制，当然其中也会有一些战略，但不能因此就把我们当成是救世主，从来都没人救过我们。我也有危机感和恐惧感，所以我们要耐住寂寞慢慢往前走，终有一天我们能找到一个正确平衡之路。</p><p><br /></p><p>人生还是要咬定自己的优势特长持续去做</p><p><br /></p><p><span>Q</span>：孙永芳（可行销工具架构师）：我来自中央软件院。我是一个华为<span>13</span>年前的新兵，在公司这么多年，我换了很多部门，但是我只做了一件事，一直在做公司配置器的开发。配置器目前支撑了公司很多的<span>PO</span>效率提升、<span>IFS</span>变更等项目，请问任总对<span>2012</span>实验室研发团队在支撑公司的变革、效率提升和卓越运营方面有什么要求和期望。</p><p><br /></p><p><span>A</span>：任总：我认为你的人生历史就是一部华为历史，华为二十几年都只做一件事，就是坚持管道战略。你的<span>13</span>年只做了一件事，就是配置器。你的人生路就是华为的路，你的人生为什么那么成功，因为你只走了这一条路。人只要把仅有的一点优势发挥好了就行了，咬定青山不放松，一步一步就叫步步高。有些人就是不停的换，说是兴趣爱好，包括炒菜、扫地等什么都会做，但他并没有得到太太的表扬。</p><p><br /></p><p>华为公司也曾多次动摇过。人生还是要咬定自己的优势特长持续去做。刚才那个同事说我们做芯片不挣钱，人家做半导体的挣大钱，但是挣大钱的死得快，因为大家眼红，拼命进入。我们挣小钱怎么死呢？我们这么努力，比不上一个房地产公司，上帝先让我们死，就有点不公平。我和欧盟副主席聊天，他问我，全世界的经济都这么困难，你怎么敢大发展？我说第一点，我们的消费是小额消费，经济危机和小额消费没关系，比如你欠我的钱，我还是要打电话找你要钱，打电话就是小额消费。</p><p><br /></p><p>第二点，我们盈利能力还不如餐馆的毛利率高，也不如房地产公司高，还能让我们垮到哪儿去，我们垮不了。所以当全世界都在摇摆，都人心惶惶的时候，华为公司除了下面的人瞎惶惶以外，我们没有慌，我们还在改革。至少这些年你们还在涨工资，而且有的人可能涨得很厉害。我们为什么能稳定，就是我们长期挣小钱。</p><p><br /></p><p>如果我们不向美国人民学习他们的伟大，我们就永远战胜不了美国</p><p><br /></p><p><span>Q</span>：倪乔力（网络<span>OSS</span>产品部部长）：我来自中央软件院<span>U2000</span>网管，公司在惠州务虚会上阐述了公司未来的价值构筑在软件与服务上，而以当前固定网络为例，软件（包括网管和<span>VRP</span>平台）在客户界面销售很多都被送掉了，我们构建软件的价值是否应该先从对软件的销售方式的转变开始？</p><p><br /></p><p><span>A</span>：任总：我们过去在硬件系统里面写进去<span>80</span>多个软件包，目的是为了维护设备，结果使得管道不透明，流量速度不快，就像长江里面到处都是水草，水流量不快。如果我们把水草铲干净了，让管道的壁更干净，让水流的速度更快一点。这样我们在硬件管道上，把操作软件拿出来建立一个叠加系统，我们把它称作管道操作系统。</p><p><br /></p><p>管道操作系统的某一项功能，如测试功能，我们把它再拿出来变成一个颗粒？这个颗粒我们可以挂网上，也可以单独销售，这样管道的硬件系统是个透明系统，你去检查吧，全透明的，没有网络安全问题，这个颗粒你挂不挂呢？要看国家法律批准，你说要挂你就去买，你可以向社会去购买，也可以向我买，反正我就透明化，软件就是这样子。软件要构筑市场价值，例如<span>ERP</span>低价都买不到。你的颗粒太小，让他们作嫁妆了。婆婆应该给你钱。</p><p><br /></p><p><span>Q</span>：刘桑（产品工程技术规划部部长）：我来自中央硬件工程院产品工程部。我想问一个关于氛围的问题，我们在面向未来和自主创新的时候应该是特别强调科学民主的精神，但是长期以来华为公司属于思想高度对齐、执行力强的管理风格，这是有一些矛盾的。我想请问您对于<span>2012</span>实验室的组织氛围的梦想是什么，基于这个梦想，您对管理者和专家分别有哪些期望？</p><p><br /></p><p><span>A</span>：任总：第一，我要纠正你的说法，关于自主创新的问题，自主创新就陷入熵死里面，这是一个封闭系统。我们为什么要排外？我们能什么都做得比别人好吗？为什么一定要自主，自主就是封建的闭关自守，我们反对自主。第二，我们在创新的过程中强调只做我们有优势的部分，别的部分我们应该更多的加强开放与合作，只有这样我们才可能构建真正的战略力量。我们非常支持异军突起的，但要在公司的主航道上才好。我们一定要避免建立封闭系统。我们一定要建立一个开放的体系，特别是硬件体系更要开放。我们不开放就是死亡，如果我们不向美国人民学习他们的伟大，我们就永远战胜不了美国。</p><p><br /></p><p>我容忍你比我厉害，就是我的伟大</p><p><br /></p><p>今天和专家座谈，你们的问题我答不出来，不是我的羞耻，而是我的伟大。为什么呢？我容忍你比我厉害，就是我伟大。如果我认为自己是最高，华为是一个宝塔结构，那么我只有晚上不睡觉，我一睡觉华为就矮了嘛，睡平了嘛！站着我才高一点。我能永远不睡觉么？不可否认，个人的力量很重要，比如某个人提出的战略性观点或理论突破，但突破完了，他就是矮子了。就像李英涛和何庭波今天和我讲，石墨烯的问题，一旦突破，拿了诺贝尔奖就结束了。他就是当了一把黄继光，当完就完了。为什么？由理论突破引发的后面排山倒海般的冲锋，爆炸式的知识增长，他光是读这些东西都读不过来。当前人类社会知识的发展程度，远远超越了任何一个过往的时代，因此只有依靠集体力量才会有未来<span>!</span></p><p><br /></p><p>小结</p><p><br /></p><p>注意任正非这个讲话是<span>2012</span>年的讲话！</p><p>当时华为手机的老大余承东，天天在微博上被骂成余大嘴！</p><p>当时华为的海思芯片被嘲笑成祖传的暖手宝（我<span>2013</span>年也买过一个华为的手机，确实很烂）</p><p>今天华为的麒麟<span>CPU</span>，已经成了气候（尽管用的是<span>ARM</span>架构<span>+mali</span>的<span>GPU</span>，其他很多<span>IP core</span>都能自己玩了，已经非常了不起了）</p><p>华为的手机，也已经成抗衡苹果的担纲。</p><p>华为的摄像头方案用过的都说好，三分天下有其一。</p><p>华为的<span>NBIOT</span>方案，又是领导行业潮流（摩拜就是用的他的方案）</p><p>华为能够用每年<span><strong>4</strong></span>亿美元的研发经费养芯片研发人员，这就是差距！</p><p>没有比较就没有伤害！</p><p><br /></p><p>今天重读任正非的讲话，我发现他已经把所有该说的话都说了，照做就可以了！国内的产学研能够做到任总所说的又有多少？</p><p><br /></p><p>这些年来，金融、地产、互联网这三个领域畸形聚集了太多太多的资源，甚至形成了大量的浪费（各种共享<span>XX</span>，直播，各种<span>P2P</span>，区块链明着骗，与其这么被糟蹋，真还不如把这种闲散资金引导到产业基金里！)。</p><p><br /></p><p>过去几年不要说增加对实体企业，先进制造业，基础学科的投入，即便已经在实体经济的资金都有脱实入虚的趋势。辛辛苦苦挣点钱还不如炒房来钱快！踏踏实实工作解决问题，收入根本跟不上房价的涨幅。各种基础学科的从业人员都在劝退新人，或者正在改行。</p><p><br /></p><p>中兴事件告诉国人一个现实：中国和发达国家的科技差距依然很大，需要一代人甚至几代人的埋头苦干才能追上。从上到下都应该认清现实，<span><strong> </strong></span>不再骄傲自满，天天娱乐至死，<span><strong> </strong></span>而是一步一个脚印脚踏实地奋起直追，把宝贵的资源投入到科技研发领域来。</p><p><br /></p><p>尊重客观规律（不要瞎提不切实际的指标，口号喊的震天响，结果完全做不到）。</p><p><br /></p><p>尊重人才（提高待遇，真正把人当人看，而不是扳手，即便是扳手也要给扳手经常上上油，最起码为他们交足五险一金）。</p><p><br /></p><p>尊重科技（不要老是抄抄抄，保护知识产权，保护创新）<span>!</span></p><p><br /></p><p>其实中国的科技工作者和美国的科技工作者一样，只要有份体面的工作，如果没有太大的生活压力，也是很愿意全身心投入到自己喜欢的行业的，谁不想学有所长，学有所用。</p><p><br /></p><p><br /></p><p><span>ps</span>，再看看波音机械工程师的生活压力。</p><p><br /></p><p>波音机械工程师人均收入<span>7</span>万美元左右。</p><p><br /></p><p>而波音附近<span>Everett</span>平均<span>SFH</span>(独栋别墅)价格是<span>36</span>万左右，基本上来说，波音的工程师毫无生存压力（<span>36/7</span>）。商飞研发人员，一线车间工人的收入和房价比我就不列了。</p><p><br /></p><p>最后的最后用任总的话结尾：</p><p>所以我们今天把心平静下来，踏踏实实做点事，也可能四五十年以后我们就有希望了。</p><p><br /></p>','[{\"type\":\"contents\",\"content\":\"来源：心声社区，财经会议资讯（ID：fci0630）\\n\\n当年的巨大中华（巨龙，大唐，中兴，华为）现在也只有华为一直能笑傲江湖，原因有很多，其中任正非起了非常大的作用。不管你是否认可华为的企业文化，华为一直在突破自我，挑战极限。任正非的讲话非常坦率与实在，而且富有洞察力。在这个全民反思为什么缺芯的时刻，非常值得回看一下2012实验室讲话，你会更加佩服他的魄力与睿智。\\n\\n另外，请注意这个讲话是以Q&amp;A形式出现的，完全没有稿子，都是直接思路最真实的反应。文章很长，请耐心读完，你会有收获的。\\n\\n任总：首先，我不是专家，和专家沟通我本来就有压力，可能你们提到的很多敏感问题我都回答不清楚，那么我回答不清楚的就叫下面谁来替我回答。现在咱们开始开会，看看大家怎么说法，怎么开法，听听大家的。\\n\\n没有产权保护，创新的冲动就会受抑制\\n\\nQ：杨强（诺亚方舟实验室主任）：我来自诺亚方舟实验室，之前是香港科技大学的教授。您刚刚讲的一个主题是“创新”，我们都知道，我们中国直到现在还没有产生一个诺贝尔奖，我想从这个角度来看看，咱们华为怎么样来“创新”，想听听您的观点，为什么我们中国直到现在还没有一个诺贝尔奖，产生的必要条件是什么？\\n\\nA：任总：香港，我认为是藏龙卧虎的地方，香港很多人从欧美留学回来主要就集中在教书了，所以香港的教育质量很好。我多次跟广东政府讲，要允许香港的学校来内地、广东腹地创办学校，把他们的师资能量释放一下。\\n\\n我先不讲诺贝尔奖的获得，重要的是怎么能创造对人类的价值。中国创造不了价值是因为缺少土壤，这个土壤就是产权保护制度。在硅谷，大家拼命的加班，说不定一夜暴富了。我有一个好朋友，当年我去美国的时候，他的公司比我们还大，他抱着这个一夜暴富的想法，二十多年也没暴富。像他一样的千百万人，有可能就这样为人类社会奋斗毕生，也有可能会挤压某一个人成功，那就是乔布斯，那就是Facebook。也就是说财产保护制度，让大家看到了 “一夜暴富”的可能性。没有产权保护，创新的冲动就会受抑制。\\n\\n第二个，中国缺少宽容，人家又没危害你，你干嘛这么关注人家。你们看，现在网上，有些人都往优秀的人身上吐口水，那优秀的人敢优秀吗？我们没有清晰的产权保护制度，没有一个宽容的精神，所以中国在“创新”问题上是有障碍的。\\n\\n大家也知道Facebook这个东西，它能出现并没有什么了不起的，这个东西要是在中国出现的话，它有可能被拷贝抄袭多遍，不要说原创人会被抛弃，连最先的抄袭者也会家破人亡，被抛弃了。在美国有严格的知识产权保护制度，你是不能抄的，你抄了就罚你几十亿美金。这么严格的保护制度，谁都知道不能随便侵犯他人。实际上保护知识产权是我们自己的需要，而不是别人用来打压我们的手段，如果认识到这一点，几十年、上百年后我们国家的科技就有希望了。但是科技不是一个急功近利的问题，一个理论的突破，构成社会价值贡献需要二三十年。\\n\\n雅各布突破CDMA的时候是60年代，是我们搞文化大革命的时候。我们怎么能一看到高通赚钱了，就感慨怎么我们不是高通呢？二三十年前我们还觉得谁读书、谁愚蠢，所以我们今天把心平静下来，踏踏实实做点事，也可能四五十年以后我们就有希望了。但是我们现在平静不下来。\\n\\n为什么呢？幸好你是香港的大学教授而不是中国内地的大学教授，否则你要比论文数量，你又产不出这么多来，就只能去抄，你去抄论文还有什么诺贝尔奖呢？不可能嘛，因此我们必须要改变学术环境。\\n\\n要构成一个突破，需要几代人付出极大的努力\\n\\nQ：李航（诺亚方舟实验室首席科学家）：我来自诺亚方舟实验室，一个半月前加入公司，非常荣幸加入华为，在您和其他领导带领的这个伟大的公司工作。华为想在下一个台阶中有很大的作为，创新力是不可缺少的，请问您觉得怎样才能使华为更具创新力？\\n\\nA：任总：在我们公司的创新问题上，第一，一定要强调价值理论，不是为了创新而创新，一定是为了创造价值。但未来的价值点还是个假设体系，现在是不清晰的。我们假设未来是什么，我们假设数据流量的管道会变粗，变得像太平洋一样粗，建个诺亚方舟把我们救一救，这个假设是否准确，我们并不清楚。如果真的像太平洋一样粗，也许华为押对宝了。如果只有长江、黄河那么粗，那么华为公司是不是会完蛋呢？这个世界上完蛋的公司很多，北电就是押宝押错了。中国的小网通也是押错宝了，押早了。小网通刚死，宽带就来了。它如果晚诞生几年，就生逢其时了。\\n\\n英雄常常是生不逢时的。有一些人性格很刚烈，大家不认同，我说你就生错时代了，你如果生在抗战时代说不定就是英雄，说不定就能当将军。我们是从人类社会的需求和价值基础上，假设将来数据流量会越流越大，但这不一定符合社会规律。马克思理论假设的前提是那时候没有汽车、没有飞机，他说的物质极大丰富，准确定义是什么呢？因为马克思没有拿出标准的数学公式来，我们还以为有更高的标准。所以我们现在的假设是要接受长期批判的，如果假设不对，那我们就要修正。首席科学家要带领我们往哪里突破。\\n\\n第二，在创新问题上，我们要更多的宽容失败。宽容失败也要有具体的评价机制，不是所有的领域都允许大规模的宽容失败，因为你们是高端研究领域，我认为模糊区域更多。有一些区域并不是模糊的，就不允许他们乱来，比如说工程的承包等都是可以清晰数量化的，做不好就说明管理能力低。但你们进入的是模糊区域，我们不知道它未来会是什么样子，会做成什么。\\n\\n因此，你们在思想上要放得更开，将你可以到外面去喝咖啡，与人思想碰撞，把你的感慨写出来，发到网上，引领一代新人思考。也许不止是华为看到你了，社会也看到你了，没关系，我们是要给社会做贡献的。当你的感慨可以去影响别人的时候，别人就顺着一路走下去，也许他就走成功了。所以在创新问题上，更多的是一种承前启后。\\n\\n我今天给你们讲的话，也许你们成功的时候我已经不在人世了。但是不能因为我不在人世，咱们讲话就一定要有局限性。你们科学家也不能因为这样就有局限性。也许你对人类的预测，你最终也看不见，但是我觉得这并不一定错误。比方说飞机的涡轮发动机的理论是中国人吴仲华写的，中科院工程热物理研究所所长。他在50年代写了涡轮机械三元流动的方程，发表了论文。英国按照这个理论做了第一代斯贝发动机。后来，访问英国时，问我们可不可以引进它的生产，英国说可以呀，小平很高兴，就站起来向英国科学家致敬。\\n\\n英国的所有科学家都站起来向中国致敬，为什么致敬，因为这个技术是中国发明的。问是谁发明的，回到中国就查，查到是吴仲华写的三元理论。当时他在哪？正在湖北五七干校养猪，赶快把他接过来，到北京当工程热物理研究所所长，让他穿上西装再出国，这是一个例子。(注：飞豹的发动机就是这个斯贝发动机）\\n\\n第二个例子，今天汉语非常好使用，主要是因为有汉语拼音。这得感谢55年全国文字改革会议的民主氛围。以及汉语拼音伟大的贡献者周有光，复旦大学教授，现在已经100多岁了。他过去致力于工业救国，一直学经济。后来晚年才改研究语言的。到1979年，他认为要到国际标准化组织去陈述中国对文字的观点，别人就邀请他去了。\\n\\n上飞机之前，单位告诉他，因为你是外方邀请的，中国不负责所有差旅费，所以他上飞机的时候连一个美金也没有。于是他一分钱也没有就去了巴黎。他用三年的努力，给国际标准化组织争取到中国要使用这个方法来拼音文字。不然，我们的汉字就无法溶入电脑时代，多伟大呀！我们的文字改革经历了几百年，今天汉字变得这么简单，年轻人学文化这么容易，都是靠这么奋斗来的。因此，要构成一个突破，需要几代人付出极大的努力，所以我们不能今天说明天能在哪里登陆，这不是诺曼底。\\n\\n华为公司一定要在优势方面集中发挥\\n\\nQ：RENZHE ZHAO（首席材料专家）：我来自材料实验室，刚刚您讲到的石墨烯就是材料的一种，现在我们主要是业界现有的材料评估引进，以及与供应商和高校合作开发，做一些科研课题。我想问一下任总，您希望华为公司在材料上的研究深度是怎样的，是希望我们和别人一起合作研究，还是想让我们华为的材料人才做自主研发？\\n\\nA：任总：前一段时间，我认为用物理方法来解决问题已趋近饱和，要重视数学方法的突起。那天与何庭波、李英涛交流时，他们说，石墨烯的出现，也许会打破人类预测。\\n\\n我曾在和能源业务讲话时提过，华为公司的优势在于数理逻辑，不在物理界面。华为公司一定要在优势方面集中发挥。所以在材料科学方面，我更多的倾向于材料应用上的研究，而不是在材料的创造发明上。比如日本正在从整机收缩到部件，从部件收缩到材料，这对我们公司是一个天大的好时机，日本拼命做材料科学研究的时候，我们研究的是怎么用这些东西，使产品比美国做得好，我们就用了巧力。大家都认为日本和德国的机器可靠，为什么不让日本人、德国人做我们的中间试验，把关我们产品的质量，好坏让日本员工、德国员工去定义。\\n\\n中国的宗教是玄学，玄学是模糊科学，对创造发明有好处，但对做可靠的产品不一定有好处。我们要花精力理解你做这个创造发明对我有什么用，从这个角度出发，我们和世界达成互补性的经济关系，多交一些朋友，才能有助于达成主要的战略目标。所以在材料科学上我更多倾向于应用，即应用最新科技材料。我们的基站为什么还达不到更高的水平，因为还有一些日本的材料成本太高，目前我们还不敢用。材料实验室能不能研究怎么用日本的材料，研究明白了，材料价格降下来时，我们就用来武装自己，产品一下子就世界优秀了。我们不是要做一个全方位的综合科学院，什么都做，最后一事无成。\\n\\n我给你四亿美金每年的研发费用，给你两万人\\n\\nQ：宾兵（芯片平台与关键技术开发部部长）：任总，我叫宾兵，来自海思的平台与关键技术部。在您刚才所讲的芯片构筑战略竞争力，刚好我们部门承接了几项战略规划任务，同时我们也看到在一些基础研究方面和一些国外公司比还是有很大差距的。我们看到您在巴展的讲话，提出一个词叫作强攻，就是集中力量去在城墙上打一个缺口，今天就想请教任总，就这个强攻策略给我们一些指导，给我们海思这些参与强攻的年轻人一点冲劲，谢谢。\\n\\nA:任总：我今天不针对平台讲这个问题，我就随便讲讲芯片的设计问题，在几年以后，我们在硬件系统，特别是低流量的硬件系统，应该是有系统性的突破了。我们的末端产品的大量硬件会标准化、通用化、简单化，这些成果我们可以固化，这样，我们的研发队伍，至少有几千个设计电路的熟练工程师就挤压出来了，他们可以投入到芯片开发中去。我给何庭波说，你的芯片设计能不能发展到二万人，这些有电路设计成功经验的人把复杂的大电路变成微电路以后，经过一轮洗礼，就是芯片设计专家了。我们有两万人强攻这个未来的管道科学，我们从高端到低端这个垂直体系，难道不能整合吗？\\n\\n世界有两次整合是非常典型的成功案例。第一个案例就是IBM，IBM在PC机上就是抄了苹果的后路。在PC个人机上，IBM有巨大的贡献，但是在新技术产业扩张的时候，IBM已经应对不过来了，IBM就发明了一个兼容机，这个兼容机谁都可以去造，你给我点钱就行了，就是他横向把这个个人电脑整合完成了，这个是对人类的贡献，IBM的横向整合是很成功的。纵向整合我们现在讲的是苹果，它是纵向整合的成功案例。\\n\\n华为应该怎么整合？我们认为应该沿着管道来整合，通讯网络管道就是太平洋，是黄河、长江，企业网是城市自来水管网，终端是水龙头。如果我们沿着这个整合，都是管道，对我们都是有用的。\\n\\n怎么强攻，这个要靠你说了算，我只能给你人、给你钱。林彪攻城时，队伍是纵向布置的，攻城的部队，集中撕开一个口子，然后，两个主力就从口子进去，向两边扩展。进而又进去四个师，向纵深，向两侧扩大战果。我们在研发上，有没有平均使用兵力的情况呢？所以我对何庭波说，我给你四亿美金每年的研发费用，给你两万人，何庭波一听吓坏了，但我还是要给，一定要站立起来，适当减少对美国的依赖。\\n\\nQ：JASON（芯片专家）：任总您好！我是网络芯片的JASON，我05年从美国回来加入海思，到现在已经7个年头了。今天我的问题是，刚任总也提到，美国的高科技产业的蓬勃发展主要靠知识产权保护和风险投资。现在我们看到芯片的投资资金量越来越大，可是我们过去的芯片投资主要靠产品线，产品线当前盈利的压力特别大，所以在短期看不到明显收益的芯片投资越来越犹豫，请问任总在这方面能不能给我们一些指导，我们在没有风险投资的情况下，怎样来平衡这个长期投资和短期利益之间的矛盾，谢谢！\\n\\n对未来的投资不能手软\\n\\nA：任总：如果在短期投资和长期利益上没有看得很清楚的人，实际上他就不是将军。将军就要有战略意识，没有战略意识怎么叫将军呢？这是第一个问题。第二个问题又要讲到耗散结构，华为公司实际上是处在一个相对较好的时期，要加大投入，把这些优势耗散掉，形成新的优势。整个社会都在衰退，经济可能会循环衰退，我们虽然跟自己过去相比下降了，但和旁边相比，活得很滋润，我们今年的纯利会到20-30亿美金。因此，对未来的投资不能手软。不敢用钱是我们缺少领袖，缺少将军，缺少对未来的战略。\\n\\n华为能从当年三十门四十门模拟交换机的代理商走到今天，没有将军的长远眼光我们就不能走到今天。为什么我们后继就产生不了将军呢？是文化机制问题，考核机制问题。所以我们这次在广州召开的组织结构改革会上吵了一下午。胡厚崑最后说了一句话：我们的利益机制要从“授予”改成“获取”，授予就是我们上面来评，该你多少钱该他多少钱，大家都希望多拿钱。以后我们改成“获取”、“分享”。就是我们整个考核机制要倒过来，以利益为中心。\\n\\n为什么我们机关这么庞大，是因为机关来分钱，机关先给自己留一块，自己发的好好的，工资也涨的好好的，剩下的让阿富汗的弟兄们分，结果他们也拿不到多少。那这样的话，就是一种不能鼓励产生英雄的机制，不能产生战略的机制，所以我们现在要调整过来。\\n\\n在调整的这个过渡时期，我们呼唤更多有战略眼光的人走到管理岗位上来。我们看问题要长远，我们今天就是来赌博，赌博就是战略眼光。我们赌什么呢，赌管道会像太平洋一样粗。\\n\\n我们要做到太平洋的流量体系，有没有可能做到？我就举个例子来说明：比如空中客车和波音的的竞争，波音就假定了这个世界是个网络型的世界，点到点的飞行，这样就不需要枢纽中转就可以直达这个小城市，因此波音没有做大客机，波音在小的点对点上改进，点对点的飞行。而空中客车假定是“枢纽”型，到法兰克福先坐大飞机，再转小飞机，所以三百人的飞机就首先问世了。\\n\\n我们今天就要假设未来的架构是什么样的架构？如果我们假设都不清楚，我们对未来就是一个赌博，就是赌这个带宽是多少。我们没有先进武器，拿大刀长矛去砍飞毛腿是砍不掉的，我们需要有东西去对付他。我们不指望都有英明领袖，我们是共同来推动大家都有战略眼光。\\n\\n断了我们粮食的时候，备份系统要能用得上\\n\\nQ：李金喜（终端OS开发部部长）：我来自中央软件院欧拉实验室，负责面向消费者BG构建终端操作系统能力。当前在终端OS领域，Android、iOS、Windows Phone 8三足鼎立，形成了各自的生态圈，留给其他终端OS的机会窗已经很小，请问公司对终端操作系统有何期望和要求？\\n\\nA：任总：如果说这三个操作系统都给华为一个平等权利，那我们的操作系统是不需要的。为什么不可以用别人的优势呢？微软的总裁、思科的CEO和我聊天的时候，他们都说害怕华为站起来，举起世界的旗帜反垄断。我给他们说我才不反垄断，我左手打着微软的伞，右手打着CISCO的伞，你们卖高价，我只要卖低一点，也能赚大把的钱。我为什么一定要把伞拿掉，让太阳晒在我脑袋上，脑袋上流着汗，把地上的小草都滋润起来，小草用低价格和我竞争，打得我头破血流。\\n\\n我们现在做终端操作系统是出于战略的考虑，如果他们突然断了我们的粮食，Android 系统不给我用了，Windows Phone 8系统也不给我用了，我们是不是就傻了？同样的，我们在做高端芯片的时候，我并没有反对你们买美国的高端芯片。我认为你们要尽可能的用他们的高端芯片，好好的理解它。只有他们不卖给我们的时候，我们的东西稍微差一点，也要凑合能用上去。我们不能有狭隘的自豪感，这种自豪感会害死我们。我们的目的就是要赚钱，是要拿下上甘岭。拿不下上甘岭，拿下华尔街也行。\\n\\n我们不要狭隘，我们做操作系统，和做高端芯片是一样的道理。主要是让别人允许我们用，而不是断了我们的粮食。断了我们粮食的时候，备份系统要能用得上。\\n\\n我们的目的要简单一点\\n\\nQ：Georgo（图灵开发部部长）：我以前在国外做过三家CPU设计公司，目标都是挑战Intel，三家公司最终都没成功。我现在负责嵌入式处理器，想请任总谈一下对嵌入式处理器的期望和要求？\\n\\nA：任总：我希望海归不要狭隘，不要学了钱学森和邓稼先的故事，就激励你们走他们一样的政治道路。他们是在中国和整个世界处在政治孤立的情况下，毅然回到中国。但我认为你们回到香港也是中国，香港税收只是大陆税收的三分之一。我们最终还是要走向全球化的体系，遇到美国的障碍是很正常的。大家都看了《大漠英雄》，我们和当年的情况完全不一样，当年做原子弹的人绝大多数都没有见过原子弹是什么样，他们用的方程是我们初中学过的平衡方程，他们在手摇计算机上摇出来了原子弹。\\n\\n而我们今天的创造发明不是以自力更生为基础的，我们是一个开放的体系，向全世界开放，而且通过互联网获得巨大的能力，华为也获得巨大的基础。\\n\\n所以说我们要跳出狭隘的圈子看到未来的结果。我们今天是有能力，但不要把自己的能力设计得完全脱离我们实际。我们若要完全背负起人类的包袱，背负起社会的包袱，背负起中国民族振兴的包袱，就背得太重了……我那天给何庭波的批示上讲，你能不能伴着华盛顿的音乐，跳一支《春江花月夜》？\\n\\n背上了包袱，为了中华民族，为了五千年，为了更伟大的目标，你还能跳得动么？所以我认为我们的目的要简单一点，我们也担负不起重任来，我们能往前走一点就是胜利，不要以为一定要走多远。\\n\\n封闭系统必然要能量耗尽，要死亡的\\n\\nQ：胡波（无线网络芯片开发部部长）：我叫胡波，是来自海思，做无线网络芯片的。过去几年我们在产品线做无线网络芯片做的还是不错的，后续的发展趋势是我们的一些主力产品都要使用自研的芯片，在这个过程中我们可能就会遇到竞合的压力……\\n\\nA：任总：何庭波翻译一下，我没听懂。\\n\\n何庭波：就是说如果用了我们的芯片，就不用供应商的芯片了，供应商就给我们施加供货压力。\\n\\n任总：我刚才已经讲，我们是一个开放的体系。我们还是要用供应商的芯片，主要还是和供应商合作，甚至优先使用它们的芯片。我们的高端芯片主要是容灾用。低端芯片哪个用哪个不用这是一个重大的策略问题，我建议大家要好好商量研究。你刚才讲的我们不用供应商的系统，就可能是我们建立了一个封闭的系统，封闭系统必然要能量耗尽，要死亡的。我们刚讲人力资源封闭系统，能量耗尽，一定要死亡的，技术系统也不能做封闭系统。怎么科学合理地去平衡这个世界呢？这是一个很难的题目，我不能一句话给你讲明。\\n\\n你帮我，我帮你，这是公共关系进行战略性的平衡\\n\\nQ：楚庆（海思战略与业务发展部部长）：听了任总战略攻关和创新号召后，我们都很兴奋。第一个问题是：现在我们其实差的很远，而且美国战略高地我们没有办法布局，那么在产业布局上，在地域选择上有没有一些指导性的原则？第二个问题是：我们做这些产业布局，按照我们传统的做法，都是去当地招几个很厉害的人，把他们放到我们的研发部，但这种做法对包括日本这些社会，可能会引起反感和激烈的反弹，那么在产业布局的深度上我们有没有新的考虑？\\n\\nA:任总：关于公共关系我们做了一个决议，估计你们很快就能看到了，我们是如何平衡这个世界的关系，包括我这次去圣彼德堡发言。普京当选总统，当天我就发了贺电，通过友人转给他。我们也是想平衡俄罗斯的关系，我们也要平衡日本关系，包括加拿大的关系。我们要在加拿大建个大的研究所，加拿大政府知道这个消息肯定很高兴。当然，我们还要号召我们的员工到新西兰去旅游，10月份以后慧通公司会推出新西兰旅游计划，希望你们去旅游，你帮我，我帮你，这是公共关系进行战略性的平衡。实在不行，我们就要多从新西兰多买点奶粉，你既然给了我们国家宽带网，我总要给你们新西兰作点贡献，我也要为公司的生存平衡发展作贡献。\\n\\n战略布局，我们唯一觉得困难的是美国。别的国家没有困难，英国这些国家是非常欢迎我们大规模投资的。我们把加拿大的人才用尽了吗？英国人才用尽了吗？这个世界的人才除了美国就没有了吗？我不相信，比如Facebook扎克伯格是新加坡公民，不是美国公民，就可以招聘他，不受美国限制呀。我们不要狭隘的认为我们已经无路可走了。你们让我到华盛顿白宫旁边的花园里建个办公室，我是没办法。\\n\\n我们可能坚持做几十年都不用，但是还得做\\n\\nQ：柳春笙（芯片领域专家）：任总您好，我叫柳春笙，来自海思后端设计部。我是去年10月底从美国回来加入海思的。首先就是海思的定位问题，我们做技术的都有一种自恋情节，认为做的都是关键技术，都是公司核心竞争力之一。但是也有很多声音说，海思就是给公司降低成本的。我们下面的兄弟确实都很辛苦，产品线对成本的要求都非常高，经常为了一点点的成本大家加班加得很辛苦，我们挣的每一分都是辛苦钱。请问任总，公司对海思的定位是怎么样？\\n\\nA：公司运转是依靠两个轮子，一个轮子是商业模式，一个轮子是技术创新。我们今天要讨论的是技术创新的轮子。\\n\\n对海思的定位，它肯定是一个重要的体系，但是你的自恋情节不能取，我刚开始来就说闭合系统，如果海思有自恋，要求做的东西我们一定要用，不用的话就不光荣，那就是一个闭合系统。我们总有一天能量耗尽，就会死亡，所以我们要做开放系统。你的系统可能被放弃，但并不影响你个人的成就。这就是人力资源政策要跟上来的问题。\\n\\n我们先排除政治观念，讲一下这个问题，比如我们国家的高铁。中国自己也生产高铁，株洲机车厂是当时最先进的国产厂。当时高铁投标的时候，株洲没中标，都是西方国家，比如德国的、法国的、日本的合资工厂中标。株洲曾经是我们国家最强的机车厂，而德国、法国、日本都是找差一些的机车厂合资，合资厂吃得肥肥的，结果株洲也没有吃亏。这就是铁道部处理的艺术水平了。铁道部是怎么做的？为什么株洲没有叫苦？把你们合资企业赚的钱都给株洲，进行技术研究，我总有一天会用你的。到现在已经确定下来，250公里的高铁，株洲可以投标了。\\n\\n我们在价值平衡上，即使做成功了暂时没有用，还要继续做下去。但是如果个人感到没希望了，可以通过循环流动，流动到其他部门，换新人再来上。我们可能坚持做几十年都不用，但是还得做，一旦公司出现战略性的漏洞，我们不是几百亿美金的损失，而是几千亿美金的损失。我们公司今天积累了这么多的财富，这些财富可能就是因为那一个点，让别人卡住，最后死掉。所以，可能几十年还得在这个地方奋斗，这个岗位、这个项目是不能撤掉的，但是人员可以流动的。少林寺还可以有CEO，和尚也可以云游的，但是庙需要定在那里，这是公司的战略旗帜，不能动掉的。\\n\\n再比如说你知不知道什么时候打核战争？现在没有，那就应该停下来核的研究吗？你说我们的核科学产生了多少科学家，你看那些功勋一大排一大排都是。不要说邓稼先，活着的也还有很多，但什么时候甩过原子弹呀？所以海思一定要从战略上认识它的战略地位。\\n\\n我们一定要耐得住寂寞，板凳要做十年冷\\n\\nQ:王志敏（海思技术规划部副部长）：任总您好，我是王志敏，来自海思战略技术规划部，这是一个涉及产业链的问题。您刚才提到的战略攻关是我们非常重要的工作之一。半导体行业的战略攻关与后端生产制造非常相关，同时亚太区半导体的产业环境也在完善，在这个特殊的时期和阶段，我们公司是否会把半导体产业基础做得更加稳固？\\n\\nA:任总：我讲第一点，我们不能为了获取这个体系的利益而去做半导体生产产业。半导体的生产是化学问题和物理问题，不是我们的优势，我们的优势就是数据逻辑，就是在软件、电路设计上的数学逻辑。我们即使做了个工厂，做个12英寸，外面做16英寸的，就把我们抛弃了。我们在制造行业，是不可能持续领先的。\\n\\n第二点，我们一定要耐得住寂寞，板凳要做十年冷。特别是基础研究。在50、60年代的电影演员是没有啥钱的，我曾经听过在八十年代初期，我们中央顶级的明星刘欢、王刚等从北京到太原的演唱会，走一次穴能赚多少钱呢？赚20元人民币。但是怎么能说中华民族的文化他们就没有贡献呢？我们去俄罗斯的最大感受是什么？就是普希金、屠格涅夫、托尔斯泰等等这些人，俄罗斯的文化、文明，俄罗斯是文化大国，他的文化对整个区域都产生了影响。\\n\\n这两天看王国维的电视剧，王国维是鲁迅先生骂的“不耻于人类的狗屎堆”,今天回过头看这个人的哲学思想是很伟大的，当年张之洞去开矿山、办工厂，李鸿章搞洋务的时候，王国维说：“振兴中华要靠哲学”。但是，他还是被抛进历史的垃圾堆，作为清华大学教授，最后投湖自尽，自杀了。中国有两个痛苦的灵魂，以前说最痛苦的灵魂是鲁迅，现在往前走一步，王国维也是中国最痛苦的灵魂。王国维讲哲学才能改变中国，今天来看确实是这样的。英国、美国、日本、法国、德国及整个欧洲社会，他们在哲学体系上搞清楚了。他们国家几百年没有动乱过。\\n\\n而我们的政策一会儿左，一会儿右，就是从上到下我们的价值观上没有统一，哲学观点没有统一。今天重新纪念王国维是来源于王国维这句话，是因为他对中国洋务运动的批判，中国应该先搞哲学，来改造人们的思想，国家才能有新的机制和体制产生，王国维以前是一个“不耻于人类的狗屎堆”，现在我们觉得他是很伟大的。还有一个伟大的人是李鸿章，李鸿章也是“不耻于人民的狗屎堆”，是中国最大的“卖国者”，不仅自己“卖国”，他去和日本谈判签《马关条约》的时候把儿子也带去了，让儿子也参与了《马关条约》的签订，结果爆发了五四运动。但是今天重新来看历史，重新来看《血色黄昏》，李鸿章是中华民族伟大的英雄，以后大家会重新去理解这个结论。所以不要为一时半时有没有光荣和功勋去计较。为千秋万代、中华民族要做出历史贡献。\\n\\n在看待历史问题的时候，特别是做基础科学的人，更多要看到你对未来产生的历史价值和贡献。我们公司要宽容“歪瓜裂枣”的奇思异想，以前一说歪瓜裂枣，他们把 “裂”写成劣等的“劣”。我说你们搞错了，枣是裂的最甜，瓜是歪的最甜，他们虽然不被大家看好，但我们从战略眼光上看好这些人。今天我们重新看王国维、李鸿章，实际上他们就是历史的歪瓜裂枣。从事基础研究的人，有时候不需要急功近利，所以我们从来不让你们去比论文数量这些东西，就是想让你们能够踏踏实实地做学问。但做得也不够好，为什么说不够好呢，就是我们的价值观也不能完全做到统一，统一的价值观是经过多少代人的磨合才有可能的，现在我们也不能肯定，但是我们尽力去做。\\n\\n必须要靠自己\\n\\nQ：牛社团（技术规划专家）：我来自公司技术规划部。我有几个问题，第一个是电信产业原来的业务单一，只是语音业务，所有我们公司产品都有标准规范，按标准规范去做就可以了。但现在整个移动互联网发展起来后，整个产业的业务范围已经超出了语音这个单一的业务范围，整个产业未来的方向肯定是包括像苹果、谷歌这样的终端和云端的公司。我司整个网络产品后面怎么去和终端云端产业链进行合作？公司两三年前在业界提出了 “端管云”的概念，现在“端”都由苹果和谷歌控制着，所有的游戏规则都由他们来定义，在云端华为也没有很好的云服务，也没有话语权。\\n\\n做为运营商和设备商，你所有的控制点、商业模式的价值点，你的游戏规则定制点只能在网络层去挖掘。所以这两年我们也在考虑，在网络层里哪些东西是需要网络提供服务的，提出了一些互联网厂商在网络层面去支持的解决方案。这些方案我们和运营商、OTT交流也是获得了认可的，但是在公司内部要和各部门推动去解决及协调资源比较困难。\\n\\nA：任总：你要看到，我们在不断讲管道，管道不仅限于电信，这是第一点比较大的变化。第二点，是否绑定客户的问题，要看到我们自己在其中发挥的重要作用，而不仅仅是依附谁不依附谁的问题。我们的优势在管道方面，而在终端我们基本不存在任何优势。能不能产生优势要用新的模式来思维，而不是把所有的生存希望寄托在运营商身上。国际歌早就给我们唱了，从来就没有救世主，也不靠神仙皇帝，一定要靠我们自己。我跟很多女孩讲，你不能把你的希望寄托在嫁一个好老公身上，人生有五六十年，要是十年二十年他就拜拜了，你后面要怎么办？所以你必须要靠自己。\\n\\n终端一定会有非常厉害的发展，但是机会不一定就是我们的。我和爱立信高层领导会谈的时候，他很高兴地说：我们终于不做终端了，你们去做终端了。人家笑我们不见得不对，就看我们能不能有所突破，终端这两年有了很大进步，但未必能进步到最后。\\n\\n我们要耐住寂寞慢慢往前走\\n\\nQ：莫道春（连接器专家）：我负责公司连接器的TMG，这个领域TOP的供应商都是来自于美国，台湾和国内的供应商都只做低端的东西，或者说是山寨别人的东西。我们会不会扶持一些国内和台湾的供应商，来保证我们在产品的成本、供货方面的安全？\\n\\nA：婆婆肯定是不能替媳妇生孩子的，生孩子是要靠儿子和媳妇的努力，我们能扶起来的也未必不是阿斗，所以我们不是扶持而是选择。公司的内部政策也从培养制改成了选拔制，中国和西方不一样，西方是因为没有人，必须要靠把你培养起来担负这个任务，中国遍地都是人，我就把最好的选来干就行了。因此我们对待供应商也是选择制，当然其中也会有一些战略，但不能因此就把我们当成是救世主，从来都没人救过我们。我也有危机感和恐惧感，所以我们要耐住寂寞慢慢往前走，终有一天我们能找到一个正确平衡之路。\\n\\n人生还是要咬定自己的优势特长持续去做\\n\\nQ：孙永芳（可行销工具架构师）：我来自中央软件院。我是一个华为13年前的新兵，在公司这么多年，我换了很多部门，但是我只做了一件事，一直在做公司配置器的开发。配置器目前支撑了公司很多的PO效率提升、IFS变更等项目，请问任总对2012实验室研发团队在支撑公司的变革、效率提升和卓越运营方面有什么要求和期望。\\n\\nA：任总：我认为你的人生历史就是一部华为历史，华为二十几年都只做一件事，就是坚持管道战略。你的13年只做了一件事，就是配置器。你的人生路就是华为的路，你的人生为什么那么成功，因为你只走了这一条路。人只要把仅有的一点优势发挥好了就行了，咬定青山不放松，一步一步就叫步步高。有些人就是不停的换，说是兴趣爱好，包括炒菜、扫地等什么都会做，但他并没有得到太太的表扬。\\n\\n华为公司也曾多次动摇过。人生还是要咬定自己的优势特长持续去做。刚才那个同事说我们做芯片不挣钱，人家做半导体的挣大钱，但是挣大钱的死得快，因为大家眼红，拼命进入。我们挣小钱怎么死呢？我们这么努力，比不上一个房地产公司，上帝先让我们死，就有点不公平。我和欧盟副主席聊天，他问我，全世界的经济都这么困难，你怎么敢大发展？我说第一点，我们的消费是小额消费，经济危机和小额消费没关系，比如你欠我的钱，我还是要打电话找你要钱，打电话就是小额消费。\\n\\n第二点，我们盈利能力还不如餐馆的毛利率高，也不如房地产公司高，还能让我们垮到哪儿去，我们垮不了。所以当全世界都在摇摆，都人心惶惶的时候，华为公司除了下面的人瞎惶惶以外，我们没有慌，我们还在改革。至少这些年你们还在涨工资，而且有的人可能涨得很厉害。我们为什么能稳定，就是我们长期挣小钱。\\n\\n如果我们不向美国人民学习他们的伟大，我们就永远战胜不了美国\\n\\nQ：倪乔力（网络OSS产品部部长）：我来自中央软件院U2000网管，公司在惠州务虚会上阐述了公司未来的价值构筑在软件与服务上，而以当前固定网络为例，软件（包括网管和VRP平台）在客户界面销售很多都被送掉了，我们构建软件的价值是否应该先从对软件的销售方式的转变开始？\\n\\nA：任总：我们过去在硬件系统里面写进去80多个软件包，目的是为了维护设备，结果使得管道不透明，流量速度不快，就像长江里面到处都是水草，水流量不快。如果我们把水草铲干净了，让管道的壁更干净，让水流的速度更快一点。这样我们在硬件管道上，把操作软件拿出来建立一个叠加系统，我们把它称作管道操作系统。\\n\\n管道操作系统的某一项功能，如测试功能，我们把它再拿出来变成一个颗粒？这个颗粒我们可以挂网上，也可以单独销售，这样管道的硬件系统是个透明系统，你去检查吧，全透明的，没有网络安全问题，这个颗粒你挂不挂呢？要看国家法律批准，你说要挂你就去买，你可以向社会去购买，也可以向我买，反正我就透明化，软件就是这样子。软件要构筑市场价值，例如ERP低价都买不到。你的颗粒太小，让他们作嫁妆了。婆婆应该给你钱。\\n\\nQ：刘桑（产品工程技术规划部部长）：我来自中央硬件工程院产品工程部。我想问一个关于氛围的问题，我们在面向未来和自主创新的时候应该是特别强调科学民主的精神，但是长期以来华为公司属于思想高度对齐、执行力强的管理风格，这是有一些矛盾的。我想请问您对于2012实验室的组织氛围的梦想是什么，基于这个梦想，您对管理者和专家分别有哪些期望？\\n\\nA：任总：第一，我要纠正你的说法，关于自主创新的问题，自主创新就陷入熵死里面，这是一个封闭系统。我们为什么要排外？我们能什么都做得比别人好吗？为什么一定要自主，自主就是封建的闭关自守，我们反对自主。第二，我们在创新的过程中强调只做我们有优势的部分，别的部分我们应该更多的加强开放与合作，只有这样我们才可能构建真正的战略力量。我们非常支持异军突起的，但要在公司的主航道上才好。我们一定要避免建立封闭系统。我们一定要建立一个开放的体系，特别是硬件体系更要开放。我们不开放就是死亡，如果我们不向美国人民学习他们的伟大，我们就永远战胜不了美国。\\n\\n我容忍你比我厉害，就是我的伟大\\n\\n今天和专家座谈，你们的问题我答不出来，不是我的羞耻，而是我的伟大。为什么呢？我容忍你比我厉害，就是我伟大。如果我认为自己是最高，华为是一个宝塔结构，那么我只有晚上不睡觉，我一睡觉华为就矮了嘛，睡平了嘛！站着我才高一点。我能永远不睡觉么？不可否认，个人的力量很重要，比如某个人提出的战略性观点或理论突破，但突破完了，他就是矮子了。就像李英涛和何庭波今天和我讲，石墨烯的问题，一旦突破，拿了诺贝尔奖就结束了。他就是当了一把黄继光，当完就完了。为什么？由理论突破引发的后面排山倒海般的冲锋，爆炸式的知识增长，他光是读这些东西都读不过来。当前人类社会知识的发展程度，远远超越了任何一个过往的时代，因此只有依靠集体力量才会有未来!\\n\\n小结\\n\\n注意任正非这个讲话是2012年的讲话！\\n当时华为手机的老大余承东，天天在微博上被骂成余大嘴！\\n当时华为的海思芯片被嘲笑成祖传的暖手宝（我2013年也买过一个华为的手机，确实很烂）\\n今天华为的麒麟CPU，已经成了气候（尽管用的是ARM架构+mali的GPU，其他很多IP core都能自己玩了，已经非常了不起了）\\n华为的手机，也已经成抗衡苹果的担纲。\\n华为的摄像头方案用过的都说好，三分天下有其一。\\n华为的NBIOT方案，又是领导行业潮流（摩拜就是用的他的方案）\\n华为能够用每年4亿美元的研发经费养芯片研发人员，这就是差距！\\n没有比较就没有伤害！\\n\\n今天重读任正非的讲话，我发现他已经把所有该说的话都说了，照做就可以了！国内的产学研能够做到任总所说的又有多少？\\n\\n这些年来，金融、地产、互联网这三个领域畸形聚集了太多太多的资源，甚至形成了大量的浪费（各种共享XX，直播，各种P2P，区块链明着骗，与其这么被糟蹋，真还不如把这种闲散资金引导到产业基金里！)。\\n\\n过去几年不要说增加对实体企业，先进制造业，基础学科的投入，即便已经在实体经济的资金都有脱实入虚的趋势。辛辛苦苦挣点钱还不如炒房来钱快！踏踏实实工作解决问题，收入根本跟不上房价的涨幅。各种基础学科的从业人员都在劝退新人，或者正在改行。\\n\\n中兴事件告诉国人一个现实：中国和发达国家的科技差距依然很大，需要一代人甚至几代人的埋头苦干才能追上。从上到下都应该认清现实， 不再骄傲自满，天天娱乐至死， 而是一步一个脚印脚踏实地奋起直追，把宝贵的资源投入到科技研发领域来。\\n\\n尊重客观规律（不要瞎提不切实际的指标，口号喊的震天响，结果完全做不到）。\\n\\n尊重人才（提高待遇，真正把人当人看，而不是扳手，即便是扳手也要给扳手经常上上油，最起码为他们交足五险一金）。\\n\\n尊重科技（不要老是抄抄抄，保护知识产权，保护创新）!\\n\\n其实中国的科技工作者和美国的科技工作者一样，只要有份体面的工作，如果没有太大的生活压力，也是很愿意全身心投入到自己喜欢的行业的，谁不想学有所长，学有所用。\\n\\n\\nps，再看看波音机械工程师的生活压力。\\n\\n波音机械工程师人均收入7万美元左右。\\n\\n而波音附近Everett平均SFH(独栋别墅)价格是36万左右，基本上来说，波音的工程师毫无生存压力（36/7）。商飞研发人员，一线车间工人的收入和房价比我就不列了。\\n\\n最后的最后用任总的话结尾：\\n所以我们今天把心平静下来，踏踏实实做点事，也可能四五十年以后我们就有希望了。\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/img20180421200117.png','2018-04-21 12:03:44','2020-08-20 15:44:02'),(222,'DoraCMS v2.1.2 Docker 版本（生产环境）','DoraCMS v2.1.2 Docker 版本（生产环境）',NULL,'1','','doracms,docker','2',NULL,'','DoraCMS的部署并不是很简单，需要开发者有一定的前端经验，DoraCMS 生产的部署，之前有写过一篇部署文档','2','https://cdn.html-js.cn/cms/upload/images/ueditor/1133990366215802880.png,https://cdn.html-js.cn/cms/upload/images/ueditor/1133986205084553216.png,https://cdn.html-js.cn/cms/upload/images/ueditor/1133987783577309184.png','','0:01',762,'2','0',NULL,0,'1',223254,'<p style=\"text-align: center;\">&nbsp; &nbsp;<img src=\"https://cdn.html-js.cn/cms/upload/images/ueditor/1133990366215802880.png\" title=\"\" alt=\"切片 1.png\"/></p><p><br/></p><p>&nbsp; DoraCMS的部署并不是很简单，需要开发者有一定的前端经验，DoraCMS 生产的部署，之前有写过一篇部署文档：<a href=\"https://www.html-js.cn/details/ry4-B-hkf.html\" target=\"_blank\" title=\"DoraCMS2.0 linux部署(生产环境)教程\">DoraCMS2.0 linux部署(生产环境)教程</a>&nbsp; 其实已经比较详细了，但是从github issue 里，仍然出现一些问题，主要集中在：</p><p><br/></p><p>1、mongodb 的配置</p><p>2、redis 的配置</p><p>3、分不清是否需要配置环境变量，导致程序跑起来报错</p><p><br/></p><p>&nbsp; 最近了解了一下docker，将 DoraCMS 放在docker 容器中生成了一个镜像（<a href=\"https://hub.docker.com/r/doramart/doracms\">https://hub.docker.com/r/doramart/doracms</a>）希望能更好的帮助大家快速搭建doracms。下面介绍下本地使用doracms 镜像的方法：</p><p><br/></p><p>1、查询 DoraCMS 镜像</p><pre class=\"brush:js;toolbar:false\">docker&nbsp;search&nbsp;doracms</pre><p>得到结果：<br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/images/ueditor/1133986205084553216.png\" title=\"Snipaste_2019-05-30_14-37-41.png\" alt=\"Snipaste_2019-05-30_14-37-41.png\" width=\"600\" height=\"69\"/></p><p><br/></p><p>2、下载 DoraCMS 镜像。</p><pre class=\"brush:js;toolbar:false\">docker&nbsp;pull&nbsp;doramart/doracms:2.1.2</pre><p>通过&nbsp;docker images&nbsp; 查询下载成功的镜像。</p><pre class=\"brush:js;toolbar:false\">docker&nbsp;images</pre><p style=\"text-align:center\"><img src=\"https://cdn.html-js.cn/cms/upload/images/ueditor/1133987783577309184.png\" title=\"Snipaste_2019-05-30_14-44-53.png\" alt=\"Snipaste_2019-05-30_14-44-53.png\" width=\"600\" height=\"130\"/></p><p><br/></p><p>3、通过doracms镜像创建mycms 容器，并制定映射端口号</p><pre class=\"brush:js;toolbar:false\">docker&nbsp;run&nbsp;-it&nbsp;-d&nbsp;-p&nbsp;8001:8080&nbsp;--name&nbsp;mycms&nbsp;doramart/doracms:2.1.2&nbsp;/bin/bash</pre><p>通过如下命令查看端口号绑定情况：&nbsp;</p><pre class=\"brush:js;toolbar:false\">docker&nbsp;ps</pre><p>结果可以看到容器端口号8080映射到宿主主机的8001端口号（<span style=\"color: rgb(192, 0, 0);\">后续我们可以通过 http://localhost:8001访问</span>）<br/></p><pre class=\"brush:js;toolbar:false\">CONTAINER&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IMAGE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;COMMAND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CREATED&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STATUS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PORTS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NAMES\na2402b967500&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doracms:2.1.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;/bin/bash&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;42&nbsp;seconds&nbsp;ago&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Up&nbsp;41&nbsp;seconds&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0.0.0:8001-&gt;8080/tcp&nbsp;&nbsp;&nbsp;mycms</pre><p><br/></p><p><br/></p><p>4、进入mycms容器</p><pre class=\"brush:js;toolbar:false\">docker&nbsp;attach&nbsp;mycms</pre><p><br/></p><p>5、开启redis</p><pre class=\"brush:js;toolbar:false\">redis-server&nbsp;/etc/redis/redis.conf&nbsp;&amp;</pre><p><br/></p><p>6、开启mongodb</p><pre class=\"brush:js;toolbar:false\">cd&nbsp;/usr/local/mongodb/mongodb-linux-x86_64-ubuntu1604-4.0.9/bin/\n\n./mongod&nbsp;--config&nbsp;/usr/local/mongodb/mongodb.conf</pre><p><br/></p><p>7、进入代码根目录，重装依赖（本身镜像中有依赖，建议删除重新安装一次），依次执行下面的命令</p><pre class=\"brush:js;toolbar:false\">cd&nbsp;/home/webapp/DoraCMS/\n\ngit&nbsp;pull\n\nrm&nbsp;-rf&nbsp;node_modules/\n\nnpm&nbsp;i</pre><p><br/></p><p>8、让环境变量生效。镜像中在 /etc/profile 中配置了 export NODE_ENV=production, 但是需要source一下使其生效：</p><pre class=\"brush:js;toolbar:false\">source&nbsp;/etc/profile</pre><p><br/></p><p>9、通过pm2 启动项目</p><pre class=\"brush:js;toolbar:false\">pm2&nbsp;start&nbsp;server.js&nbsp;--name&nbsp;doracms</pre><p><br/></p><p>10、在本地通过&nbsp;<span style=\"color: rgb(192, 0, 0);\"><a href=\"http://localhost:8001\">http://localhost:8001</a>&nbsp;访问，可以看到，页面已经打开了。</span></p><p><span style=\"color: rgb(192, 0, 0);\"><br/></span></p><p><br/></p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"   \"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/ueditor/1133990366215802880.png\"},{\"type\":\"contents\",\"content\":\"\\n\\n  DoraCMS的部署并不是很简单，需要开发者有一定的前端经验，DoraCMS 生产的部署，之前有写过一篇部署文档：DoraCMS2.0 linux部署(生产环境)教程  其实已经比较详细了，但是从github issue 里，仍然出现一些问题，主要集中在：\\n\\n1、mongodb 的配置\\n2、redis 的配置\\n3、分不清是否需要配置环境变量，导致程序跑起来报错\\n\\n  最近了解了一下docker，将 DoraCMS 放在docker 容器中生成了一个镜像（https://hub.docker.com/r/doramart/doracms）希望能更好的帮助大家快速搭建doracms。下面介绍下本地使用doracms 镜像的方法：\\n\\n1、查询 DoraCMS 镜像\\ndocker search doracms\\n得到结果：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/ueditor/1133986205084553216.png\"},{\"type\":\"contents\",\"content\":\"\\n\\n2、下载 DoraCMS 镜像。\\ndocker pull doramart/doracms:2.1.2\\n通过 docker images  查询下载成功的镜像。\\ndocker images\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/ueditor/1133987783577309184.png\"},{\"type\":\"contents\",\"content\":\"\\n\\n3、通过doracms镜像创建mycms 容器，并制定映射端口号\\ndocker run -it -d -p 8001:8080 --name mycms doramart/doracms:2.1.2 /bin/bash\\n通过如下命令查看端口号绑定情况： \\ndocker ps\\n结果可以看到容器端口号8080映射到宿主主机的8001端口号（后续我们可以通过 http://localhost:8001访问）\\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES\\na2402b967500        doracms:2.1.2       \\\"/bin/bash\\\"         42 seconds ago      Up 41 seconds       0.0.0.0:8001-&gt;8080/tcp   mycms\\n\\n\\n4、进入mycms容器\\ndocker attach mycms\\n\\n5、开启redis\\nredis-server /etc/redis/redis.conf &amp;\\n\\n6、开启mongodb\\ncd /usr/local/mongodb/mongodb-linux-x86_64-ubuntu1604-4.0.9/bin/\\n\\n./mongod --config /usr/local/mongodb/mongodb.conf\\n\\n7、进入代码根目录，重装依赖（本身镜像中有依赖，建议删除重新安装一次），依次执行下面的命令\\ncd /home/webapp/DoraCMS/\\n\\ngit pull\\n\\nrm -rf node_modules/\\n\\nnpm i\\n\\n8、让环境变量生效。镜像中在 /etc/profile 中配置了 export NODE_ENV=production, 但是需要source一下使其生效：\\nsource /etc/profile\\n\\n9、通过pm2 启动项目\\npm2 start server.js --name doracms\\n\\n10、在本地通过 http://localhost:8001 访问，可以看到，页面已经打开了。\\n\\n\\n\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/img1559197821199.png','2019-05-30 06:56:15','2020-08-20 15:44:00'),(223,'深入理解 Vue Computed 计算属性[转]','深入理解 Vue Computed 计算属性[转]','3','1','','','2',NULL,'','Computed 计算属性是 Vue 中常用的一个功能，但你理解它是怎么工作的吗？','1','','','0:01',762,'2','0',NULL,0,'0',232212,'<p>Computed 计算属性是 Vue 中常用的一个功能，但你理解它是怎么工作的吗？</p>\n<p>拿官网简单的例子来看一下：</p>\n<pre class=\"hljs\"><code><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"example\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Original message: \"</span><span class=\"hljs-template-variable\">{{ message }}</span><span class=\"xml\">\"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Computed reversed message: \"</span><span class=\"hljs-template-variable\">{{ reversedMessage }}</span><span class=\"xml\">\"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n</code></pre><pre class=\"hljs\"><code>var <span class=\"hljs-keyword\">vm</span> = <span class=\"hljs-keyword\">new</span> Vue({\n  <span class=\"hljs-keyword\">e</span><span class=\"hljs-variable\">l:</span> <span class=\"hljs-string\">\'#example\'</span>,\n  dat<span class=\"hljs-variable\">a:</span> {\n    message: <span class=\"hljs-string\">\'Hello\'</span>\n  },\n  computed: {\n    // <span class=\"hljs-keyword\">a</span> computed getter\n    reversedMessage: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> {</span>\n      // `this` points <span class=\"hljs-keyword\">to</span> the <span class=\"hljs-keyword\">vm</span> instance\n      <span class=\"hljs-keyword\">return</span> this.message.<span class=\"hljs-keyword\">split</span>(<span class=\"hljs-string\">\'\'</span>).<span class=\"hljs-built_in\">reverse</span>().<span class=\"hljs-keyword\">join</span>(<span class=\"hljs-string\">\'\'</span>)\n    }\n  }\n})\n</code></pre><h3><a href=\'#situation\' id=\'situation\' class=\'anchor\'></a><a href=\'#situation\'>Situation</a></h3><p>Vue 里的 Computed 属性非常频繁的被使用到，但并不是很清楚它的实现原理。比如：计算属性如何与属性建立依赖关系？属性发生变化又如何通知到计算属性重新计算？</p>\n<p>关于如何建立依赖关系，我的第一个想到的就是语法解析，但这样太浪费性能，因此排除，第二个想到的就是利用 JavaScript 单线程的原理和 Vue 的 Getter 设计，通过一个简单的发布订阅，就可以在一次计算属性求值的过程中收集到相关依赖。</p>\n<p>因此接下来的任务就是从 Vue 源码一步步分析 Computed 的实现原理。</p>\n<h3><a href=\'#task\' id=\'task\' class=\'anchor\'></a><a href=\'#task\'>Task</a></h3><p>分析依赖收集实现原理，分析动态计算实现原理。</p>\n<h3><a href=\'#action\' id=\'action\' class=\'anchor\'></a><a href=\'#action\'>Action</a></h3><p>data 属性初始化 getter setter：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// src/observer/index.js</span>\n\n<span class=\"hljs-comment\">// 这里开始转换 data 的 getter setter，原始值已存入到 __ob__ 属性中</span>\nObject.defineProperty(obj, key, {\n  enumerable: <span class=\"hljs-literal\">true</span>,\n  configurable: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-keyword\">get</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reactiveGetter</span> <span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">const</span> value = getter ? getter.call(obj) : val\n    <span class=\"hljs-comment\">// 判断是否处于依赖收集状态</span>\n    <span class=\"hljs-keyword\">if</span> (Dep.target) {\n      <span class=\"hljs-comment\">// 建立依赖关系</span>\n      dep.depend()\n      ...\n    }\n    <span class=\"hljs-keyword\">return</span> value\n  },\n  <span class=\"hljs-keyword\">set</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reactiveSetter</span> <span class=\"hljs-params\">(newVal)</span> </span>{\n    ...\n    <span class=\"hljs-comment\">// 依赖发生变化，通知到计算属性重新计算</span>\n    dep.notify()\n  }\n})\n</code></pre><p>computed 计算属性初始化</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// src/core/instance/state.js</span>\n\n<span class=\"hljs-comment\">// 初始化计算属性</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">initComputed</span> (<span class=\"hljs-params\">vm: Component, computed: <span class=\"hljs-built_in\">Object</span></span>) </span>{\n  ...\n  <span class=\"hljs-comment\">// 遍历 computed 计算属性</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> computed) {\n    ...\n    <span class=\"hljs-comment\">// 创建 Watcher 实例</span>\n    <span class=\"hljs-comment\">// create internal watcher for the computed property.</span>\n    watchers[key] = <span class=\"hljs-keyword\">new</span> Watcher(vm, getter || noop, noop, computedWatcherOptions)\n\n    <span class=\"hljs-comment\">// 创建属性 vm.reversedMessage，并将提供的函数将用作属性 vm.reversedMessage 的 getter，</span>\n    <span class=\"hljs-comment\">// 最终 computed 与 data 会一起混合到 vm 下，所以当 computed 与 data 存在重名属性时会抛出警告</span>\n    defineComputed(vm, key, userDef)\n    ...\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">defineComputed</span> (<span class=\"hljs-params\">target: <span class=\"hljs-built_in\">any</span>, key: <span class=\"hljs-built_in\">string</span>, userDef: <span class=\"hljs-built_in\">Object</span> | <span class=\"hljs-built_in\">Function</span></span>) </span>{\n  ...\n  <span class=\"hljs-comment\">// 创建 get set 方法</span>\n  sharedPropertyDefinition.get = createComputedGetter(key)\n  sharedPropertyDefinition.set = noop\n  ...\n  <span class=\"hljs-comment\">// 创建属性 vm.reversedMessage，并初始化 getter setter</span>\n  <span class=\"hljs-built_in\">Object</span>.defineProperty(target, key, sharedPropertyDefinition)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createComputedGetter</span> (<span class=\"hljs-params\">key</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">computedGetter</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> watcher = <span class=\"hljs-keyword\">this</span>._computedWatchers &amp;&amp; <span class=\"hljs-keyword\">this</span>._computedWatchers[key]\n    <span class=\"hljs-keyword\">if</span> (watcher) {\n      <span class=\"hljs-keyword\">if</span> (watcher.dirty) {\n        <span class=\"hljs-comment\">// watcher 暴露 evaluate 方法用于取值操作</span>\n        watcher.evaluate()\n      }\n      <span class=\"hljs-comment\">// 同第1步，判断是否处于依赖收集状态</span>\n      <span class=\"hljs-keyword\">if</span> (Dep.target) {\n        watcher.depend()\n      }\n      <span class=\"hljs-keyword\">return</span> watcher.value\n    }\n  }\n}\n</code></pre><p>无论是属性还是计算属性，都会生成一个对应的 watcher 实例。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// src/core/observer/watcher.js</span>\n\n<span class=\"hljs-comment\">// 当通过 vm.reversedMessage 获取计算属性时，就会进到这个 getter 方法</span>\n<span class=\"hljs-keyword\">get</span> () {\n  <span class=\"hljs-comment\">// this 指的是 watcher 实例</span>\n  <span class=\"hljs-comment\">// 将当前 watcher 实例暂存到 Dep.target，这就表示开启了依赖收集任务</span>\n  pushTarget(<span class=\"hljs-keyword\">this</span>)\n  let value\n  const vm = <span class=\"hljs-keyword\">this</span>.vm\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-comment\">// 在执行 vm.reversedMessage 的函调函数时，会触发属性（步骤1）和计算属性（步骤2）的 getter</span>\n    <span class=\"hljs-comment\">// 在这个执行过程中，就可以收集到 vm.reversedMessage 的依赖了</span>\n    value = <span class=\"hljs-keyword\">this</span>.getter.call(vm, vm)\n  } <span class=\"hljs-keyword\">catch</span> (e) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.user) {\n      handleError(e, vm, `getter <span class=\"hljs-keyword\">for</span> watcher <span class=\"hljs-string\">\"<span class=\"hljs-subst\">${this.expression}</span>\"</span>`)\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">throw</span> e\n    }\n  } <span class=\"hljs-keyword\">finally</span> {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.deep) {\n      traverse(value)\n    }\n    <span class=\"hljs-comment\">// 结束依赖收集任务</span>\n    popTarget()\n    <span class=\"hljs-keyword\">this</span>.cleanupDeps()\n  }\n  <span class=\"hljs-keyword\">return</span> value\n}\n</code></pre><p>上面多出提到了 dep.depend, dep.notify, Dep.target，那么 Dep 究竟是什么呢？</p>\n<p>Dep 的代码短小精悍，但却承担着非常重要的依赖收集环节。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// src/core/observer/dep.js</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dep</span> </span>{\n  <span class=\"hljs-keyword\">static</span> target: ?Watcher;\n  id: number;\n  subs: <span class=\"hljs-built_in\">Array</span>&lt;Watcher&gt;;\n\n  <span class=\"hljs-keyword\">constructor</span> () {\n    <span class=\"hljs-keyword\">this</span>.id = uid++\n    <span class=\"hljs-keyword\">this</span>.subs = []\n  }\n\n  addSub (sub: Watcher) {\n    <span class=\"hljs-keyword\">this</span>.subs.push(sub)\n  }\n\n  removeSub (sub: Watcher) {\n    remove(<span class=\"hljs-keyword\">this</span>.subs, sub)\n  }\n\n  depend () {\n    <span class=\"hljs-keyword\">if</span> (Dep.target) {\n      Dep.target.addDep(<span class=\"hljs-keyword\">this</span>)\n    }\n  }\n\n  notify () {\n    <span class=\"hljs-keyword\">const</span> subs = <span class=\"hljs-keyword\">this</span>.subs.slice()\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, l = subs.length; i &lt; l; i++) {\n      <span class=\"hljs-comment\">// 更新 watcher 的值，与 watcher.evaluate() 类似，</span>\n      <span class=\"hljs-comment\">// 但 update 是给依赖变化时使用的，包含对 watch 的处理</span>\n      subs[i].update()\n    }\n  }\n}\n\n<span class=\"hljs-comment\">// 当首次计算 computed 属性的值时，Dep 将会在计算期间对依赖进行收集</span>\nDep.target = <span class=\"hljs-literal\">null</span>\n<span class=\"hljs-keyword\">const</span> targetStack = []\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">pushTarget</span> (<span class=\"hljs-params\">_target: Watcher</span>) </span>{\n  <span class=\"hljs-comment\">// 在一次依赖收集期间，如果有其他依赖收集任务开始（比如：当前 computed 计算属性嵌套其他 computed 计算属性），</span>\n  <span class=\"hljs-comment\">// 那么将会把当前 target 暂存到 targetStack，先进行其他 target 的依赖收集，</span>\n  <span class=\"hljs-keyword\">if</span> (Dep.target) targetStack.push(Dep.target)\n  Dep.target = _target\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">popTarget</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// 当嵌套的依赖收集任务完成后，将 target 恢复为上一层的 Watcher，并继续做依赖收集</span>\n  Dep.target = targetStack.pop()\n}\n</code></pre><h3><a href=\'#result\' id=\'result\' class=\'anchor\'></a><a href=\'#result\'>Result</a></h3><p>总结一下依赖收集、动态计算的流程：</p>\n<ol>\n<li>data 属性初始化 getter setter</li>\n<li>computed 计算属性初始化，提供的函数将用作属性 vm.reversedMessage 的 getter</li>\n<li>当首次获取 reversedMessage 计算属性的值时，Dep 开始依赖收集</li>\n<li>在执行 message getter 方法时，如果 Dep 处于依赖收集状态，则判定 message 为 reversedMessage 的依赖，并建立依赖关系</li>\n<li>当 message 发生变化时，根据依赖关系，触发 reverseMessage 的重新计算\n到此，整个 Computed 的工作流程就理清楚了。</li>\n</ol>\n','[{\"type\":\"contents\",\"content\":\"Computed 计算属性是 Vue 中常用的一个功能，但你理解它是怎么工作的吗？\\n拿官网简单的例子来看一下：\\n&lt;div id=\\\"example\\\"&gt;\\n  &lt;p&gt;Original message: \\\"{{ message }}\\\"&lt;/p&gt;\\n  &lt;p&gt;Computed reversed message: \\\"{{ reversedMessage }}\\\"&lt;/p&gt;&lt;/div&gt;\\nvar vm = new Vue({  el: \'#example\',\\n  data: {\\n    message: \'Hello\'\\n  },\\n  computed: {\\n    // a computed getter\\n    reversedMessage: function () {\\n      // `this` points to the vm instance      return this.message.split(\'\').reverse().join(\'\')\\n    }\\n  }\\n})\\nSituation\\nVue 里的 Computed 属性非常频繁的被使用到，但并不是很清楚它的实现原理。比如：计算属性如何与属性建立依赖关系？属性发生变化又如何通知到计算属性重新计算？\\n关于如何建立依赖关系，我的第一个想到的就是语法解析，但这样太浪费性能，因此排除，第二个想到的就是利用 JavaScript 单线程的原理和 Vue 的 Getter 设计，通过一个简单的发布订阅，就可以在一次计算属性求值的过程中收集到相关依赖。\\n因此接下来的任务就是从 Vue 源码一步步分析 Computed 的实现原理。\\nTask\\n分析依赖收集实现原理，分析动态计算实现原理。\\nAction\\ndata 属性初始化 getter setter：\\n// src/observer/index.js// 这里开始转换 data 的 getter setter，原始值已存入到 __ob__ 属性中Object.defineProperty(obj, key, {\\n  enumerable: true,\\n  configurable: true,  get: function reactiveGetter () {    const value = getter ? getter.call(obj) : val    // 判断是否处于依赖收集状态\\n    if (Dep.target) {      // 建立依赖关系\\n      dep.depend()\\n      ...\\n    }    return value\\n  },  set: function reactiveSetter (newVal) {\\n    ...    // 依赖发生变化，通知到计算属性重新计算\\n    dep.notify()\\n  }\\n})\\ncomputed 计算属性初始化\\n// src/core/instance/state.js// 初始化计算属性function initComputed (vm: Component, computed: Object) {\\n  ...  // 遍历 computed 计算属性\\n  for (const key in computed) {\\n    ...    // 创建 Watcher 实例\\n    // create internal watcher for the computed property.\\n    watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions)    // 创建属性 vm.reversedMessage，并将提供的函数将用作属性 vm.reversedMessage 的 getter，\\n    // 最终 computed 与 data 会一起混合到 vm 下，所以当 computed 与 data 存在重名属性时会抛出警告\\n    defineComputed(vm, key, userDef)\\n    ...\\n  }\\n}export function defineComputed (target: any, key: string, userDef: Object | Function) {\\n  ...  // 创建 get set 方法\\n  sharedPropertyDefinition.get = createComputedGetter(key)\\n  sharedPropertyDefinition.set = noop\\n  ...  // 创建属性 vm.reversedMessage，并初始化 getter setter\\n  Object.defineProperty(target, key, sharedPropertyDefinition)\\n}function createComputedGetter (key) {  return function computedGetter () {    const watcher = this._computedWatchers &amp;&amp; this._computedWatchers[key]    if (watcher) {      if (watcher.dirty) {        // watcher 暴露 evaluate 方法用于取值操作\\n        watcher.evaluate()\\n      }      // 同第1步，判断是否处于依赖收集状态\\n      if (Dep.target) {\\n        watcher.depend()\\n      }      return watcher.value\\n    }\\n  }\\n}\\n无论是属性还是计算属性，都会生成一个对应的 watcher 实例。\\n// src/core/observer/watcher.js// 当通过 vm.reversedMessage 获取计算属性时，就会进到这个 getter 方法get () {  // this 指的是 watcher 实例\\n  // 将当前 watcher 实例暂存到 Dep.target，这就表示开启了依赖收集任务\\n  pushTarget(this)\\n  let value\\n  const vm = this.vm  try {    // 在执行 vm.reversedMessage 的函调函数时，会触发属性（步骤1）和计算属性（步骤2）的 getter\\n    // 在这个执行过程中，就可以收集到 vm.reversedMessage 的依赖了\\n    value = this.getter.call(vm, vm)\\n  } catch (e) {    if (this.user) {\\n      handleError(e, vm, `getter for watcher \\\"${this.expression}\\\"`)\\n    } else {      throw e\\n    }\\n  } finally {    if (this.deep) {\\n      traverse(value)\\n    }    // 结束依赖收集任务\\n    popTarget()    this.cleanupDeps()\\n  }  return value\\n}\\n上面多出提到了 dep.depend, dep.notify, Dep.target，那么 Dep 究竟是什么呢？\\nDep 的代码短小精悍，但却承担着非常重要的依赖收集环节。\\n// src/core/observer/dep.jsexport default class Dep {  static target: ?Watcher;\\n  id: number;\\n  subs: Array&lt;Watcher&gt;;  constructor () {    this.id = uid++    this.subs = []\\n  }\\n\\n  addSub (sub: Watcher) {    this.subs.push(sub)\\n  }\\n\\n  removeSub (sub: Watcher) {\\n    remove(this.subs, sub)\\n  }\\n\\n  depend () {    if (Dep.target) {\\n      Dep.target.addDep(this)\\n    }\\n  }\\n\\n  notify () {    const subs = this.subs.slice()    for (let i = 0, l = subs.length; i &lt; l; i++) {      // 更新 watcher 的值，与 watcher.evaluate() 类似，\\n      // 但 update 是给依赖变化时使用的，包含对 watch 的处理\\n      subs[i].update()\\n    }\\n  }\\n}// 当首次计算 computed 属性的值时，Dep 将会在计算期间对依赖进行收集Dep.target = nullconst targetStack = []export function pushTarget (_target: Watcher) {  // 在一次依赖收集期间，如果有其他依赖收集任务开始（比如：当前 computed 计算属性嵌套其他 computed 计算属性），\\n  // 那么将会把当前 target 暂存到 targetStack，先进行其他 target 的依赖收集，\\n  if (Dep.target) targetStack.push(Dep.target)\\n  Dep.target = _target\\n}export function popTarget () {  // 当嵌套的依赖收集任务完成后，将 target 恢复为上一层的 Watcher，并继续做依赖收集\\n  Dep.target = targetStack.pop()\\n}\\nResult\\n总结一下依赖收集、动态计算的流程：\\ndata 属性初始化 getter setter\\ncomputed 计算属性初始化，提供的函数将用作属性 vm.reversedMessage 的 getter\\n当首次获取 reversedMessage 计算属性的值时，Dep 开始依赖收集\\n在执行 message getter 方法时，如果 Dep 处于依赖收集状态，则判定 message 为 reversedMessage 的依赖，并建立依赖关系\\n当 message 发生变化时，根据依赖关系，触发 reverseMessage 的重新计算到此，整个 Computed 的工作流程就理清楚了。\\n\\n\"}]','Computed 计算属性是 Vue 中常用的一个功能，但你理解它是怎么工作的吗？\n\n拿官网简单的例子来看一下：\n```\n<div id=\"example\">\n  <p>Original message: \"{{ message }}\"</p>\n  <p>Computed reversed message: \"{{ reversedMessage }}\"</p>\n</div>\n```\n```\nvar vm = new Vue({\n  el: \'#example\',\n  data: {\n    message: \'Hello\'\n  },\n  computed: {\n    // a computed getter\n    reversedMessage: function () {\n      // `this` points to the vm instance\n      return this.message.split(\'\').reverse().join(\'\')\n    }\n  }\n})\n```\n### Situation\nVue 里的 Computed 属性非常频繁的被使用到，但并不是很清楚它的实现原理。比如：计算属性如何与属性建立依赖关系？属性发生变化又如何通知到计算属性重新计算？\n\n关于如何建立依赖关系，我的第一个想到的就是语法解析，但这样太浪费性能，因此排除，第二个想到的就是利用 JavaScript 单线程的原理和 Vue 的 Getter 设计，通过一个简单的发布订阅，就可以在一次计算属性求值的过程中收集到相关依赖。\n\n因此接下来的任务就是从 Vue 源码一步步分析 Computed 的实现原理。\n\n### Task\n分析依赖收集实现原理，分析动态计算实现原理。\n\n### Action\ndata 属性初始化 getter setter：\n```\n// src/observer/index.js\n\n// 这里开始转换 data 的 getter setter，原始值已存入到 __ob__ 属性中\nObject.defineProperty(obj, key, {\n  enumerable: true,\n  configurable: true,\n  get: function reactiveGetter () {\n    const value = getter ? getter.call(obj) : val\n    // 判断是否处于依赖收集状态\n    if (Dep.target) {\n      // 建立依赖关系\n      dep.depend()\n      ...\n    }\n    return value\n  },\n  set: function reactiveSetter (newVal) {\n    ...\n    // 依赖发生变化，通知到计算属性重新计算\n    dep.notify()\n  }\n})\n```\ncomputed 计算属性初始化\n```\n// src/core/instance/state.js\n\n// 初始化计算属性\nfunction initComputed (vm: Component, computed: Object) {\n  ...\n  // 遍历 computed 计算属性\n  for (const key in computed) {\n    ...\n    // 创建 Watcher 实例\n    // create internal watcher for the computed property.\n    watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions)\n\n    // 创建属性 vm.reversedMessage，并将提供的函数将用作属性 vm.reversedMessage 的 getter，\n    // 最终 computed 与 data 会一起混合到 vm 下，所以当 computed 与 data 存在重名属性时会抛出警告\n    defineComputed(vm, key, userDef)\n    ...\n  }\n}\n\nexport function defineComputed (target: any, key: string, userDef: Object | Function) {\n  ...\n  // 创建 get set 方法\n  sharedPropertyDefinition.get = createComputedGetter(key)\n  sharedPropertyDefinition.set = noop\n  ...\n  // 创建属性 vm.reversedMessage，并初始化 getter setter\n  Object.defineProperty(target, key, sharedPropertyDefinition)\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    const watcher = this._computedWatchers && this._computedWatchers[key]\n    if (watcher) {\n      if (watcher.dirty) {\n        // watcher 暴露 evaluate 方法用于取值操作\n        watcher.evaluate()\n      }\n      // 同第1步，判断是否处于依赖收集状态\n      if (Dep.target) {\n        watcher.depend()\n      }\n      return watcher.value\n    }\n  }\n}\n```\n无论是属性还是计算属性，都会生成一个对应的 watcher 实例。\n```\n// src/core/observer/watcher.js\n\n// 当通过 vm.reversedMessage 获取计算属性时，就会进到这个 getter 方法\nget () {\n  // this 指的是 watcher 实例\n  // 将当前 watcher 实例暂存到 Dep.target，这就表示开启了依赖收集任务\n  pushTarget(this)\n  let value\n  const vm = this.vm\n  try {\n    // 在执行 vm.reversedMessage 的函调函数时，会触发属性（步骤1）和计算属性（步骤2）的 getter\n    // 在这个执行过程中，就可以收集到 vm.reversedMessage 的依赖了\n    value = this.getter.call(vm, vm)\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, `getter for watcher \"${this.expression}\"`)\n    } else {\n      throw e\n    }\n  } finally {\n    if (this.deep) {\n      traverse(value)\n    }\n    // 结束依赖收集任务\n    popTarget()\n    this.cleanupDeps()\n  }\n  return value\n}\n```\n上面多出提到了 dep.depend, dep.notify, Dep.target，那么 Dep 究竟是什么呢？\n\nDep 的代码短小精悍，但却承担着非常重要的依赖收集环节。\n```\n// src/core/observer/dep.js\n\nexport default class Dep {\n  static target: ?Watcher;\n  id: number;\n  subs: Array<Watcher>;\n\n  constructor () {\n    this.id = uid++\n    this.subs = []\n  }\n\n  addSub (sub: Watcher) {\n    this.subs.push(sub)\n  }\n\n  removeSub (sub: Watcher) {\n    remove(this.subs, sub)\n  }\n\n  depend () {\n    if (Dep.target) {\n      Dep.target.addDep(this)\n    }\n  }\n\n  notify () {\n    const subs = this.subs.slice()\n    for (let i = 0, l = subs.length; i < l; i++) {\n      // 更新 watcher 的值，与 watcher.evaluate() 类似，\n      // 但 update 是给依赖变化时使用的，包含对 watch 的处理\n      subs[i].update()\n    }\n  }\n}\n\n// 当首次计算 computed 属性的值时，Dep 将会在计算期间对依赖进行收集\nDep.target = null\nconst targetStack = []\n\nexport function pushTarget (_target: Watcher) {\n  // 在一次依赖收集期间，如果有其他依赖收集任务开始（比如：当前 computed 计算属性嵌套其他 computed 计算属性），\n  // 那么将会把当前 target 暂存到 targetStack，先进行其他 target 的依赖收集，\n  if (Dep.target) targetStack.push(Dep.target)\n  Dep.target = _target\n}\n\nexport function popTarget () {\n  // 当嵌套的依赖收集任务完成后，将 target 恢复为上一层的 Watcher，并继续做依赖收集\n  Dep.target = targetStack.pop()\n}\n```\n\n### Result\n总结一下依赖收集、动态计算的流程：\n1. data 属性初始化 getter setter\n2. computed 计算属性初始化，提供的函数将用作属性 vm.reversedMessage 的 getter\n3. 当首次获取 reversedMessage 计算属性的值时，Dep 开始依赖收集\n4. 在执行 message getter 方法时，如果 Dep 处于依赖收集状态，则判定 message 为 reversedMessage 的依赖，并建立依赖关系\n5. 当 message 发生变化时，根据依赖关系，触发 reverseMessage 的重新计算\n到此，整个 Computed 的工作流程就理清楚了。','https://cdn.html-js.cn/cms/upload/images/img20180105165333.png','2018-01-05 08:53:43','2020-08-20 15:44:04'),(224,'Nodejs cms内容管理框架 DoraCMS v2.0.2 版本更新 ','DoraCMS v2.0.2 版本更新 ','1','1','','','2',NULL,'','群众的力量是伟大的，近期童鞋们针对目前doracms存在的问题提出来很多建设性的建议，也提出了遇到的问题和存在的bug','1','','','0:01',762,'2','0',NULL,0,'0',223886,'<p class=\"p1\">群众的力量是伟大的，近期童鞋们针对目前<span class=\"s1\">doracms</span>存在的问题提出来很多建设性的建议，也提出了遇到的问题和存在的<span class=\"s1\">bug</span>，<span class=\"s2\">在这里要特别感谢</span>@PirateD <span class=\"s2\">和</span><span class=\"Apple-converted-space\">&nbsp; </span><a href=\"https://github.com/amor520\" target=\"_blank\" title=\"amor520\">@amor520</a> &nbsp;<span class=\"s2\">以及</span><a href=\"https://github.com/dolare\" target=\"_blank\" title=\"dolare\">@dolare</a><strong><span class=\"s2\">，</span></strong><span class=\"s2\">提出建议和贡献代码，</span></p><p class=\"p1\">具体修复问题如下：</p><p class=\"p3\"><br/></p><p class=\"p1\"><span class=\"s1\">1</span>、升级<span class=\"s1\">log4js</span>到最新版本</p><p class=\"p1\"><span class=\"s1\">2</span>、前台后台实现懒加载<span class=\"s1\"> </span><span style=\"color: rgb(255, 0, 0);\">[重要]</span></p><p class=\"p1\"><span class=\"s1\">3</span>、优化管理界面首页布局，增加权限预览</p><p class=\"p1\"><span class=\"s1\">4</span>、优化了后台导航交互</p><p class=\"p1\"><span class=\"s1\">5</span>、修复后台更改分页数<span class=\"s1\">pageSize</span>，查询结果不变的问题</p><p class=\"p1\"><span class=\"s1\">6</span>、修复某些情况下，后台查询关键字后，分页显示错误的问题<span class=\"s1\"> </span><span style=\"color: rgb(255, 0, 0);\">[重要]</span></p><p class=\"p1\"><span class=\"s1\">7</span>、修复某些情况下，数据备份压缩包内容为空的问题<span style=\"color: rgb(255, 0, 0);\"> [重要]</span></p><p class=\"p1\"><span class=\"s1\">8</span>、优化前台个人中心布局，添加修改用户头像功能</p><p class=\"p1\"><span class=\"s1\">9</span>、登录，注册，搜索支持回车键</p><p class=\"p1\"><span class=\"s1\">10</span>、修复管理员管理中点击编辑按钮后，<span class=\"s1\">datatable</span>中<span class=\"s1\">group</span>清空的问题</p><p class=\"p2\">11<span class=\"s2\">、其它</span>bug<span class=\"s2\">修复</span></p><p class=\"p3\"><br/></p><p class=\"p1\">更新方法：</p><p class=\"p2\">1<span class=\"s2\">、</span>checkout <span class=\"s2\">最新</span> 2.0.2<span class=\"s2\">代码</span></p><p class=\"p2\">2<span class=\"s2\">、删除</span> node_modules<span class=\"s2\">,重新安装依赖包</span></p><p class=\"p2\">3<span class=\"s2\">、启动数据库，执行</span>npm run dev</p><p class=\"p3\"><br/></p><p class=\"p2\"><span class=\"s2\">源码下载(</span>github<span class=\"s2\">)：<span style=\"color: rgb(0, 112, 192);\"><a href=\"https://github.com/doramart/DoraCMS\">DoraCMS</a></span></span></p><p class=\"p2\"><span style=\"color: rgb(255, 0, 0); text-decoration: underline;\">PS: 数据备份由于在 nodejs v8.0.0 的bug会产生问题，建议升级到 v8.1.0或以上，问题解决</span></p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"群众的力量是伟大的，近期童鞋们针对目前doracms存在的问题提出来很多建设性的建议，也提出了遇到的问题和存在的bug，在这里要特别感谢@PirateD 和  @amor520  以及@dolare，提出建议和贡献代码，\\n具体修复问题如下：\\n\\n1、升级log4js到最新版本\\n2、前台后台实现懒加载 [重要]\\n3、优化管理界面首页布局，增加权限预览\\n4、优化了后台导航交互\\n5、修复后台更改分页数pageSize，查询结果不变的问题\\n6、修复某些情况下，后台查询关键字后，分页显示错误的问题 [重要]\\n7、修复某些情况下，数据备份压缩包内容为空的问题 [重要]\\n8、优化前台个人中心布局，添加修改用户头像功能\\n9、登录，注册，搜索支持回车键\\n10、修复管理员管理中点击编辑按钮后，datatable中group清空的问题\\n11、其它bug修复\\n\\n更新方法：\\n1、checkout 最新 2.0.2代码\\n2、删除 node_modules,重新安装依赖包\\n3、启动数据库，执行npm run dev\\n\\n源码下载(github)：DoraCMS\\nPS: 数据备份由于在 nodejs v8.0.0 的bug会产生问题，建议升级到 v8.1.0或以上，问题解决\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/img20171115184951.jpg','2017-11-15 10:52:43','2020-11-07 06:39:28'),(225,'Nodejs cms内容管理框架 DoraCMS v2.0.0 版本更新','DoraCMS v2.0.0版本更新','1','1','','','2',NULL,'','DoraCMS 近期修复了一些重要bug，也做了一系列的优化，主要细节如下：\n1、生产环境日志目录可配置，修复用户部署生产报路径找不到的问题\n2、新增广告管理模块，修复多图轮播显示不正常的问题','1','','','0:01',762,'2','0',NULL,0,'0',225872,'<p style=\"text-align: center;\"><img src=\"http://7xkrk4.com1.z0.glb.clouddn.com/doracms2.jpg\" width=\"500\" height=\"300\" title=\"DoraCMS 内容管理系统\" alt=\"DoraCMS 内容管理系统\"/></p><p><br/></p><p>DoraCMS 近期修复了一些重要bug，也做了一系列的优化，主要细节如下：</p><p><br/></p><p class=\"p1\"><span class=\"s1\">1</span>、生产环境日志目录可配置，修复用户部署生产报路径找不到的问题</p><p class=\"p1\"><span class=\"s1\">2</span>、新增广告管理模块，修复多图轮播显示不正常的问题</p><p class=\"p1\"><span class=\"s1\">3</span>、修复删除文章没有同步删除关联留言的问题</p><p class=\"p1\"><span class=\"s1\">4</span>、更新前端后台样式</p><p class=\"p1\"><span class=\"s1\">5</span>、修复留言过滤特殊字符的问题</p><p class=\"p1\"><span class=\"s1\">6</span>、添加了留言回复功能</p><p class=\"p1\"><span class=\"s1\">7</span>、修复文章上传缩略图某些<span class=\"s1\">jpg</span>文件无法上传的问题</p><p class=\"p1\"><span class=\"s1\">8</span>、完善了后台首页信息总览</p><p class=\"p1\"><span class=\"s1\">9</span>、修复了后台修改其它管理员权限会把自己的权限置空的问题</p><p class=\"p2\"><br/></p><p class=\"p1\">更新方法：<span class=\"s1\"><span class=\"Apple-converted-space\">&nbsp;</span></span></p><p class=\"p3\">1<span class=\"s2\">、</span>checkout <span class=\"s2\">最新</span> 2.0.0 <span class=\"s2\">代码</span></p><p class=\"p3\">2<span class=\"s2\">、删除</span> node_modules<span class=\"s2\">,重新安装依赖包</span></p><p class=\"p3\">3<span class=\"s2\">、找到</span> utils/settings.js<span class=\"s2\">，将</span> SYSTEMLOGPATH <span class=\"s2\">参数值修改为正式服务器上(生产环境)的日志目录(</span>very important!<span class=\"s2\">)</span></p><p class=\"p3\">4<span class=\"s2\">、启动数据库，执行</span>npm run dev<span class=\"Apple-converted-space\">&nbsp;</span></p><p><br/></p>','[{\"type\":\"image\",\"content\":\"http://7xkrk4.com1.z0.glb.clouddn.com/doracms2.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\nDoraCMS 近期修复了一些重要bug，也做了一系列的优化，主要细节如下：\\n\\n1、生产环境日志目录可配置，修复用户部署生产报路径找不到的问题\\n2、新增广告管理模块，修复多图轮播显示不正常的问题\\n3、修复删除文章没有同步删除关联留言的问题\\n4、更新前端后台样式\\n5、修复留言过滤特殊字符的问题\\n6、添加了留言回复功能\\n7、修复文章上传缩略图某些jpg文件无法上传的问题\\n8、完善了后台首页信息总览\\n9、修复了后台修改其它管理员权限会把自己的权限置空的问题\\n\\n更新方法： \\n1、checkout 最新 2.0.0 代码\\n2、删除 node_modules,重新安装依赖包\\n3、找到 utils/settings.js，将 SYSTEMLOGPATH 参数值修改为正式服务器上(生产环境)的日志目录(very important!)\\n4、启动数据库，执行npm run dev \\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/img20171009111107.jpg','2017-10-09 03:15:24','2020-08-20 15:44:05'),(226,'DoraCMS 远程帮助','DoraCMS 远程服务','1','1','','','2',NULL,NULL,'DoraCMS 完全免费，您可以基于DoraCMS根据自己项目实际情况进行开发。 ','1','http://cdn.html-js.cn/payme.jpg','','0:01',762,'2','0',NULL,NULL,NULL,221759,'<p class=\"p1\"><span style=\"font-size: 16px; color: rgb(31, 73, 125);\">&nbsp; DoraCMS 基于nodejs 和 mongodb ，完全免费，您可以基于DoraCMS根据自己项目实际情况进行开发。</span></p><p class=\"p1\"><span style=\"font-size: 16px; color: rgb(31, 73, 125);\">&nbsp; DoraCMS 的设计思想很简单，以简洁为原则，结构清晰，非常容易定制和二次开发，当然在开发过程中也吸取了优秀框架一些可取之处。</span></p><p class=\"p1\"><span style=\"font-size: 16px; color: rgb(31, 73, 125);\">&nbsp; DoraCMS 维护至今有四个年头，有很多中小企业使用DoraCMS的<a href=\"https://www.html-js.cn/cmscase___SkCL09aCb\" target=\"_self\" title=\"建站案例\">建站案例</a>，我们也在根据线上遇到的问题不断完善，DoraCMS会一直维护下去。</span></p><p class=\"p2\"><br/></p><p class=\"p1\"><span style=\"font-size: 16px; color: rgb(31, 73, 125);\">在使用DoraCMS的过程中，您可能会遇到：&nbsp;</span></p><p class=\"p1\"><span style=\"color: rgb(31, 73, 125);\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(79, 129, 189); font-size: 16px;\">1、环境搭建</span></span></p><p class=\"p1\"><span style=\"color: rgb(31, 73, 125);\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(79, 129, 189); font-size: 16px;\">2、代码部署</span></span></p><p class=\"p1\"><span style=\"color: rgb(31, 73, 125);\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(79, 129, 189); font-size: 16px;\">3、开发建议</span></span></p><p class=\"p3\"><span style=\"color: rgb(31, 73, 125);\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(79, 129, 189); font-size: 16px;\">… 等方面的问题</span></span></p><p class=\"p2\"><br/></p><p class=\"p1\"><span style=\"font-size: 16px; color: rgb(31, 73, 125);\">如果需要帮助， 请联系：</span></p><p class=\"p2\"><br/></p><p class=\"p3\"><span style=\"font-size: 16px; color: rgb(31, 73, 125);\">QQ: 305511094</span></p><p class=\"p3\"><span style=\"font-size: 16px; color: rgb(31, 73, 125);\">QQ交流群：524385285</span></p><p class=\"p3\"><span style=\"font-size: 16px; color: rgb(31, 73, 125);\">Wechat : doramart</span></p><p class=\"p4\"><span style=\"font-size: 16px; color: rgb(31, 73, 125);\">Email : <a href=\"mailto:doramart@qq.com\">doramart#qq.com</a></span></p><p class=\"p4\"><span style=\"font-size: 16px; color: rgb(31, 73, 125);\">Github: <a href=\"https://github.com/doramart/DoraCMS\">https://github.com/doramart/DoraCMS</a></span></p><p class=\"p4\"><span style=\"font-size: 16px; color: rgb(31, 73, 125);\">Blog: <a href=\"https://www.html-js.cn\">https://www.html-js.cn</a></span></p><p class=\"p2\"><span style=\"font-size: 16px; color: rgb(31, 73, 125);\"><br/></span></p><p class=\"p2\"><span style=\"font-size: 16px; color: rgb(31, 73, 125);\"><span style=\"color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; background-color: rgb(255, 255, 255);\">如果你发现DoraCMS很有用，可以请生哥喝杯咖啡(⊙o⊙)哦</span></span></p><p class=\"p2\"><span style=\"font-size: 16px; color: rgb(31, 73, 125);\"><img src=\"http://cdn.html-js.cn/payme.jpg\" width=\"600\"/></span></p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"  DoraCMS 基于nodejs 和 mongodb ，完全免费，您可以基于DoraCMS根据自己项目实际情况进行开发。\\n  DoraCMS 的设计思想很简单，以简洁为原则，结构清晰，非常容易定制和二次开发，当然在开发过程中也吸取了优秀框架一些可取之处。\\n  DoraCMS 维护至今有四个年头，有很多中小企业使用DoraCMS的建站案例，我们也在根据线上遇到的问题不断完善，DoraCMS会一直维护下去。\\n\\n在使用DoraCMS的过程中，您可能会遇到： \\n    1、环境搭建\\n    2、代码部署\\n    3、开发建议\\n    … 等方面的问题\\n\\n如果需要帮助， 请联系：\\n\\nQQ: 305511094\\nQQ交流群：524385285\\nWechat : doramart\\nEmail : doramart#qq.com\\nGithub: https://github.com/doramart/DoraCMS\\nBlog: https://www.html-js.cn\\n\\n\\n如果你发现DoraCMS很有用，可以请生哥喝杯咖啡(⊙o⊙)哦\\n\"},{\"type\":\"image\",\"content\":\"http://cdn.html-js.cn/payme.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/img20190220164016.jpg','2019-02-20 08:40:24','2020-08-20 15:44:01'),(227,'[功能预告]DoraCMS的模板模块','DoraCMS的模板模块','1','1',NULL,'模板,风格','2',NULL,'','DoraCMS一直试图用更简单的方式来处理模板，基于ejs的模板引擎也为模板的自定义提供了可能性，接触过DoraCMS的童鞋之前可能对模板模块有点不太明白，其实在之前的操作文档中有一些介绍','1','','','0:01',762,'2','0',NULL,0,'0',223601,'<p style=\"white-space: normal;\">DoraCMS一直试图用更简单的方式来处理模板，基于ejs的模板引擎也为模板的自定义提供了可能性，接触过DoraCMS的童鞋之前可能对模板模块有点不太明白，其实在之前的操作文档中有一些介绍，详情请见&nbsp;<a href=\"http://www.html-js.cn/details/VkldQTPs.html\" target=\"_blank\" title=\"DoraCMS操作文档\">DoraCMS操作文档</a>&nbsp;中的模板模块的相关介绍。之前是这样配的：</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal; text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_47_43_101_1038.jpg\" title=\"\" alt=\"DoraCMS模板1.jpg\"/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">配置了模板单元，在添加类别的时候，可以绑定模板单元，这样显示的内容就是被绑定模板的格式了。但是，仅仅如此并不能满足用户需求，在后台功能完备的情况下，如何能更方便的高度定制化模板呢？</p><p style=\"white-space: normal;\">近期的一些开发我试图把模板剥离出来了，如果可以随意切换风格，岂不是大快人心？</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal; text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_48_12_94_1039.jpg\" title=\"\" alt=\"DoraCMS模板2.jpg\"/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">于是参考了一些知名网站换了一种方式来管理主题，我会提供一套标准化的模板可以让开发者来进行定制的风格修改，上传之后直接切换就可以了，而且，还可以满足不同板块风格可以不同，随意配置，更加灵活，是不是很方便呢？该功能将在下个版本上线，敬请期待喔&nbsp;<img src=\"http://img.baidu.com/hi/face/i_f29.gif\"/>&nbsp;</p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"DoraCMS一直试图用更简单的方式来处理模板，基于ejs的模板引擎也为模板的自定义提供了可能性，接触过DoraCMS的童鞋之前可能对模板模块有点不太明白，其实在之前的操作文档中有一些介绍，详情请见 DoraCMS操作文档 中的模板模块的相关介绍。之前是这样配的：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_47_43_101_1038.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n配置了模板单元，在添加类别的时候，可以绑定模板单元，这样显示的内容就是被绑定模板的格式了。但是，仅仅如此并不能满足用户需求，在后台功能完备的情况下，如何能更方便的高度定制化模板呢？\\n近期的一些开发我试图把模板剥离出来了，如果可以随意切换风格，岂不是大快人心？\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_48_12_94_1039.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n于是参考了一些知名网站换了一种方式来管理主题，我会提供一套标准化的模板可以让开发者来进行定制的风格修改，上传之后直接切换就可以了，而且，还可以满足不同板块风格可以不同，随意配置，更加灵活，是不是很方便呢？该功能将在下个版本上线，敬请期待喔 \"},{\"type\":\"image\",\"content\":\"http://img.baidu.com/hi/face/i_f29.gif\"},{\"type\":\"contents\",\"content\":\" \\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1449311078000.jpg','2015-12-05 10:25:00','2020-08-20 15:44:14'),(228,'第4天 路由','第4天 路由','2','1','','路由','2',NULL,'','今天我们首先要做的，是让stuwebfk框架具有路由功能，如果没有路由功能，就很难加入动态模板页功能和应用层功能的划分。','1','','','0:01',762,'2','0',NULL,0,'0',224209,'<h3>第4天 路由</h3><p>今天我们首先要做的，是让stuwebfk框架具有路由功能，如果没有路由功能，就很难加入动态模板页功能和应用层功能的划分。</p><p>路由可以说是web服务器最重要的功能之一。路由功能是根据url进行路由的，根据不同的url自定义的规则，进入不同的url资源处理器，处理后响应结果。之前stuwebfk对GET/POST方法进行了路由，但还无法对url进行路由。</p><p>路由实现后，我们将回顾一下本周的各个知识点，总结一下。好，开始今天的开发旅程！<span class=\"invade-word\"></span></p>','[{\"type\":\"contents\",\"content\":\"第4天 路由\\n今天我们首先要做的，是让stuwebfk框架具有路由功能，如果没有路由功能，就很难加入动态模板页功能和应用层功能的划分。\\n路由可以说是web服务器最重要的功能之一。路由功能是根据url进行路由的，根据不同的url自定义的规则，进入不同的url资源处理器，处理后响应结果。之前stuwebfk对GET/POST方法进行了路由，但还无法对url进行路由。\\n路由实现后，我们将回顾一下本周的各个知识点，总结一下。好，开始今天的开发旅程！\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444892098000.jpg','2015-09-20 10:51:25','2020-08-20 15:44:24'),(229,'Node.js API实例讲解——FS文件操作','FS文件操作','2','1','','nodejs,FS文件操作','2',NULL,'','写文件的意思感觉是写一个文件，准确来说，这里的写文件是把数据写入到一个文件中，当文件不存在时会创建一个文件。那么细化来看，过程应该是先打开一个文件，如果文件不存在就创建一个新的文件，然后把数据写入这个文件。','1','','','0:01',762,'2','0',NULL,0,'0',228327,'<h3>FS文件操作</h3><h5 id=\"-\">写文件</h5><p>写文件的意思感觉是写一个文件，准确来说，这里的写文件是把数据写入到一个文件中，当文件不存在时会创建一个文件。那么细化来看，过程应该是先打开一个文件，如果文件不存在就创建一个新的文件，然后把数据写入这个文件。</p><p>打开文件使用fs.open方法，写入数据使用fs.write方法，先做个例子。</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\nfs.open(&quot;new.txt&quot;,&quot;w&quot;,function(err,fd){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer(&quot;你好啊&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;fs.write(fd,buf,0,buf.length,0,function(err,written,buffer){});\n})</pre><p>首先打开文件new.txt，然后写入“你好啊”数据。说起来容易，同时发现这里有很多参数。下面将详细介绍open和write方法。</p><h5 id=\"fs-open-path-flags-callback-\">fs.open(path, flags, callback)</h5><p>fs.openSync(path,flags) 是同步方法，return fd,如果有错误直接throw抛出错误。</p><p>path 参数，表示要打开文件的路径，flags标志参数，它限制打开的文件是可读、可写或可读写等方式，callback(err,fd)回调方法中fd表示打开文件的文件描述符。这里不好理解的是flags标志参数。</p><p>flags 参数可使用标志：</p><p>&quot;r&quot; 表示，打开文件进行读取。如果该文件不存在，将发生异常。</p><p>&quot;r+&quot; 表示，打开文件进行读取和写入。如果该文件不存在，将发生异常。</p><p>&quot;rs&quot; 与 &quot;r&quot; 一样，但采用同步方式，这个方式很消耗性能，一般情况下不会用到。</p><p>&quot;rs+&quot; 与 &quot;r+&quot; 一样，但采用同步方式，这个方式很消耗性能，一般情况下不会用到。</p><p>&quot;w&quot; 表示，打开文件进行写入。如果文件不存在会创建一个文件，这种写入方式会全部删除旧有的数据，然后再写入数据。</p><p>&quot;w+&quot; 表示，打开文件进行读取和写入。如果文件不存在会创建一个文件，这种写入方式会全部删除旧有的数据，然后再写入数据。</p><p>&quot;wx&quot; 和 &quot;w&quot; 相同，不同的是它是独占模式。</p><p>&quot;wx+&quot; 和 &quot;w+&quot; 相同，不同的是它是独占模式。</p><p>&quot;a&quot; 表示，打开文件进行追加，如果文件不存在会创建一个文件，这个模式不同于&quot;w&quot;，它不会删除旧有的数据，而是会在后面追加数据。</p><p>&quot;a+&quot; &nbsp;表示，打开文件进行追加和读取，如果文件不存在会创建一个文件，这个模式不同于&quot;w&quot;，它不会删除旧有的数据，而是会在后面追加数据。</p><p>&quot;ax&quot; 和 &quot;a&quot; 相同，不同的是它是独占模式。</p><p>&quot;ax+&quot; 和 &quot;ax&quot; 相同，不同的是它是独占模式。</p><p>OK！看起来好多，还是做一些例子吧。</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\nfs.open(&quot;new.txt&quot;,&quot;r&quot;,function(err,fd){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer(&quot;你好啊&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;c&nbsp;=&nbsp;fs.writeSync(fd,buf,0,buf.length,0);\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(c)\n})</pre><p>上面的例子，只是把&quot;w&quot;改成&quot;r&quot;，前提是new.txt文件存在，运行后，会出现错误提示，大概意思是无权写入。</p><pre class=\"code\">Error:&nbsp;EPERM,&nbsp;operation&nbsp;not&nbsp;permitted</pre><p>原因不言而喻，&quot;r&quot;表示只能被读，而不能写入。</p><p>下面这个例子用于说明&quot;a&quot;追加 和 &quot;w&quot;写入模式的差异，这个例子前提是，有一个已存在的new.txt文件，文件内有“你好啊”数据。</p><p>&quot;w&quot;模式</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\nfs.open(&quot;new.txt&quot;,&quot;w&quot;,function(err,fd){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer(&quot;1234&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;fs.writeSync(fd,buf,0,buf.length,0);\n})</pre><p>运行后，打开new.txt内容是“1234”而旧有的数据消失了。</p><p>我们在把new.txt文件内容改成“你好啊”，然后把&quot;w&quot;改成&quot;a&quot;，运行！</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\nfs.open(&quot;new.txt&quot;,&quot;a&quot;,function(err,fd){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer(&quot;1234&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;fs.writeSync(fd,buf,0,buf.length,0);\n})</pre><p>运行后，打开文件new.txt文件，内容是“你好啊1234”。</p><h5 id=\"fs-write-fd-buffer-offset-length-position-callback-\">fs.write(fd, buffer, offset, length, position, callback)</h5><p>fs.writeSync(fd, buffer, offset, length, position) 方法是同步写入，它返回写入多少bytes数量。</p><p>fd参数，文件描述符，通过fs.open得到。</p><p>buffer参数，是要写入的数据，Buffer对象，buffer尺寸的大小设置最好是8的倍数，效率较高。</p><p><span class=\"invade-word\">yellow</span>offset参数，要写入buffer的起始位置。</p><p>length参数，要写入buffer的长度。通过offset和length规定buffer中那些数据应该被写入到文件。</p><p>position参数，写入到文件的什么位置。</p><p>callback((err, written, buffer)回调方法，当出现异常会抛出err，written是写入了多少bytes，buffer写入的数据。</p><p>fs.open 打开了文件，当然使用后应该关闭close文件，通过fs.close(fd, callback)和fs.closeSync(fd)方法可以关闭打开的文件，这个方法比较简单，不再多说。</p><p>上面写入方法是通过open得到fd（文件描述符）然后再写入文件的方式，其实还有其他方法。</p><h5 id=\"fs-writefile-filename-data-options-callback-\">fs.writeFile(filename, data, [options], callback)</h5><p>fs.writeFileSync(filename, data, [options]) 同步方式。</p><p>filename String类型， 文件名称。</p><p>data String | Buffer类型，要写入的数据。</p><p>options[可选] Objectl 类型，默认值 {encoding:&quot;utf8&quot;,flag:&quot;w&quot;}</p><p>callback(err) 回调函数</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\nfs.writeFile(&quot;myfile.txt&quot;,&quot;Javascript很赞&quot;,function(err){\n&nbsp;&nbsp;&nbsp;&nbsp;if(!err)\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;写入成功！&quot;)\n})</pre><h5 id=\"fs-appendfile-filename-data-options-callback-\">fs.appendFile(filename, data, [options], callback)</h5><p>fs.appendFileSync(filename, data, [options]) 同步方式。</p><p>参看 fs.writeFile 方法，差别就是 [options]的flag默认值是&quot;a&quot;，所以它以追加方式写入数据。</p><h5 id=\"-\">读文件</h5><p>有了前面的写文件，读文件就好办多了，还是老规矩，先写代码再做说明，但这次结合之前学到的，开发一个判断文件是否是png格式图片文件的程序。</p><p>假设当前目录下有个1.png文件，我们来判断这个文件是png图片。</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\nfs.open(&quot;1.png&quot;,&quot;r&quot;,function(err,fd){\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;PNG头部&nbsp;8&nbsp;bytes是固定的，来判断文件前8bytes。\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;header&nbsp;=&nbsp;new&nbsp;Buffer([137,80,78,71,13,10,26,10]);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer(8);\n&nbsp;&nbsp;&nbsp;&nbsp;fs.read(fd,buf,0,buf.length,0,function(err,bytesRead,buffer){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(header.toString()&nbsp;===&nbsp;buffer.toString()){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;是PNG格式图片文件&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;})&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n})</pre><p>分析这个程序，先是用fs.open打开1.png文件，然后header数据是PNG图片标识数据，位于PNG图片前8个bytes，只要读取1.png文件前8bytes数据，然后对比一下数据是否一致就可以了。</p><h5 id=\"fs-read-fd-buffer-offset-length-position-callback-\">fs.read(fd, buffer, offset, length, position, callback)</h5><p>fs.read(fd, buffer, offset, length, position) 方法是同步写入，它返回读取了多少bytes数量。</p><p>fd参数，文件描述符，通过fs.open得到。</p><p>buffer参数，是把读取的数据写入这个对象，是个Buffer对象。</p><p>offset参数，写入buffer的起始位置。</p><p>length参数，写入buffer的长度。</p><p>position参数，文件的什么位置开始读。</p><p>callback(err,bytesRead, buffer)回调方法，当出现异常会抛出err，bytesRead是读取了多少bytes，buffer读取到的数据。</p><p>和写文件同样的，除了fs.read方式读取文件外，还有一个读取文件的方式。</p><h5 id=\"fs-readfile-filename-options-callback-\">fs.readFile(filename, [options], callback)</h5><p>fs.readFileSync(filename,[options]) 同步方式，retur读取到的数据。</p><p>filename String类型，表示要读取的文件名</p><p>options[可选] Object类型，默认值是 {encoding:null,flag:&quot;r&quot;}</p><p>callback(err,data) 回调函数，data表示读取的数据。</p><p>例</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\nvar&nbsp;data&nbsp;=&nbsp;fs.readFileSync(&quot;myfile.txt&quot;);\nconsole.log(data.toString());</pre><h5 id=\"-\">小结一下</h5><p>读取和写入都有两种不同方式，一个是先open，然后操作读写，但需要手工调用fs.close关闭文件，这种方式适合于多次写入或读取。还有一次性服务的，writeFile/appendFile/readFile方法只是写入或读取一次，内部自动调用了fs.close方法。</p><p>上面两个小节内容稍微多了一点，以下几节内容相对轻松了，现在可以稍微休息一下。</p><h5 id=\"-\">截断文件</h5><p>截断文件，说白了就是把整个文件内容删除了，然后再加入new Buffer(len)的空数据，这个方法多数情况没什么用。以下是方法。</p><p>fs.ftruncate(fd, len, callback)</p><p>fs.ftruncateSync(fd, len)</p><p>fs.truncate(path, len, callback)</p><p>fs.truncateSync(path, len)</p><p>这些方法很简单，做个例子说明一下。</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\nfs.open(&quot;myfile.txt&quot;,&quot;w&quot;,function(err,fd){\n&nbsp;&nbsp;&nbsp;&nbsp;fs.ftruncate(fd,5,function(err){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(err)\n&nbsp;&nbsp;&nbsp;&nbsp;})\n})</pre><pre class=\"code\">fs.truncateSync(&quot;myfile.txt&quot;,5);</pre><h5 id=\"-\">文件链接</h5><p>文件链接在“文件系统概述”中用官方口气介绍了一次。但通俗点更好理解，说白了就是为一个文件创建一个特殊的链接，这个链接看起来像是一个文件，和快捷方式很像，这样理解就可了，熟悉linux &nbsp;ln命令的对文件链接会很熟悉这个概念。</p><p>还是先做实例，再说明。</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\nfs.linkSync(&quot;file.txt&quot;,&quot;filelink.txt&quot;);</pre><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\nfs.link(&quot;file.txt&quot;,&quot;filelink.txt&quot;,function(err){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(err);\n});</pre><p>上面代码是为file.txt文件创建个“链接文件”filelink.txt，创建成功后，如果更改其中任何一个文件，相应的那个文件都会改变。</p><h5 id=\"-\">更改文件的查看和更新时间</h5><p>这个很好理解，查看文件属性时，会看到文件的创建事件、更改时间、查看事件。看以下代码。</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\nfs.utimes(\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;file.txt&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;Date(&quot;1982-2-2&quot;),\n&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;Date(&quot;1988-5-5&quot;),\n&nbsp;&nbsp;&nbsp;&nbsp;function(err){}\n);</pre><p>上面代码的意思是，把file.txt文件的查看时间改成1982/2/2，最新更改时间改成1988/5/5。</p><h5 id=\"fs-utimes-path-atime-mtime-callback-\">fs.utimes(path, atime, mtime, callback)</h5><p>fs.utimesSync(path, atime, mtime) 同步方式</p><p>path:String &nbsp;更改的文件名字路径。</p><p>atime:Date 查看时间。</p><p>mtime:Date 更改时间。</p><p>callback(err) 回调函数。</p><h5 id=\"fs-futimes-fd-atime-mtime-callback-\">fs.futimes(fd, atime, mtime, callback)</h5><p>fs.futimesSync(fd, atime, mtime)</p><p>和utimes方法一样，只不过第一个参数是 fd 文件描述符。</p><h5 id=\"-\">监听文件</h5><p>参看：“文件夹操作”一节。</p><p>在“文件夹操作”一节介绍了一种监听方式，下面还有一种专门监听文件的方法。</p><h5 id=\"fs-watchfile-filename-options-listener-\">fs.watchFile(filename, [options], listener)</h5><p>这个方法添加文件更改监听器。</p><p>filename:String 要监听的文件名。</p><p>options[可选]:Object，默认值是{ persistent: true, interval: 5007 } , persistent表示是否持久运作，这个意思是，true的时候当前process进程不会退出，如果是false，就不会阻止当前进程退出，不过可以使用 setInterval 方法模拟 persistent:true 。 interval 表示监听间隔，以毫秒为单位。</p><p>listener(currentStat,previousStat)，监听器，一旦文件有变化就会触发这个回调函数，currentStat是更改后当前的文件状态，previousStat表示更改前的状态，这两个参数是fs.Stats类型。（参看“文件夹操作”一节）。</p><h5 id=\"fs-unwatchfile-filename-listener-\">fs.unwatchFile(filename, [listener])</h5><p>这个方法是停止监听的意思。</p><p>filename 要停止监听的文件名。</p><p>listener[可选]，表示要停止监听的监听器。如果不指定，那么将会停止全部监听文件的监听器。</p><p>例</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\nvar&nbsp;handle1&nbsp;=&nbsp;function(event,filename){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;1&quot;)\n}\nvar&nbsp;handle2&nbsp;=&nbsp;function(event,filename){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;2&quot;)\n}\nfs.watchFile(&quot;file.txt&quot;,handle1);\nfs.watchFile(&quot;file.txt&quot;,handle2);\n\nsetTimeout(function(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fs.unwatchFile(&quot;file.txt&quot;,handle1);\n},20000)</pre><p>这里有两个监听器 handle1和handle2，当更改file.txt内容时，终端会打印出1 2，当20秒之后，再次更改file.txt文件，会发现终端只打印出 2 ，因为handle1已经被撤销了。</p>','[{\"type\":\"contents\",\"content\":\"FS文件操作\\n写文件\\n写文件的意思感觉是写一个文件，准确来说，这里的写文件是把数据写入到一个文件中，当文件不存在时会创建一个文件。那么细化来看，过程应该是先打开一个文件，如果文件不存在就创建一个新的文件，然后把数据写入这个文件。\\n打开文件使用fs.open方法，写入数据使用fs.write方法，先做个例子。\\nvar fs = require(\\\"fs\\\");\\nfs.open(\\\"new.txt\\\",\\\"w\\\",function(err,fd){\\n    var buf = new Buffer(\\\"你好啊\\\");\\n    fs.write(fd,buf,0,buf.length,0,function(err,written,buffer){});\\n})\\n首先打开文件new.txt，然后写入“你好啊”数据。说起来容易，同时发现这里有很多参数。下面将详细介绍open和write方法。\\nfs.open(path, flags, callback)\\nfs.openSync(path,flags) 是同步方法，return fd,如果有错误直接throw抛出错误。\\npath 参数，表示要打开文件的路径，flags标志参数，它限制打开的文件是可读、可写或可读写等方式，callback(err,fd)回调方法中fd表示打开文件的文件描述符。这里不好理解的是flags标志参数。\\nflags 参数可使用标志：\\n\\\"r\\\" 表示，打开文件进行读取。如果该文件不存在，将发生异常。\\n\\\"r+\\\" 表示，打开文件进行读取和写入。如果该文件不存在，将发生异常。\\n\\\"rs\\\" 与 \\\"r\\\" 一样，但采用同步方式，这个方式很消耗性能，一般情况下不会用到。\\n\\\"rs+\\\" 与 \\\"r+\\\" 一样，但采用同步方式，这个方式很消耗性能，一般情况下不会用到。\\n\\\"w\\\" 表示，打开文件进行写入。如果文件不存在会创建一个文件，这种写入方式会全部删除旧有的数据，然后再写入数据。\\n\\\"w+\\\" 表示，打开文件进行读取和写入。如果文件不存在会创建一个文件，这种写入方式会全部删除旧有的数据，然后再写入数据。\\n\\\"wx\\\" 和 \\\"w\\\" 相同，不同的是它是独占模式。\\n\\\"wx+\\\" 和 \\\"w+\\\" 相同，不同的是它是独占模式。\\n\\\"a\\\" 表示，打开文件进行追加，如果文件不存在会创建一个文件，这个模式不同于\\\"w\\\"，它不会删除旧有的数据，而是会在后面追加数据。\\n\\\"a+\\\"  表示，打开文件进行追加和读取，如果文件不存在会创建一个文件，这个模式不同于\\\"w\\\"，它不会删除旧有的数据，而是会在后面追加数据。\\n\\\"ax\\\" 和 \\\"a\\\" 相同，不同的是它是独占模式。\\n\\\"ax+\\\" 和 \\\"ax\\\" 相同，不同的是它是独占模式。\\nOK！看起来好多，还是做一些例子吧。\\nvar fs = require(\\\"fs\\\");\\nfs.open(\\\"new.txt\\\",\\\"r\\\",function(err,fd){\\n    var buf = new Buffer(\\\"你好啊\\\");\\n    var c = fs.writeSync(fd,buf,0,buf.length,0);\\n    console.log(c)\\n})\\n上面的例子，只是把\\\"w\\\"改成\\\"r\\\"，前提是new.txt文件存在，运行后，会出现错误提示，大概意思是无权写入。\\nError: EPERM, operation not permitted\\n原因不言而喻，\\\"r\\\"表示只能被读，而不能写入。\\n下面这个例子用于说明\\\"a\\\"追加 和 \\\"w\\\"写入模式的差异，这个例子前提是，有一个已存在的new.txt文件，文件内有“你好啊”数据。\\n\\\"w\\\"模式\\nvar fs = require(\\\"fs\\\");\\nfs.open(\\\"new.txt\\\",\\\"w\\\",function(err,fd){\\n    var buf = new Buffer(\\\"1234\\\");\\n    fs.writeSync(fd,buf,0,buf.length,0);\\n})\\n运行后，打开new.txt内容是“1234”而旧有的数据消失了。\\n我们在把new.txt文件内容改成“你好啊”，然后把\\\"w\\\"改成\\\"a\\\"，运行！\\nvar fs = require(\\\"fs\\\");\\nfs.open(\\\"new.txt\\\",\\\"a\\\",function(err,fd){\\n    var buf = new Buffer(\\\"1234\\\");\\n    fs.writeSync(fd,buf,0,buf.length,0);\\n})\\n运行后，打开文件new.txt文件，内容是“你好啊1234”。\\nfs.write(fd, buffer, offset, length, position, callback)\\nfs.writeSync(fd, buffer, offset, length, position) 方法是同步写入，它返回写入多少bytes数量。\\nfd参数，文件描述符，通过fs.open得到。\\nbuffer参数，是要写入的数据，Buffer对象，buffer尺寸的大小设置最好是8的倍数，效率较高。\\nyellowoffset参数，要写入buffer的起始位置。\\nlength参数，要写入buffer的长度。通过offset和length规定buffer中那些数据应该被写入到文件。\\nposition参数，写入到文件的什么位置。\\ncallback((err, written, buffer)回调方法，当出现异常会抛出err，written是写入了多少bytes，buffer写入的数据。\\nfs.open 打开了文件，当然使用后应该关闭close文件，通过fs.close(fd, callback)和fs.closeSync(fd)方法可以关闭打开的文件，这个方法比较简单，不再多说。\\n上面写入方法是通过open得到fd（文件描述符）然后再写入文件的方式，其实还有其他方法。\\nfs.writeFile(filename, data, [options], callback)\\nfs.writeFileSync(filename, data, [options]) 同步方式。\\nfilename String类型， 文件名称。\\ndata String | Buffer类型，要写入的数据。\\noptions[可选] Objectl 类型，默认值 {encoding:\\\"utf8\\\",flag:\\\"w\\\"}\\ncallback(err) 回调函数\\nvar fs = require(\\\"fs\\\");\\nfs.writeFile(\\\"myfile.txt\\\",\\\"Javascript很赞\\\",function(err){\\n    if(!err)\\n    console.log(\\\"写入成功！\\\")\\n})\\nfs.appendFile(filename, data, [options], callback)\\nfs.appendFileSync(filename, data, [options]) 同步方式。\\n参看 fs.writeFile 方法，差别就是 [options]的flag默认值是\\\"a\\\"，所以它以追加方式写入数据。\\n读文件\\n有了前面的写文件，读文件就好办多了，还是老规矩，先写代码再做说明，但这次结合之前学到的，开发一个判断文件是否是png格式图片文件的程序。\\n假设当前目录下有个1.png文件，我们来判断这个文件是png图片。\\nvar fs = require(\\\"fs\\\");\\nfs.open(\\\"1.png\\\",\\\"r\\\",function(err,fd){\\n    // PNG头部 8 bytes是固定的，来判断文件前8bytes。\\n    var header = new Buffer([137,80,78,71,13,10,26,10]);\\n    var buf = new Buffer(8);\\n    fs.read(fd,buf,0,buf.length,0,function(err,bytesRead,buffer){\\n        if(header.toString() === buffer.toString()){\\n            console.log(\\\"是PNG格式图片文件\\\");\\n        }\\n    })        \\n})\\n分析这个程序，先是用fs.open打开1.png文件，然后header数据是PNG图片标识数据，位于PNG图片前8个bytes，只要读取1.png文件前8bytes数据，然后对比一下数据是否一致就可以了。\\nfs.read(fd, buffer, offset, length, position, callback)\\nfs.read(fd, buffer, offset, length, position) 方法是同步写入，它返回读取了多少bytes数量。\\nfd参数，文件描述符，通过fs.open得到。\\nbuffer参数，是把读取的数据写入这个对象，是个Buffer对象。\\noffset参数，写入buffer的起始位置。\\nlength参数，写入buffer的长度。\\nposition参数，文件的什么位置开始读。\\ncallback(err,bytesRead, buffer)回调方法，当出现异常会抛出err，bytesRead是读取了多少bytes，buffer读取到的数据。\\n和写文件同样的，除了fs.read方式读取文件外，还有一个读取文件的方式。\\nfs.readFile(filename, [options], callback)\\nfs.readFileSync(filename,[options]) 同步方式，retur读取到的数据。\\nfilename String类型，表示要读取的文件名\\noptions[可选] Object类型，默认值是 {encoding:null,flag:\\\"r\\\"}\\ncallback(err,data) 回调函数，data表示读取的数据。\\n例\\nvar fs = require(\\\"fs\\\");\\nvar data = fs.readFileSync(\\\"myfile.txt\\\");\\nconsole.log(data.toString());\\n小结一下\\n读取和写入都有两种不同方式，一个是先open，然后操作读写，但需要手工调用fs.close关闭文件，这种方式适合于多次写入或读取。还有一次性服务的，writeFile/appendFile/readFile方法只是写入或读取一次，内部自动调用了fs.close方法。\\n上面两个小节内容稍微多了一点，以下几节内容相对轻松了，现在可以稍微休息一下。\\n截断文件\\n截断文件，说白了就是把整个文件内容删除了，然后再加入new Buffer(len)的空数据，这个方法多数情况没什么用。以下是方法。\\nfs.ftruncate(fd, len, callback)\\nfs.ftruncateSync(fd, len)\\nfs.truncate(path, len, callback)\\nfs.truncateSync(path, len)\\n这些方法很简单，做个例子说明一下。\\nvar fs = require(\\\"fs\\\");\\nfs.open(\\\"myfile.txt\\\",\\\"w\\\",function(err,fd){\\n    fs.ftruncate(fd,5,function(err){\\n        console.log(err)\\n    })\\n})\\nfs.truncateSync(\\\"myfile.txt\\\",5);\\n文件链接\\n文件链接在“文件系统概述”中用官方口气介绍了一次。但通俗点更好理解，说白了就是为一个文件创建一个特殊的链接，这个链接看起来像是一个文件，和快捷方式很像，这样理解就可了，熟悉linux  ln命令的对文件链接会很熟悉这个概念。\\n还是先做实例，再说明。\\nvar fs = require(\\\"fs\\\");\\nfs.linkSync(\\\"file.txt\\\",\\\"filelink.txt\\\");\\nvar fs = require(\\\"fs\\\");\\nfs.link(\\\"file.txt\\\",\\\"filelink.txt\\\",function(err){\\n    console.log(err);\\n});\\n上面代码是为file.txt文件创建个“链接文件”filelink.txt，创建成功后，如果更改其中任何一个文件，相应的那个文件都会改变。\\n更改文件的查看和更新时间\\n这个很好理解，查看文件属性时，会看到文件的创建事件、更改时间、查看事件。看以下代码。\\nvar fs = require(\\\"fs\\\");\\nfs.utimes(\\n    \\\"file.txt\\\",\\n    new Date(\\\"1982-2-2\\\"),\\n    new Date(\\\"1988-5-5\\\"),\\n    function(err){}\\n);\\n上面代码的意思是，把file.txt文件的查看时间改成1982/2/2，最新更改时间改成1988/5/5。\\nfs.utimes(path, atime, mtime, callback)\\nfs.utimesSync(path, atime, mtime) 同步方式\\npath:String  更改的文件名字路径。\\natime:Date 查看时间。\\nmtime:Date 更改时间。\\ncallback(err) 回调函数。\\nfs.futimes(fd, atime, mtime, callback)\\nfs.futimesSync(fd, atime, mtime)\\n和utimes方法一样，只不过第一个参数是 fd 文件描述符。\\n监听文件\\n参看：“文件夹操作”一节。\\n在“文件夹操作”一节介绍了一种监听方式，下面还有一种专门监听文件的方法。\\nfs.watchFile(filename, [options], listener)\\n这个方法添加文件更改监听器。\\nfilename:String 要监听的文件名。\\noptions[可选]:Object，默认值是{ persistent: true, interval: 5007 } , persistent表示是否持久运作，这个意思是，true的时候当前process进程不会退出，如果是false，就不会阻止当前进程退出，不过可以使用 setInterval 方法模拟 persistent:true 。 interval 表示监听间隔，以毫秒为单位。\\nlistener(currentStat,previousStat)，监听器，一旦文件有变化就会触发这个回调函数，currentStat是更改后当前的文件状态，previousStat表示更改前的状态，这两个参数是fs.Stats类型。（参看“文件夹操作”一节）。\\nfs.unwatchFile(filename, [listener])\\n这个方法是停止监听的意思。\\nfilename 要停止监听的文件名。\\nlistener[可选]，表示要停止监听的监听器。如果不指定，那么将会停止全部监听文件的监听器。\\n例\\nvar fs = require(\\\"fs\\\");\\nvar handle1 = function(event,filename){\\n    console.log(\\\"1\\\")\\n}\\nvar handle2 = function(event,filename){\\n    console.log(\\\"2\\\")\\n}\\nfs.watchFile(\\\"file.txt\\\",handle1);\\nfs.watchFile(\\\"file.txt\\\",handle2);\\n\\nsetTimeout(function(){\\n     fs.unwatchFile(\\\"file.txt\\\",handle1);\\n},20000)\\n这里有两个监听器 handle1和handle2，当更改file.txt内容时，终端会打印出1 2，当20秒之后，再次更改file.txt文件，会发现终端只打印出 2 ，因为handle1已经被撤销了。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444889759000.jpg','2015-08-09 13:46:53','2020-08-20 15:44:26'),(230,'第五天——范式路由之泛式路由实现','泛式路由实现','2','1','','范式路由','2',NULL,'','我们把pathRegexp函数作为一个模块保存到 lib/pathRegexp.js 文件中，并给代码加入出口代码 module.exports ，下面是完整的pathRegexp.js代码','1','','','0:01',762,'2','0',NULL,0,'0',223134,'<h3>泛式路由实现</h3><p>我们把<code>pathRegexp</code>函数作为一个模块保存到 <code>lib/pathRegexp.js</code> 文件中，并给代码加入出口代码 <code>module.exports</code> ，下面是完整的pathRegexp.js代码：</p><pre>module.exports&nbsp;=&nbsp;pathRegexp;\nfunction&nbsp;pathRegexp&nbsp;(path){\n&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;=&nbsp;path.replace(/\\?(.*)$/,&quot;&quot;)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;这一步是把所有&nbsp;*&nbsp;替换成正则表达式(.*)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.replace(/((\\*{1}(?=\\/))|(\\*{1}(?=$)))/g,&quot;(.*)&quot;)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;这一步是把所有&nbsp;:xxx&nbsp;替换成正则表达式(.*)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.replace(/(:(.*?(?=\\/)))|(:(.*?(?=$)))/g,&quot;(.*)&quot;)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;这一步是把所有&nbsp;/&nbsp;路径变为匹配正则表达式的&nbsp;\\/&nbsp;的形式\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.replace(/\\//g,&quot;\\\\\\/&quot;)\n\n&nbsp;&nbsp;&nbsp;&nbsp;//这一步，通过生成正则表达式&nbsp;&nbsp;，前后的&nbsp;^&nbsp;和&nbsp;&amp;&nbsp;顾名思义，要严格匹配整个路径。&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;RegExp(&quot;^&quot;+path+&quot;$&quot;);\n}</pre><p>pathRegexp模块定义好后，App.js就可以通过<code>require(&quot;./pathRegexp&quot;)</code>得到模块对象。</p><p>上节我们把app.get和app.post方法进行了修改，但那样还不够，因为我们不能直接保存没处理过的route路由，而应该通过pathRegexp模块进行处理，把路由转换成正则表达式的方式，然后再保存。所以还需要对app.get和app.post方法进一步修改。修改后的代码如下：</p><pre>App.prototype.get&nbsp;=&nbsp;function(route,handle){\n&nbsp;&nbsp;&nbsp;&nbsp;this._route_get_handles.push({route:pathRegexp(route),handle:handle})\n}\n\nApp.prototype.post&nbsp;=&nbsp;function(route,handle){\n&nbsp;&nbsp;&nbsp;&nbsp;this._route_post_handles.push({route:pathRegexp(route),handle:handle})\n}</pre><p>做好这些后，还需要对App.js的部分代码进行修改， this._route_post_handles = {} 和 this._route_get_handles = {} 修改成 this._route_post_handles = [] 和 this._route_get_handles = [] 。</p><p>加入url转换为path，这里使用了node.js的核心模块<code>url</code>，url.parse方法可以把一个url转换为JSON对象，这个JSON对象的pathname属性是一个去掉?xx=xx的url字符串。</p><pre>//&nbsp;把&nbsp;/abc?age=12&nbsp;转为&nbsp;/abc\nvar&nbsp;path&nbsp;=&nbsp;url.parse(req.url).pathname;</pre><p>加入一个findHandle函数用于，用于在 &nbsp;this._route_post_handles = [] 和 this._route_get_handles = [] 里找到客户端request.url 符合的路由处理函数。</p><p>另外，在stuwebfk0.0.3版本中，并没有处理找不到资源的情况，所以加入以下代码。<span class=\"invade-word\"></span></p><pre>res.statusCode&nbsp;=&nbsp;404;\nres.end();</pre><p>下一节，列出App.js 修改后的全部代码，值得注意的是，注释后面加入“ //最新修改 ”字样，表示是今天更新过的最新代码。</p>','[{\"type\":\"contents\",\"content\":\"泛式路由实现\\n我们把pathRegexp函数作为一个模块保存到 lib/pathRegexp.js 文件中，并给代码加入出口代码 module.exports ，下面是完整的pathRegexp.js代码：\\nmodule.exports = pathRegexp;\\nfunction pathRegexp (path){\\n    path = path.replace(/\\\\?(.*)$/,\\\"\\\")\\n\\n                // 这一步是把所有 * 替换成正则表达式(.*)\\n               .replace(/((\\\\*{1}(?=\\\\/))|(\\\\*{1}(?=$)))/g,\\\"(.*)\\\")\\n\\n               // 这一步是把所有 :xxx 替换成正则表达式(.*)\\n               .replace(/(:(.*?(?=\\\\/)))|(:(.*?(?=$)))/g,\\\"(.*)\\\")\\n\\n               // 这一步是把所有 / 路径变为匹配正则表达式的 \\\\/ 的形式\\n               .replace(/\\\\//g,\\\"\\\\\\\\\\\\/\\\")\\n\\n    //这一步，通过生成正则表达式  ，前后的 ^ 和 &amp; 顾名思义，要严格匹配整个路径。  \\n    return new RegExp(\\\"^\\\"+path+\\\"$\\\");\\n}\\npathRegexp模块定义好后，App.js就可以通过require(\\\"./pathRegexp\\\")得到模块对象。\\n上节我们把app.get和app.post方法进行了修改，但那样还不够，因为我们不能直接保存没处理过的route路由，而应该通过pathRegexp模块进行处理，把路由转换成正则表达式的方式，然后再保存。所以还需要对app.get和app.post方法进一步修改。修改后的代码如下：\\nApp.prototype.get = function(route,handle){\\n    this._route_get_handles.push({route:pathRegexp(route),handle:handle})\\n}\\n\\nApp.prototype.post = function(route,handle){\\n    this._route_post_handles.push({route:pathRegexp(route),handle:handle})\\n}\\n做好这些后，还需要对App.js的部分代码进行修改， this._route_post_handles = {} 和 this._route_get_handles = {} 修改成 this._route_post_handles = [] 和 this._route_get_handles = [] 。\\n加入url转换为path，这里使用了node.js的核心模块url，url.parse方法可以把一个url转换为JSON对象，这个JSON对象的pathname属性是一个去掉?xx=xx的url字符串。\\n// 把 /abc?age=12 转为 /abc\\nvar path = url.parse(req.url).pathname;\\n加入一个findHandle函数用于，用于在  this._route_post_handles = [] 和 this._route_get_handles = [] 里找到客户端request.url 符合的路由处理函数。\\n另外，在stuwebfk0.0.3版本中，并没有处理找不到资源的情况，所以加入以下代码。\\nres.statusCode = 404;\\nres.end();\\n下一节，列出App.js 修改后的全部代码，值得注意的是，注释后面加入“ //最新修改 ”字样，表示是今天更新过的最新代码。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444891748000.jpg','2015-10-05 01:32:06','2020-08-20 15:44:23'),(231,'第9天response 响应渲染 —动态渲染插件分析','动态渲染插件分析','2','1','','动态渲染','2',NULL,'','动态渲染就是把数据添加到动态页模板，然后把这个页面返回给客户端的技术。下面是个动态页面模板，当然模板形式不只这一种，这是比较经典的写法。','1','','','0:01',762,'2','0',NULL,0,'0',223000,'<h3>动态渲染插件分析</h3><p>动态渲染就是把数据添加到动态页模板，然后把这个页面返回给客户端的技术。下面是个动态页面模板，当然模板形式不只这一种，这是比较经典的写法。</p><p><code>view.html</code> 文件内容</p><pre>&lt;!doctype&nbsp;html&gt;\n&lt;html&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;body&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%for(var&nbsp;i=0&nbsp;;&nbsp;i&lt;&nbsp;10&nbsp;;&nbsp;i++){%&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;&lt;%=i%&gt;&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%}%&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/body&gt;\n&lt;/html&gt;</pre><p>我们要做的就是要把模板文件转换为javascript对象，把&lt;%%&gt;包裹的字符串转换为javascript的代码形式，把其他的字符串保存为字符串对象即可，最后连接就完成了。以下是转后的javascript Function对象。</p><pre>function&nbsp;view(locals){&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;result&nbsp;=&nbsp;&quot;&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;+=&nbsp;&#39;&lt;!doctype&nbsp;html&gt;\\r\\n&lt;html&gt;\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;body&gt;\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;for(var&nbsp;i=0&nbsp;;&nbsp;i&lt;&nbsp;10&nbsp;;&nbsp;i++){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;+=&nbsp;&#39;\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;+=&nbsp;i;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;+=&nbsp;&#39;&lt;/p&gt;\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;+=&nbsp;&#39;\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/body&gt;\\r\\n&lt;/html&gt;&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result;\n}</pre><p>转换为这个形式后，只需要调用<code>var result = view(locals)</code> 就可以得到转换为静态HTML字符串了。如何转换为之上的Function对象呢？我们需要用到 <code>new Function</code>。</p><pre>var&nbsp;view&nbsp;=&nbsp;new&nbsp;Function(&quot;local&quot;,&quot;var&nbsp;result&nbsp;=&nbsp;......&nbsp;return&nbsp;result;&quot;)</pre><p>每一个view函数都对应一个动态页，调用view函数时，可以为它赋值view(locals)，locals可以是任意javascript对象。所以在开发动态插件时，内部应该有个viewCache对象，viewCache对象的形式如下：</p><pre>var&nbsp;viewCache&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;page1.html&quot;:view1,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;page2.html&quot;:view2\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;......\n}</pre><p>指定一个动态页目录，然后读取当前目录下的所有文件，把这些文件转换为javascript Function对象，赋值给viewCache。所以插件的使用代码应该如下：</p><pre>app.use(view(__dirname+&quot;/views&quot;))</pre><p>当然路径可以随意自定义。通过以上代码后，在使用时，res就应该具备view方法，以下是使用代码。</p><pre>app.use(view(指定动态模板页目录))\napp.get(&quot;/mypage&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;......\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.view(&quot;page1.html&quot;,locals)&nbsp;;&nbsp;//&nbsp;locals可以是任意javascript对象。\n})</pre><p>当调用res.view方法时，内部就会调用 <code>res.write(viewCache[&quot;page1.html&quot;](locals))</code> ，从而把模板结合locals数据转换为html，发送给客户端。分析就到这里，下一节将开发这个插件。</p>','[{\"type\":\"contents\",\"content\":\"动态渲染插件分析\\n动态渲染就是把数据添加到动态页模板，然后把这个页面返回给客户端的技术。下面是个动态页面模板，当然模板形式不只这一种，这是比较经典的写法。\\nview.html 文件内容\\n&lt;!doctype html&gt;\\n&lt;html&gt;\\n    &lt;body&gt;\\n        &lt;%for(var i=0 ; i&lt; 10 ; i++){%&gt;\\n            &lt;p&gt;&lt;%=i%&gt;&lt;/p&gt;\\n        &lt;%}%&gt;\\n    &lt;/body&gt;\\n&lt;/html&gt;\\n我们要做的就是要把模板文件转换为javascript对象，把&lt;%%&gt;包裹的字符串转换为javascript的代码形式，把其他的字符串保存为字符串对象即可，最后连接就完成了。以下是转后的javascript Function对象。\\nfunction view(locals){    \\n    var result = \\\"\\\";\\n    result += \'&lt;!doctype html&gt;\\\\r\\\\n&lt;html&gt;\\\\r\\\\n    &lt;body&gt;\\\\r\\\\n        \';\\n    for(var i=0 ; i&lt; 10 ; i++){\\n        result += \'\\\\r\\\\n            &lt;p&gt;\';\\n        result += i;\\n        result += \'&lt;/p&gt;\\\\r\\\\n        \';\\n    }\\n    result += \'\\\\r\\\\n    &lt;/body&gt;\\\\r\\\\n&lt;/html&gt;\';\\n    return result;\\n}\\n转换为这个形式后，只需要调用var result = view(locals) 就可以得到转换为静态HTML字符串了。如何转换为之上的Function对象呢？我们需要用到 new Function。\\nvar view = new Function(\\\"local\\\",\\\"var result = ...... return result;\\\")\\n每一个view函数都对应一个动态页，调用view函数时，可以为它赋值view(locals)，locals可以是任意javascript对象。所以在开发动态插件时，内部应该有个viewCache对象，viewCache对象的形式如下：\\nvar viewCache = {\\n     \\\"page1.html\\\":view1,\\n     \\\"page2.html\\\":view2\\n     ......\\n}\\n指定一个动态页目录，然后读取当前目录下的所有文件，把这些文件转换为javascript Function对象，赋值给viewCache。所以插件的使用代码应该如下：\\napp.use(view(__dirname+\\\"/views\\\"))\\n当然路径可以随意自定义。通过以上代码后，在使用时，res就应该具备view方法，以下是使用代码。\\napp.use(view(指定动态模板页目录))\\napp.get(\\\"/mypage\\\",function(req,res){\\n      ......\\n      res.view(\\\"page1.html\\\",locals) ; // locals可以是任意javascript对象。\\n})\\n当调用res.view方法时，内部就会调用 res.write(viewCache[\\\"page1.html\\\"](locals)) ，从而把模板结合locals数据转换为html，发送给客户端。分析就到这里，下一节将开发这个插件。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445235916000.jpg','2015-10-19 06:25:53','2020-08-20 15:44:17'),(232,'几个git 常用的命令','几个git 常用的命令','2','1','','git命令','2',NULL,'','git常见的命令，常用又经常忘记，备注一下','1','','','0:01',762,'2','0',NULL,0,'0',223741,'<p>git常见的命令，常用又经常忘记，备注一下</p><p><br/></p><p><img alt=\"FrV17hUfDI-xRdvmWsNY7kpbaPOZ.png\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_8_8_3_4_816_1000.png\" title=\"\"/></p>','[{\"type\":\"contents\",\"content\":\"git常见的命令，常用又经常忘记，备注一下\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_8_8_3_4_816_1000.png\"},{\"type\":\"contents\",\"content\":\"\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20160108080212.png','2016-01-08 00:03:26','2020-08-20 15:44:12'),(233,'DOM对象和JQuery对象的区别','DOM对象和JQuery对象的区别','1','1',NULL,'jquery,dom','2',NULL,'','第一次学习jQuery,经常分辨不清哪些是jQuery对象，哪些是 DOM对象，因此需要重点了解jQuery对象和DOM对象以及它们之间的关系. \nDOM对象，即是我们用传统的方法(javascript)获得的对象，jQuery对象即是用jQuery类库的选择器获得的对象','1','','','0:01',762,'2','0',NULL,0,'0',224781,'<p><br/></p><ol class=\" list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p><span label=\"明显强调\" style=\"font-size: 16px; font-style: italic; font-weight: bold; color: rgb(51, 153, 204); line-height: 18px;\">jQuery对象和DOM对象</span></p><p><br/></p></li></ol><p>第一次学习jQuery,经常分辨不清哪些是jQuery对象，哪些是 DOM对象，因此需要重点了解jQuery对象和DOM对象以及它们之间的关系. <br/>DOM对象，即是我们用传统的方法(javascript)获得的对象，jQuery对象即是用jQuery类库的选择器获得的对象; <br/>代码如下:</p><pre class=\"brush:js;toolbar:false\">var&nbsp;domObj&nbsp;=&nbsp;document.getElementById(“id”);&nbsp;//DOM对象&nbsp;\nvar&nbsp;obj=(“#id”);&nbsp;//jQuery对象;</pre><p><br/></p><p>jQuery对象就是通过jQuery包装DOM对象后产生的对象，它是jQuery独有的。如果一个对象是jQuery对象，那么就可以使用jQuery里的方法，例: <br/>$(“#foo”).html(); //获取id为foo的元素内的html代码，html()是jQuery特有的方法; <br/>上面的那段代码等同于: <br/><br/></p><pre class=\"brush:js;toolbar:false\">document.getElementById(“foo”).innerHTML;</pre><p><br/></p><p>注意：在jQuery对象中无法使用DOM对象的任何方法。 <br/>例如(&quot;#id&quot;).innerHTML&nbsp;和(“#id”).checked之类的写法都是错误的，可以用(&quot;#id&quot;).html()和(“#id”).attr (“checked”)之类的 jQuery方法来代替。同样，DOM对象也不能使用jQuery方法。学习jQuery开始就应当树立正确的观念，分清jQuery对象和DOM对象之间的区别，之后学习 jQuery就会轻松很多的。</p><p><br/></p><p><span label=\"明显强调\" style=\"font-size: 16px; font-style: italic; font-weight: bold; color: rgb(51, 153, 204); line-height: 18px;\">2.jQuery对象和DOM对象的互相转换</span></p><p>在上面第一点说了，jquery对象和dom对象是不一样的！比如jquery对象不能使用dom的方法，dom对象不能使用jquery方法，那假如我 jquery没有封装我要的方法，那能怎么办呢？ <br/>这时我们可以将jquer对象转换成dom对象</p><p>jquery对象转换成 dom对象 <br/>jquery提供了两种方法将一个jquery对象转换成一个dom对象，即[index]和get(index)。可能有人会觉得奇怪，怎么是用下标呢，没错，jquery对象就是一个数组对象. <br/>下面代码将演示一个jquery对象转换成dom对象，再使用dom对象的方法 <br/>复制代码 代码如下:</p><pre class=\"brush:js;toolbar:false\">var&nbsp;cr=(“#cr”);&nbsp;//jquery对象&nbsp;\nvar&nbsp;cr&nbsp;=&nbsp;cr[0];//dom对象也可写成varcr=cr.get(0);&nbsp;\nalert(cr.checked);&nbsp;//检测这个checkbox是否给选中</pre><p><br/></p><p>dom对象转换成jquery对象 <br/>对于一个dom对象，只需要用()把dom对象包装起来，就可以获得一个jquery对象了，方法为(dom对象); <br/>复制代码 代码如下:</p><pre class=\"brush:js;toolbar:false\">var&nbsp;cr=document.getElementById(‘cr’);&nbsp;//dom对象&nbsp;\nvar&nbsp;cr=&nbsp;$(cr);&nbsp;//转换成jquery对象</pre><p><br/></p><p>转换后可以任意使用jquery中的方法了.</p><p>通过以上的方法，可以任意的相互转换jquery对象和dom对象. <br/>最后再次强调，dom对象才能使用dom中的方法，jquery对象不可以使用dom中的方法，但 jquery对象提供了一套更加完善的工具用于操作dom,关于jquery的dom操作将在后面的文章进行详细讲解.</p><p>ps: 平时用到的jquery对象都是通过()函数制造出来的，()函数就是一个jquery对象的制造工厂. <br/>建议:如果获取的对象是 jquery对象，那么在变量前面加上,这样方便容易识别出哪些是jquery对象,例如:varvariable = jquery对象; <br/>如果获取的是dom对象，则定义如下: <br/><br/></p><pre class=\"brush:js;toolbar:false\">var&nbsp;variable&nbsp;=&nbsp;dom对象</pre><p><br/></p>','[{\"type\":\"contents\",\"content\":\"\\njQuery对象和DOM对象\\n\\n\\n第一次学习jQuery,经常分辨不清哪些是jQuery对象，哪些是 DOM对象，因此需要重点了解jQuery对象和DOM对象以及它们之间的关系. \\nDOM对象，即是我们用传统的方法(javascript)获得的对象，jQuery对象即是用jQuery类库的选择器获得的对象; \\n代码如下:\\nvar domObj = document.getElementById(“id”); //DOM对象 \\nvar obj=(“#id”); //jQuery对象;\\n\\njQuery对象就是通过jQuery包装DOM对象后产生的对象，它是jQuery独有的。如果一个对象是jQuery对象，那么就可以使用jQuery里的方法，例: \\n$(“#foo”).html(); //获取id为foo的元素内的html代码，html()是jQuery特有的方法; \\n上面的那段代码等同于: \\n\\ndocument.getElementById(“foo”).innerHTML;\\n\\n注意：在jQuery对象中无法使用DOM对象的任何方法。 \\n例如(\\\"#id\\\").innerHTML 和(“#id”).checked之类的写法都是错误的，可以用(\\\"#id\\\").html()和(“#id”).attr (“checked”)之类的 jQuery方法来代替。同样，DOM对象也不能使用jQuery方法。学习jQuery开始就应当树立正确的观念，分清jQuery对象和DOM对象之间的区别，之后学习 jQuery就会轻松很多的。\\n\\n2.jQuery对象和DOM对象的互相转换\\n在上面第一点说了，jquery对象和dom对象是不一样的！比如jquery对象不能使用dom的方法，dom对象不能使用jquery方法，那假如我 jquery没有封装我要的方法，那能怎么办呢？ \\n这时我们可以将jquer对象转换成dom对象\\njquery对象转换成 dom对象 \\njquery提供了两种方法将一个jquery对象转换成一个dom对象，即[index]和get(index)。可能有人会觉得奇怪，怎么是用下标呢，没错，jquery对象就是一个数组对象. \\n下面代码将演示一个jquery对象转换成dom对象，再使用dom对象的方法 \\n复制代码 代码如下:\\nvar cr=(“#cr”); //jquery对象 \\nvar cr = cr[0];//dom对象也可写成varcr=cr.get(0); \\nalert(cr.checked); //检测这个checkbox是否给选中\\n\\ndom对象转换成jquery对象 \\n对于一个dom对象，只需要用()把dom对象包装起来，就可以获得一个jquery对象了，方法为(dom对象); \\n复制代码 代码如下:\\nvar cr=document.getElementById(‘cr’); //dom对象 \\nvar cr= $(cr); //转换成jquery对象\\n\\n转换后可以任意使用jquery中的方法了.\\n通过以上的方法，可以任意的相互转换jquery对象和dom对象. \\n最后再次强调，dom对象才能使用dom中的方法，jquery对象不可以使用dom中的方法，但 jquery对象提供了一套更加完善的工具用于操作dom,关于jquery的dom操作将在后面的文章进行详细讲解.\\nps: 平时用到的jquery对象都是通过()函数制造出来的，()函数就是一个jquery对象的制造工厂. \\n建议:如果获取的对象是 jquery对象，那么在变量前面加上,这样方便容易识别出哪些是jquery对象,例如:varvariable = jquery对象; \\n如果获取的是dom对象，则定义如下: \\n\\nvar variable = dom对象\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444889178000.jpg','2015-08-17 01:44:08','2020-08-20 15:44:25'),(234,'Express 4.8.x 概述','Express 4.8.x 概述','2','1','','express教程','2',NULL,'','Express是受到Sinatra框架的启发而诞生的Node.js Web开发框架，它非常快速，灵活和简单。','1','','','0:01',762,'2','0',NULL,0,'0',225143,'<h3>Express 4.8.x 概述</h3><p>Express是受到Sinatra框架的启发而诞生的Node.js Web开发框架，它非常快速，灵活和简单。</p><p>Express 中文含义是“特快”，通过客户端的请求（Request），Express接收到后会分派到指定路由处理器，路由处理器处理完毕后，调用响应（Response）方法，把结果返回客户端。这个是所有web框架都在做的事情，毫无稀奇而言，也没必要弄的太稀奇。</p><p>关键是要快速开发，灵活的扩展机制，使用简单；还应具有强大的路由，多模版支持等特性，另外还不能过度设计，Express具备所有这些特性。</p><h4 id=\"-\">快速开发</h4><p>通过一行命令，即可生成框架基础模版，可节省很多手写代码。</p><p>下面的命令可查看express命令可使用的全部参数</p><pre>$&nbsp;express&nbsp;-h</pre><p>例如：通过下面的命令，即可生成一个express项目，并进入到项目目录。</p><pre>$&nbsp;express&nbsp;myapp&nbsp;&amp;&nbsp;cd&nbsp;myapp</pre><p>然后，运行下面命令安装依赖模块。</p><pre>$&nbsp;npm&nbsp;install</pre><p>这时，我们会发现项目目录下多了一个 node_modules 目录，这是刚刚下载的依赖模块。</p><p>最后运行下面的命令即可运行：</p><pre>npm&nbsp;start</pre><p>通过浏览器访问 localhost:3000 即可访问到页面，只要几条命令即可完成项目模版，很快捷方便。</p><h4 id=\"-\">扩展机制</h4><p>express框架是一个框架，它通过扩展机制，可以方便的加入其他功能（中间件）。只要用下面的代码即可创建一个中间件。</p><pre>function&nbsp;my_middleware(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;req.user&nbsp;=&nbsp;{name:”leo”}\n&nbsp;&nbsp;&nbsp;&nbsp;next();\n}\n\napp.use(my_middleware);&nbsp;//&nbsp;加入自己开发的中间件</pre><p>可见如果加入很多中间件功能，只需要</p><pre>app.use(middle01);\napp.use(middle02);\n…&nbsp;...</pre><p>这个原理之前我们详细介绍过了，你应该还印象深刻。</p><p>官方提供的插件可访问 <a href=\"https://github.com/senchalabs/connect#middleware\">https://github.com/senchalabs/connect#middleware</a> 得到。</p><h4 id=\"-\">使用简单</h4><p>Express 的 API 非常直观、简单。可访问 <a href=\"http://expressjs.com/4x/api.html\">http://expressjs.com/4x/api.html</a> 查看API文档，当然本书不会只告诉你一个地址，我们会由浅入深的讲解这些API本身。同时会深入讲解如何使用、何时使用、最佳实践和组合使用等技巧。</p><p>它的API主要分4个对象，Application 表示应用程序本身，Request表示请求对象，Response表示响应对象，还有一个是Router路由器对象，它可以说是整个程序运行的纽带和传输机。</p>','[{\"type\":\"contents\",\"content\":\"Express 4.8.x 概述\\nExpress是受到Sinatra框架的启发而诞生的Node.js Web开发框架，它非常快速，灵活和简单。\\nExpress 中文含义是“特快”，通过客户端的请求（Request），Express接收到后会分派到指定路由处理器，路由处理器处理完毕后，调用响应（Response）方法，把结果返回客户端。这个是所有web框架都在做的事情，毫无稀奇而言，也没必要弄的太稀奇。\\n关键是要快速开发，灵活的扩展机制，使用简单；还应具有强大的路由，多模版支持等特性，另外还不能过度设计，Express具备所有这些特性。\\n快速开发\\n通过一行命令，即可生成框架基础模版，可节省很多手写代码。\\n下面的命令可查看express命令可使用的全部参数\\n$ express -h\\n例如：通过下面的命令，即可生成一个express项目，并进入到项目目录。\\n$ express myapp &amp; cd myapp\\n然后，运行下面命令安装依赖模块。\\n$ npm install\\n这时，我们会发现项目目录下多了一个 node_modules 目录，这是刚刚下载的依赖模块。\\n最后运行下面的命令即可运行：\\nnpm start\\n通过浏览器访问 localhost:3000 即可访问到页面，只要几条命令即可完成项目模版，很快捷方便。\\n扩展机制\\nexpress框架是一个框架，它通过扩展机制，可以方便的加入其他功能（中间件）。只要用下面的代码即可创建一个中间件。\\nfunction my_middleware(req,res,next){\\n    req.user = {name:”leo”}\\n    next();\\n}\\n\\napp.use(my_middleware); // 加入自己开发的中间件\\n可见如果加入很多中间件功能，只需要\\napp.use(middle01);\\napp.use(middle02);\\n… ...\\n这个原理之前我们详细介绍过了，你应该还印象深刻。\\n官方提供的插件可访问 https://github.com/senchalabs/connect#middleware 得到。\\n使用简单\\nExpress 的 API 非常直观、简单。可访问 http://expressjs.com/4x/api.html 查看API文档，当然本书不会只告诉你一个地址，我们会由浅入深的讲解这些API本身。同时会深入讲解如何使用、何时使用、最佳实践和组合使用等技巧。\\n它的API主要分4个对象，Application 表示应用程序本身，Request表示请求对象，Response表示响应对象，还有一个是Router路由器对象，它可以说是整个程序运行的纽带和传输机。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445057267000.jpg','2015-10-17 04:49:25','2020-08-20 15:44:22'),(235,'Node.js 入门','Node.js 入门','1','1','','nodejs,前端开发','2',NULL,'','本文摘自cnodejs.org,收集的比较全就直接拿过来了，帮助nodejs前端初学者初步了解nodejs的相关基础知识，为后面进一步学习打下基础。','1','','','0:01',762,'2','0',NULL,0,'0',223768,'<p><span style=\"font-size: 16px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">&nbsp;&nbsp;&nbsp;&nbsp;本文摘自cnodejs.org,收集的比较全就直接拿过来了，帮助nodejs前端初学者初步了解nodejs的相关基础知识，为后面进一步学习打下基础。</span></p><h2><span style=\"font-size: 16px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">Node.js 入门</span></h2><p><span style=\"font-size: 16px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">《<strong>快速搭建 Node.js 开发环境以及加速 npm</strong>》</span></p><p><span style=\"font-size: 16px; text-decoration: underline; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\"><a target=\"_blank\" href=\"http://fengmk2.com/blog/2014/03/node-env-and-faster-npm.html\" style=\"font-size: 16px; text-decoration: underline; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">http://fengmk2.com/blog/2014/03/node-env-and-faster-npm.html</a></span></p><p><br/></p><p><span style=\"font-size: 16px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">《<strong>Node.js 包教不包会</strong>》</span></p><p><span style=\"font-size: 16px; text-decoration: underline; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\"><a target=\"_blank\" href=\"https://github.com/alsotang/node-lessons\" style=\"font-size: 16px; text-decoration: underline; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">https://github.com/alsotang/node-lessons</a></span></p><p><br/></p><p><span style=\"font-size: 16px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">《<strong>七天学会NodeJS</strong>》</span></p><p><span style=\"font-size: 16px; text-decoration: underline; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\"><a target=\"_blank\" href=\"https://github.com/nqdeng/7-days-nodejs\" style=\"font-size: 16px; text-decoration: underline; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">https://github.com/nqdeng/7-days-nodejs</a></span></p><p><br/></p><p><span style=\"font-size: 16px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">《<strong>Node入门-<em>一本全面的Node.js教程</em></strong>》</span></p><p><a target=\"_blank\" href=\"http://www.nodebeginner.org/index-zh-cn.html\" style=\"font-size: 16px; text-decoration: underline; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\"><span style=\"font-size: 16px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">http://www.nodebeginner.org/index-zh-cn.html</span></a></p><h2><span style=\"font-size: 16px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">Node.js 资源</span></h2><p><span style=\"font-size: 16px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">《<strong>node123-<em>node.js中文资料导航</em></strong>》</span></p><p><span style=\"font-size: 16px; text-decoration: underline; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\"><a target=\"_blank\" href=\"https://github.com/youyudehexie/node123\" style=\"font-size: 16px; text-decoration: underline; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">https://github.com/youyudehexie/node123</a></span></p><p><br/></p><p><span style=\"font-size: 16px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">《<strong>A curated list of delightful Node.js packages and resources</strong>》</span></p><p><span style=\"font-size: 16px; text-decoration: underline; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\"><a target=\"_blank\" href=\"https://github.com/sindresorhus/awesome-nodejs\" style=\"font-size: 16px; text-decoration: underline; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">https://github.com/sindresorhus/awesome-nodejs</a></span></p><p><br/></p><p><span style=\"font-size: 16px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">《<strong>NODE.JS MODULES</strong>》</span></p><p><a target=\"_blank\" href=\"https://nodejsmodules.org/\" style=\"font-size: 16px; text-decoration: underline; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\"><span style=\"font-size: 16px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">https://nodejsmodules.org/</span></a></p><h2><span style=\"font-size: 16px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">Node.js 书籍</span></h2><p><span style=\"font-size: 16px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">《<strong>Node.js Books</strong>》</span></p><p><a target=\"_blank\" href=\"https://github.com/pana/node-books\" style=\"font-size: 16px; text-decoration: underline; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\"><span style=\"font-size: 16px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">https://github.com/pana/node-books</span></a></p><h2><span style=\"font-size: 16px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">Node.js 名人</span></h2><p><span style=\"font-size: 16px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">《<strong>名人堂</strong>》</span></p><p><a target=\"_blank\" href=\"https://github.com/cnodejs/nodeclub/wiki/%E5%90%8D%E4%BA%BA%E5%A0%82\" style=\"font-size: 16px; text-decoration: underline; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\"><span style=\"font-size: 16px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">https://github.com/cnodejs/nodeclub/wiki/%E5%90%8D%E4%BA%BA%E5%A0%82</span></a></p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"    本文摘自cnodejs.org,收集的比较全就直接拿过来了，帮助nodejs前端初学者初步了解nodejs的相关基础知识，为后面进一步学习打下基础。\\nNode.js 入门\\n《快速搭建 Node.js 开发环境以及加速 npm》\\nhttp://fengmk2.com/blog/2014/03/node-env-and-faster-npm.html\\n\\n《Node.js 包教不包会》\\nhttps://github.com/alsotang/node-lessons\\n\\n《七天学会NodeJS》\\nhttps://github.com/nqdeng/7-days-nodejs\\n\\n《Node入门-一本全面的Node.js教程》\\nhttp://www.nodebeginner.org/index-zh-cn.html\\nNode.js 资源\\n《node123-node.js中文资料导航》\\nhttps://github.com/youyudehexie/node123\\n\\n《A curated list of delightful Node.js packages and resources》\\nhttps://github.com/sindresorhus/awesome-nodejs\\n\\n《NODE.JS MODULES》\\nhttps://nodejsmodules.org/\\nNode.js 书籍\\n《Node.js Books》\\nhttps://github.com/pana/node-books\\nNode.js 名人\\n《名人堂》\\nhttps://github.com/cnodejs/nodeclub/wiki/%E5%90%8D%E4%BA%BA%E5%A0%82\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1436165286000.jpg','2015-07-06 06:51:16','2020-08-20 15:44:27'),(236,'第9天response 响应渲染 —文本渲染插件开发','文本渲染插件开发','2','1','','文本渲染','2',NULL,'','今天我们的开发任务，是为stuwebfk框架增加response响应渲染功能。之前响应客户端的方式是通过res.write方法，这个过于低级。\n基本的响应渲染功能，包括以下几个','1','','','0:01',762,'2','0',NULL,0,'0',223075,'<h3>第9天response 响应渲染</h3><p>今天我们的开发任务，是为stuwebfk框架增加response响应渲染功能。之前响应客户端的方式是通过res.write方法，这个过于低级。</p><p>基本的响应渲染功能，包括以下几个：</p><ul class=\" list-paddingleft-2\"><li><p>页面跳转 redirect</p></li><li><p>文本 text</p></li><li><p>静态页 static</p></li><li><p>下载 down</p></li><li><p>动态页 view</p></li></ul><p>先前实现了静态页渲染，也就是使用static中间件。下面几节，着手开发其他的渲染方法。</p><h3>文本渲染插件开发</h3><p>文本渲染，就是通过res.text方法返回给客户端信息，而信息本身无论是什么，比如即使是html也会显示其源代码。</p><p>这个插件并不难，只要为响应头设置 <code>Content-Type = text/plain</code> 即可，既然这个插件如此简单，下面就显示出其源代码。</p><p><code>lib/text.js</code> 源代码<span class=\"invade-word\">book</span></p><pre>module.exports&nbsp;=&nbsp;function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;res.text&nbsp;=&nbsp;function(txt){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.writeHead(200,&nbsp;{&#39;Content-Type&#39;:&nbsp;&#39;text/plain&#39;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.write(txt);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;next();\n}</pre><p>在<code>index.js</code>中加入以下代码：</p><pre>exports.text&nbsp;=&nbsp;require(&quot;./lib/text&quot;);</pre><p>到这里插件就算开发好了，下面我们用个例子测试一下效果。</p><pre>var&nbsp;fk&nbsp;=&nbsp;require(&quot;../..&quot;)\n&nbsp;&nbsp;&nbsp;,App&nbsp;=&nbsp;fk.App\n&nbsp;&nbsp;&nbsp;,app&nbsp;=&nbsp;new&nbsp;App;\n\n&nbsp;&nbsp;&nbsp;app.use(fk.text);&nbsp;//&nbsp;加载text插件\n\n&nbsp;&nbsp;&nbsp;app.get(&quot;/text&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.text(&quot;&lt;b&gt;hello&nbsp;world&lt;/b&gt;&quot;);\n&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;app.listen(3000)</pre><p>运行后，在浏览器打开 localhost:3000/text 就会显示出</p><pre>&lt;b&gt;hello&nbsp;world&lt;/b&gt;</pre><p>也就是说不会用HTML渲染，而是直接显示出源代码。插件很简单，在实际应用中作用确很大。下一节，我们将开发页面跳转插件。</p>','[{\"type\":\"contents\",\"content\":\"第9天response 响应渲染\\n今天我们的开发任务，是为stuwebfk框架增加response响应渲染功能。之前响应客户端的方式是通过res.write方法，这个过于低级。\\n基本的响应渲染功能，包括以下几个：\\n页面跳转 redirect\\n文本 text\\n静态页 static\\n下载 down\\n动态页 view\\n\\n先前实现了静态页渲染，也就是使用static中间件。下面几节，着手开发其他的渲染方法。\\n文本渲染插件开发\\n文本渲染，就是通过res.text方法返回给客户端信息，而信息本身无论是什么，比如即使是html也会显示其源代码。\\n这个插件并不难，只要为响应头设置 Content-Type = text/plain 即可，既然这个插件如此简单，下面就显示出其源代码。\\nlib/text.js 源代码book\\nmodule.exports = function(req,res,next){\\n    res.text = function(txt){\\n        res.writeHead(200, {\'Content-Type\': \'text/plain\'});\\n        res.write(txt);\\n        res.end();\\n    }\\n    next();\\n}\\n在index.js中加入以下代码：\\nexports.text = require(\\\"./lib/text\\\");\\n到这里插件就算开发好了，下面我们用个例子测试一下效果。\\nvar fk = require(\\\"../..\\\")\\n   ,App = fk.App\\n   ,app = new App;\\n\\n   app.use(fk.text); // 加载text插件\\n\\n   app.get(\\\"/text\\\",function(req,res){\\n        res.text(\\\"&lt;b&gt;hello world&lt;/b&gt;\\\");\\n   })\\n\\n   app.listen(3000)\\n运行后，在浏览器打开 localhost:3000/text 就会显示出\\n&lt;b&gt;hello world&lt;/b&gt;\\n也就是说不会用HTML渲染，而是直接显示出源代码。插件很简单，在实际应用中作用确很大。下一节，我们将开发页面跳转插件。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445235241000.jpg','2015-10-19 06:16:23','2020-08-20 15:44:18'),(237,'我用的一些Node.js开发工具、开发包、框架等总结','我用的一些Node.js开发工具,开发包','1','1','','nodejs','2',NULL,'','WebStorm，毫无疑问非他莫属，跨平台，强大的代码提示，支持Nodejs调试，此外还支持vi编辑模式，这点我很喜欢。','1','','','0:01',762,'2','0',NULL,0,'0',225210,'<p><span style=\"font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; font-size: 14px;\"><strong>开发工具</strong></span></p><p><span style=\"font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; font-size: 14px;\">1.WebStorm，毫无疑问非他莫属，跨平台，强大的代码提示，支持Nodejs调试，此外还支持vi编辑模式，这点我很喜欢。<br/>2.做些小型项目用Sublime Text。<br/>3.Browserify：将你的nodejs模块应用到浏览器中<br/>4.nvm:nodejs版本管理工具，你可能会用到多个nodejs版本（如v0.11.x支持generator的nodejs和stable的v0.10.x版本），用它可以方便切换</span></p><p><span style=\"font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; font-size: 14px;\"><strong>测试&amp;自动化</strong></span></p><p><span style=\"font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; font-size: 14px;\">1.mocha：一个简单、灵活有趣的 JavaScript 测试框架（类似的还有should，supretest）<br/>2.gruntjs：迄今为止node世界中最流行的构建工具<br/>3.gulp.js：宣称取代gruntjs的东东<br/>4.node-inspector：nodejs代码调试神奇，结合浏览器Chrome-Debug，轻量，方便<br/>5.node-dev：代码改了，还在不断的按Ctrl+C吗？快试试这个工具吧，使用fs.watch()监控项目目录，代码变化后，自动重启项目<br/>6.pm2：替代node-forever的新秀</span></p><p><span style=\"font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; font-size: 14px;\"><strong>第三方开发包</strong></span></p><p><span style=\"font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; font-size: 14px;\">1.Edge.js：让.NET和nodejs在同一进程中运行，相互调用（神器的东西啊）<br/>2.Express，优秀的Web开发框架<br/>3.moment，强大的日期处理库<br/>4.cheerio，jQuery核心选择器的实现，可跑在server端，类似jsdom，但比jsdom轻量很多<br/>5.async，异步处理<br/>6.shortid，url友好的unique id<br/>7.log4js，日志记录，稳健的系统离不开日志记录<br/>8.colors，便于在console中输出不同颜色的文本（tinycolor，更轻量级的控制台颜色设置）<br/>9.xmlrpc，方便xml远程过程调用，比如写metaweblog的时候可能会用到<br/>10.commander：编写命令行应用必备，简化各种命令解析操作<br/>11.koa:Express的接班人<br/>12.chokidar：完善的文件、文件夹监控包，解决了fs.watch诸多不完善的地方，可以进行子目录的监控，相当方便<br/>13.axon：消息、常见socket模式的上层实现，简化socket开发，TJ大神作品<br/>14.cron：采用crontab语法的任务计划包<br/>15.open：使用本地应用打开文件或者url<br/>16.term-list：cli辅助选择操作<br/>17.deepmerge: js对象深度合并<br/>18.loadsh，underscore：js常用工具库，对象合并，排序算法，map，reduce等<br/>19.iconv-lite:纯js实现的编码转换库，开发爬虫等场景会经常用到。<br/>20.request: 更简单的发送http请求<br/>21.needle：轻量级的http client模块，集成了iconv-lite，跟request类似<br/>22.superagent：类似request，使用风格跟jQuery神似。<br/>23.mobile-agent: 判断是手机浏览器的访问还是pc端的访问，对做web很有用哦。<br/>24.is-type-of:js辅助库，判断对象的类型&nbsp;</span></p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"开发工具\\n1.WebStorm，毫无疑问非他莫属，跨平台，强大的代码提示，支持Nodejs调试，此外还支持vi编辑模式，这点我很喜欢。\\n2.做些小型项目用Sublime Text。\\n3.Browserify：将你的nodejs模块应用到浏览器中\\n4.nvm:nodejs版本管理工具，你可能会用到多个nodejs版本（如v0.11.x支持generator的nodejs和stable的v0.10.x版本），用它可以方便切换\\n测试&amp;自动化\\n1.mocha：一个简单、灵活有趣的 JavaScript 测试框架（类似的还有should，supretest）\\n2.gruntjs：迄今为止node世界中最流行的构建工具\\n3.gulp.js：宣称取代gruntjs的东东\\n4.node-inspector：nodejs代码调试神奇，结合浏览器Chrome-Debug，轻量，方便\\n5.node-dev：代码改了，还在不断的按Ctrl+C吗？快试试这个工具吧，使用fs.watch()监控项目目录，代码变化后，自动重启项目\\n6.pm2：替代node-forever的新秀\\n第三方开发包\\n1.Edge.js：让.NET和nodejs在同一进程中运行，相互调用（神器的东西啊）\\n2.Express，优秀的Web开发框架\\n3.moment，强大的日期处理库\\n4.cheerio，jQuery核心选择器的实现，可跑在server端，类似jsdom，但比jsdom轻量很多\\n5.async，异步处理\\n6.shortid，url友好的unique id\\n7.log4js，日志记录，稳健的系统离不开日志记录\\n8.colors，便于在console中输出不同颜色的文本（tinycolor，更轻量级的控制台颜色设置）\\n9.xmlrpc，方便xml远程过程调用，比如写metaweblog的时候可能会用到\\n10.commander：编写命令行应用必备，简化各种命令解析操作\\n11.koa:Express的接班人\\n12.chokidar：完善的文件、文件夹监控包，解决了fs.watch诸多不完善的地方，可以进行子目录的监控，相当方便\\n13.axon：消息、常见socket模式的上层实现，简化socket开发，TJ大神作品\\n14.cron：采用crontab语法的任务计划包\\n15.open：使用本地应用打开文件或者url\\n16.term-list：cli辅助选择操作\\n17.deepmerge: js对象深度合并\\n18.loadsh，underscore：js常用工具库，对象合并，排序算法，map，reduce等\\n19.iconv-lite:纯js实现的编码转换库，开发爬虫等场景会经常用到。\\n20.request: 更简单的发送http请求\\n21.needle：轻量级的http client模块，集成了iconv-lite，跟request类似\\n22.superagent：类似request，使用风格跟jQuery神似。\\n23.mobile-agent: 判断是手机浏览器的访问还是pc端的访问，对做web很有用哦。\\n24.is-type-of:js辅助库，判断对象的类型 \\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1434254911000.jpg','2015-07-02 03:37:42','2020-08-20 15:44:27'),(238,'DoraCMS v.1.1.1 权限bug解析','DoraCMS v.1.1.1 权限bug解析','1','1','','bug修复','2',NULL,'','感谢github 的@monday-ch 提出这个bug，在权限校验中，如果手动修改请求路径大小写，会发现没有权限的页面也可以访问到，这是个很严重的bug，原因在于校验不够严谨','1','','','0:01',762,'2','0',NULL,0,'0',226509,'<p>感谢github 的@monday-ch 提出这个bug，在权限校验中，如果手动修改请求路径大小写，会发现没有权限的页面也可以访问到，这是个很严重的bug，原因在于校验不够严谨，相关代码如下：</p><pre class=\"brush:js;toolbar:false\">//模块管理页面\nrouter.get(&#39;/manage/:targetPage&#39;,&nbsp;function(req,&nbsp;res,&nbsp;next)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;currentPage&nbsp;=&nbsp;req.params.targetPage;\n&nbsp;&nbsp;&nbsp;&nbsp;if(settings[currentPage]){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!adminFunc.checkAdminPower(req,settings[currentPage][0]&nbsp;+&nbsp;&#39;_view&#39;)){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.render(&quot;manage/public/notice&quot;,&nbsp;adminFunc.setDataForInfo(&#39;danger&#39;,&#39;对不起，您无权操作&nbsp;&lt;strong&gt;&#39;+settings[currentPage][1]+&#39;&lt;/strong&gt;&nbsp;模块！&#39;));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n});</pre><p><br/></p><p>settings[currentPage] 校验不过，直接next，在admin.js中的路由如下：</p><pre class=\"brush:js;toolbar:false\">//文档列表页面\nrouter.get(&#39;/manage/contentList&#39;,&nbsp;function(req,&nbsp;res)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;res.render(&#39;manage/contentList&#39;,&nbsp;adminFunc.setPageInfo(req,res,settings.contentList));\n});</pre><p><br/></p><p>这里express默认对大小写不做处理，导致了直接请求到对应路由。这里@monday-ch提供了下面的处理方法，对小写的路由做容错处理，代码如下：</p><p><br/></p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_4_13_17_20_57_265_1003.PNG\" title=\"\" alt=\"bug修复.PNG\"/></p><p><br/></p><p>在这里这样处理是可以的，但是考虑到不光是在后台菜单访问入口，还有每个数据请求接口都有类似问题，这</p><p><br/></p><p>样处理就过于繁琐了，于是想到了express 路由的一个属性caseSensitive。api是这样介绍的：</p><h3 id=\"router\" style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); margin: 5px 0px; color: rgb(53, 53, 53); -webkit-font-smoothing: antialiased; padding-top: 10px; padding-bottom: 5px; font-size: 18px; font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Lucida Grande&#39;, Arial, &#39;Hiragino Sans GB&#39;, &#39;Microsoft Yahei&#39;, &#39;WenQuanYi Micro Hei&#39;, sans-serif; white-space: normal;\">Router([options])</h3><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); margin-top: 10px; margin-bottom: 10px; line-height: 1.35em; color: rgb(85, 85, 85); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Lucida Grande&#39;, Arial, &#39;Hiragino Sans GB&#39;, &#39;Microsoft Yahei&#39;, &#39;WenQuanYi Micro Hei&#39;, sans-serif; font-size: 14px; white-space: normal;\">Create a new router as follows:</p><pre class=\"  language-javascript\" style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); font-size: 14px; line-height: 1.5; padding: 1em; border-radius: 3px; overflow: auto; border: 1px solid rgb(221, 221, 221); text-shadow: white 0px 1px; font-family: Consolas, Monaco, &#39;Andale Mono&#39;, monospace; direction: ltr; word-break: normal; tab-size: 4; background-color: rgb(247, 247, 247);\">var&nbsp;router&nbsp;=&nbsp;express.Router([options]);</pre><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); margin-top: 10px; margin-bottom: 10px; line-height: 1.35em; color: rgb(85, 85, 85); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Lucida Grande&#39;, Arial, &#39;Hiragino Sans GB&#39;, &#39;Microsoft Yahei&#39;, &#39;WenQuanYi Micro Hei&#39;, sans-serif; font-size: 14px; white-space: normal;\">The optional&nbsp;<code style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); white-space: pre-wrap !important; color: rgb(51, 51, 51);\">options</code>&nbsp;parameter specifies the behavior of the router.</p><table width=\"930\" style=\"width: 669px;\"><thead style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"><tr style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\" class=\"firstRow\"><th style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); color: rgb(53, 53, 53); padding: 7px; line-height: 18.48px; vertical-align: top; border-color: rgb(198, 198, 198); font-size: 15.4px; background-color: rgb(218, 218, 218);\">Property</th><th style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); color: rgb(53, 53, 53); padding: 7px; line-height: 18.48px; vertical-align: top; border-color: rgb(198, 198, 198); font-size: 15.4px; background-color: rgb(218, 218, 218);\">Description</th><th style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); color: rgb(53, 53, 53); padding: 7px; line-height: 18.48px; vertical-align: top; border-color: rgb(198, 198, 198); font-size: 15.4px; background-color: rgb(218, 218, 218);\">Default</th><th style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); color: rgb(53, 53, 53); padding: 7px; line-height: 18.48px; vertical-align: top; border-color: rgb(198, 198, 198); font-size: 15.4px; background-color: rgb(218, 218, 218);\">Availability</th></tr></thead><tbody style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"><tr style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"><td style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 7px; line-height: 16.8px; vertical-align: top; border-color: rgb(198, 198, 198);\"><code style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); white-space: pre-wrap !important; color: rgb(51, 51, 51);\">caseSensitive</code></td><td style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 7px; line-height: 16.8px; vertical-align: top; border-color: rgb(198, 198, 198);\">Enable case sensitivity.</td><td style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 7px; line-height: 16.8px; vertical-align: top; border-color: rgb(198, 198, 198);\">Disabled by default, treating “/Foo” and “/foo” as the same.</td><td style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 7px; line-height: 16.8px; vertical-align: top; border-color: rgb(198, 198, 198);\"><br/></td></tr><tr style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"><td style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 7px; line-height: 16.8px; vertical-align: top; border-color: rgb(198, 198, 198);\"><code style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); white-space: pre-wrap !important; color: rgb(51, 51, 51);\">mergeParams</code></td><td style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 7px; line-height: 16.8px; vertical-align: top; border-color: rgb(198, 198, 198);\">Preserve the&nbsp;<code style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); white-space: pre-wrap !important; color: rgb(51, 51, 51);\">req.params</code>&nbsp;values from the parent router. If the parent and the child have conflicting param names, the child’s value take precedence.</td><td style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 7px; line-height: 16.8px; vertical-align: top; border-color: rgb(198, 198, 198);\"><code style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); white-space: pre-wrap !important; color: rgb(51, 51, 51);\">false</code></td><td style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 7px; line-height: 16.8px; vertical-align: top; border-color: rgb(198, 198, 198);\">4.5.0+</td></tr><tr style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"><td style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 7px; line-height: 16.8px; vertical-align: top; border-color: rgb(198, 198, 198);\"><code style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); white-space: pre-wrap !important; color: rgb(51, 51, 51);\">strict</code></td><td style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 7px; line-height: 16.8px; vertical-align: top; border-color: rgb(198, 198, 198);\">Enable strict routing.</td><td style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 7px; line-height: 16.8px; vertical-align: top; border-color: rgb(198, 198, 198);\">Disabled by default, “/foo” and “/foo/” are treated the same by the router.</td><td style=\"box-sizing: border-box; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); padding: 7px; line-height: 16.8px; vertical-align: top; border-color: rgb(198, 198, 198);\"><br/></td></tr></tbody></table><p><br/></p><p>caseSensitive属性可以设置路由的大小写严格模式，默认为false，于是可以在admin.js中加一句话：</p><pre class=\"brush:js;toolbar:false\">var&nbsp;router&nbsp;=&nbsp;express.Router();\nrouter.caseSensitive&nbsp;=&nbsp;true;</pre><p>问题就可以解决了，个人觉得好像没必要适配大小写，因为路由是不需要手动输入的，接口也不提倡手动修改，不然情况就比较复杂了。<br/></p>','[{\"type\":\"contents\",\"content\":\"感谢github 的@monday-ch 提出这个bug，在权限校验中，如果手动修改请求路径大小写，会发现没有权限的页面也可以访问到，这是个很严重的bug，原因在于校验不够严谨，相关代码如下：\\n//模块管理页面\\nrouter.get(\'/manage/:targetPage\', function(req, res, next) {\\n    var currentPage = req.params.targetPage;\\n    if(settings[currentPage]){\\n        if(!adminFunc.checkAdminPower(req,settings[currentPage][0] + \'_view\')){\\n            res.render(\\\"manage/public/notice\\\", adminFunc.setDataForInfo(\'danger\',\'对不起，您无权操作 &lt;strong&gt;\'+settings[currentPage][1]+\'&lt;/strong&gt; 模块！\'));\\n        }else{\\n            next();\\n        }\\n    }else{\\n        next();\\n    }\\n});\\n\\nsettings[currentPage] 校验不过，直接next，在admin.js中的路由如下：\\n//文档列表页面\\nrouter.get(\'/manage/contentList\', function(req, res) {\\n    res.render(\'manage/contentList\', adminFunc.setPageInfo(req,res,settings.contentList));\\n});\\n\\n这里express默认对大小写不做处理，导致了直接请求到对应路由。这里@monday-ch提供了下面的处理方法，对小写的路由做容错处理，代码如下：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_4_13_17_20_57_265_1003.PNG\"},{\"type\":\"contents\",\"content\":\"\\n\\n在这里这样处理是可以的，但是考虑到不光是在后台菜单访问入口，还有每个数据请求接口都有类似问题，这\\n\\n样处理就过于繁琐了，于是想到了express 路由的一个属性caseSensitive。api是这样介绍的：\\nRouter([options])\\nCreate a new router as follows:\\nvar router = express.Router([options]);\\nThe optional options parameter specifies the behavior of the router.\\nPropertyDescriptionDefaultAvailabilitycaseSensitiveEnable case sensitivity.Disabled by default, treating “/Foo” and “/foo” as the same.\\nmergeParamsPreserve the req.params values from the parent router. If the parent and the child have conflicting param names, the child’s value take precedence.false4.5.0+strictEnable strict routing.Disabled by default, “/foo” and “/foo/” are treated the same by the router.\\n\\n\\ncaseSensitive属性可以设置路由的大小写严格模式，默认为false，于是可以在admin.js中加一句话：\\nvar router = express.Router();\\nrouter.caseSensitive = true;\\n问题就可以解决了，个人觉得好像没必要适配大小写，因为路由是不需要手动输入的，接口也不提倡手动修改，不然情况就比较复杂了。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20160413171705.png','2016-04-13 09:17:24','2020-08-20 15:44:09'),(239,'Node.js API实例讲解——创建http客户端','创建http客户端','2','1','','nodejs,创建http客户端','2',NULL,'','有两种方式创建http客户端，http.request(options, callback) 和 http.get(options, callback) 。','1','','','0:01',762,'2','0',NULL,0,'0',223508,'<h3>创建http客户端</h3><p>有两种方式创建http客户端，http.request(options, callback) 和 http.get(options, callback) 。</p><h4 id=\"http-request-options-callback-\">http.request(options, callback)</h4><p>options 可以是一个字符串或者是个json，字符串可以是一个有效网址，json内容就比较多了，看如下配置项。</p><p>host 域名或者ip地址，默认localhost</p><p>hostname 主机名称，这个设置优先于host</p><p>port 端口号，默认80</p><p>localAddress&nbsp;</p><p>method 请求方法名，GET/POST。默认是GET。</p><p>path 请求路径，默认“/”。</p><p>headers 请求头部。</p><p>auth 基本的身份验证，“名字:密码”。\n下面举两个例子：</p><pre class=\"code\">//&nbsp;客户端\nvar&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\nvar&nbsp;req&nbsp;=&nbsp;http.request(&quot;http://www.google.com&quot;\n,function(res){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(res.headers)\n})\nreq.end();</pre><pre class=\"code\">//&nbsp;客户端\nvar&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\nvar&nbsp;req&nbsp;=&nbsp;http.request({host:&quot;www.google.com&quot;}\n,function(res){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(res.headers)\n})\nreq.end();</pre><p><br/></p><p><br/></p><p>这里要说明的是，设置options时不会替换整个options，比如设置host只会设置这一个值，其他还保持其默认值。</p><p>一旦服务器端有响应了，那么callback会被调用，传入的res值是一个http.IncomingMessage对象，callback其实就是“response”事件监听器，这里的callback是可选参数。</p><p>方法会返回http.clientRequest对象。</p><h4 id=\"http-get-options-callback-\">http.get(options, callback)</h4><p>这个方法是起到方便作用的，它无非就是设置 options.method = GET, 还会调用一下 req.end。 下面写两段代码，作用都是一样的。</p><pre class=\"code\">var&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\nvar&nbsp;req&nbsp;=&nbsp;http.get(&quot;http://www.google.com&quot;\n,function(res){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(res.headers)\n})</pre><pre class=\"code\">var&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\nvar&nbsp;req&nbsp;=&nbsp;http.request({host:&quot;www.google.com&quot;}\n,function(res){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(res.headers)\n})\nreq.end();</pre><p><span class=\"invade-word\">yellow</span>通过http.request方法返回了一个http.ClientRequest对象，ClientRequest对象是stream.Writable子类。下面就对该对象进行详细讲解。<span class=\"invade-word\">god</span></p><h4 id=\"-response-\">&quot;response&quot;事件</h4><p>当服务器有响应时会产生response事件。此事件的监听器会接收到一个响应对象，这个响应对象是一个http.IncomingMessage对象。http.request方法的第二个参数实际上就是这个事件的监听器。</p><pre class=\"code\">var&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\nvar&nbsp;req&nbsp;=&nbsp;http.request({host:&quot;www.google.com&quot;})\nreq.on(&quot;response&quot;,function(res){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;...\n})\nreq.end();</pre><h3 id=\"-socket-\">&quot;socket&quot; 事件</h3><p>请求对象建立好后，内部会创建一个net.Socket对象，然后会激发该事件，socket事件的监听器接收的参数就是该socket对象，该事件无论是否调用req.end()都会产生。</p><pre class=\"code\">req.on(&quot;socket&quot;,function(socket){&nbsp;...&nbsp;})</pre><h4 id=\"-connect-upgrade-continue-\">&quot;connect&quot;,&quot;upgrade&quot;和&quot;continue&quot; 事件</h4><p>参看“HTTP服务器”一节的connect,upgrade和continue事件部分，客户端通过connect，upgrade或continue方式访问服务器，如果收到服务器的回应，就会激发对应的事件。</p><pre class=\"code\">req.on(&#39;connect&#39;,&nbsp;function(res,&nbsp;socket,&nbsp;head)&nbsp;{\n&nbsp;&nbsp;console.log(&#39;got&nbsp;connected!&#39;);\n}</pre><pre class=\"code\">req.on(&#39;upgrade&#39;,&nbsp;function(res,&nbsp;socket,&nbsp;head)&nbsp;{\n&nbsp;&nbsp;console.log(&#39;got&nbsp;upgraded!&#39;);\n}</pre><pre class=\"code\">req.on(&#39;continue&#39;,function(){\n\n})</pre><h4 id=\"request-write-chunk-encoding-\">request.write(chunk, [encoding])</h4><p>这个方法会发送一大块的数据chunk，chunk可以是Buffer或String类型，可多次调用这个方法，encoding[可选]参数，chunk是字符串时是通过这个参数进行编码后发送出去的，encoding默认是utf8。</p><h4 id=\"request-end-data-encoding-\">request.end([data], [encoding])</h4><p>这个方法的意思是完成请求的发送。</p><h4 id=\"request-abort-\">request.abort()</h4><p>这个方法表示终止请求。</p>','[{\"type\":\"contents\",\"content\":\"创建http客户端\\n有两种方式创建http客户端，http.request(options, callback) 和 http.get(options, callback) 。\\nhttp.request(options, callback)\\noptions 可以是一个字符串或者是个json，字符串可以是一个有效网址，json内容就比较多了，看如下配置项。\\nhost 域名或者ip地址，默认localhost\\nhostname 主机名称，这个设置优先于host\\nport 端口号，默认80\\nlocalAddress \\nmethod 请求方法名，GET/POST。默认是GET。\\npath 请求路径，默认“/”。\\nheaders 请求头部。\\nauth 基本的身份验证，“名字:密码”。下面举两个例子：\\n// 客户端\\nvar http = require(\\\"http\\\");\\nvar req = http.request(\\\"http://www.google.com\\\"\\n,function(res){\\n    console.log(res.headers)\\n})\\nreq.end();\\n// 客户端\\nvar http = require(\\\"http\\\");\\nvar req = http.request({host:\\\"www.google.com\\\"}\\n,function(res){\\n    console.log(res.headers)\\n})\\nreq.end();\\n\\n\\n这里要说明的是，设置options时不会替换整个options，比如设置host只会设置这一个值，其他还保持其默认值。\\n一旦服务器端有响应了，那么callback会被调用，传入的res值是一个http.IncomingMessage对象，callback其实就是“response”事件监听器，这里的callback是可选参数。\\n方法会返回http.clientRequest对象。\\nhttp.get(options, callback)\\n这个方法是起到方便作用的，它无非就是设置 options.method = GET, 还会调用一下 req.end。 下面写两段代码，作用都是一样的。\\nvar http = require(\\\"http\\\");\\nvar req = http.get(\\\"http://www.google.com\\\"\\n,function(res){\\n    console.log(res.headers)\\n})\\nvar http = require(\\\"http\\\");\\nvar req = http.request({host:\\\"www.google.com\\\"}\\n,function(res){\\n    console.log(res.headers)\\n})\\nreq.end();\\nyellow通过http.request方法返回了一个http.ClientRequest对象，ClientRequest对象是stream.Writable子类。下面就对该对象进行详细讲解。god\\n\\\"response\\\"事件\\n当服务器有响应时会产生response事件。此事件的监听器会接收到一个响应对象，这个响应对象是一个http.IncomingMessage对象。http.request方法的第二个参数实际上就是这个事件的监听器。\\nvar http = require(\\\"http\\\");\\nvar req = http.request({host:\\\"www.google.com\\\"})\\nreq.on(\\\"response\\\",function(res){\\n     ... ...\\n})\\nreq.end();\\n\\\"socket\\\" 事件\\n请求对象建立好后，内部会创建一个net.Socket对象，然后会激发该事件，socket事件的监听器接收的参数就是该socket对象，该事件无论是否调用req.end()都会产生。\\nreq.on(\\\"socket\\\",function(socket){ ... })\\n\\\"connect\\\",\\\"upgrade\\\"和\\\"continue\\\" 事件\\n参看“HTTP服务器”一节的connect,upgrade和continue事件部分，客户端通过connect，upgrade或continue方式访问服务器，如果收到服务器的回应，就会激发对应的事件。\\nreq.on(\'connect\', function(res, socket, head) {\\n  console.log(\'got connected!\');\\n}\\nreq.on(\'upgrade\', function(res, socket, head) {\\n  console.log(\'got upgraded!\');\\n}\\nreq.on(\'continue\',function(){\\n\\n})\\nrequest.write(chunk, [encoding])\\n这个方法会发送一大块的数据chunk，chunk可以是Buffer或String类型，可多次调用这个方法，encoding[可选]参数，chunk是字符串时是通过这个参数进行编码后发送出去的，encoding默认是utf8。\\nrequest.end([data], [encoding])\\n这个方法的意思是完成请求的发送。\\nrequest.abort()\\n这个方法表示终止请求。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444888864000.jpg','2015-08-09 14:09:00','2020-08-20 15:44:25'),(240,'DoraCMS版本优化','DoraCMS版本优化','1','1','','doracms,nodejs','2',NULL,'','近期对doracms做了无数优化，主要是修复bug，在开发过程中，遗留的不严谨的一系列问题，一旦发现，立即处理，力求不断完善。','1','','','0:01',762,'2','0',NULL,1,'0',223310,'<p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_7_14_20_26_53_917_1000.jpg\" title=\"doracms内容管理系统\" alt=\"doracms内容管理系统\" width=\"500\" height=\"300\" border=\"0\" vspace=\"0\" style=\"width: 500px; height: 300px;\"/></p><p><span style=\"font-size: 16px;\">&nbsp;&nbsp;</span></p><p><span style=\"font-size: 16px;\">&nbsp; 近期对doracms做了无数优化，主要是修复bug，在开发过程中，遗留的不严谨的一系列问题，一旦发现，立即处理，力求不断完善。近期主要做了一下几方面的工作：</span></p><p><br/></p><p><span style=\"font-size: 16px;\">1、简化了登录注册流程，去掉了之前的注册登录的形式，在代码中没有去掉接口，暂时注释掉。用QQ登录的方式隐形注册，用户登录后可选择完善用户信息，尽量减少注册成本。</span></p><p><span style=\"font-size: 16px;\">2、将网站所涉及到平时很少改动的静态文件（包括js,css,images等），整理了目录，去掉了没用的链接，并且挂到</span><a href=\"http://www.qiniu.com/\" target=\"_blank\" title=\"七牛云存储\" style=\"font-size: 16px; text-decoration: underline;\"><span style=\"font-size: 16px;\"><strong>七牛云存储</strong></span></a><span style=\"font-size: 16px;\">上了，由于七牛上有免费的cdn加速，可以使前端访问更快，目前测试感觉速度还可以接受。百度SEO建议如下：</span></p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_7_14_20_30_6_760_1001.jpg\" title=\"\" alt=\"28.jpg\" width=\"671\" height=\"490\" style=\"width: 671px; height: 490px;\"/></p><p><br/></p><p><span style=\"font-size: 16px;\">网站速度测试：<br/></span></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_7_14_20_31_38_197_1002.jpg\" title=\"网站速度诊断\" alt=\"网站速度诊断\" width=\"536\" height=\"272\" border=\"0\" vspace=\"0\" style=\"width: 536px; height: 272px;\"/></p><p><br/></p><p><span style=\"font-size: 16px;\">看了下详情，还有优化的空间，主要在js和css压缩这一块，后续会对这部分做进一步的优化。</span></p><p><span style=\"font-size: 16px;\">3、根据兄弟的建议(资深SEO)优化了一级页面，二级页面discription和keys,利于搜索引擎收录。</span></p><p><span style=\"font-size: 16px;\">4、由于起初开发没考虑那么多，前台用 angularjs 就直接干了，后来发现angularjs用在数据展示很不利于搜索引擎抓取，导致百度快照里的内容全部为空，于是又大幅对数据显示方式做了修改，直接用ejs的方式显示数据，目前才稍微恢复正常。</span></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_7_14_20_38_39_417_1003.jpg\" title=\"百度快照\" alt=\"百度快照\" width=\"650\" height=\"106\" border=\"0\" vspace=\"0\" style=\"width: 650px; height: 106px;\"/></p><p><span style=\"font-size: 16px;\">后续，除了会根据需要新增基本功能之外，也会对页面做进一步的优化，争取尽快出一个稳定版，敬请关注。</span></p>','[{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_7_14_20_26_53_917_1000.jpg\"},{\"type\":\"contents\",\"content\":\"\\n  \\n  近期对doracms做了无数优化，主要是修复bug，在开发过程中，遗留的不严谨的一系列问题，一旦发现，立即处理，力求不断完善。近期主要做了一下几方面的工作：\\n\\n1、简化了登录注册流程，去掉了之前的注册登录的形式，在代码中没有去掉接口，暂时注释掉。用QQ登录的方式隐形注册，用户登录后可选择完善用户信息，尽量减少注册成本。\\n2、将网站所涉及到平时很少改动的静态文件（包括js,css,images等），整理了目录，去掉了没用的链接，并且挂到七牛云存储上了，由于七牛上有免费的cdn加速，可以使前端访问更快，目前测试感觉速度还可以接受。百度SEO建议如下：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_7_14_20_30_6_760_1001.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n网站速度测试：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_7_14_20_31_38_197_1002.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n看了下详情，还有优化的空间，主要在js和css压缩这一块，后续会对这部分做进一步的优化。\\n3、根据兄弟的建议(资深SEO)优化了一级页面，二级页面discription和keys,利于搜索引擎收录。\\n4、由于起初开发没考虑那么多，前台用 angularjs 就直接干了，后来发现angularjs用在数据展示很不利于搜索引擎抓取，导致百度快照里的内容全部为空，于是又大幅对数据显示方式做了修改，直接用ejs的方式显示数据，目前才稍微恢复正常。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_7_14_20_38_39_417_1003.jpg\"},{\"type\":\"contents\",\"content\":\"\\n后续，除了会根据需要新增基本功能之外，也会对页面做进一步的优化，争取尽快出一个稳定版，敬请关注。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1436875422000.jpg','2015-07-17 08:26:23','2020-08-20 15:44:26'),(241,'第7天 Post方法与上传——post.js 插件补完','post.js 插件补完','2','1','','post.js 插件','2',NULL,'','前几节分析了post方法和上传的原理。下面要把代码集成到post.js插件中，但这里还有个问题，就是服务器端如何判断表单是否设置了 enctype=\"multipart/form-data\" 属性。','1','','','0:01',762,'2','0',NULL,0,'0',222943,'<h3>post.js 插件补完</h3><p>前几节分析了post方法和上传的原理。下面要把代码集成到post.js插件中，但这里还有个问题，就是服务器端如何判断表单是否设置了 enctype=&quot;multipart/form-data&quot; 属性。仔细分析后，我们发现可以通过之前的一段代码 <code>/(boundary=)/gi.test(contentType);</code>的修改，来判断是否表单设置了enctype=&quot;multipart/form-data&quot; 属性。修改结果如下：</p><pre>//&nbsp;判断是否设置了enctype=&quot;multipart/form-data&quot;&nbsp;属性\nvar&nbsp;isMulti&nbsp;=&nbsp;/(boundary=)/gi.test(contentType);</pre><p>这是个眼下刚遇到的问题，解决了它，我们就可以把功能进行整合了。下面是post.js插件整合后的代码。</p><pre>var&nbsp;qs&nbsp;=&nbsp;require(&quot;querystring&quot;);\n\nmodule.exports&nbsp;=&nbsp;function&nbsp;post(req,res,next){\n\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;body_data&nbsp;=&nbsp;&quot;&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;req.files&nbsp;=&nbsp;{};&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;req.body&nbsp;=&nbsp;{};\n\n&nbsp;&nbsp;&nbsp;&nbsp;req.on(&quot;data&quot;,function(chunk){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body_data&nbsp;+=&nbsp;chunk;\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;&nbsp;req.on(&quot;end&quot;,function(){\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;contentType&nbsp;=&nbsp;req.headers[&quot;content-type&quot;];\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;isMulti&nbsp;如果是true，表示是设置了enctype=&quot;multipart/form-data&quot;&nbsp;属性\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;isMulti&nbsp;=&nbsp;/(boundary=)/gi.test(contentType);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(isMulti){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;boundary&nbsp;=&nbsp;RegExp[&quot;$&#39;&quot;];\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;boundaryStandard&nbsp;=&nbsp;&quot;--&quot;+boundary+&quot;\\r\\n&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;boundaryEnd&nbsp;=&nbsp;boundaryStandard+&quot;--&quot;;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//删除头尾边界字符串\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body_data&nbsp;=&nbsp;body_data.substring(boundaryStandard.length,body_data.length-boundaryEnd.length);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;fields&nbsp;=&nbsp;body_data.split(boundaryStandard);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;头信息和体信息的之间分割字符串\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;RN&nbsp;=&nbsp;&quot;\\r\\n\\r\\n&quot;;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fields.forEach(function(field){\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;index&nbsp;&nbsp;=&nbsp;field.indexOf(RN);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;解析出头信息块\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;header&nbsp;=&nbsp;field.substring(0,index);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;从头信息中解析出表单字段的名称，也就是表单的name属性值。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/name=\\&quot;(.*?)\\&quot;/g.test(header);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;fieldName&nbsp;=&nbsp;RegExp.$1;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;判断是上传的文件，还是一般的表单字段。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;isFile&nbsp;=&nbsp;/filename/g.test(header);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;解析出数据体\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;body&nbsp;=&nbsp;field.substring(index+RN.length);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body&nbsp;=&nbsp;body.substring(0,body.length&nbsp;-&nbsp;RN.length/2);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(isFile){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req.files[fieldName]&nbsp;=&nbsp;new&nbsp;Buffer(body);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req.body[fieldName]&nbsp;=&nbsp;body;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req.body&nbsp;=&nbsp;qs.parse(body_data);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}catch(e){}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next();\n\n&nbsp;&nbsp;&nbsp;&nbsp;});\n}</pre><p>代码和前几节相比，改动不是很大，应该能看明白。讲了这么多，又写这么多代码，希望不是我一个人在做，你也要一起做，否则我算是白费功夫了。即使你没完全弄明白所有代码，也至少模仿的写一遍，带你一起开发的目的，不是让你弄明白所有的代码意思和细节，这些说实话都能找到答案，重要的是开发的过程积累的经验和实际开发的感觉。</p><p>记住：知识是可以学到的，经验只能被传授。经验怎么传授呢，只有在实践的过程中积累，看着我做能学到经验还不够，自己还要动手再动手。编程没什么窍门，你只有编程才能精通编程。</p><p>下一节，我们做一个上传的小例子，并通过视频演示使用效果。</p>','[{\"type\":\"contents\",\"content\":\"post.js 插件补完\\n前几节分析了post方法和上传的原理。下面要把代码集成到post.js插件中，但这里还有个问题，就是服务器端如何判断表单是否设置了 enctype=\\\"multipart/form-data\\\" 属性。仔细分析后，我们发现可以通过之前的一段代码 /(boundary=)/gi.test(contentType);的修改，来判断是否表单设置了enctype=\\\"multipart/form-data\\\" 属性。修改结果如下：\\n// 判断是否设置了enctype=\\\"multipart/form-data\\\" 属性\\nvar isMulti = /(boundary=)/gi.test(contentType);\\n这是个眼下刚遇到的问题，解决了它，我们就可以把功能进行整合了。下面是post.js插件整合后的代码。\\nvar qs = require(\\\"querystring\\\");\\n\\nmodule.exports = function post(req,res,next){\\n\\n    var body_data = \\\"\\\";\\n    req.files = {}; \\n    req.body = {};\\n\\n    req.on(\\\"data\\\",function(chunk){\\n        body_data += chunk;\\n    })\\n\\n    req.on(\\\"end\\\",function(){\\n\\n        var contentType = req.headers[\\\"content-type\\\"];\\n\\n        // isMulti 如果是true，表示是设置了enctype=\\\"multipart/form-data\\\" 属性\\n        var isMulti = /(boundary=)/gi.test(contentType);\\n\\n        if(isMulti){\\n            var boundary = RegExp[\\\"$\'\\\"];\\n\\n            var boundaryStandard = \\\"--\\\"+boundary+\\\"\\\\r\\\\n\\\";\\n            var boundaryEnd = boundaryStandard+\\\"--\\\";\\n\\n            //删除头尾边界字符串\\n            body_data = body_data.substring(boundaryStandard.length,body_data.length-boundaryEnd.length);\\n\\n            var fields = body_data.split(boundaryStandard);\\n\\n            // 头信息和体信息的之间分割字符串\\n            var RN = \\\"\\\\r\\\\n\\\\r\\\\n\\\";\\n\\n            fields.forEach(function(field){\\n\\n                var index  = field.indexOf(RN);\\n\\n                // 解析出头信息块\\n                var header = field.substring(0,index);\\n\\n                // 从头信息中解析出表单字段的名称，也就是表单的name属性值。\\n                /name=\\\\\\\"(.*?)\\\\\\\"/g.test(header);\\n                var fieldName = RegExp.$1;\\n\\n                // 判断是上传的文件，还是一般的表单字段。\\n                var isFile = /filename/g.test(header);\\n\\n                // 解析出数据体\\n                var body = field.substring(index+RN.length);\\n                    body = body.substring(0,body.length - RN.length/2);\\n\\n                if(isFile){\\n                    req.files[fieldName] = new Buffer(body);\\n                }else{\\n                    req.body[fieldName] = body;\\n                }\\n\\n            })\\n        }else{\\n            try{\\n                req.body = qs.parse(body_data);\\n            }catch(e){}\\n        }\\n\\n        next();\\n\\n    });\\n}\\n代码和前几节相比，改动不是很大，应该能看明白。讲了这么多，又写这么多代码，希望不是我一个人在做，你也要一起做，否则我算是白费功夫了。即使你没完全弄明白所有代码，也至少模仿的写一遍，带你一起开发的目的，不是让你弄明白所有的代码意思和细节，这些说实话都能找到答案，重要的是开发的过程积累的经验和实际开发的感觉。\\n记住：知识是可以学到的，经验只能被传授。经验怎么传授呢，只有在实践的过程中积累，看着我做能学到经验还不够，自己还要动手再动手。编程没什么窍门，你只有编程才能精通编程。\\n下一节，我们做一个上传的小例子，并通过视频演示使用效果。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444982209000.jpg','2015-10-16 07:57:52','2020-08-20 15:44:23'),(242,'Express 4.8.x—EJS 模版引擎','EJS 模版引擎','2','1','','EJS 模版引擎','2',NULL,'','EJS - 可以把javascript嵌入到动态页面中。','1','','','0:01',762,'2','0',NULL,0,'0',227195,'<h3>EJS 模版引擎</h3><p>EJS - 可以把javascript嵌入到动态页面中。</p><p>安装</p><pre>npm&nbsp;install&nbsp;ejs</pre><p>例1 ：</p><pre>\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;&lt;%=&nbsp;title&nbsp;%&gt;&lt;/h1&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;%&nbsp;users.forEach(function(u){&nbsp;%&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h3&gt;&lt;%=&nbsp;u.name%&gt;&nbsp;&lt;/h3&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%-&nbsp;u.des&nbsp;%&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;%&nbsp;})&nbsp;%&gt;</pre><p>&lt;% javascript代码 %&gt; &nbsp;，但不能输出。</p><p>&lt;%= javascript代码 %&gt; ， 输出转义后的返回值，打印到页面上。</p><p>&lt;%- javascript代码 %&gt; ，输出返回值，打印到页面上。</p><p>&lt;%= %&gt; 和 &nbsp;&lt;%- %&gt; 输出方式的不同在于是否转义，比如例子的 &lt;%- u.des%&gt; &nbsp;可以输出html代码，如果用&lt;%= u.des%&gt;输出的是转义后的 html代码，只能看到源代码无法看到html效果。</p><p>你可以插入其他ejs页面：</p><pre>&lt;%include&nbsp;head%&gt;\n&lt;h1&gt;Title&lt;/h1&gt;\n&lt;p&gt;My&nbsp;page&lt;/p&gt;\n&lt;%include&nbsp;footer%&gt;</pre><p>把当前目录下的 <code>head.ejs</code> 和 <code>footer.ejs</code> 的内容插入进来，这里要注意一点，如果扩展名不是ejs，必须要写全。比如 &lt;% include head.html %&gt; 。</p><p>可参考 <a href=\"https://github.com/visionmedia/ejs\">https://github.com/visionmedia/ejs</a></p>','[{\"type\":\"contents\",\"content\":\"EJS 模版引擎\\nEJS - 可以把javascript嵌入到动态页面中。\\n安装\\nnpm install ejs\\n例1 ：\\n    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;\\n\\n    &lt;% users.forEach(function(u){ %&gt;\\n        &lt;div&gt; \\n                &lt;h3&gt;&lt;%= u.name%&gt; &lt;/h3&gt;\\n                &lt;%- u.des %&gt;\\n        &lt;/div&gt;\\n    &lt;% }) %&gt;\\n&lt;% javascript代码 %&gt;  ，但不能输出。\\n&lt;%= javascript代码 %&gt; ， 输出转义后的返回值，打印到页面上。\\n&lt;%- javascript代码 %&gt; ，输出返回值，打印到页面上。\\n&lt;%= %&gt; 和  &lt;%- %&gt; 输出方式的不同在于是否转义，比如例子的 &lt;%- u.des%&gt;  可以输出html代码，如果用&lt;%= u.des%&gt;输出的是转义后的 html代码，只能看到源代码无法看到html效果。\\n你可以插入其他ejs页面：\\n&lt;%include head%&gt;\\n&lt;h1&gt;Title&lt;/h1&gt;\\n&lt;p&gt;My page&lt;/p&gt;\\n&lt;%include footer%&gt;\\n把当前目录下的 head.ejs 和 footer.ejs 的内容插入进来，这里要注意一点，如果扩展名不是ejs，必须要写全。比如 &lt;% include head.html %&gt; 。\\n可参考 https://github.com/visionmedia/ejs\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445059644000.jpg','2015-10-17 05:28:11','2020-08-20 15:44:22'),(243,'分享一套精美的网页模板，三四天才搞定，有用的自己拿','分享一套精美的网页模板','1','1','','前端开发,前端模板','2',NULL,'','没事的时候在网上逛逛，对设计比较好的网站特别的有兴趣，无意间发现了uehtml（http://www.uehtml.com/post/25004/），感觉它的界面做的很漂亮，细节方面也做的很到位，于是不假思索的想把皮扒下来放在自己的站点上','1','','','0:01',762,'2','0',NULL,1,'0',225351,'<p dir=\"ltr\">&nbsp;&nbsp;&nbsp;&nbsp;没事的时候在网上逛逛，对设计比较好的网站特别的有兴趣，无意间发现了uehtml（<a href=\"http://www.uehtml.com/post/25004/\" target=\"_blank\">http://www.uehtml.com/</a> ），感觉它的界面做的很漂亮，细节方面也做的很到位，于是不假思索的想把皮扒下来放在自己的站点上，界面设计版权归原网站所有，如果您觉得侵犯了您的权益，请告知我，我只是根据界面原封不动的的重写了html，界面只做了一部分（大概9个页面）。样式和原网站有相同的地方，也有区别。区别主要是我加入了bootstrap布局，将一些小图标换成了font awesome图标，有需要的可以下载参考下，目录结构如下：</p><p dir=\"ltr\"><br/></p><p style=\"text-align: center;\" dir=\"ltr\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_29_59_361_1026.jpg\" title=\"\" alt=\"DoraCMS模板.jpg\"/></p><p dir=\"ltr\"><br/></p><p dir=\"ltr\"><a title=\"html-js模板\" target=\"_blank\" href=\"http://7xkr1n.com1.z0.glb.clouddn.com/@/cms/htmljsTemp.zip\">文件下载 (右键链接另存为)</a>&nbsp;&nbsp;<br/></p>','[{\"type\":\"contents\",\"content\":\"    没事的时候在网上逛逛，对设计比较好的网站特别的有兴趣，无意间发现了uehtml（http://www.uehtml.com/ ），感觉它的界面做的很漂亮，细节方面也做的很到位，于是不假思索的想把皮扒下来放在自己的站点上，界面设计版权归原网站所有，如果您觉得侵犯了您的权益，请告知我，我只是根据界面原封不动的的重写了html，界面只做了一部分（大概9个页面）。样式和原网站有相同的地方，也有区别。区别主要是我加入了bootstrap布局，将一些小图标换成了font awesome图标，有需要的可以下载参考下，目录结构如下：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_29_59_361_1026.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n文件下载 (右键链接另存为)  \\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1438153326000.jpg','2015-07-30 10:47:57','2020-08-20 15:44:26'),(244,'Node.js API实例讲解——验证数据的完整性','验证数据的完整性','2','1','','数据完整性','2',NULL,'','在网上下载东西的时候往往会提供md5验证字符串，这样就可以对下载的东西验证是否数据完整。','1','','','0:01',762,'2','0',NULL,0,'0',224068,'<h3>验证数据的完整性</h3><p>在网上下载东西的时候往往会提供md5验证字符串，这样就可以对下载的东西验证是否数据完整。数据完整性可以保证数据是否被更改过，只要更改一个字节，那么得到的md5就和先前不同。下面用node.js为一段字符串生成一个md5字符串，然后更改一下字符串再次生成一下md5，看看两次的md5值是否一致。</p><pre class=\"code\">//&nbsp;导入加密解密库\nvar&nbsp;crypto&nbsp;=&nbsp;require(&quot;crypto&quot;);\n\n//&nbsp;创建一个md5生成工具对象\nvar&nbsp;md5hash&nbsp;=&nbsp;crypto.createHash(&quot;md5&quot;);\n//&nbsp;测试用的字符串\nvar&nbsp;str&nbsp;=&nbsp;&quot;hello&nbsp;world!&quot;;\n//&nbsp;把字符串md5生成器，可多此调用。\nmd5hash.update(str);\n//&nbsp;生成最终的md5值\nvar&nbsp;hexstr&nbsp;=&nbsp;md5hash.digest(&quot;hex&quot;);\nconsole.log(hexstr);\n//&nbsp;打印结果&nbsp;fc3ff98e8c6a0d3087d515c0473f8677\n\n//&nbsp;第二次生成同样的字符串\n//&nbsp;创建一个md5生成工具对象\n//&nbsp;如果已调用过digest，那么必须重新生成md5hash。\nmd5hash&nbsp;=&nbsp;crypto.createHash(&quot;md5&quot;);\n//&nbsp;把字符串md5生成器，可多此调用。\nmd5hash.update(str);\n//&nbsp;第二次生成最终的md5值\nhexstr&nbsp;=&nbsp;md5hash.digest(&quot;hex&quot;);\nconsole.log(hexstr);\n//&nbsp;打印结果&nbsp;fc3ff98e8c6a0d3087d515c0473f8677\n\n//&nbsp;第三次生成\nmd5hash&nbsp;=&nbsp;crypto.createHash(&quot;md5&quot;);\n//&nbsp;把字符串md5生成器，可多此调用。\nmd5hash.update(str);\nmd5hash.update(&quot;leo&quot;);\n//&nbsp;第三次生成最终的md5值\nhexstr&nbsp;=&nbsp;md5hash.digest(&quot;hex&quot;);\nconsole.log(hexstr);\n//&nbsp;打印结果&nbsp;037011eb16e5358f3908372c7f27cda4</pre><p>仔细看这段代码，会发现为同样的字符串生成的md5值是一样的，第一次和第二次调用md5hash.digest生成的md5值是相同的，第三次多调用了一次update生成的md5就不相同了，也就是说，数据变化造成md5也不相同。</p><p>通过上述例子，基本了解了状况，也就是通过某种手段把数据（多大都没关系）通过多次或一次性的加入到md5生成器中，然后调用digest方法得到一小段字符串，这个字符串就可以证明数据的完整性。</p><p>node.js 中数据验证的手段有一些，下面把这些手段慢慢道来。</p><p>通过 crypto.createHash(algorithm) 和 crypto.createHmac(algorithm, key) 方法可以得到生成器。当然并不只是能生成md5生成器，其实也差不多，无非就是算法不同而已，无论多么复杂，思路要清晰，要记住生成器无非就是生成一小段字符串，用来验证数据完整性而已！</p><h5 id=\"crypto-createhash-algorithm-\">crypto.createHash(algorithm)</h5><p>这个会得到Hash对象，也就是生成器。algorithm算法，有很多，md5是其中一种，对于我们来说无所谓，随便选择一个即可，要想知道当前node.js版本支持那些算法，可以通过crypto.getHashs() 得到一个数组，看下面我的机器得到了那些算法，这些算法随意挑一个用即可，无所谓，谁又晓得这些算法有什么区别。</p><pre class=\"code\">var&nbsp;crypto&nbsp;=&nbsp;require(&quot;crypto&quot;);\nconsole.log(crypto.getHashes());</pre><p>打印出：</p><pre class=\"code\">[&nbsp;&#39;DSA-SHA1-old&#39;,\n&nbsp;&#39;dsa&#39;,\n&nbsp;&#39;dsa-sha&#39;,\n&nbsp;&#39;dsa-sha1&#39;,\n&nbsp;&#39;dsaEncryption&#39;,\n&nbsp;&#39;dsaWithSHA&#39;,\n&nbsp;&#39;dsaWithSHA1&#39;,\n&nbsp;&#39;dss1&#39;,\n&nbsp;&#39;ecdsa-with-SHA1&#39;,\n&nbsp;&#39;md4&#39;,\n&nbsp;&#39;md4WithRSAEncryption&#39;,\n&nbsp;&#39;md5&#39;,\n&nbsp;&#39;md5WithRSAEncryption&#39;,\n&nbsp;&#39;mdc2&#39;,\n&nbsp;&#39;mdc2WithRSA&#39;,\n&nbsp;&#39;ripemd&#39;,\n&nbsp;&#39;ripemd160&#39;,\n&nbsp;&#39;ripemd160WithRSA&#39;,\n&nbsp;&#39;rmd160&#39;,\n&nbsp;&#39;rsa-md4&#39;,\n&nbsp;&#39;rsa-md5&#39;,\n&nbsp;&#39;rsa-mdc2&#39;,\n&nbsp;&#39;rsa-ripemd160&#39;,\n&nbsp;&#39;rsa-sha&#39;,\n&nbsp;&#39;rsa-sha1&#39;,\n&nbsp;&#39;rsa-sha1-2&#39;,\n&nbsp;&#39;rsa-sha224&#39;,\n&nbsp;&#39;rsa-sha256&#39;,\n&nbsp;&#39;rsa-sha384&#39;,\n&nbsp;&#39;rsa-sha512&#39;,\n&nbsp;&#39;sha&#39;,\n&nbsp;&#39;sha1&#39;,\n&nbsp;&#39;sha1WithRSAEncryption&#39;,\n&nbsp;&#39;sha224&#39;,\n&nbsp;&#39;sha224WithRSAEncryption&#39;,\n&nbsp;&#39;sha256&#39;,\n&nbsp;&#39;sha256WithRSAEncryption&#39;,\n&nbsp;&#39;sha384&#39;,\n&nbsp;&#39;sha384WithRSAEncryption&#39;,\n&nbsp;&#39;sha512&#39;,\n&nbsp;&#39;sha512WithRSAEncryption&#39;,\n&nbsp;&#39;shaWithRSAEncryption&#39;,\n&nbsp;&#39;ssl2-md5&#39;,\n&nbsp;&#39;ssl3-md5&#39;,\n&nbsp;&#39;ssl3-sha1&#39;,\n&nbsp;&#39;whirlpool&#39;&nbsp;]</pre><p>my god！ 我只认识md5！ 其实无所谓，说真的，身为作者的我连md5原理都不懂。不过我会用，这就够了。就好比不懂电的原理，也会开关灯照明一样。忘记这些算法噩梦吧，我们继续。</p><p>随意选择一个... 看哪个好看呢，除了md5，我们选择sha算法，管他是怎么算的呢。</p><pre class=\"code\">//&nbsp;生成个莫名其妙sha创建器</pre><p><var>sha = crypto.createHash(&quot;sha&quot;);</var>下面丢两端字符串给它。</p><pre class=\"code\">var&nbsp;crypto&nbsp;=&nbsp;require(&quot;crypto&quot;);\nvar&nbsp;sha&nbsp;=&nbsp;crypto.createHash(&quot;sha&quot;);\nsha.update(&quot;my&nbsp;name&nbsp;is&nbsp;&quot;)\nsha.update(&quot;利奥&quot;)</pre><p>然后digest一下，看看生成hex字符串。</p><pre class=\"code\">var&nbsp;crypto&nbsp;=&nbsp;require(&quot;crypto&quot;);\nvar&nbsp;sha&nbsp;=&nbsp;crypto.createHash(&quot;sha&quot;);\nsha.update(&quot;my&nbsp;name&nbsp;is&nbsp;&quot;)\nsha.update(&quot;利奥&quot;)\nconsole.log(sha.digest(&quot;hex&quot;))</pre><p>打印出结果：</p><pre class=\"code\">19985bb2a9a65daad500e4b70727d13497448709</pre><p>下面把两端update合为一个，字符串内容是一样的，看看sha的结果是否一致。</p><pre class=\"code\">var&nbsp;crypto&nbsp;=&nbsp;require(&quot;crypto&quot;);\nvar&nbsp;sha&nbsp;=&nbsp;crypto.createHash(&quot;sha&quot;);\nsha.update(&quot;my&nbsp;name&nbsp;is&nbsp;利奥&quot;)\nconsole.log(sha.digest(&quot;hex&quot;))</pre><p>打印结果与先前一致：</p><pre class=\"code\">19985bb2a9a65daad500e4b70727d13497448709</pre><h5 id=\"crypto-createhmac-algorithm-key-\">crypto.createHmac(algorithm, key)</h5><p>这个方法得到Hmac对象，谁知道Hmac是啥呢，不过只要知道他的功能和前面介绍的Hash一样就行了，也是用来验证数据完整性的。</p><p>这个方法的不同无非就是多了一个key，比如update的数据都一致，就是key不同，那么digest得到的结果也不同。看个完整例子吧。</p><pre class=\"code\">var&nbsp;crypto&nbsp;=&nbsp;require(&quot;crypto&quot;);\nvar&nbsp;sha&nbsp;=&nbsp;crypto.createHmac(&quot;sha&quot;,&quot;lol&quot;);\nsha.update(&quot;my&nbsp;name&nbsp;is&nbsp;利奥&quot;)\nconsole.log(sha.digest(&quot;hex&quot;))</pre><p>得到的结果是：</p><pre class=\"code\">2ff412ce186bea688c8501569554641bec669c95</pre><p>下面把key变一下，看看结果</p><pre class=\"code\">var&nbsp;crypto&nbsp;=&nbsp;require(&quot;crypto&quot;);\n//&nbsp;变成god\nvar&nbsp;sha&nbsp;=&nbsp;crypto.createHmac(&quot;sha&quot;,&quot;god&quot;);\nsha.update(&quot;my&nbsp;name&nbsp;is&nbsp;利奥&quot;)\nconsole.log(sha.digest(&quot;hex&quot;))</pre><p>打印结果变成为了</p><pre class=\"code\">fe95a527cbc60deec342a3d917360e649ef096cc</pre><h5 id=\"-\">小结</h5><p>本节介绍了数据完整性的验证，验证无非就是用一小段字符串，如果字符串相同就说明数据一致。Hash和Hmac对象都是用来生成这种字符串的，区别就是Hmac多了一个key，这就说明，采用Hmac方式只知道验证字符串还不够，还得知道key，才能确定数据是否一致。下一节介绍加密与解密数据。</p>','[{\"type\":\"contents\",\"content\":\"验证数据的完整性\\n在网上下载东西的时候往往会提供md5验证字符串，这样就可以对下载的东西验证是否数据完整。数据完整性可以保证数据是否被更改过，只要更改一个字节，那么得到的md5就和先前不同。下面用node.js为一段字符串生成一个md5字符串，然后更改一下字符串再次生成一下md5，看看两次的md5值是否一致。\\n// 导入加密解密库\\nvar crypto = require(\\\"crypto\\\");\\n\\n// 创建一个md5生成工具对象\\nvar md5hash = crypto.createHash(\\\"md5\\\");\\n// 测试用的字符串\\nvar str = \\\"hello world!\\\";\\n// 把字符串md5生成器，可多此调用。\\nmd5hash.update(str);\\n// 生成最终的md5值\\nvar hexstr = md5hash.digest(\\\"hex\\\");\\nconsole.log(hexstr);\\n// 打印结果 fc3ff98e8c6a0d3087d515c0473f8677\\n\\n// 第二次生成同样的字符串\\n// 创建一个md5生成工具对象\\n// 如果已调用过digest，那么必须重新生成md5hash。\\nmd5hash = crypto.createHash(\\\"md5\\\");\\n// 把字符串md5生成器，可多此调用。\\nmd5hash.update(str);\\n// 第二次生成最终的md5值\\nhexstr = md5hash.digest(\\\"hex\\\");\\nconsole.log(hexstr);\\n// 打印结果 fc3ff98e8c6a0d3087d515c0473f8677\\n\\n// 第三次生成\\nmd5hash = crypto.createHash(\\\"md5\\\");\\n// 把字符串md5生成器，可多此调用。\\nmd5hash.update(str);\\nmd5hash.update(\\\"leo\\\");\\n// 第三次生成最终的md5值\\nhexstr = md5hash.digest(\\\"hex\\\");\\nconsole.log(hexstr);\\n// 打印结果 037011eb16e5358f3908372c7f27cda4\\n仔细看这段代码，会发现为同样的字符串生成的md5值是一样的，第一次和第二次调用md5hash.digest生成的md5值是相同的，第三次多调用了一次update生成的md5就不相同了，也就是说，数据变化造成md5也不相同。\\n通过上述例子，基本了解了状况，也就是通过某种手段把数据（多大都没关系）通过多次或一次性的加入到md5生成器中，然后调用digest方法得到一小段字符串，这个字符串就可以证明数据的完整性。\\nnode.js 中数据验证的手段有一些，下面把这些手段慢慢道来。\\n通过 crypto.createHash(algorithm) 和 crypto.createHmac(algorithm, key) 方法可以得到生成器。当然并不只是能生成md5生成器，其实也差不多，无非就是算法不同而已，无论多么复杂，思路要清晰，要记住生成器无非就是生成一小段字符串，用来验证数据完整性而已！\\ncrypto.createHash(algorithm)\\n这个会得到Hash对象，也就是生成器。algorithm算法，有很多，md5是其中一种，对于我们来说无所谓，随便选择一个即可，要想知道当前node.js版本支持那些算法，可以通过crypto.getHashs() 得到一个数组，看下面我的机器得到了那些算法，这些算法随意挑一个用即可，无所谓，谁又晓得这些算法有什么区别。\\nvar crypto = require(\\\"crypto\\\");\\nconsole.log(crypto.getHashes());\\n打印出：\\n[ \'DSA-SHA1-old\',\\n \'dsa\',\\n \'dsa-sha\',\\n \'dsa-sha1\',\\n \'dsaEncryption\',\\n \'dsaWithSHA\',\\n \'dsaWithSHA1\',\\n \'dss1\',\\n \'ecdsa-with-SHA1\',\\n \'md4\',\\n \'md4WithRSAEncryption\',\\n \'md5\',\\n \'md5WithRSAEncryption\',\\n \'mdc2\',\\n \'mdc2WithRSA\',\\n \'ripemd\',\\n \'ripemd160\',\\n \'ripemd160WithRSA\',\\n \'rmd160\',\\n \'rsa-md4\',\\n \'rsa-md5\',\\n \'rsa-mdc2\',\\n \'rsa-ripemd160\',\\n \'rsa-sha\',\\n \'rsa-sha1\',\\n \'rsa-sha1-2\',\\n \'rsa-sha224\',\\n \'rsa-sha256\',\\n \'rsa-sha384\',\\n \'rsa-sha512\',\\n \'sha\',\\n \'sha1\',\\n \'sha1WithRSAEncryption\',\\n \'sha224\',\\n \'sha224WithRSAEncryption\',\\n \'sha256\',\\n \'sha256WithRSAEncryption\',\\n \'sha384\',\\n \'sha384WithRSAEncryption\',\\n \'sha512\',\\n \'sha512WithRSAEncryption\',\\n \'shaWithRSAEncryption\',\\n \'ssl2-md5\',\\n \'ssl3-md5\',\\n \'ssl3-sha1\',\\n \'whirlpool\' ]\\nmy god！ 我只认识md5！ 其实无所谓，说真的，身为作者的我连md5原理都不懂。不过我会用，这就够了。就好比不懂电的原理，也会开关灯照明一样。忘记这些算法噩梦吧，我们继续。\\n随意选择一个... 看哪个好看呢，除了md5，我们选择sha算法，管他是怎么算的呢。\\n// 生成个莫名其妙sha创建器\\nsha = crypto.createHash(\\\"sha\\\");下面丢两端字符串给它。\\nvar crypto = require(\\\"crypto\\\");\\nvar sha = crypto.createHash(\\\"sha\\\");\\nsha.update(\\\"my name is \\\")\\nsha.update(\\\"利奥\\\")\\n然后digest一下，看看生成hex字符串。\\nvar crypto = require(\\\"crypto\\\");\\nvar sha = crypto.createHash(\\\"sha\\\");\\nsha.update(\\\"my name is \\\")\\nsha.update(\\\"利奥\\\")\\nconsole.log(sha.digest(\\\"hex\\\"))\\n打印出结果：\\n19985bb2a9a65daad500e4b70727d13497448709\\n下面把两端update合为一个，字符串内容是一样的，看看sha的结果是否一致。\\nvar crypto = require(\\\"crypto\\\");\\nvar sha = crypto.createHash(\\\"sha\\\");\\nsha.update(\\\"my name is 利奥\\\")\\nconsole.log(sha.digest(\\\"hex\\\"))\\n打印结果与先前一致：\\n19985bb2a9a65daad500e4b70727d13497448709\\ncrypto.createHmac(algorithm, key)\\n这个方法得到Hmac对象，谁知道Hmac是啥呢，不过只要知道他的功能和前面介绍的Hash一样就行了，也是用来验证数据完整性的。\\n这个方法的不同无非就是多了一个key，比如update的数据都一致，就是key不同，那么digest得到的结果也不同。看个完整例子吧。\\nvar crypto = require(\\\"crypto\\\");\\nvar sha = crypto.createHmac(\\\"sha\\\",\\\"lol\\\");\\nsha.update(\\\"my name is 利奥\\\")\\nconsole.log(sha.digest(\\\"hex\\\"))\\n得到的结果是：\\n2ff412ce186bea688c8501569554641bec669c95\\n下面把key变一下，看看结果\\nvar crypto = require(\\\"crypto\\\");\\n// 变成god\\nvar sha = crypto.createHmac(\\\"sha\\\",\\\"god\\\");\\nsha.update(\\\"my name is 利奥\\\")\\nconsole.log(sha.digest(\\\"hex\\\"))\\n打印结果变成为了\\nfe95a527cbc60deec342a3d917360e649ef096cc\\n小结\\n本节介绍了数据完整性的验证，验证无非就是用一小段字符串，如果字符串相同就说明数据一致。Hash和Hmac对象都是用来生成这种字符串的，区别就是Hmac多了一个key，这就说明，采用Hmac方式只知道验证字符串还不够，还得知道key，才能确定数据是否一致。下一节介绍加密与解密数据。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444889347000.jpg','2015-08-23 14:29:28','2020-08-20 15:44:25'),(245,'PowerCMD——cmd的命令行工具','PowerCMD——cmd的命令行工具','1','1','','powercmd','2',NULL,'','在普通情况下，我们使用cmd运行一些基本的命令，会感觉很吃力，很多命令用着都不舒服，又不如linux的终端用着方便。看到一个教学视频，刚好用的就是powercmd，于是就下载来使用一番，感觉很是不错。','1','','','0:01',762,'2','0',NULL,0,'0',224852,'<p>总结起来有如下的特点：</p><p><br/></p><p>&nbsp; &nbsp; 之前就想整理一下程序员经常使用的一些工具，最近有时间正好整理一下。</p><p>&nbsp; &nbsp; 有句话叫做：“工欲善其事必先利其器”，而我就算是搜集工具组装成一个系列——善事利器，来记录一下工作学习中常用的一些工具。</p><p>&nbsp; &nbsp; 总结起来，该工具具有如下特点：</p><p><br/></p><p>&nbsp; &nbsp; 　　1 行号显示</p><p>&nbsp; &nbsp; 　　2 高亮查询</p><p>&nbsp; &nbsp; 　　3 历史记录</p><p>&nbsp; &nbsp; 　　4 自动补全</p><p>&nbsp; &nbsp; 　　5 多窗口</p><p>&nbsp; &nbsp; 　　6 风格自定义</p><p><br/></p><p>　　在普通情况下，我们使用cmd运行一些基本的命令，会感觉很吃力，很多命令用着都不舒服，又不如linux的终端用着方便。</p><p>　　看到一个教学视频，刚好用的就是powercmd，于是就下载来使用一番，感觉很是不错。</p><p><br/></p><p>　　如果需要下载可以登录官网：</p><p>　　http://www.powercmd.com/</p><p>　　点击 free download 就可以下载：</p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_38_45_493_1033.jpg\" title=\"\" alt=\"DoraCMS命令行工具.jpg\"/></p><p>　　安装非常简单，直接无脑下一步就可以了。</p><p>　　程序的界面也很干净清爽：</p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_38_51_534_1034.jpg\" title=\"\" alt=\"DoraCMS命令行工具1.jpg\"/></p><p><br/></p><p>　　总结起来有如下的特点：</p><p>　　1 支持行号</p><p>　　2 支持查询高亮显示</p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_38_59_493_1035.jpg\" title=\"\" alt=\"DoraCMS命令行工具2.jpg\"/></p><p>　　3 历史记录</p><p>　　4 支持自动补全</p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_39_6_694_1036.jpg\" title=\"\" alt=\"DoraCMS命令行工具3.jpg\"/></p><p>　　5 支持多窗口</p><p>　　6 多种风格自定义&nbsp;</p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_39_11_593_1037.jpg\" title=\"\" alt=\"DoraCMS命令行工具4.jpg\"/></p>','[{\"type\":\"contents\",\"content\":\"总结起来有如下的特点：\\n\\n    之前就想整理一下程序员经常使用的一些工具，最近有时间正好整理一下。\\n    有句话叫做：“工欲善其事必先利其器”，而我就算是搜集工具组装成一个系列——善事利器，来记录一下工作学习中常用的一些工具。\\n    总结起来，该工具具有如下特点：\\n\\n    　　1 行号显示\\n    　　2 高亮查询\\n    　　3 历史记录\\n    　　4 自动补全\\n    　　5 多窗口\\n    　　6 风格自定义\\n\\n　　在普通情况下，我们使用cmd运行一些基本的命令，会感觉很吃力，很多命令用着都不舒服，又不如linux的终端用着方便。\\n　　看到一个教学视频，刚好用的就是powercmd，于是就下载来使用一番，感觉很是不错。\\n\\n　　如果需要下载可以登录官网：\\n　　http://www.powercmd.com/\\n　　点击 free download 就可以下载：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_38_45_493_1033.jpg\"},{\"type\":\"contents\",\"content\":\"\\n　　安装非常简单，直接无脑下一步就可以了。\\n　　程序的界面也很干净清爽：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_38_51_534_1034.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n　　总结起来有如下的特点：\\n　　1 支持行号\\n　　2 支持查询高亮显示\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_38_59_493_1035.jpg\"},{\"type\":\"contents\",\"content\":\"\\n　　3 历史记录\\n　　4 支持自动补全\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_39_6_694_1036.jpg\"},{\"type\":\"contents\",\"content\":\"\\n　　5 支持多窗口\\n　　6 多种风格自定义 \\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_39_11_593_1037.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1449627841000.jpg','2015-12-09 02:33:42','2020-10-17 15:31:52'),(246,'Node.js API实例讲解——Buffer是什么','Buffer是什么','2','1','','nodejs,前端开发','2',NULL,'','Buffer类是一个全局的直接处理二进制数据类型。它可以以各种方式构造。纯Javascript对于Unicode的处理是友好的，而对二进制并不友好。','1','','','0:01',762,'2','0',NULL,0,'0',223975,'<h3>Buffer是什么</h3><p>Buffer类是一个全局的直接处理二进制数据类型。它可以以各种方式构造。</p><p>纯Javascript对于Unicode的处理是友好的，而对二进制并不友好。但处理TCP数据流和文件系统，必须要处理字节流，所以node.js提供一套策略来创建和操作字节流。&nbsp;</p><p>数据储存在一个Buffer实例中，一个Buffer的大小是固定的，类似于不可变的整数数组。</p><p>Buffer与字符串之间的转换需要指定明确的编码。</p><p>Buffer支持的编码：</p><p>&#39;ascii&#39;编码，只为7位的ASCII的数据。这个编码方法非常快！</p><p>&#39;utf8&#39; 编码，支持Unicode字符。</p><p>&#39;utf16le&#39; 编码，小端编码的Unicode字符。对（u10000 ~ u10FFFF）的支持。</p><p>&#39;ucs2&#39; 是 &#39;utf16le&#39; 编码的别名。</p><p>&#39;base64&#39; 是 Base64字符串编码。</p><p>&#39;hex&#39; 表示十六进制编码，每个byte编码为两个十六进制字符。</p><p>一个Buffer对象也可以使用一个类型数组。Buffer对象克隆到一个ArrayBuffer，用作类型数组存储支持。node.js提供的Buffer和标准类型化数组是两套不同的系统，所以Buffer和ArrayBuffer的内存不共享。</p><p>注意：虽然V8提供了标准化的类型化数组，但node.js自身定义的Buffer提供了更灵活强大的API，在之后的章节会详细讲解两者的转换与使用方法。</p><h3 id=\"-\">什么是类型化数组</h3><p>可以使用类型化数组处理网络协议、二进制文件图片等二进制数据，这个在之前是无法做到的，这也是HTML5标准化支持。<span class=\"invade-word\">sex</span></p><p><span class=\"invade-word\">book</span>类型化数组包括以下类，ArrayBuffer、DataView、Int8Array、Uint8Array、Int16Array、Uint16Array、Int32Array、Uint32Array、Float32Array、Float64Array。</p><h3 id=\"arraybuffer-\">ArrayBuffer 对象</h3><p>表示原始数据的缓冲区，用于存储不同类型化数组的数据。 无法从 ArrayBuffer 读取或向其写入，但是，可将其传递给类型化数组或 DataView 对象 以解释原始缓冲区。</p><h3 id=\"dataview-\">DataView 对象</h3><p>可以使用 DataView 对象 来将不同类型的二进制数据读取和写入ArrayBuffer中的任何位置。</p><h3 id=\"int8array-\">Int8Array 对象</h3><p>8 位二补码有符号整数</p><h3 id=\"uint8array-\">Uint8Array 对象</h3><p>8 位无符号整数</p><h3 id=\"int16array-\">Int16Array 对象</h3><p>16 位二补码有符号整数</p><h3 id=\"uint16array-\">Uint16Array 对象</h3><p>16 位无符号整数</p><h3 id=\"int32array-\">Int32Array 对象</h3><p>32 位二补码有符号整数</p><h3 id=\"uint32array-\">Uint32Array 对象</h3><p>32 位无符号整数</p><h3 id=\"float32array-\">Float32Array 对象</h3><p>32 位 IEEE 浮点数</p><h3 id=\"float64array-\">Float64Array 对象</h3><p>64 位 IEEE 浮点数</p><p>之后章节将会详细介绍。</p>','[{\"type\":\"contents\",\"content\":\"Buffer是什么\\nBuffer类是一个全局的直接处理二进制数据类型。它可以以各种方式构造。\\n纯Javascript对于Unicode的处理是友好的，而对二进制并不友好。但处理TCP数据流和文件系统，必须要处理字节流，所以node.js提供一套策略来创建和操作字节流。 \\n数据储存在一个Buffer实例中，一个Buffer的大小是固定的，类似于不可变的整数数组。\\nBuffer与字符串之间的转换需要指定明确的编码。\\nBuffer支持的编码：\\n\'ascii\'编码，只为7位的ASCII的数据。这个编码方法非常快！\\n\'utf8\' 编码，支持Unicode字符。\\n\'utf16le\' 编码，小端编码的Unicode字符。对（u10000 ~ u10FFFF）的支持。\\n\'ucs2\' 是 \'utf16le\' 编码的别名。\\n\'base64\' 是 Base64字符串编码。\\n\'hex\' 表示十六进制编码，每个byte编码为两个十六进制字符。\\n一个Buffer对象也可以使用一个类型数组。Buffer对象克隆到一个ArrayBuffer，用作类型数组存储支持。node.js提供的Buffer和标准类型化数组是两套不同的系统，所以Buffer和ArrayBuffer的内存不共享。\\n注意：虽然V8提供了标准化的类型化数组，但node.js自身定义的Buffer提供了更灵活强大的API，在之后的章节会详细讲解两者的转换与使用方法。\\n什么是类型化数组\\n可以使用类型化数组处理网络协议、二进制文件图片等二进制数据，这个在之前是无法做到的，这也是HTML5标准化支持。sex\\nbook类型化数组包括以下类，ArrayBuffer、DataView、Int8Array、Uint8Array、Int16Array、Uint16Array、Int32Array、Uint32Array、Float32Array、Float64Array。\\nArrayBuffer 对象\\n表示原始数据的缓冲区，用于存储不同类型化数组的数据。 无法从 ArrayBuffer 读取或向其写入，但是，可将其传递给类型化数组或 DataView 对象 以解释原始缓冲区。\\nDataView 对象\\n可以使用 DataView 对象 来将不同类型的二进制数据读取和写入ArrayBuffer中的任何位置。\\nInt8Array 对象\\n8 位二补码有符号整数\\nUint8Array 对象\\n8 位无符号整数\\nInt16Array 对象\\n16 位二补码有符号整数\\nUint16Array 对象\\n16 位无符号整数\\nInt32Array 对象\\n32 位二补码有符号整数\\nUint32Array 对象\\n32 位无符号整数\\nFloat32Array 对象\\n32 位 IEEE 浮点数\\nFloat64Array 对象\\n64 位 IEEE 浮点数\\n之后章节将会详细介绍。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444890162000.jpg','2015-08-02 09:37:37','2020-08-20 15:44:26'),(247,'Express 4.8.x—路由器、响应与渲染','路由器、响应与渲染','2','1','','​路由器','2',NULL,'','路由器、响应与渲染，简单来说，下面的伪代码函数，就说明了web工作的流程','1','','','0:01',762,'2','0',NULL,0,'0',224676,'<h3>路由器、响应与渲染</h3><p>简单来说，下面的伪代码函数，就说明了web工作的流程：</p><pre>//&nbsp;router路由器，根据/mydog知道应该用相应的&nbsp;handle&nbsp;处理器来处理这个请求。\nrouter(“/mydog”,&nbsp;function&nbsp;handle(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req&nbsp;//&nbsp;请求对象，记录有客户端请求的所有信息，告诉你，他要什么。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res&nbsp;//&nbsp;响应对象，你可以通过它，把数据交给客户端\n}</pre><p>这就是web工作的流程，very easy。</p><p>express也就是做到基础的这一点，并且它也会更完善，让我们这些使用它的人更加轻松愉快。</p><h4 id=\"-\">路由器</h4><p>express 的路由器表现形式是：</p><pre>app.get(“/xxx”,function&nbsp;router_handle(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;好像和刚才的没什么两样\n})</pre><p><span class=\"invade-word\">god</span>注意这里的get表示客户端通过get方法进行请求，那么修改后，下面是采用post方法进行请求。</p><pre>app.post(“/xxx”,function&nbsp;router_handle(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;好像和刚才的还是没什么两样，毫无违和感！\n})</pre><p>简单点好。复杂很容易，但简化却是最难的，往往真正的好东西，就是那么简单直接。</p><p><span class=\"invade-word\">good</span>当然 get 和post方法之外还可能用到 delete / put 或自己创建的方法，在浏览器不支持，但可以通过一个参数搞定：</p><pre>&lt;form&nbsp;method=”post”&gt;\n&lt;input&nbsp;type=”hidden”&nbsp;name=”_method”&nbsp;value=”put”&nbsp;&nbsp;/&gt;&nbsp;&nbsp;\n&lt;/form&gt;</pre><p>在服务器端需要加入一个插件</p><pre>var&nbsp;methodOverride&nbsp;=&nbsp;require(“method-override”);\napp.use(methodOverride(&#39;_method&#39;));</pre><p>app.get / app.post 这种路由的方式不是太好，我们需要更好组织路由的方式，可以采用 express.Router 类创建更好的路由方式。</p><p><code>userRouter.js</code>&nbsp;</p><pre>//&nbsp;userRouter.js\nvar&nbsp;router&nbsp;=&nbsp;express.Router();\n\nrouter.get(“/”,function(req,res){\n\n})\n\n\nrouter.put(“/update”,function(req,res){\n\n})\n\nmodule.exports&nbsp;=&nbsp;router;</pre><p><code>main.js</code><span class=\"invade-word\">sex</span></p><pre>……\n\napp.use(“/user”,require(“./userRouter”));&nbsp;//&nbsp;加入路由</pre><p>那么，在浏览器访问时，就可以通过 /user 和 /user?_method=put 方式调用对应的路由处理器。</p><p>一个web应用程序可能有很多路由，我们可以通过这种切分的方式来模块化路由，便于管理。</p><h4 id=\"-\">页面渲染</h4><p>页面渲染也可以叫动态页面渲染，随便你叫什么。我们知道动态模版引擎有很多，最终都是要生成一个html页面，无论哪个引擎再高深，原理只有一个：“ 模版引擎的作用就是，通过把数据注入到模版中，转换一个html页面，一个模版通过给定数据的不同，生成的html页面也不相同，所以叫做动态页面。 ”</p><p>我们知道response响应对象，它有很多方法可以用于响应。</p><p>res.send(“hello”); // 浏览器会看到hello&nbsp;</p><p>res.render(“index.html”,{title:”world”}); &nbsp;// 会渲染一个页面</p><p>res.download(“/my.pdf”); &nbsp; // 浏览器会下载一个文件。</p><p>还有很多方法，这里的 res.render 方法是渲染一个页面，但响应方法不只是渲染页面，可以下载，还可以只是一个字符串等等。之后的章节会详细介绍这些知识。</p>','[{\"type\":\"contents\",\"content\":\"路由器、响应与渲染\\n简单来说，下面的伪代码函数，就说明了web工作的流程：\\n// router路由器，根据/mydog知道应该用相应的 handle 处理器来处理这个请求。\\nrouter(“/mydog”, function handle(req,res){\\n     req // 请求对象，记录有客户端请求的所有信息，告诉你，他要什么。\\n     res // 响应对象，你可以通过它，把数据交给客户端\\n}\\n这就是web工作的流程，very easy。\\nexpress也就是做到基础的这一点，并且它也会更完善，让我们这些使用它的人更加轻松愉快。\\n路由器\\nexpress 的路由器表现形式是：\\napp.get(“/xxx”,function router_handle(req,res){\\n     // 好像和刚才的没什么两样\\n})\\ngod注意这里的get表示客户端通过get方法进行请求，那么修改后，下面是采用post方法进行请求。\\napp.post(“/xxx”,function router_handle(req,res){\\n     // 好像和刚才的还是没什么两样，毫无违和感！\\n})\\n简单点好。复杂很容易，但简化却是最难的，往往真正的好东西，就是那么简单直接。\\ngood当然 get 和post方法之外还可能用到 delete / put 或自己创建的方法，在浏览器不支持，但可以通过一个参数搞定：\\n&lt;form method=”post”&gt;\\n&lt;input type=”hidden” name=”_method” value=”put”  /&gt;  \\n&lt;/form&gt;\\n在服务器端需要加入一个插件\\nvar methodOverride = require(“method-override”);\\napp.use(methodOverride(\'_method\'));\\napp.get / app.post 这种路由的方式不是太好，我们需要更好组织路由的方式，可以采用 express.Router 类创建更好的路由方式。\\nuserRouter.js \\n// userRouter.js\\nvar router = express.Router();\\n\\nrouter.get(“/”,function(req,res){\\n\\n})\\n\\n\\nrouter.put(“/update”,function(req,res){\\n\\n})\\n\\nmodule.exports = router;\\nmain.jssex\\n……\\n\\napp.use(“/user”,require(“./userRouter”)); // 加入路由\\n那么，在浏览器访问时，就可以通过 /user 和 /user?_method=put 方式调用对应的路由处理器。\\n一个web应用程序可能有很多路由，我们可以通过这种切分的方式来模块化路由，便于管理。\\n页面渲染\\n页面渲染也可以叫动态页面渲染，随便你叫什么。我们知道动态模版引擎有很多，最终都是要生成一个html页面，无论哪个引擎再高深，原理只有一个：“ 模版引擎的作用就是，通过把数据注入到模版中，转换一个html页面，一个模版通过给定数据的不同，生成的html页面也不相同，所以叫做动态页面。 ”\\n我们知道response响应对象，它有很多方法可以用于响应。\\nres.send(“hello”); // 浏览器会看到hello \\nres.render(“index.html”,{title:”world”});  // 会渲染一个页面\\nres.download(“/my.pdf”);   // 浏览器会下载一个文件。\\n还有很多方法，这里的 res.render 方法是渲染一个页面，但响应方法不只是渲染页面，可以下载，还可以只是一个字符串等等。之后的章节会详细介绍这些知识。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445058125000.jpg','2015-10-17 05:05:37','2020-08-20 15:44:22'),(248,'cqrs领域驱动设计nodejs框架总结','cqrs领域驱动设计nodejs框架总结','1','1','','cqrs,ddd,nodejs,框架','2',NULL,'','cqrs （Command Query Responsibility Segregation），即命令查询的责任分离，该模式从业务上分离修改 (Command，增，删，改，会对系统状态进行修改)和查询（Query，查，不会对系统状态进行修改)的行为。','1','','','0:01',762,'2','0',NULL,0,'0',225099,'<p style=\"white-space: normal; text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2017_4_11_22_27_31_386_1073.png\" title=\"\" alt=\"261851413457170.png\"/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">最近在熟悉曾老师的<a href=\"https://github.com/liangzeng/cqrs\" target=\"_blank\" title=\"cqrs\">cqrs框架</a>&nbsp;，了解了基本api，特总结一下。</p><p style=\"white-space: normal;\">cqrs （<span style=\"color: rgb(68, 68, 68); font-family: &quot;Lucida Grande&quot;, &quot;Lucida Sans Unicode&quot;, Helvetica, Arial, Verdana, sans-serif; font-size: 14px; text-align: justify; background-color: rgb(255, 255, 255);\">Command Query Responsibility Segregation</span>），即命令查询的责任分离，该思想最早在&nbsp;<a href=\"http://www.jdon.com/\" target=\"_blank\" title=\"json\">JDON</a>&nbsp;上被提出，该模式从业务上分离修改 (Command，增，删，改，会对系统状态进行修改)和查询（Query，查，不会对系统状态进行修改)的行为。从而使得逻辑更加清晰，便于对不同部分进行针对性的优化。</p><p style=\"white-space: normal;\">随着前端全栈的不断发展，涌现出了许多优秀的框架 koa，express等 MVC类的架构，但是随着系统的复杂度提升有必要进行重新思考。</p><p style=\"white-space: normal;\">DDD cqrs 框架 基于此类考虑实现了 node 端的领域驱动设计框架，总结下来有一下几个特点：</p><p style=\"white-space: normal;\">1、<strong>以客户需求为中心</strong>，建立对象不局限于getter,setter 贫血对象，要求建立富对象，因为客户是不管你的代码逻辑和实现方式的，关心的只是结果。举个栗子（伪代码）：</p><pre class=\"brush:js;toolbar:false\">class&nbsp;User&nbsp;extends&nbsp;Actor&nbsp;{\n\n&nbsp;&nbsp;&nbsp;&nbsp;constructor(data)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enable:&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loginname:&nbsp;data.loginname,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;password:&nbsp;data.password,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num:&nbsp;0,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nickname:&nbsp;data.loginname,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;email:&nbsp;data.email\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;createBefor(data,&nbsp;service)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Promise((resolve,&nbsp;reject)&nbsp;=&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service.get(&#39;UserRecorder&#39;,&nbsp;&#39;recorderid&#39;).then((record)&nbsp;=&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;enable(data,&nbsp;service)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!this.json.enable)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service.apply(&#39;enable&#39;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;disable(data,&nbsp;service)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(this.json.enable)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service.apply(&#39;disable&#39;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;plus(data,&nbsp;service)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service.apply(&#39;plus&#39;,&nbsp;data.num);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;update(data,&nbsp;service)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;error;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;recorder&nbsp;=&nbsp;yield&nbsp;service.get(&#39;UserRecorder&#39;,&nbsp;&#39;recorderid&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(data.nickname)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(data.email)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(error)&nbsp;throw&nbsp;error;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;updatePwd(data,&nbsp;service)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service.apply(&#39;updatePwd&#39;,&nbsp;data.password);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;when(event)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.when(event);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch&nbsp;(event.name)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&quot;updatePwd&quot;:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this._data.password&nbsp;=&nbsp;event.data;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&quot;updateEmail&quot;:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this._data.email&nbsp;=&nbsp;event.data;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&quot;updateNickName&quot;:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this._data.nickname&nbsp;=&nbsp;event.data;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&quot;plus&quot;:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this._data.num&nbsp;+=&nbsp;event.data;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&quot;enable&quot;:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this._data.enable&nbsp;=&nbsp;true;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&quot;disable&quot;:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this._data.enable&nbsp;=&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n\n}\n\nmodule.exports&nbsp;=&nbsp;User;</pre><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">2、<strong>职责分离</strong>。领域驱动的设计思想，在MVC的架构上，多了核心层（core），核心层只处理对象相关事务，底层实现，业务层交给上层（路由层），业务层的主要功能在于权限分配和主要业务逻辑。</p><p style=\"white-space: normal;\">3、事件驱动，cqrs的设计思想是事件驱动，事件驱动目的在于解耦，以前我们在处理两个或者三个对象之间的关系时，可能会这样写：</p><pre class=\"brush:js;toolbar:false\">adminFunc.delNotifiesById(req,&nbsp;res,&nbsp;nidsArr[i],&nbsp;()&nbsp;=&gt;&nbsp;{\nadminFunc.getAdminNotices(req,&nbsp;res,&nbsp;function&nbsp;(noticeObj)&nbsp;{\nreq.session.adminNotices&nbsp;=&nbsp;noticeObj;\nres.end(&#39;success&#39;);\n});\n});</pre><p style=\"white-space: normal;\">该功能是删除提示消息，设置成功后再发消息给管理员。理论上没什么问题，一个回调函数解决问题。但是这里涉及到了对两个对象的操作（1、Notice 2、Message）<br/></p><p style=\"white-space: normal;\">在cqrs思想中，我们可以在Message对象中对Notice的删除操作进行监听，当收到事件时，主动处理相应的逻辑。这一点跟redux的设计思想有点类似。</p><pre class=\"brush:js;toolbar:false\">let&nbsp;eventname&nbsp;=&nbsp;Domain.Alias().actorType(&#39;Topic&#39;).name(&#39;create&#39;).get()\ndomain.on(eventname,&nbsp;(event)&nbsp;=&gt;&nbsp;{\ndomain.get(&#39;Topic&#39;,&nbsp;event.actorId).then((topicJson)&nbsp;=&gt;&nbsp;{\ndomain.call(`User.${topicJson.authorId}.plus`,&nbsp;{&nbsp;num:&nbsp;3&nbsp;});\n})\n})</pre><p style=\"white-space: normal;\"><span style=\"background-color: rgb(255, 255, 255); color: rgb(192, 0, 0);\">通过监听Topic的创建事件来对User对象做相应的操作。</span></p><p style=\"white-space: normal;\">4、cqrs框架具备事件回溯的功能，什么情况下需要事件回溯？你可能第一时间想到的是银行系统，或者灾备系统。用户的操作在某些情况下是需要记录的，而不是整个系统只用数据库记录操作结果。</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">总结一下cqrs的api:</p><p style=\"white-space: normal;\">1、创建对象的形式，参照上面的User对象</p><p style=\"white-space: normal;\">2、cqrs框架有一个容纳所有对象（actor）的容器 domain，domain的方法：</p><p style=\"white-space: normal;\"><strong>对象创建：</strong><br/></p><pre class=\"brush:js;toolbar:false\">domain.create(&quot;User&quot;,&nbsp;{&nbsp;loginname,&nbsp;email,&nbsp;password&nbsp;}).then((json)&nbsp;=&gt;&nbsp;{\nreq.session.loginer&nbsp;=&nbsp;json;\nres.send({&nbsp;state:&nbsp;&#39;success&#39;,&nbsp;id:&nbsp;json.id&nbsp;});\n}).catch((err)&nbsp;=&gt;&nbsp;{\nres.send({&nbsp;state:&nbsp;&#39;error&#39;,&nbsp;error&nbsp;});\n})</pre><p style=\"white-space: normal;\"><strong>对象修改：</strong><br/></p><pre class=\"brush:js;toolbar:false\">domain.call(`User.${userId}.updatePwd`,&nbsp;{&nbsp;password&nbsp;},&nbsp;(err,&nbsp;json)&nbsp;=&gt;&nbsp;{\nif&nbsp;(err)&nbsp;{\nerr.state&nbsp;=&nbsp;&#39;error&#39;\nres.send(err);\n}&nbsp;else&nbsp;{\nres.send({&nbsp;state:&nbsp;&#39;success&#39;&nbsp;});\n}\n})</pre><p style=\"white-space: normal;\"><strong>对象的查询：</strong><br/></p><pre class=\"brush:js;toolbar:false\">domain.get(&#39;Topic&#39;,&nbsp;topicId).then((topic)&nbsp;=&gt;&nbsp;{\nif&nbsp;(topic&nbsp;&amp;&amp;&nbsp;topic.authorId&nbsp;===&nbsp;authorId)&nbsp;{\ndomain.call(`Topic.${topicId}.update`,&nbsp;{&nbsp;title,&nbsp;body&nbsp;},&nbsp;(err,&nbsp;result)&nbsp;=&gt;&nbsp;{\nif&nbsp;(err)&nbsp;{\nres.send({&nbsp;state:&nbsp;&#39;error&#39;&nbsp;})\n}&nbsp;else&nbsp;{\nres.send({\nstate:&nbsp;&#39;success&#39;\n});\n}\n})\n}&nbsp;else&nbsp;{\nres.send({&nbsp;state:&nbsp;&#39;error&#39;&nbsp;});\n}\n})</pre><p style=\"white-space: normal;\"><strong>事件监听，通过接受消息来处理数据</strong></p><pre class=\"brush:js;toolbar:false\">domain.on(&#39;*&#39;,&nbsp;(event)&nbsp;=&gt;&nbsp;{\n\nlet&nbsp;Model&nbsp;=&nbsp;models[event.actorType];\nif&nbsp;(event.name&nbsp;===&nbsp;&#39;create&#39;)&nbsp;{\nModel.create(event.data);\n}&nbsp;else&nbsp;if&nbsp;(envent.name&nbsp;===&nbsp;&#39;remove&#39;)&nbsp;{\nModel.remove({&nbsp;id:&nbsp;event.actorId&nbsp;})\n}&nbsp;else&nbsp;{\nconsole.log(&#39;--------&#39;,&nbsp;event.actorId,&nbsp;&#39;------&#39;,&nbsp;event.data,&#39;------&#39;,event.name);\nif&nbsp;(event.actorType&nbsp;===&nbsp;&#39;AdminUser&#39;)&nbsp;{\nlet&nbsp;data&nbsp;=&nbsp;{};\nswitch&nbsp;(event.name)&nbsp;{\ncase&nbsp;&#39;update&#39;:\nlet&nbsp;{&nbsp;userName,&nbsp;email,&nbsp;password,&nbsp;phoneNum,&nbsp;group&nbsp;}&nbsp;=&nbsp;event.data;\ndata&nbsp;=&nbsp;event.data;\nbreak;\n}\n}\n\nModel.update({&nbsp;id:&nbsp;event.actorId&nbsp;},&nbsp;data).exec();\n}\n\n})</pre><p style=\"white-space: normal;\">PS：cqrs在node全栈中的设计思想还比较新，但是大胆猜测在未来会有广阔的应用空间，值得深入了解下<img src=\"http://img.baidu.com/hi/jx2/j_0059.gif\"/>。&nbsp;</p><p><br/></p>','[{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2017_4_11_22_27_31_386_1073.png\"},{\"type\":\"contents\",\"content\":\"\\n\\n最近在熟悉曾老师的cqrs框架 ，了解了基本api，特总结一下。\\ncqrs （Command Query Responsibility Segregation），即命令查询的责任分离，该思想最早在 JDON 上被提出，该模式从业务上分离修改 (Command，增，删，改，会对系统状态进行修改)和查询（Query，查，不会对系统状态进行修改)的行为。从而使得逻辑更加清晰，便于对不同部分进行针对性的优化。\\n随着前端全栈的不断发展，涌现出了许多优秀的框架 koa，express等 MVC类的架构，但是随着系统的复杂度提升有必要进行重新思考。\\nDDD cqrs 框架 基于此类考虑实现了 node 端的领域驱动设计框架，总结下来有一下几个特点：\\n1、以客户需求为中心，建立对象不局限于getter,setter 贫血对象，要求建立富对象，因为客户是不管你的代码逻辑和实现方式的，关心的只是结果。举个栗子（伪代码）：\\nclass User extends Actor {\\n\\n    constructor(data) {\\n        super({\\n            enable: true,\\n            loginname: data.loginname,\\n            password: data.password,\\n            num: 0,\\n            nickname: data.loginname,\\n            email: data.email\\n        })\\n    }\\n\\n    static createBefor(data, service) {\\n        return new Promise((resolve, reject) =&gt; {\\n            service.get(\'UserRecorder\', \'recorderid\').then((record) =&gt; {\\n                resolve();\\n            })\\n        })\\n    }\\n\\n    enable(data, service) {\\n        if (!this.json.enable) {\\n            service.apply(\'enable\')\\n        }\\n    }\\n\\n    disable(data, service) {\\n        if (this.json.enable) {\\n            service.apply(\'disable\')\\n        }\\n    }\\n\\n    plus(data, service) {\\n        service.apply(\'plus\', data.num);\\n    }\\n\\n    * update(data, service) {\\n        let error;\\n        let recorder = yield service.get(\'UserRecorder\', \'recorderid\');\\n        if (data.nickname) {\\n            \\n        }\\n        if (data.email) {\\n            \\n        }\\n\\n        if (error) throw error;\\n    }\\n\\n    updatePwd(data, service) {\\n        service.apply(\'updatePwd\', data.password);\\n    }\\n\\n    when(event) {\\n        super.when(event);\\n        switch (event.name) {\\n            case \\\"updatePwd\\\":\\n                this._data.password = event.data;\\n                break;\\n            case \\\"updateEmail\\\":\\n                this._data.email = event.data;\\n                break;\\n            case \\\"updateNickName\\\":\\n                this._data.nickname = event.data;\\n                break;\\n            case \\\"plus\\\":\\n                this._data.num += event.data;\\n                break;\\n            case \\\"enable\\\":\\n                this._data.enable = true;\\n                break;\\n            case \\\"disable\\\":\\n                this._data.enable = false;\\n                break;\\n        }\\n    }\\n\\n\\n}\\n\\nmodule.exports = User;\\n\\n2、职责分离。领域驱动的设计思想，在MVC的架构上，多了核心层（core），核心层只处理对象相关事务，底层实现，业务层交给上层（路由层），业务层的主要功能在于权限分配和主要业务逻辑。\\n3、事件驱动，cqrs的设计思想是事件驱动，事件驱动目的在于解耦，以前我们在处理两个或者三个对象之间的关系时，可能会这样写：\\nadminFunc.delNotifiesById(req, res, nidsArr[i], () =&gt; {\\nadminFunc.getAdminNotices(req, res, function (noticeObj) {\\nreq.session.adminNotices = noticeObj;\\nres.end(\'success\');\\n});\\n});\\n该功能是删除提示消息，设置成功后再发消息给管理员。理论上没什么问题，一个回调函数解决问题。但是这里涉及到了对两个对象的操作（1、Notice 2、Message）\\n在cqrs思想中，我们可以在Message对象中对Notice的删除操作进行监听，当收到事件时，主动处理相应的逻辑。这一点跟redux的设计思想有点类似。\\nlet eventname = Domain.Alias().actorType(\'Topic\').name(\'create\').get()\\ndomain.on(eventname, (event) =&gt; {\\ndomain.get(\'Topic\', event.actorId).then((topicJson) =&gt; {\\ndomain.call(`User.${topicJson.authorId}.plus`, { num: 3 });\\n})\\n})\\n通过监听Topic的创建事件来对User对象做相应的操作。\\n4、cqrs框架具备事件回溯的功能，什么情况下需要事件回溯？你可能第一时间想到的是银行系统，或者灾备系统。用户的操作在某些情况下是需要记录的，而不是整个系统只用数据库记录操作结果。\\n\\n总结一下cqrs的api:\\n1、创建对象的形式，参照上面的User对象\\n2、cqrs框架有一个容纳所有对象（actor）的容器 domain，domain的方法：\\n对象创建：\\ndomain.create(\\\"User\\\", { loginname, email, password }).then((json) =&gt; {\\nreq.session.loginer = json;\\nres.send({ state: \'success\', id: json.id });\\n}).catch((err) =&gt; {\\nres.send({ state: \'error\', error });\\n})\\n对象修改：\\ndomain.call(`User.${userId}.updatePwd`, { password }, (err, json) =&gt; {\\nif (err) {\\nerr.state = \'error\'\\nres.send(err);\\n} else {\\nres.send({ state: \'success\' });\\n}\\n})\\n对象的查询：\\ndomain.get(\'Topic\', topicId).then((topic) =&gt; {\\nif (topic &amp;&amp; topic.authorId === authorId) {\\ndomain.call(`Topic.${topicId}.update`, { title, body }, (err, result) =&gt; {\\nif (err) {\\nres.send({ state: \'error\' })\\n} else {\\nres.send({\\nstate: \'success\'\\n});\\n}\\n})\\n} else {\\nres.send({ state: \'error\' });\\n}\\n})\\n事件监听，通过接受消息来处理数据\\ndomain.on(\'*\', (event) =&gt; {\\n\\nlet Model = models[event.actorType];\\nif (event.name === \'create\') {\\nModel.create(event.data);\\n} else if (envent.name === \'remove\') {\\nModel.remove({ id: event.actorId })\\n} else {\\nconsole.log(\'--------\', event.actorId, \'------\', event.data,\'------\',event.name);\\nif (event.actorType === \'AdminUser\') {\\nlet data = {};\\nswitch (event.name) {\\ncase \'update\':\\nlet { userName, email, password, phoneNum, group } = event.data;\\ndata = event.data;\\nbreak;\\n}\\n}\\n\\nModel.update({ id: event.actorId }, data).exec();\\n}\\n\\n})\\nPS：cqrs在node全栈中的设计思想还比较新，但是大胆猜测在未来会有广阔的应用空间，值得深入了解下\"},{\"type\":\"image\",\"content\":\"http://img.baidu.com/hi/jx2/j_0059.gif\"},{\"type\":\"contents\",\"content\":\"。 \\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20170411223035.png','2017-04-11 14:31:12','2020-08-20 15:44:07'),(249,'html5中弹窗内容滚动问题解析','html5中弹窗内容滚动问题解析','1','1',NULL,'组件开发,layer','2',NULL,'','最近在做一个layer组件，基于jQuery，主要针对移动端，在做的过程中遇到一个场景：\n1、当弹出层出现时，底部body是禁止滑动的\n2、档弹出层中内容出现滚动条时，可以滚动，同时禁用body层','1','','','0:01',762,'2','0',NULL,0,'0',226121,'<p>最近在做一个layer组件，基于jQuery，主要针对移动端，在做的过程中遇到一个场景：</p><p>1、当弹出层出现时，底部body是禁止滑动的</p><p>2、档弹出层中内容出现滚动条时，可以滚动，同时禁用body层</p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_6_7_15_57_55_797_1002.jpg\" title=\"\" alt=\"layer1.jpg\"/></p><p><br/></p><p>解决第一个问题好办，利用event.preventDefault()可以阻止浏览器中body滑动的默认动作，</p><p>在弹窗(layer)显示出来时，只需</p><pre class=\"brush:js;toolbar:false\">function&nbsp;preventDefault(e)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e&nbsp;=&nbsp;e&nbsp;||&nbsp;window.event;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.preventDefault&nbsp;&amp;&amp;&nbsp;e.preventDefault();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.returnValue&nbsp;=&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;}\ndocument.body.addEventListerner(&#39;touchmove&#39;,preventDefault,false)</pre><p><br/></p><p>就可以阻止body的滑动，第一个问题解决。</p><p><br/></p><p>主要在第二个问题，当阻止了body的默认滑动，如果弹出层中内容有滚动条时，就滑不动了，当然我们可以模拟</p><p>第一个问题的方法对滚动区域做一个监听事件：</p><pre class=\"brush:js;toolbar:false\">$(_alertBodyObj)[0].addEventListener(&#39;touchmove&#39;,&nbsp;function(e){\n	document.body.removeEventListener(&#39;touchmove&#39;,preventDefault,false);\n})\n\n$(_alertBodyObj)[0].addEventListener(&#39;touchend&#39;,&nbsp;function(e){\n	document.body.addEventListener(&#39;touchmove&#39;,preventDefault,false);\n})</pre><p><br/></p><p>即在滚动开始时，取消body的禁止默认事件，滚动结束时重新添加阻止默认滑动动作。</p><p><br/></p><p>好像问题解决了，仔细滑动会发现，当layer中的滚动条滑动到最顶端和最低端时，依然会带动body的默认滑动事件，</p><p>这里，我们需要对上面的方法做进一步的优化：</p><pre class=\"brush:js;toolbar:false\">var&nbsp;_alertBodyObj&nbsp;=&nbsp;$(_targetObj).find(&#39;.alert-body&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;disableScroll&nbsp;=&nbsp;function(){\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(document).on(&#39;touchmove&#39;,&nbsp;preventDefault);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;enableScroll&nbsp;=&nbsp;function(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(document).off(&#39;touchmove&#39;,&nbsp;preventDefault);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;外部禁用\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disableScroll();\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;移动端touch重写\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;startX,&nbsp;startY;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(_alertBodyObj)[0].addEventListener(&#39;touchstart&#39;,&nbsp;function(e){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startX&nbsp;=&nbsp;e.changedTouches[0].pageX;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startY&nbsp;=&nbsp;e.changedTouches[0].pageY;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},false);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;仿innerScroll方法\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(_alertBodyObj)[0].addEventListener(&#39;touchmove&#39;,&nbsp;function(e){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.stopPropagation();\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;deltaX&nbsp;=&nbsp;e.changedTouches[0].pageX&nbsp;-&nbsp;startX;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;deltaY&nbsp;=&nbsp;e.changedTouches[0].pageY&nbsp;-&nbsp;startY;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;只能纵向滚\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(Math.abs(deltaY)&nbsp;&lt;&nbsp;Math.abs(deltaX)){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.preventDefault();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;box&nbsp;=&nbsp;$(this).get(0);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($(box).height()&nbsp;+&nbsp;box.scrollTop&nbsp;&gt;=&nbsp;box.scrollHeight){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(deltaY&nbsp;&lt;&nbsp;0)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.preventDefault();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(box.scrollTop&nbsp;===&nbsp;0){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(deltaY&nbsp;&gt;&nbsp;0)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.preventDefault();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},false);</pre><p><br/></p><p>我们在监听滚动同时去判断滚动条是否在最顶端或者最下端，此时阻止浏览器默认动作，这样问题就迎刃而解了。</p><p><br/></p><p>扫描二维码查看演示：<img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_6_7_16_3_25_399_1004.png\" title=\"\" alt=\"layerDemo.png\"/>&nbsp;</p><p><br/></p><p>event.preventDefault()阻止默认事件行为的触发。</p><p>event.stopPropagation()防止事件冒泡到DOM树上，也就是不触发的任何前辈元素上的事件处理函数。<span class=\"Apple-tab-span\" style=\"white-space: pre;\"></span></p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"最近在做一个layer组件，基于jQuery，主要针对移动端，在做的过程中遇到一个场景：\\n1、当弹出层出现时，底部body是禁止滑动的\\n2、档弹出层中内容出现滚动条时，可以滚动，同时禁用body层\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_6_7_15_57_55_797_1002.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n解决第一个问题好办，利用event.preventDefault()可以阻止浏览器中body滑动的默认动作，\\n在弹窗(layer)显示出来时，只需\\nfunction preventDefault(e) {\\n        e = e || window.event;\\n        e.preventDefault &amp;&amp; e.preventDefault();\\n        e.returnValue = false;\\n    }\\ndocument.body.addEventListerner(\'touchmove\',preventDefault,false)\\n\\n就可以阻止body的滑动，第一个问题解决。\\n\\n主要在第二个问题，当阻止了body的默认滑动，如果弹出层中内容有滚动条时，就滑不动了，当然我们可以模拟\\n第一个问题的方法对滚动区域做一个监听事件：\\n$(_alertBodyObj)[0].addEventListener(\'touchmove\', function(e){\\n\\tdocument.body.removeEventListener(\'touchmove\',preventDefault,false);\\n})\\n\\n$(_alertBodyObj)[0].addEventListener(\'touchend\', function(e){\\n\\tdocument.body.addEventListener(\'touchmove\',preventDefault,false);\\n})\\n\\n即在滚动开始时，取消body的禁止默认事件，滚动结束时重新添加阻止默认滑动动作。\\n\\n好像问题解决了，仔细滑动会发现，当layer中的滚动条滑动到最顶端和最低端时，依然会带动body的默认滑动事件，\\n这里，我们需要对上面的方法做进一步的优化：\\nvar _alertBodyObj = $(_targetObj).find(\'.alert-body\');\\n            var disableScroll = function(){\\n\\n                $(document).on(\'touchmove\', preventDefault);\\n            };\\n            var enableScroll = function(){\\n               \\n                $(document).off(\'touchmove\', preventDefault);\\n            };\\n\\n            // 外部禁用\\n            disableScroll();\\n\\n            // 移动端touch重写\\n            var startX, startY;\\n            $(_alertBodyObj)[0].addEventListener(\'touchstart\', function(e){\\n                startX = e.changedTouches[0].pageX;\\n                startY = e.changedTouches[0].pageY;\\n            },false);\\n\\n            // 仿innerScroll方法\\n            $(_alertBodyObj)[0].addEventListener(\'touchmove\', function(e){\\n                e.stopPropagation();\\n\\n                var deltaX = e.changedTouches[0].pageX - startX;\\n                var deltaY = e.changedTouches[0].pageY - startY;\\n\\n                // 只能纵向滚\\n                if(Math.abs(deltaY) &lt; Math.abs(deltaX)){\\n                    e.preventDefault();\\n                    return false;\\n                }\\n\\n                var box = $(this).get(0);\\n                if($(box).height() + box.scrollTop &gt;= box.scrollHeight){\\n                    if(deltaY &lt; 0) {\\n                        e.preventDefault();\\n                        return false;\\n                    }\\n                }\\n                if(box.scrollTop === 0){\\n                    if(deltaY &gt; 0) {\\n                        e.preventDefault();\\n                        return false;\\n                    }\\n                }\\n\\n            },false);\\n\\n我们在监听滚动同时去判断滚动条是否在最顶端或者最下端，此时阻止浏览器默认动作，这样问题就迎刃而解了。\\n\\n扫描二维码查看演示：\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_6_7_16_3_25_399_1004.png\"},{\"type\":\"contents\",\"content\":\" \\n\\nevent.preventDefault()阻止默认事件行为的触发。\\nevent.stopPropagation()防止事件冒泡到DOM树上，也就是不触发的任何前辈元素上的事件处理函数。\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20160607155607.jpg','2016-06-07 07:58:36','2020-08-20 15:44:08'),(250,'第8天 二进制文件上传—上传实例','二进制文件上传—上传实例','2','1','','上传实例','2',NULL,'','编写一段上传的实例代码，首先我们写一个html文档。','1','','','0:01',762,'2','0',NULL,0,'0',223278,'<h3>上传实例</h3><p>编写一段上传的实例代码，首先我们写一个html文档。</p><p>HTML文档 <code>test.html</code></p><pre>&lt;!doctype&nbsp;html&gt;\n&lt;html&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;write&nbsp;article&lt;/title&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;body&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;form&nbsp;action=&quot;http://localhost:3000/post&quot;&nbsp;enctype=&quot;multipart/form-data&quot;&nbsp;method=&quot;post&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;img&nbsp;file&nbsp;name&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;name=&quot;filename&quot;/&gt;&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;img&nbsp;file&nbsp;&nbsp;&lt;input&nbsp;type=&quot;file&quot;&nbsp;name=&quot;img&quot;/&gt;&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;&nbsp;type=&quot;submit&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/form&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/body&gt;\n&lt;/html&gt;</pre><p>然后编写 <code>run.js</code> 作为服务器端程序，这段代码可用来接收客户端上传的文件信息，并根据指定的图片文件名称，进行保存。</p><pre>var&nbsp;fk&nbsp;=&nbsp;require(&quot;../..&quot;)\n&nbsp;&nbsp;&nbsp;,App&nbsp;=&nbsp;fk.App\n&nbsp;&nbsp;&nbsp;,post&nbsp;=&nbsp;fk.post\n&nbsp;&nbsp;&nbsp;,fs&nbsp;=&nbsp;require(&#39;fs&#39;)\n&nbsp;&nbsp;&nbsp;,app&nbsp;=&nbsp;new&nbsp;App\n\n&nbsp;&nbsp;&nbsp;app.use(post);\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.post(&quot;/post&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fs.writeFileSync(req.body.fileName,req.files.img);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.write(&quot;upload&nbsp;ok!&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end();\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.listen(3000);</pre><p>视频演示：<span class=\"invade-word\">yellow</span></p><hr/><p><embed width=\"480\" height=\"400\" align=\"middle\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" quality=\"high\" allowfullscreen=\"true\" src=\"http://static.video.qq.com/TPout.swf?vid=p0116h32kgl\"/></p><hr/>','[{\"type\":\"contents\",\"content\":\"上传实例\\n编写一段上传的实例代码，首先我们写一个html文档。\\nHTML文档 test.html\\n&lt;!doctype html&gt;\\n&lt;html&gt;\\n    &lt;head&gt;\\n        &lt;title&gt;write article&lt;/title&gt;\\n    &lt;/head&gt;\\n    &lt;body&gt;\\n        &lt;form action=\\\"http://localhost:3000/post\\\" enctype=\\\"multipart/form-data\\\" method=\\\"post\\\"&gt;\\n            &lt;p&gt;img file name  &lt;input type=\\\"text\\\" name=\\\"filename\\\"/&gt;&lt;/p&gt;\\n            &lt;p&gt;img file  &lt;input type=\\\"file\\\" name=\\\"img\\\"/&gt;&lt;/p&gt;\\n            &lt;input  type=\\\"submit\\\" /&gt;\\n        &lt;/form&gt;\\n    &lt;/body&gt;\\n&lt;/html&gt;\\n然后编写 run.js 作为服务器端程序，这段代码可用来接收客户端上传的文件信息，并根据指定的图片文件名称，进行保存。\\nvar fk = require(\\\"../..\\\")\\n   ,App = fk.App\\n   ,post = fk.post\\n   ,fs = require(\'fs\')\\n   ,app = new App\\n\\n   app.use(post);\\n\\n    app.post(\\\"/post\\\",function(req,res){\\n        fs.writeFileSync(req.body.fileName,req.files.img);\\n        res.write(\\\"upload ok!\\\");\\n        res.end();\\n    })\\n\\n    app.listen(3000);\\n视频演示：yellow\\n&lt;embed width=\\\"480\\\" height=\\\"400\\\" align=\\\"middle\\\" type=\\\"application/x-shockwave-flash\\\" allowscriptaccess=\\\"always\\\" quality=\\\"high\\\" allowfullscreen=\\\"true\\\" src=\\\"http://static.video.qq.com/TPout.swf?vid=p0116h32kgl\\\"&gt;\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445143270000.jpg','2015-10-18 04:41:48','2020-08-20 15:44:18'),(251,'使用archiver在nodejs下打包','使用archiver在nodejs下打包','1','1','','nodejs,archiver','2',NULL,'','刚在cms系统上添加了一个数据备份的功能，也是自己随性瞎写的，没有规划，率性而为，鼓捣了大半天，功能基本上实现了，主要作用是手动对数据库进行备份并生成压缩文件，当然也包含管理功能，比如删除备份。','1','','','0:01',762,'2','0',NULL,0,'0',225489,'<p><span style=\"font-size: 14px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">&nbsp; &nbsp;刚在cms系统上添加了一个数据备份的功能，也是自己随性瞎写的，没有规划，率性而为，鼓捣了大半天，功能基本上实现了，主要作用是手动对数据库进行备份并生成压缩文件，当然也包含管理功能，比如删除备份。下面通过介绍改功能介绍一下nodejs的archiver组件。</span></p><p><span style=\"font-size: 14px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">&nbsp; &nbsp;其实原生的nodejs 已经自带了gzip （zlib）压缩，开始也尝试过，比较简单，实现方式如下：<br/></span></p><p><br/></p><pre class=\"brush:js;toolbar:false\"><span style=\"font-size: 14px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">var&nbsp;zlib&nbsp;=&nbsp;require(&quot;zlib&quot;);<br/>var&nbsp;gzip&nbsp;=&nbsp;zlib.createGzip();<br/>var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);<br/>var&nbsp;inp&nbsp;=&nbsp;fs.createReadStream(&quot;test.txt&quot;);<br/>var&nbsp;out&nbsp;=&nbsp;fs.createWriteStream(&quot;test.txt.gz&quot;);<br/>//&nbsp;压缩管道<br/>&nbsp;inp.pipe(gzip).pipe(out);<br/></span></pre><p><span style=\"font-size: 14px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">&nbsp; &nbsp;基本和官网上代码一致，<span style=\"font-size: 14px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(192, 0, 0);\"><span style=\"font-size: 14px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; text-decoration: underline; background-color: rgb(255, 255, 255);\"><strong>创建读文件流 —— 创建压缩文件流 ， 通过压缩管道生成压缩文件</strong></span>。</span> &nbsp; 但是尝试后发现gzip只对单个文件有效，对于文件夹是没有效果的，当然，通过进一步的处理可能也可以达到效果，没有尝试。google了一下，找到了一个比较合适的组件archiver，实现方法也比较简单。</span></p><p><span style=\"font-size: 14px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">&nbsp;</span></p><p><span style=\"font-size: 14px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">&nbsp; &nbsp; archiver是一个在nodejs中能跨平台实现打包功能的模块，可以打zip和tar包，是一个比较好用的三方模块。</span></p><p><span style=\"line-height: 1.5; font-size: 14px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">使用前先安装archiver模块。</span></p><pre class=\"brush:js;toolbar:false\"><span style=\"font-size: 14px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">npm&nbsp;install&nbsp;archiver<br/></span></pre><p><span style=\"font-size: 14px; line-height: 1.5; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\"><br/></span></p><p><span style=\"font-size: 14px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">实现数据库备份代码：<br/></span></p><pre class=\"brush:js;toolbar:false\"><span style=\"font-size: 14px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">var&nbsp;fs&nbsp;=&nbsp;require(&#39;fs&#39;);<br/>var&nbsp;child&nbsp;=&nbsp;require(&#39;child_process&#39;);<br/>var&nbsp;archiver&nbsp;=&nbsp;require(&#39;archiver&#39;);<br/>backUpData&nbsp;:&nbsp;function(res,req){&nbsp;&nbsp;//&nbsp;数据备份<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;date&nbsp;=&nbsp;new&nbsp;Date();<br/>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;ms&nbsp;=&nbsp;Date.parse(date);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;ms&nbsp;=&nbsp;moment(date).format(&#39;YYYYMMDDHHmmss&#39;).toString();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;dataPath&nbsp;=&nbsp;Settings.DATABACKFORDER&nbsp;+&nbsp;ms;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;cmdstr&nbsp;=&nbsp;&#39;mongodump&nbsp;-o&nbsp;&quot;&#39;+dataPath+&#39;&quot;&#39;;<br/>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;cmdstr&nbsp;=&nbsp;&#39;mongodump&nbsp;-u&nbsp;&#39;+Settings.USERNAME+&#39;&nbsp;-p&nbsp;&#39;+Settings.PASSWORD+&#39;&nbsp;-d&nbsp;&#39;+Settings.DB+&#39;&nbsp;-o&nbsp;&quot;&#39;+dataPath+&#39;&quot;&#39;;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;batPath&nbsp;=&nbsp;Settings.DATAOPERATION&nbsp;+&nbsp;&#39;/backupData.bat&#39;;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!fs.existsSync(Settings.DATABACKFORDER)){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fs.mkdirSync(Settings.DATABACKFORDER);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(fs.existsSync(dataPath))&nbsp;{<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;已经创建过备份了&#39;);<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fs.mkdir(dataPath,0777,function(err1){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(err1)&nbsp;throw&nbsp;err1;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;fs.existsSync(batPath)&nbsp;)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//写入文件<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fs.writeFile(batPath,cmdstr,function&nbsp;(err2)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(err2){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(err2)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;----文件写入成功-----&quot;)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;exec&nbsp;=&nbsp;child.exec;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exec(&#39;call&nbsp;&quot;&#39;+batPath,<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;(error,&nbsp;stdout,&nbsp;stderr)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(error&nbsp;!==&nbsp;null)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//console.log(&#39;exec&nbsp;error:&nbsp;&#39;&nbsp;+&nbsp;error);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;备份成功&#39;);<br/>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;生成压缩文件<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;output&nbsp;=&nbsp;fs.createWriteStream(Settings.DATABACKFORDER&nbsp;+&nbsp;ms&nbsp;+&#39;.zip&#39;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;archive&nbsp;=&nbsp;archiver(&#39;zip&#39;);<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;archive.on(&#39;error&#39;,&nbsp;function(err){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;err;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;archive.pipe(output);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;archive.bulk([<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;src:&nbsp;[dataPath+&#39;/**&#39;]}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;archive.finalize();<br/><br/><br/>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;操作记录入库<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;optLog&nbsp;=&nbsp;new&nbsp;DataOptionLog();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;optLog.logs&nbsp;=&nbsp;&quot;数据备份&quot;;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;optLog.path&nbsp;=&nbsp;dataPath;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;optLog.fileName&nbsp;=&nbsp;ms&nbsp;+&#39;.zip&#39;;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;optLog.save(function(err3){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(err3)&nbsp;throw&nbsp;err3;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end(&quot;success&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})&nbsp;;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/><br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/></span></pre><p><br/></p><p><br/></p><p><span style=\"font-size: 14px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">实现文件夹压缩代码：</span></p><pre class=\"brush:js;toolbar:false\"><span style=\"font-size: 14px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;生成压缩文件<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;output&nbsp;=&nbsp;fs.createWriteStream(Settings.DATABACKFORDER&nbsp;+&nbsp;ms&nbsp;+&#39;.zip&#39;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;archive&nbsp;=&nbsp;archiver(&#39;zip&#39;);<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;archive.on(&#39;error&#39;,&nbsp;function(err){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;err;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;archive.pipe(output);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;archive.bulk([<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;src:&nbsp;[dataPath+&#39;/**&#39;]}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;archive.finalize();<br/></span></pre><p><span style=\"font-size: 14px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">实现思路： 1、通过nodeJs的子进程&nbsp;require(&#39;child_process&#39;) 的exec 方法执行 bat文件</span></p><p><span style=\"font-size: 14px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;2、bat动态写入执行脚本，脚本中动态定义数据表备份文件夹(按照备份时间生成时间为文件夹名称)</span></p><p><span style=\"font-size: 14px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;3、执行脚本&nbsp;mongodump -o &quot;E:/mongodata/20150624082952&quot; ，即mongodb自带的备份脚本</span></p><p><span style=\"font-size: 14px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4、数据备份<br/></span></p><p><span style=\"font-size: 14px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;5、将备份文件夹压缩到指定目录下。<br/></span></p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_6_24_10_12_34_49_1003.jpg\" title=\"\" alt=\"QQ截图20150624101342.jpg\"/></p><p><br/></p><p>后台执行备份后的效果：</p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_6_24_10_15_39_683_1004.jpg\" title=\"\" alt=\"QQ截图20150624101636.jpg\" width=\"1046\" height=\"280\" style=\"width: 1046px; height: 280px;\"/></p>','[{\"type\":\"contents\",\"content\":\"   刚在cms系统上添加了一个数据备份的功能，也是自己随性瞎写的，没有规划，率性而为，鼓捣了大半天，功能基本上实现了，主要作用是手动对数据库进行备份并生成压缩文件，当然也包含管理功能，比如删除备份。下面通过介绍改功能介绍一下nodejs的archiver组件。\\n   其实原生的nodejs 已经自带了gzip （zlib）压缩，开始也尝试过，比较简单，实现方式如下：\\n\\n\\nvar zlib = require(\\\"zlib\\\");\\nvar gzip = zlib.createGzip();\\nvar fs = require(\\\"fs\\\");\\nvar inp = fs.createReadStream(\\\"test.txt\\\");\\nvar out = fs.createWriteStream(\\\"test.txt.gz\\\");\\n// 压缩管道\\n inp.pipe(gzip).pipe(out);\\n\\n   基本和官网上代码一致，创建读文件流 —— 创建压缩文件流 ， 通过压缩管道生成压缩文件。   但是尝试后发现gzip只对单个文件有效，对于文件夹是没有效果的，当然，通过进一步的处理可能也可以达到效果，没有尝试。google了一下，找到了一个比较合适的组件archiver，实现方法也比较简单。\\n \\n    archiver是一个在nodejs中能跨平台实现打包功能的模块，可以打zip和tar包，是一个比较好用的三方模块。\\n使用前先安装archiver模块。\\nnpm install archiver\\n\\n\\n\\n实现数据库备份代码：\\n\\nvar fs = require(\'fs\');\\nvar child = require(\'child_process\');\\nvar archiver = require(\'archiver\');\\nbackUpData : function(res,req){  // 数据备份\\n        var date = new Date();\\n//        var ms = Date.parse(date);\\n        var ms = moment(date).format(\'YYYYMMDDHHmmss\').toString();\\n        var dataPath = Settings.DATABACKFORDER + ms;\\n        var cmdstr = \'mongodump -o \\\"\'+dataPath+\'\\\"\';\\n//        var cmdstr = \'mongodump -u \'+Settings.USERNAME+\' -p \'+Settings.PASSWORD+\' -d \'+Settings.DB+\' -o \\\"\'+dataPath+\'\\\"\';\\n\\n        var batPath = Settings.DATAOPERATION + \'/backupData.bat\';\\n        if(!fs.existsSync(Settings.DATABACKFORDER)){\\n            fs.mkdirSync(Settings.DATABACKFORDER);\\n        }\\n        if (fs.existsSync(dataPath)) {\\n\\n            console.log(\'已经创建过备份了\');\\n\\n        } else {\\n\\n            fs.mkdir(dataPath,0777,function(err1){\\n                if (err1) throw err1;\\n                if( fs.existsSync(batPath) ) {\\n                    //写入文件\\n                    fs.writeFile(batPath,cmdstr,function (err2) {\\n                        if(err2){\\n                            console.log(err2)\\n                        }\\n                        else{\\n                            console.log(\\\"----文件写入成功-----\\\")\\n                            var exec = child.exec;\\n                            exec(\'call \\\"\'+batPath,\\n                                function (error, stdout, stderr) {\\n                                    if (error !== null) {\\n                                        //console.log(\'exec error: \' + error);\\n                                    }else{\\n                                        console.log(\'备份成功\');\\n//                                    生成压缩文件\\n                                     var output = fs.createWriteStream(Settings.DATABACKFORDER + ms +\'.zip\');\\n                                     var archive = archiver(\'zip\');\\n\\n                                     archive.on(\'error\', function(err){\\n                                         throw err;\\n                                     });\\n\\n                                     archive.pipe(output);\\n                                     archive.bulk([\\n                                         { src: [dataPath+\'/**\']}\\n                                     ]);\\n                                     archive.finalize();\\n\\n\\n//                                     操作记录入库\\n                                        var optLog = new DataOptionLog();\\n                                        optLog.logs = \\\"数据备份\\\";\\n                                        optLog.path = dataPath;\\n                                        optLog.fileName = ms +\'.zip\';\\n                                        optLog.save(function(err3){\\n                                            if (err3) throw err3;\\n                                            res.end(\\\"success\\\");\\n                                        })\\n                                    }\\n\\n                                });\\n                        }\\n\\n                    }) ;\\n                }\\n            })\\n        }\\n\\n\\n\\n    }\\n\\n\\n\\n实现文件夹压缩代码：\\n//                                    生成压缩文件\\n                                     var output = fs.createWriteStream(Settings.DATABACKFORDER + ms +\'.zip\');\\n                                     var archive = archiver(\'zip\');\\n\\n                                     archive.on(\'error\', function(err){\\n                                         throw err;\\n                                     });\\n\\n                                     archive.pipe(output);\\n                                     archive.bulk([\\n                                         { src: [dataPath+\'/**\']}\\n                                     ]);\\n                                     archive.finalize();\\n\\n实现思路： 1、通过nodeJs的子进程 require(\'child_process\') 的exec 方法执行 bat文件\\n      2、bat动态写入执行脚本，脚本中动态定义数据表备份文件夹(按照备份时间生成时间为文件夹名称)\\n      3、执行脚本 mongodump -o \\\"E:/mongodata/20150624082952\\\" ，即mongodb自带的备份脚本\\n      4、数据备份\\n\\n      5、将备份文件夹压缩到指定目录下。\\n\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_6_24_10_12_34_49_1003.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n后台执行备份后的效果：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_6_24_10_15_39_683_1004.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1435110875000.png','2015-07-02 03:37:18','2020-08-20 15:44:27'),(252,'Node.js API实例讲解——Buffer的静态方法','Buffer的静态方法','2','1','','nodejs教程,前端开发','2',NULL,'','Buffer.isEncoding这个方法是判断编码方式是否被支持，return true/false。前面章节我们知道了 node.js 支持的编码方式。','1','','','0:01',762,'2','0',NULL,0,'0',223264,'<h3>Buffer的静态方法</h3><h3 id=\"buffer-isencoding-\">Buffer.isEncoding(编码方式);</h3><p>这个方法是判断编码方式是否被支持，return true/false</p><p>前面章节我们知道了 node.js 支持的编码方式。下面做几个例子。</p><p>例1 <span class=\"invade-word\">this</span></p><pre class=\"code\">&nbsp;console.log(Buffer.isEncoding(&quot;gb2312&quot;));&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;打印&nbsp;false&nbsp;。&nbsp;即使gb2312是编码方式，但不被node.js支持\n&nbsp;console.log(Buffer.isEncoding(&quot;utf8&quot;));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;true\n&nbsp;console.log(Buffer.isEncoding(&quot;ucs2&quot;));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;true\n&nbsp;console.log(Buffer.isEncoding(&quot;utf16le&quot;));&nbsp;&nbsp;&nbsp;//&nbsp;true\n&nbsp;console.log(Buffer.isEncoding(&quot;ascii&quot;));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;true\n&nbsp;console.log(Buffer.isEncoding(&quot;base64&quot;));&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;true\n&nbsp;console.log(Buffer.isEncoding(&quot;hex&quot;));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;true</pre><h3 id=\"buffer-isbuffer-obj-obj-buffer-\">Buffer.isBuffer(obj)判断是否obj是Buffer类型对象</h3><p>例1<span class=\"invade-word\">fuck</span></p><pre class=\"code\">&nbsp;var&nbsp;o1&nbsp;=&nbsp;&quot;&quot;,o2&nbsp;=&nbsp;new&nbsp;Buffer(1);\n&nbsp;console.log(Buffer.isBuffer(o1));&nbsp;&nbsp;//&nbsp;false\n&nbsp;console.log(Buffer.isBuffer(o2));&nbsp;&nbsp;//&nbsp;true</pre><h3 id=\"buffer-bytelength-string-encoding-btye-\">Buffer.byteLength(string, [encoding]) 获得特定编码下一个字符串所占用btye的数量。</h3><p>这里可能会产生一个误解；得到的是占用的bytes数而不是字符数量。</p><p>还应注意的是，字符串与编码应该是正确的对应关系，比如中文用 ascii 编码方式，显然得不到正确的 byteLength；而base64和hex的编码也要输入对应的字符串形式。</p><p>[encoding] 是可选参数，默认 utf8</p><p>例1&nbsp;</p><pre class=\"code\">&nbsp;var&nbsp;str&nbsp;=&nbsp;&quot;你好&quot;;\n&nbsp;var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer(str);\n&nbsp;console.log(Buffer.byteLength(str));&nbsp;&nbsp;&nbsp;//&nbsp;6\n&nbsp;var&nbsp;hexStr&nbsp;=&nbsp;buf.toString(&quot;hex&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;转换为&nbsp;hex编码形式\n&nbsp;console.log(hexStr);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;e4bda0e5a5bd&nbsp;\n&nbsp;console.log(Buffer.byteLength(hexStr,&quot;hex&quot;));&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;6</pre><p>这个例子我们会发现 utf8、hex、base64 编码只要原始字符串一致，那么占用的byte数量就一致，这个说明，hex和base64会先转换为utf8。</p><p>例2，ucs2与utf8占用的byte length是不相同的。</p><pre class=\"code\">&nbsp;var&nbsp;str&nbsp;=&nbsp;&quot;你好&quot;;\n&nbsp;var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer(str);\n&nbsp;console.log(Buffer.byteLength(str,&quot;utf8&quot;));&nbsp;&nbsp;&nbsp;//&nbsp;6\n&nbsp;console.log(Buffer.byteLength(str,&quot;ucs2&quot;));&nbsp;&nbsp;&nbsp;//&nbsp;4</pre><h3 id=\"buffer-concat-list-totallength-buffer-buffer-\">Buffer.concat(list, [totalLength]) 合并多个buffer对象，并返回一个新的buffer对象。</h3><p>list 是一个数组，数组值必须是Buffer对象。</p><p>totalLength[可选] 指定合并后buffer对象的总长。</p><p>如果 list只有一个buffer，直接返回这个buffer对象，并且totalLength参数失效。</p><p>如果 list有多个buffer,会重新创建一个新的buffer对象。</p><p><span class=\"invade-word\">sex</span>list有多个buffer情况下，如果不指定totalLength，那么会循环多个buffer得到其长度，这增加了多余的计算。所以明确指定totalLength更快。</p><p>下面的例子很重要，讲解了各种的使用情况。</p><p>例</p><pre class=\"code\">&nbsp;var&nbsp;tb;\n&nbsp;//&nbsp;list有一个Buffer对象,total会失效。\n&nbsp;tb&nbsp;=&nbsp;Buffer.concat([new&nbsp;Buffer(10)],20)\n&nbsp;console.log(tb.length);&nbsp;&nbsp;&nbsp;//&nbsp;10\n\n&nbsp;//&nbsp;list有多个Buffer对象,不指定totalLength\n&nbsp;tb&nbsp;=&nbsp;Buffer.concat([&nbsp;new&nbsp;Buffer(10)&nbsp;,&nbsp;new&nbsp;Buffer(5)&nbsp;]);\n&nbsp;console.log(tb.length);&nbsp;&nbsp;&nbsp;//&nbsp;15\n\n&nbsp;//&nbsp;list有多个Buffer对象,指定totalLength\n&nbsp;tb&nbsp;=&nbsp;Buffer.concat([&nbsp;new&nbsp;Buffer(10)&nbsp;,&nbsp;new&nbsp;Buffer(5)&nbsp;],&nbsp;20);\n&nbsp;console.log(tb.length);&nbsp;&nbsp;&nbsp;//&nbsp;20\n\n&nbsp;//&nbsp;list有多个Buffer对象,指定totalLength\n&nbsp;//&nbsp;list内的Buffer对象总和的byte&nbsp;length&nbsp;&gt;&nbsp;totalLength\n&nbsp;//&nbsp;这种情况下，新合并的tb长度等于totalLength\n&nbsp;tb&nbsp;=&nbsp;Buffer.concat([&nbsp;new&nbsp;Buffer(10)&nbsp;,&nbsp;new&nbsp;Buffer(222)&nbsp;],&nbsp;20);\n&nbsp;console.log(tb.length);&nbsp;&nbsp;&nbsp;//&nbsp;20\n\n&nbsp;//&nbsp;如果多个buffer合并，list的第一个&nbsp;buffer.length&nbsp;&gt;=&nbsp;totalLength\n&nbsp;//&nbsp;这种情况下就会抛出异常\n&nbsp;try{\n&nbsp;tb&nbsp;=&nbsp;Buffer.concat([&nbsp;new&nbsp;Buffer(20)&nbsp;,&nbsp;new&nbsp;Buffer(222)&nbsp;],&nbsp;20);\n&nbsp;console.log(tb.length);&nbsp;&nbsp;\n&nbsp;}catch(e){\n&nbsp;&nbsp;console.log(&quot;第一个buffer.length&nbsp;&gt;=&nbsp;totalLength&quot;);\n&nbsp;}</pre>','[{\"type\":\"contents\",\"content\":\"Buffer的静态方法\\nBuffer.isEncoding(编码方式);\\n这个方法是判断编码方式是否被支持，return true/false\\n前面章节我们知道了 node.js 支持的编码方式。下面做几个例子。\\n例1 this\\n console.log(Buffer.isEncoding(\\\"gb2312\\\"));    // 打印 false 。 即使gb2312是编码方式，但不被node.js支持\\n console.log(Buffer.isEncoding(\\\"utf8\\\"));      // true\\n console.log(Buffer.isEncoding(\\\"ucs2\\\"));      // true\\n console.log(Buffer.isEncoding(\\\"utf16le\\\"));   // true\\n console.log(Buffer.isEncoding(\\\"ascii\\\"));     // true\\n console.log(Buffer.isEncoding(\\\"base64\\\"));    // true\\n console.log(Buffer.isEncoding(\\\"hex\\\"));       // true\\nBuffer.isBuffer(obj)判断是否obj是Buffer类型对象\\n例1fuck\\n var o1 = \\\"\\\",o2 = new Buffer(1);\\n console.log(Buffer.isBuffer(o1));  // false\\n console.log(Buffer.isBuffer(o2));  // true\\nBuffer.byteLength(string, [encoding]) 获得特定编码下一个字符串所占用btye的数量。\\n这里可能会产生一个误解；得到的是占用的bytes数而不是字符数量。\\n还应注意的是，字符串与编码应该是正确的对应关系，比如中文用 ascii 编码方式，显然得不到正确的 byteLength；而base64和hex的编码也要输入对应的字符串形式。\\n[encoding] 是可选参数，默认 utf8\\n例1 \\n var str = \\\"你好\\\";\\n var buf = new Buffer(str);\\n console.log(Buffer.byteLength(str));   // 6\\n var hexStr = buf.toString(\\\"hex\\\");      // 转换为 hex编码形式\\n console.log(hexStr);                   // e4bda0e5a5bd \\n console.log(Buffer.byteLength(hexStr,\\\"hex\\\"));    // 6\\n这个例子我们会发现 utf8、hex、base64 编码只要原始字符串一致，那么占用的byte数量就一致，这个说明，hex和base64会先转换为utf8。\\n例2，ucs2与utf8占用的byte length是不相同的。\\n var str = \\\"你好\\\";\\n var buf = new Buffer(str);\\n console.log(Buffer.byteLength(str,\\\"utf8\\\"));   // 6\\n console.log(Buffer.byteLength(str,\\\"ucs2\\\"));   // 4\\nBuffer.concat(list, [totalLength]) 合并多个buffer对象，并返回一个新的buffer对象。\\nlist 是一个数组，数组值必须是Buffer对象。\\ntotalLength[可选] 指定合并后buffer对象的总长。\\n如果 list只有一个buffer，直接返回这个buffer对象，并且totalLength参数失效。\\n如果 list有多个buffer,会重新创建一个新的buffer对象。\\nsexlist有多个buffer情况下，如果不指定totalLength，那么会循环多个buffer得到其长度，这增加了多余的计算。所以明确指定totalLength更快。\\n下面的例子很重要，讲解了各种的使用情况。\\n例\\n var tb;\\n // list有一个Buffer对象,total会失效。\\n tb = Buffer.concat([new Buffer(10)],20)\\n console.log(tb.length);   // 10\\n\\n // list有多个Buffer对象,不指定totalLength\\n tb = Buffer.concat([ new Buffer(10) , new Buffer(5) ]);\\n console.log(tb.length);   // 15\\n\\n // list有多个Buffer对象,指定totalLength\\n tb = Buffer.concat([ new Buffer(10) , new Buffer(5) ], 20);\\n console.log(tb.length);   // 20\\n\\n // list有多个Buffer对象,指定totalLength\\n // list内的Buffer对象总和的byte length &gt; totalLength\\n // 这种情况下，新合并的tb长度等于totalLength\\n tb = Buffer.concat([ new Buffer(10) , new Buffer(222) ], 20);\\n console.log(tb.length);   // 20\\n\\n // 如果多个buffer合并，list的第一个 buffer.length &gt;= totalLength\\n // 这种情况下就会抛出异常\\n try{\\n tb = Buffer.concat([ new Buffer(20) , new Buffer(222) ], 20);\\n console.log(tb.length);  \\n }catch(e){\\n  console.log(\\\"第一个buffer.length &gt;= totalLength\\\");\\n }\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444890452000.jpg','2015-08-01 12:56:19','2020-08-20 15:44:26'),(253,'第8天 二进制文件上传—其它实现方式','二进制文件上传—其它实现方式','2','1','','二进制文件上传','2',NULL,'','今天开发的post.js插件，只是一种实现方式，下面介绍其他两种实现方式。','1','','','0:01',762,'2','0',NULL,0,'0',223066,'<h3>其他实现方式</h3><p>今天开发的post.js插件，只是一种实现方式，下面介绍其他两种实现方式。</p><h5 id=\"-\">方式一</h5><p>可以先把整个上传的body信息，保存到一个临时文件中，可以通过流的pipe方法做到。下面是演示代码：</p><pre>//&nbsp;创建一个写入流\nvar&nbsp;wstream&nbsp;=&nbsp;fs.createWriteStream(&quot;tmp&quot;);\n//&nbsp;通过管道方式写入\nreq.pipe(wstream);</pre><p>这样就可以把上传来的数据保存到临时文件tmp中，当然具体实现还有很多注意事项，这只是个演示代码。然后，可以通过fs.read方式，循环读取tmp文件，并对其进行分析。部分代码如下：</p><pre>fs.open(&quot;tmp&quot;,function(err,&quot;r&quot;,fd){\n&nbsp;&nbsp;&nbsp;fs.read(fd&nbsp;...&nbsp;,&nbsp;function(err,&nbsp;bytesRead,&nbsp;buffe){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;分析二进制数据\n&nbsp;&nbsp;&nbsp;});&nbsp;\n})\n这里的fs.open可以打开一个文件，并对其进行读取，过程中，并不会都加载到内存中，所以节省内存使用量。fs.read方法是实际读取文件的方法，这种方式对服务器端的压力相对很小，所以推荐这种方式。</pre><h5 id=\"-\">方式二</h5><p>上传的数据要是比较大，就会多次调用req.on(&quot;data&quot;,function(chunk){})，那就可以每次对chunk数据进行分析，而不必都加载后再处理，处理完这个chunk后，再进行下一个chunk，以此类推。不过需要用到 <code>req.pause()</code> 方法暂停读取客户端上传来的数据，然后处理完这个chunk后，再调用<code>req.resume()</code>继续接收客户端的数据流。这个方式比第一个方式还要更好些。</p><hr/><p>还有很多实现方式，需要你去挖掘。代码的优化也是无止境的，这种动态美让编程充满了乐趣和期待。今天的开发就到这里，留一个作业，独立开发一个上传插件，采用方式1和2都可以。 争取在一周内完成开发，完成后加载到stuwebfk框架内。比如书上的是post.js插件，你可以自己取个名字，比如mypost.js，然后在index.js中用 <code>exports.mypost = require(&quot;./lib/mypost&quot;)</code> 加载上，可以通过下面的代码使用：</p><pre>app.use(fk.mypost);</pre><p>要对自己有信心，实现过程中肯定会遇到问题，多思考一定会有答案，这是个成长的烦恼，才会有成功的喜悦！明天见。</p>','[{\"type\":\"contents\",\"content\":\"其他实现方式\\n今天开发的post.js插件，只是一种实现方式，下面介绍其他两种实现方式。\\n方式一\\n可以先把整个上传的body信息，保存到一个临时文件中，可以通过流的pipe方法做到。下面是演示代码：\\n// 创建一个写入流\\nvar wstream = fs.createWriteStream(\\\"tmp\\\");\\n// 通过管道方式写入\\nreq.pipe(wstream);\\n这样就可以把上传来的数据保存到临时文件tmp中，当然具体实现还有很多注意事项，这只是个演示代码。然后，可以通过fs.read方式，循环读取tmp文件，并对其进行分析。部分代码如下：\\nfs.open(\\\"tmp\\\",function(err,\\\"r\\\",fd){\\n   fs.read(fd ... , function(err, bytesRead, buffe){\\n          // 分析二进制数据\\n   }); \\n})\\n这里的fs.open可以打开一个文件，并对其进行读取，过程中，并不会都加载到内存中，所以节省内存使用量。fs.read方法是实际读取文件的方法，这种方式对服务器端的压力相对很小，所以推荐这种方式。\\n方式二\\n上传的数据要是比较大，就会多次调用req.on(\\\"data\\\",function(chunk){})，那就可以每次对chunk数据进行分析，而不必都加载后再处理，处理完这个chunk后，再进行下一个chunk，以此类推。不过需要用到 req.pause() 方法暂停读取客户端上传来的数据，然后处理完这个chunk后，再调用req.resume()继续接收客户端的数据流。这个方式比第一个方式还要更好些。\\n还有很多实现方式，需要你去挖掘。代码的优化也是无止境的，这种动态美让编程充满了乐趣和期待。今天的开发就到这里，留一个作业，独立开发一个上传插件，采用方式1和2都可以。 争取在一周内完成开发，完成后加载到stuwebfk框架内。比如书上的是post.js插件，你可以自己取个名字，比如mypost.js，然后在index.js中用 exports.mypost = require(\\\"./lib/mypost\\\") 加载上，可以通过下面的代码使用：\\napp.use(fk.mypost);\\n要对自己有信心，实现过程中肯定会遇到问题，多思考一定会有答案，这是个成长的烦恼，才会有成功的喜悦！明天见。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445143373000.jpg','2015-10-18 04:44:04','2020-08-20 15:44:18'),(254,'Express 4.8.x—​mongoose 查询操作','mongoose 查询操作','2','1','','mongoose查询','2',NULL,'','查询单独一节，是因为内容相对多，无论哪个数据库系统，查询总是功能最多的，在各种方案中，想做一个接口，通过接口操作各种储存设备','1','','','0:01',762,'2','0',NULL,0,'0',224120,'<h3>mongoose 查询操作</h3><p>查询单独一节，是因为内容相对多，无论哪个数据库系统，查询总是功能最多的，在各种方案中，想做一个接口，通过接口操作各种储存设备，我也有过这种想法，相信很多人都想过，这个实践过程中，最难的不是增删改的接口，而是查询操作接口，因为太千变万化了。</p><h4 id=\"find-\">find 例子</h4><pre>User\n.find({})\n.where(&#39;name.last&#39;).equals(&#39;Ghost&#39;)\n.where(&#39;age&#39;).gt(17).lt(66)\n.where(&#39;likes&#39;).in([&#39;vaporizing&#39;,&nbsp;&#39;talking&#39;])\n.limit(10)\n.sort(&#39;-age&#39;)\n.select(&#39;name&nbsp;age&#39;)\n.exec(callback);</pre><ul class=\" list-paddingleft-2\"><li><p>find 表示找什么，如果是 <code>{}</code> 就表示无限制</p></li><li><p>where 细化查询条件，<code>.where(&#39;name.last&#39;).equals(&#39;Ghost&#39;)</code> 表示 name.last 要等于 Ghost。<code>where(&#39;likes&#39;).in([&#39;vaporizing&#39;, &#39;talking&#39;])</code> 表示 linkes 的值必须是 vaporizing 或 talking。<code>.where(&#39;age&#39;).gt(17).lt(66)</code> 表示age要大于17小于66。</p></li><li><p>limit(10) 返回结果的数量要 &gt;= 10</p></li><li><p>sort(‘-age’) 返回的结果数组根据age降序排列</p></li><li><p>select(‘name age’) 返回数据中，只包括 name 和 age字段。</p></li><li><p>exec(callback) 执行这次查询，callback(err, result_array)</p></li></ul><h4 id=\"findone\">findOne</h4><p>findOne可查询一个，所以不需要query模式，下面是个例子：</p><pre>User.findOne({&nbsp;&#39;name.last&#39;:&nbsp;&#39;Ghost&#39;&nbsp;},&nbsp;&#39;name&nbsp;age&#39;,&nbsp;function&nbsp;(err,&nbsp;user)&nbsp;{\n…&nbsp;…&nbsp;\n})</pre><p>这个代码的意思是，查询 name.last 为 Ghost 的User，返回的对象只包括 name 和 age字段信息。</p><p>可参看官网 <a href=\"http://mongoosejs.com/\">http://mongoosejs.com/</a></p>','[{\"type\":\"contents\",\"content\":\"mongoose 查询操作\\n查询单独一节，是因为内容相对多，无论哪个数据库系统，查询总是功能最多的，在各种方案中，想做一个接口，通过接口操作各种储存设备，我也有过这种想法，相信很多人都想过，这个实践过程中，最难的不是增删改的接口，而是查询操作接口，因为太千变万化了。\\nfind 例子\\nUser\\n.find({})\\n.where(\'name.last\').equals(\'Ghost\')\\n.where(\'age\').gt(17).lt(66)\\n.where(\'likes\').in([\'vaporizing\', \'talking\'])\\n.limit(10)\\n.sort(\'-age\')\\n.select(\'name age\')\\n.exec(callback);\\nfind 表示找什么，如果是 {} 就表示无限制\\nwhere 细化查询条件，.where(\'name.last\').equals(\'Ghost\') 表示 name.last 要等于 Ghost。where(\'likes\').in([\'vaporizing\', \'talking\']) 表示 linkes 的值必须是 vaporizing 或 talking。.where(\'age\').gt(17).lt(66) 表示age要大于17小于66。\\nlimit(10) 返回结果的数量要 &gt;= 10\\nsort(‘-age’) 返回的结果数组根据age降序排列\\nselect(‘name age’) 返回数据中，只包括 name 和 age字段。\\nexec(callback) 执行这次查询，callback(err, result_array)\\n\\nfindOne\\nfindOne可查询一个，所以不需要query模式，下面是个例子：\\nUser.findOne({ \'name.last\': \'Ghost\' }, \'name age\', function (err, user) {\\n… … \\n})\\n这个代码的意思是，查询 name.last 为 Ghost 的User，返回的对象只包括 name 和 age字段信息。\\n可参看官网 http://mongoosejs.com/\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445060196000.jpg','2015-10-17 05:37:19','2020-08-20 15:44:20'),(255,'DoraCMS 版本更新 V1.0.8','DoraCMS 版本更新 V1.0.8','1','1',NULL,'doracms版本更新','2',NULL,'','近期针对网友提出的建议和DoraCMS本身存在的一些问题进行了更新，主要内容如下：1、新增了DoraCMS系统消息模块，管理员可对所有用户发送公告。- 2、优化了用户中心(userCenter)的菜单','1','','','0:01',762,'2','0',NULL,0,'0',225916,'<p>近期针对网友提出的建议和DoraCMS本身存在的一些问题进行了更新，主要内容如下：</p><p><br/></p><p>###版本更新 2015年11月23日15:04:05</p><p>###版本号v1.0.8</p><p>###更新内容：</p><p><br/></p><p>- 1、新增了DoraCMS系统消息模块，管理员可对所有用户发送公告。</p><p>- 2、优化了用户中心(userCenter)的菜单</p><p>- 3、新增了用户、管理员自定义头像的功能</p><p>- 4、优化了留言列表</p><p>- 5、用户中心添加了“我的消息”</p><p>- 6、抽取了前后台共用的js，便于复用和维护</p><p>- 7、优化了管理员主界面(main.ejs)</p><p>- 8、添加文档中增加了“存为草稿”的功能</p><p>- 9、修复了后台左侧菜单，点击三级分类类别名称不高亮的问题</p><p>- 10、修复了在管理后台操作中，暂停一段时间，清除缓存后再进行操作页面报500错误的问题</p><p>- 11、修复了一些明显的bug</p><p><br/></p><p>下面简要介绍下几个重要的改动：</p><p>1、消息管理模块。</p><p>DoraCMS v1.0.8 加入了消息管理模块，入口在这里：</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_3_40_34_1009.jpg\" title=\"\" alt=\"DoraCMSv1.0.8版本升级.jpg\"/></p><p><br/></p><p>该模块主要作用是对网站所有用户发送消息提醒（网站更新、热点推送等），后面消息管理可能还涉及到用户之间的消息传递，管理员添加公告之后，用户前台登录会收到提醒：<br/></p><p><br/></p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_3_46_171_1010.jpg\" title=\"\" alt=\"DoraCMSv1.0.8版本升级1.jpg\"/></p><p><br/></p><p>点击气泡可以查看消息列表：</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_3_51_896_1011.jpg\" title=\"\" alt=\"DoraCMSv1.0.8版本升级2.jpg\"/></p><p><br/></p><p>点击消息标题查看消息详情：</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_3_57_338_1012.jpg\" title=\"\" alt=\"DoraCMSv1.0.8版本升级3.jpg\"/></p><p><br/></p><p><br/></p><p>2、文档存草稿功能，这个是DoraCMS用户的一个建议，有时候我们并不想把文档立刻发布出去，需要暂存稍后补充完整再发布，于是“存为草稿”就很有必要了，当用户新增文档时，会有存为草稿的按钮出现：</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_4_1_817_1013.jpg\" title=\"\" alt=\"DoraCMSv1.0.8版本升级4.jpg\"/></p><p><br/></p><p>存完之后可以看到文档的状态为false，后续您可以继续进行编辑：</p><p><br/></p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_4_6_427_1014.jpg\" title=\"\" alt=\"DoraCMSv1.0.8版本升级5.jpg\"/>&nbsp;</p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"近期针对网友提出的建议和DoraCMS本身存在的一些问题进行了更新，主要内容如下：\\n\\n###版本更新 2015年11月23日15:04:05\\n###版本号v1.0.8\\n###更新内容：\\n\\n- 1、新增了DoraCMS系统消息模块，管理员可对所有用户发送公告。\\n- 2、优化了用户中心(userCenter)的菜单\\n- 3、新增了用户、管理员自定义头像的功能\\n- 4、优化了留言列表\\n- 5、用户中心添加了“我的消息”\\n- 6、抽取了前后台共用的js，便于复用和维护\\n- 7、优化了管理员主界面(main.ejs)\\n- 8、添加文档中增加了“存为草稿”的功能\\n- 9、修复了后台左侧菜单，点击三级分类类别名称不高亮的问题\\n- 10、修复了在管理后台操作中，暂停一段时间，清除缓存后再进行操作页面报500错误的问题\\n- 11、修复了一些明显的bug\\n\\n下面简要介绍下几个重要的改动：\\n1、消息管理模块。\\nDoraCMS v1.0.8 加入了消息管理模块，入口在这里：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_3_40_34_1009.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n该模块主要作用是对网站所有用户发送消息提醒（网站更新、热点推送等），后面消息管理可能还涉及到用户之间的消息传递，管理员添加公告之后，用户前台登录会收到提醒：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_3_46_171_1010.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n点击气泡可以查看消息列表：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_3_51_896_1011.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n点击消息标题查看消息详情：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_3_57_338_1012.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n\\n2、文档存草稿功能，这个是DoraCMS用户的一个建议，有时候我们并不想把文档立刻发布出去，需要暂存稍后补充完整再发布，于是“存为草稿”就很有必要了，当用户新增文档时，会有存为草稿的按钮出现：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_4_1_817_1013.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n存完之后可以看到文档的状态为false，后续您可以继续进行编辑：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_4_6_427_1014.jpg\"},{\"type\":\"contents\",\"content\":\" \\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1448264317000.jpg','2015-11-23 07:46:42','2020-08-20 15:44:14'),(256,'图标字体化浅谈','图标字体化浅谈','1','1','','iconfont,图标字体','2',NULL,'','在做手机端Web App项目中,经常会遇到小图标在手机上显示比较模糊的问题，经过实践发现了一种比较好的解决方案，图标字体化。','1','','','0:01',762,'2','0',NULL,1,'0',223027,'<p>&nbsp;&nbsp;&nbsp;&nbsp;在做手机端Web App项目中,经常会遇到小图标在手机上显示比较模糊的问题，经过实践发现了一种比较好的解决方案，图标字体化。在微社区项目中，有很多小的Icon（图标），如分享、回复、赞、返回、话题、访问、箭头等，这些Icon（图标）一般都是纯色的。开始制作时考虑用双倍大小的Sprite图，通过CSS样式设置只显示二分之一尺寸，这样在Retina屏上显示的大小是正常的，一旦放大屏幕后图标又变得模糊不清，测试的效果不是很理想，后来又考虑多套图标适配方案、SVG矢量图等，都因为种种原因放弃掉了（如多套图标繁琐、Android 2.3不支持SVG格式等），为了解决以上问题，用到了图标字体， 通过查阅Icon Font相关技术博客和文章，并结合在项目中实际应用梳理出了图标字体化浅谈这篇文章，望对正在学习和使用的重构同学们有一个参考和帮助！文章内的内容参考了相关技术文章并加上自已的理解，错误在所难免，欢迎批评指正。下图为微社区用到的部分图标字体。</p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_8_9_46_4_741_1001.png\" title=\"微社区\" alt=\"微社区\" width=\"630\" height=\"360\" border=\"0\" vspace=\"0\" style=\"width: 630px; height: 360px;\"/></p><p><br/></p><h3>使用图标字体的优势和劣势</h3><p>字体图标除了图像清晰度之外，比位图还有哪些优势呢?<br/>1、<strong>轻量性</strong>：一个图标字体比一系列的图像（特别是在Retina屏中使用双倍图像）要小。一旦图标字体加载了，图标就会马上渲染出来，不需要下载一个图像。可以减少HTTP请求，还可以配合HTML5离线存储做性能优化。</p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_8_9_46_52_253_1002.png\" title=\"\" alt=\"20140122144036957.png\"/></p><p><br/></p><p>2、<strong>灵活性</strong>：图标字体可以用过font-size属性设置其任何大小，还可以加各种文字效果，包括颜色、Hover状态、透明度、阴影和翻转等效果。可以在任何背景下显示。使用位图的话，必须得为每个不同大小和不同效果的图像输出一个不同文件。</p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_8_9_47_19_892_1003.png\" title=\"\" alt=\"20140124105629539.png\"/></p><p><br/></p><p>3、<strong>兼容性</strong>：网页字体支持所有现代浏览器，包括IE低版本。</p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_8_9_48_5_411_1004.png\" title=\"\" alt=\"20140121115551919.png\"/></p><p><br/></p><p>除了以上优势之外，当然也有劣势<br/>1、图标字体只能被渲染成单色或者CSS3的渐变色，由于此限制使得它不能广泛使用。<br/>2、使用版权上有限制，有好多字体是收费的。当然也有很多免费开源的精美字体图标供下载使用。<br/>3、创作自已的字体图标很费时间，重构人员后期维护的成本偏高。</p><p><br/></p><p>最近在做移动端图标库，由于兼容性和不同移动设备分辨率不同，于是考虑使用字体图标来建立图标库，可以完美的解决上述问题。下面以阿里妈妈的iconfont为例来说明如何制作自己的图标字体。</p><p><br/></p><p>阿里妈妈官方图标库：&nbsp;<a href=\"http://www.iconfont.cn/\" _src=\"http://www.iconfont.cn/\">http://www.iconfont.cn/</a> </p><p><br/></p><p>在制作图标字体之前，我们首先需要通过ai制作规范的矢量图形，由于我们公司的UI设计师已经给出了psd源文件，我们可以选中psd中图形的路径：</p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_8_9_53_26_356_1005.jpg\" title=\"\" alt=\"QQ截图20150808095023.jpg\"/>&nbsp;</p><p><br/></p><p>接着通过 文件——导出——路径到 illustrator&nbsp;</p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_8_9_53_55_253_1006.jpg\" title=\"\" alt=\"QQ截图20150808095040.jpg\"/></p><p><br/></p><p>这样，就可以生成一个ai文件&nbsp;<img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_8_9_55_33_556_1007.jpg\" title=\"\" alt=\"QQ截图20150808095300.jpg\"/></p><p><br/></p><p>我们通过ai打开这个文件如图所示：</p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_8_9_57_7_557_1008.jpg\" title=\"\" alt=\"QQ截图20150808095431.jpg\"/></p><p><br/></p><p><br/></p><p>接着，我们需要用阿里给定的标准模板来保存文件，<img src=\"http://www.html-js.cn/ueditor/dialogs/attachment/fileTypeImages/icon_rar.gif\" style=\"line-height: 16px; vertical-align: middle; margin-right: 2px;\"/><a href=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_8_9_58_28_562_1009.zip\" title=\"icon.zip\" style=\"line-height: 16px; font-size: 12px; color: rgb(0, 102, 204);\">icon.zip</a></p><p><br/></p><p>我们打开模板：</p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_8_9_59_34_245_1010.jpg\" title=\"\" alt=\"QQ截图20150808095659.jpg\" width=\"451\" height=\"406\" style=\"width: 451px; height: 406px;\"/></p><p><br/></p><p><br/></p><p>删掉阿里默认图标，替换上自己制作的图标，然后保存成svg的格式：</p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_8_10_1_52_273_1011.jpg\" title=\"\" alt=\"QQ截图20150808095908.jpg\"/></p><p><br/></p><p><br/></p><p>保存好之后，我们的准备工作就完成了，接着，我们去网站处理 登录网址&nbsp;<a href=\"http://www.iconfont.cn\" _src=\"http://www.iconfont.cn\">http://www.iconfont.cn</a> </p><p><br/></p><p>进入图标上传页面：</p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_8_10_3_27_351_1012.jpg\" title=\"\" alt=\"QQ截图20150808100047.jpg\"/></p><p><br/></p><p>接下来，你应该知道怎么做了。。。。</p><p><br/></p><p>图标字体生成的方式有很多种，支持的网站也很多，你可以选择适合你的一种去建立自己的图标字体库，非常方便</p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"    在做手机端Web App项目中,经常会遇到小图标在手机上显示比较模糊的问题，经过实践发现了一种比较好的解决方案，图标字体化。在微社区项目中，有很多小的Icon（图标），如分享、回复、赞、返回、话题、访问、箭头等，这些Icon（图标）一般都是纯色的。开始制作时考虑用双倍大小的Sprite图，通过CSS样式设置只显示二分之一尺寸，这样在Retina屏上显示的大小是正常的，一旦放大屏幕后图标又变得模糊不清，测试的效果不是很理想，后来又考虑多套图标适配方案、SVG矢量图等，都因为种种原因放弃掉了（如多套图标繁琐、Android 2.3不支持SVG格式等），为了解决以上问题，用到了图标字体， 通过查阅Icon Font相关技术博客和文章，并结合在项目中实际应用梳理出了图标字体化浅谈这篇文章，望对正在学习和使用的重构同学们有一个参考和帮助！文章内的内容参考了相关技术文章并加上自已的理解，错误在所难免，欢迎批评指正。下图为微社区用到的部分图标字体。\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_8_9_46_4_741_1001.png\"},{\"type\":\"contents\",\"content\":\"\\n\\n使用图标字体的优势和劣势\\n字体图标除了图像清晰度之外，比位图还有哪些优势呢?\\n1、轻量性：一个图标字体比一系列的图像（特别是在Retina屏中使用双倍图像）要小。一旦图标字体加载了，图标就会马上渲染出来，不需要下载一个图像。可以减少HTTP请求，还可以配合HTML5离线存储做性能优化。\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_8_9_46_52_253_1002.png\"},{\"type\":\"contents\",\"content\":\"\\n\\n2、灵活性：图标字体可以用过font-size属性设置其任何大小，还可以加各种文字效果，包括颜色、Hover状态、透明度、阴影和翻转等效果。可以在任何背景下显示。使用位图的话，必须得为每个不同大小和不同效果的图像输出一个不同文件。\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_8_9_47_19_892_1003.png\"},{\"type\":\"contents\",\"content\":\"\\n\\n3、兼容性：网页字体支持所有现代浏览器，包括IE低版本。\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_8_9_48_5_411_1004.png\"},{\"type\":\"contents\",\"content\":\"\\n\\n除了以上优势之外，当然也有劣势\\n1、图标字体只能被渲染成单色或者CSS3的渐变色，由于此限制使得它不能广泛使用。\\n2、使用版权上有限制，有好多字体是收费的。当然也有很多免费开源的精美字体图标供下载使用。\\n3、创作自已的字体图标很费时间，重构人员后期维护的成本偏高。\\n\\n最近在做移动端图标库，由于兼容性和不同移动设备分辨率不同，于是考虑使用字体图标来建立图标库，可以完美的解决上述问题。下面以阿里妈妈的iconfont为例来说明如何制作自己的图标字体。\\n\\n阿里妈妈官方图标库： http://www.iconfont.cn/ \\n\\n在制作图标字体之前，我们首先需要通过ai制作规范的矢量图形，由于我们公司的UI设计师已经给出了psd源文件，我们可以选中psd中图形的路径：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_8_9_53_26_356_1005.jpg\"},{\"type\":\"contents\",\"content\":\" \\n\\n接着通过 文件——导出——路径到 illustrator \\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_8_9_53_55_253_1006.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n这样，就可以生成一个ai文件 \"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_8_9_55_33_556_1007.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n我们通过ai打开这个文件如图所示：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_8_9_57_7_557_1008.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n\\n接着，我们需要用阿里给定的标准模板来保存文件，\"},{\"type\":\"image\",\"content\":\"http://www.html-js.cn/ueditor/dialogs/attachment/fileTypeImages/icon_rar.gif\"},{\"type\":\"contents\",\"content\":\"icon.zip\\n\\n我们打开模板：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_8_9_59_34_245_1010.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n\\n删掉阿里默认图标，替换上自己制作的图标，然后保存成svg的格式：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_8_10_1_52_273_1011.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n\\n保存好之后，我们的准备工作就完成了，接着，我们去网站处理 登录网址 http://www.iconfont.cn \\n\\n进入图标上传页面：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_8_10_3_27_351_1012.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n接下来，你应该知道怎么做了。。。。\\n\\n图标字体生成的方式有很多种，支持的网站也很多，你可以选择适合你的一种去建立自己的图标字体库，非常方便\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444889877000.jpg','2015-08-08 02:05:07','2020-08-20 15:44:26'),(257,'视频：Windows 安装FTP服务 （基于Windows2008 IIS配置FTP站点 ）','Windows 安装FTP服务','1','1','','ftp,阿里云','2',NULL,'','在windows2008 下创建ftp服务其实很简单，网上的教程比较多，笔者在阿里云上找到这个视频，说的非常详细，就贴出来了，希望可以帮到大家','1','','','0:01',762,'2','0',NULL,0,'0',223203,'<p style=\"text-align: left;\"><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;在windows2008 下创建ftp服务其实很简单，网上的教程比较多，笔者在阿里云上找到这个视频，说的非常详细，就贴出来了，希望可以帮到大家</span></p><p><span style=\"font-size: 16px;\"><br/></span></p><p><span style=\"font-size: 16px;\"><br/></span></p><p style=\"text-align: center;\"><embed type=\"application/x-shockwave-flash\" class=\"edui-faked-video\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" src=\"http://cloud.video.taobao.com/video/play/sid/10290882/uid/c3Vubnlfbmljb2xlODI%3D/v/2001/f/video.swf\" width=\"728\" height=\"470\" wmode=\"transparent\" play=\"true\" loop=\"false\" menu=\"false\" allowscriptaccess=\"never\" allowfullscreen=\"true\"/></p>','[{\"type\":\"contents\",\"content\":\"    在windows2008 下创建ftp服务其实很简单，网上的教程比较多，笔者在阿里云上找到这个视频，说的非常详细，就贴出来了，希望可以帮到大家\\n\\n\\n\\n\\n\"},{\"type\":\"image\",\"content\":\"/ueditor/themes/default/images/spacer.gif\"},{\"type\":\"contents\",\"content\":\"\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1436421234000.jpg','2015-07-09 05:55:13','2020-08-20 15:44:27'),(258,'doracms年前不打算更新版本了','doracms年前不打算更新版本了','1','1',NULL,'doracms','2',NULL,'','doracms从设计之初到现在已经经历了大半年时间，经过十个版本更新也陆续发现了很多问题，热心的前端童鞋也提出了一些很好的建议。于是最近也在思考，如何让doracms的应用性更好，于是决定想好了再重新开始。','1','','','0:01',762,'2','0',NULL,0,'0',224269,'<p style=\"line-height: 2em;\"><span style=\"font-size: 18px;\">doracms年前不打算更新版本了<br/>bug还是会提交的<br/>doracms决定开始优雅的写代码<br/>doracms准备从“零”开始<br/>doracms准备重构<br/>是不是太折腾了？<br/>no!<br/>为了可读性更强<br/>为了拓展性更强<br/>为了看起来没那么烦躁<br/>移植到koa?<br/>使用es6？<br/>可能更多的关注性能<br/>安全性<br/>我需要更多思考，我更多的学习！<br/>如果您对doracms更好的想法，欢迎联系我！</span></p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"doracms年前不打算更新版本了\\nbug还是会提交的\\ndoracms决定开始优雅的写代码\\ndoracms准备从“零”开始\\ndoracms准备重构\\n是不是太折腾了？\\nno!\\n为了可读性更强\\n为了拓展性更强\\n为了看起来没那么烦躁\\n移植到koa?\\n使用es6？\\n可能更多的关注性能\\n安全性\\n我需要更多思考，我更多的学习！\\n如果您对doracms更好的想法，欢迎联系我！\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20160115081202.jpg','2016-01-15 00:15:34','2020-08-20 15:44:11'),(259,'文件上传 readFile api','文件上传 readFile api','1','1','','readfile,upload,api','2',NULL,'','readFile官方提供方法中 FileReader.readAsDataURL() 可以获取到上传路径，我本地用react做了下测试','1','','','0:01',762,'2','0',NULL,0,'0',224712,'<p>在现代浏览器中，通过 readfile api可以很快实现upload功能：</p><p>example：</p><p>HTML:</p><pre class=\"brush:js;toolbar:false\">&lt;input&nbsp;type=&quot;file&quot;&nbsp;onchange=&quot;previewFile()&quot;&gt;\n&lt;img&nbsp;src=&quot;&quot;&nbsp;height=&quot;200&quot;&nbsp;alt=&quot;Image&nbsp;preview...&quot;&gt;</pre><p>javascript:</p><pre class=\"brush:js;toolbar:false\">function&nbsp;previewFile()&nbsp;{\n&nbsp;&nbsp;var&nbsp;preview&nbsp;=&nbsp;document.querySelector(&#39;img&#39;);\n&nbsp;&nbsp;var&nbsp;file&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;document.querySelector(&#39;input[type=file]&#39;).files[0];\n&nbsp;&nbsp;var&nbsp;reader&nbsp;&nbsp;=&nbsp;new&nbsp;FileReader();\n\n&nbsp;&nbsp;reader.addEventListener(&quot;load&quot;,&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;preview.src&nbsp;=&nbsp;reader.result;\n&nbsp;&nbsp;},&nbsp;false);\n\n&nbsp;&nbsp;if&nbsp;(file)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;reader.readAsDataURL(file);\n&nbsp;&nbsp;}}</pre><p><br/></p><p>readFile官方提供方法中&nbsp;FileReader.readAsDataURL() 可以获取到上传路径，我本地用react做了下测试:</p><pre class=\"brush:js;toolbar:false\">&lt;Input&nbsp;type=&quot;file&quot;&nbsp;ref=&quot;faceInput&quot;&nbsp;onChange={this.changeFace.bind(this)}&nbsp;/&gt;\n&lt;img&nbsp;src={this.state.faceUrl}&nbsp;style={{&nbsp;width:&nbsp;80,&nbsp;padding:&nbsp;5&nbsp;}}&nbsp;/&gt;</pre><p>加入file变化：</p><pre class=\"brush:js;toolbar:false\">changeFace()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;fileInputDOM&nbsp;=&nbsp;ReactDOM.findDOMNode(this.refs.faceInput);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;reader&nbsp;=&nbsp;new&nbsp;FileReader();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reader.onload&nbsp;=&nbsp;(event)&nbsp;=&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;url&nbsp;=&nbsp;event.target.result;&nbsp;//url&nbsp;data\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(url);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.setState({&nbsp;faceUrl:&nbsp;url&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reader.readAsDataURL(fileInputDOM.files[0]);\n&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p>console.log可以看到获取到的url（二进制）：<br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2017_3_29_12_29_3_536_1071.png\" title=\"\" alt=\"readfile上传图片.png\" width=\"590\" height=\"137\" style=\"width: 590px; height: 137px;\"/></p><p>这样就可以在前端很简单的实现上传：<br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2017_3_29_12_29_48_653_1072.png\" title=\"\" alt=\"readfile上传头像1.png\" width=\"514\" height=\"150\" style=\"width: 514px; height: 150px;\"/></p><p>readFile 支持的浏览器情况如下：</p><p><strong>桌面（PC）:</strong><br/></p><table class=\"compat-table\"><tbody style=\"margin: 0px; padding: 0px; border: 0px;\"><tr style=\"margin: 0px; padding: 0px; border: 0px;\" class=\"firstRow\"><th style=\"margin: 0px; padding: 2px 4px 8px; border-width: initial; border-style: none; border-color: initial; font-style: inherit; font-weight: 200; text-align: left; background: 0px 0px; font-family: &quot;Open Sans Light&quot;, Helvetica, Arial, sans-serif; font-size: 16px; line-height: 16px;\">Feature</th><th style=\"margin: 0px; padding: 2px 4px 8px; border-width: initial; border-style: none; border-color: initial; font-style: inherit; font-weight: 200; text-align: left; background: 0px 0px; font-family: &quot;Open Sans Light&quot;, Helvetica, Arial, sans-serif; font-size: 16px; line-height: 16px;\">Firefox (Gecko)</th><th style=\"margin: 0px; padding: 2px 4px 8px; border-width: initial; border-style: none; border-color: initial; font-style: inherit; font-weight: 200; text-align: left; background: 0px 0px; font-family: &quot;Open Sans Light&quot;, Helvetica, Arial, sans-serif; font-size: 16px; line-height: 16px;\">Chrome</th><th style=\"margin: 0px; padding: 2px 4px 8px; border-width: initial; border-style: none; border-color: initial; font-style: inherit; font-weight: 200; text-align: left; background: 0px 0px; font-family: &quot;Open Sans Light&quot;, Helvetica, Arial, sans-serif; font-size: 16px; line-height: 16px;\">Edge</th><th style=\"margin: 0px; padding: 2px 4px 8px; border-width: initial; border-style: none; border-color: initial; font-style: inherit; font-weight: 200; text-align: left; background: 0px 0px; font-family: &quot;Open Sans Light&quot;, Helvetica, Arial, sans-serif; font-size: 16px; line-height: 16px;\">Internet Explorer</th><th style=\"margin: 0px; padding: 2px 4px 8px; border-width: initial; border-style: none; border-color: initial; font-style: inherit; font-weight: 200; text-align: left; background: 0px 0px; font-family: &quot;Open Sans Light&quot;, Helvetica, Arial, sans-serif; font-size: 16px; line-height: 16px;\">Opera</th><th style=\"margin: 0px; padding: 2px 4px 8px; border-width: initial; border-style: none; border-color: initial; font-style: inherit; font-weight: 200; text-align: left; background: 0px 0px; font-family: &quot;Open Sans Light&quot;, Helvetica, Arial, sans-serif; font-size: 16px; line-height: 16px;\">Safari</th></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\">Basic support</td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\"><a href=\"https://developer.mozilla.org/en-US/Firefox/Releases/3.6\" title=\"Released on 2010-01-21.\" style=\"color: rgb(33, 122, 192); text-decoration: none; margin: 0px; padding: 0px; border: 0px;\">3.6</a>&nbsp;(1.9.2)<span style=\"margin: 0px; padding: 0px; border: 0px; position: relative; top: -0.15em; vertical-align: top;\">[1]</span></td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\">7</td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\"><span title=\"Please update this with the earliest version of support.\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(136, 136, 136);\">(Yes)</span></td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\">10<span style=\"margin: 0px; padding: 0px; border: 0px; position: relative; top: -0.15em; vertical-align: top;\">[2]</span></td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\">12.02<span style=\"margin: 0px; padding: 0px; border: 0px; position: relative; top: -0.15em; vertical-align: top;\">[3]</span></td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\">6.0</td></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\">Support in Web Workers</td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\"><a href=\"https://developer.mozilla.org/en-US/Firefox/Releases/46\" title=\"Released on 2016-04-26.\" style=\"color: rgb(33, 122, 192); text-decoration: none; margin: 0px; padding: 0px; border: 0px;\">46</a>&nbsp;(46)</td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\"><span title=\"Please update this with the earliest version of support.\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(136, 136, 136);\">(Yes)</span></td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\"><span title=\"Please update this with the earliest version of support.\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(136, 136, 136);\">(Yes)</span></td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\"><span style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(255, 0, 0);\">No&nbsp;support</span></td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\"><span title=\"Please update this with the earliest version of support.\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(136, 136, 136);\">(Yes)</span></td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word; word-break: break-all;\"><span style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(255, 0, 0);\">No&nbsp;support</span></td></tr></tbody></table><p><br/></p><p><strong>mobile:</strong></p><table class=\"compat-table\"><tbody style=\"margin: 0px; padding: 0px; border: 0px;\"><tr style=\"margin: 0px; padding: 0px; border: 0px;\" class=\"firstRow\"><th style=\"margin: 0px; padding: 2px 4px 8px; border-width: initial; border-style: none; border-color: initial; font-style: inherit; font-weight: 200; text-align: left; background: 0px 0px; font-family: &quot;Open Sans Light&quot;, Helvetica, Arial, sans-serif; font-size: 16px; line-height: 16px;\">Feature</th><th style=\"margin: 0px; padding: 2px 4px 8px; border-width: initial; border-style: none; border-color: initial; font-style: inherit; font-weight: 200; text-align: left; background: 0px 0px; font-family: &quot;Open Sans Light&quot;, Helvetica, Arial, sans-serif; font-size: 16px; line-height: 16px;\">Firefox Mobile (Gecko)</th><th style=\"margin: 0px; padding: 2px 4px 8px; border-width: initial; border-style: none; border-color: initial; font-style: inherit; font-weight: 200; text-align: left; background: 0px 0px; font-family: &quot;Open Sans Light&quot;, Helvetica, Arial, sans-serif; font-size: 16px; line-height: 16px;\">Android</th><th style=\"margin: 0px; padding: 2px 4px 8px; border-width: initial; border-style: none; border-color: initial; font-style: inherit; font-weight: 200; text-align: left; background: 0px 0px; font-family: &quot;Open Sans Light&quot;, Helvetica, Arial, sans-serif; font-size: 16px; line-height: 16px;\">Edge</th><th style=\"margin: 0px; padding: 2px 4px 8px; border-width: initial; border-style: none; border-color: initial; font-style: inherit; font-weight: 200; text-align: left; background: 0px 0px; font-family: &quot;Open Sans Light&quot;, Helvetica, Arial, sans-serif; font-size: 16px; line-height: 16px;\">IE Mobile</th><th style=\"margin: 0px; padding: 2px 4px 8px; border-width: initial; border-style: none; border-color: initial; font-style: inherit; font-weight: 200; text-align: left; background: 0px 0px; font-family: &quot;Open Sans Light&quot;, Helvetica, Arial, sans-serif; font-size: 16px; line-height: 16px;\">Opera Mobile</th><th style=\"margin: 0px; padding: 2px 4px 8px; border-width: initial; border-style: none; border-color: initial; font-style: inherit; font-weight: 200; text-align: left; background: 0px 0px; font-family: &quot;Open Sans Light&quot;, Helvetica, Arial, sans-serif; font-size: 16px; line-height: 16px;\">Safari Mobile</th></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\">Basic support</td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\">32</td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\">3</td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\"><span title=\"Please update this with the earliest version of support.\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(136, 136, 136);\">(Yes)</span></td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\">10</td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\">11.5</td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\">6.1</td></tr><tr style=\"margin: 0px; padding: 0px; border: 0px;\"><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\">Support in Web Workers</td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\"><a href=\"https://developer.mozilla.org/en-US/Firefox/Releases/46\" title=\"Released on 2016-04-26.\" style=\"color: rgb(33, 122, 192); text-decoration: none; margin: 0px; padding: 0px; border: 0px;\">46</a>&nbsp;(46)</td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\"><span title=\"Please update this with the earliest version of support.\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(136, 136, 136);\">(Yes)</span></td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\"><span title=\"Please update this with the earliest version of support.\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(136, 136, 136);\">(Yes)</span></td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\"><span style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(255, 0, 0);\">No&nbsp;support</span></td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word;\"><span title=\"Please update this with the earliest version of support.\" style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(136, 136, 136);\">(Yes)</span></td><td style=\"margin: 0px; padding-right: 5px; padding-left: 5px; border-color: rgba(212, 221, 228, 0.247059); font-size: 12px; background: rgb(255, 255, 255); vertical-align: top; word-wrap: break-word; word-break: break-all;\"><span style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(255, 0, 0);\">No&nbsp;support</span></td></tr></tbody></table><p>由此可见，一般的现代浏览器是可以支持的，特别在移动端没有问题，可以放心使用。<img src=\"http://img.baidu.com/hi/jx2/j_0066.gif\"/></p>','[{\"type\":\"contents\",\"content\":\"在现代浏览器中，通过 readfile api可以很快实现upload功能：\\nexample：\\nHTML:\\n&lt;input type=\\\"file\\\" onchange=\\\"previewFile()\\\"&gt;\\n&lt;img src=\\\"\\\" height=\\\"200\\\" alt=\\\"Image preview...\\\"&gt;\\njavascript:\\nfunction previewFile() {\\n  var preview = document.querySelector(\'img\');\\n  var file    = document.querySelector(\'input[type=file]\').files[0];\\n  var reader  = new FileReader();\\n\\n  reader.addEventListener(\\\"load\\\", function () {\\n    preview.src = reader.result;\\n  }, false);\\n\\n  if (file) {\\n    reader.readAsDataURL(file);\\n  }}\\n\\nreadFile官方提供方法中 FileReader.readAsDataURL() 可以获取到上传路径，我本地用react做了下测试:\\n&lt;Input type=\\\"file\\\" ref=\\\"faceInput\\\" onChange={this.changeFace.bind(this)} /&gt;\\n&lt;img src={this.state.faceUrl} style={{ width: 80, padding: 5 }} /&gt;\\n加入file变化：\\nchangeFace() {\\n        const fileInputDOM = ReactDOM.findDOMNode(this.refs.faceInput);\\n        const reader = new FileReader();\\n        reader.onload = (event) =&gt; {\\n            let url = event.target.result; //url data\\n            console.log(url);\\n            this.setState({ faceUrl: url });\\n        };\\n        reader.readAsDataURL(fileInputDOM.files[0]);\\n    }\\nconsole.log可以看到获取到的url（二进制）：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2017_3_29_12_29_3_536_1071.png\"},{\"type\":\"contents\",\"content\":\"\\n这样就可以在前端很简单的实现上传：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2017_3_29_12_29_48_653_1072.png\"},{\"type\":\"contents\",\"content\":\"\\nreadFile 支持的浏览器情况如下：\\n桌面（PC）:\\nFeatureFirefox (Gecko)ChromeEdgeInternet ExplorerOperaSafariBasic support3.6 (1.9.2)[1]7(Yes)10[2]12.02[3]6.0Support in Web Workers46 (46)(Yes)(Yes)No support(Yes)No support\\n\\nmobile:\\nFeatureFirefox Mobile (Gecko)AndroidEdgeIE MobileOpera MobileSafari MobileBasic support323(Yes)1011.56.1Support in Web Workers46 (46)(Yes)(Yes)No support(Yes)No support\\n由此可见，一般的现代浏览器是可以支持的，特别在移动端没有问题，可以放心使用。\"},{\"type\":\"image\",\"content\":\"http://img.baidu.com/hi/jx2/j_0066.gif\"},{\"type\":\"contents\",\"content\":\"\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20170329114005.png','2017-03-29 03:43:46','2020-10-30 15:16:21'),(260,'Node.js API实例——Node.js 控制台','Node.js 控制台','1','1','','nodejs','2',NULL,'','在过去，一个机构可能只有一台主机，职员使用电传打印机（Teletypewritter 又简称为tty）通过串口连接到主机。后来人们又在电传打印机的基础上进行了改进，程序的输出不再是打印到纸带上而是显示屏上，并且支持彩色显示，这样的设备被称为终端（Terminal）','1','','','0:01',762,'2','0',NULL,0,'0',223893,'<h3><span style=\"font-size: 16px;\">Node.js 控制台</span></h3><h3 id=\"-\"><span style=\"font-size: 16px;\">什么是终端</span></h3><p><span style=\"font-size: 16px;\">在过去，一个机构可能只有一台主机，职员使用电传打印机（Teletypewritter 又简称为tty）通过串口连接到主机。后来人们又在电传打印机的基础上进行了改进，程序的输出不再是打印到纸带上而是显示屏上，并且支持彩色显示，这样的设备被称为终端（Terminal）。一台主机可以有很多个终端，早期的主机只支持串口线的终端，对应的设备叫做串口终端（Serials Terminal），又发展出了伪终端，以便于支持GUI，后来串口终端渐渐被图形界面的伪终端取代，也就是我们今天所说的终端。</span></p><p><span style=\"font-size: 16px;\">但是在主机的系统启动完成之前，终端是不能连接到主机上的。为了能记录出主机开机过程的日志，也便于在主机出故障无法启动操作系统时进行检修维护，又多了一个叫做控制台的设备。一台主机有且只能有一个控制台。文件主机的重要日志，比如开机关机的日志和记录，重要应用程序的日志，都会输出到控制台来。 sex</span></p><p><span style=\"font-size: 16px;\">与Node.js终端相关的模块有STDIO、TTY、REPL。</span></p><h3 id=\"stdio\"><span style=\"font-size: 16px;\">STDIO</span></h3><p><span style=\"font-size: 16px;\">打印到stdout和stderr。与大多数Web浏览器的控制台对象提供的功能类似，这里将输出发送到stdout或stderr。</span></p><h3 id=\"tty\"><span style=\"font-size: 16px;\">TTY</span></h3><p><span style=\"font-size: 16px;\">在Linux中，TTY也许是跟终端有关系的最为混乱的术语。TTY是TeleTYpe的一个老缩写。Teletypes，或者teletypewriters，原来指的是电传打字机，是通过串行线用打印机键盘通过阅读和发送信息的设备，和古老的电报机区别并不是很大。之后，当计算机只能以批处理方式运行时（当时穿孔卡片阅读器是唯一一种使程序载入运行的方式），电传打字机成为唯一能够被使用的“实时”输入/输出设备。最终，电传打字机被键盘和显示器终端所取代，但在终端或TTY接插的地方，操作系统仍然需要一个程序来监视串行端口。一个getty“Get TTY”的处理过程是：一个程序监视物理的TTY/终端接口。对一个虚拟网络服务器（VNC）来说，一个伪装的TTY(Pseudo-TTY，即假冒的TTY，也叫做“PTY”）是等价的终端。当你运行一个xterm(终端仿真程序）或GNOME终端程序时，PTY对虚拟的用户或者如xterm一样的伪终端来说，就像是一个TTY在运行。“Pseudo”的意思是“duplicating in a fake way”（用伪造的方法复制），它相比“virtual”或“emulated”更能真实的说明问题。而在现在的计算中，它却处于被放弃的阶段。</span></p><h3 id=\"repl\"><span style=\"font-size: 16px;\">REPL</span></h3><p><span style=\"font-size: 16px;\">交互式解释器（REPL）既可以作为一个独立的程序运行，也可以很容易地包含在其他程序中作为整体程序的一部分使用。REPL为运行JavaScript脚本与查看运行结果提供了一种交互方式，通常REPL交互方式可以用于调试、测试以及试验某种想法。yellow</span></p><p><span style=\"font-size: 16px;\">在终端输入 node 命令，会出现个 &gt; 箭头，可以输入javascript代码进行调试。</span></p><p><span style=\"font-size: 16px;\">例如:</span></p><pre><span style=\"font-size: 16px;\">console.log(&#39;hello world&#39;); &nbsp;// 回车<br/>打印出 hello world<br/></span></pre><h2 id=\"stdio-console-\"><span style=\"font-size: 16px;\">STDIO - 标准输入输出到控制台(console)</span></h2><h3 id=\"console-log-data-\"><span style=\"font-size: 16px;\">console.log([data],[...])</span></h3><p><span style=\"font-size: 16px;\">换行打印到基本输入。</span></p><p><span style=\"font-size: 16px;\">第一个参数是一个字符串，其中包含零个或多个占位符。每一个占位符被替换其相应的参数。如果占位符没有相应的参数，将占位符不会被替换，而是直接打印出占位符的字面量。</span></p><p><span style=\"font-size: 16px;\">支持的占位符：</span></p><p><span style=\"font-size: 16px;\">this &nbsp; ％s - 字符串。this</span></p><p><span style=\"font-size: 16px;\">sex &nbsp; ％d - 数字（包括整数和浮点数）。book</span></p><p><span style=\"font-size: 16px;\">sex &nbsp; ％j - JSON。sex</span></p><h5 id=\"-1-\"><span style=\"font-size: 16px;\">测试1，只有第一个参数的情况。</span></h5><pre class=\"code\"><span style=\"font-size: 16px;\"> console.log(&quot;hello world&quot;); // 在终端会打印出 hello world<br/></span></pre><h5 id=\"-2-\"><span style=\"font-size: 16px;\">测试2，具有占位符，但后面无对应参数。</span></h5><pre class=\"code\"><span style=\"font-size: 16px;\"> console.log(&quot;hello %s&quot;); &nbsp; // 打印出 hello %s<br/></span></pre><h5 id=\"-3-\"><span style=\"font-size: 16px;\">测试3，具有占位符，后面对应相关参数。</span></h5><pre class=\"code\"><span style=\"font-size: 16px;\"> console.log(&quot;hello %s&quot;,&quot;world!!&quot;); // 打印出 hello world!!<br/> console.log(&quot;1+1 = %d&quot;,2); &nbsp; &nbsp;// 打印出 1+1 = 2<br/> console.log(&quot;a json object : %j&quot;,{bookAuthor:&quot;brighthas&quot;}); // 打印出 a json object : {&quot;bookAuthor&quot;:&quot;brighthas&quot;}<br/><br/> 注意：这里打印的是 &quot;bookAuthor&quot; 而不是 bookAuthor，<br/> 如果直接用 console.log({bookAuthor:&quot;brighthas&quot;})打印 bookAuthor就不会出现双引号。<br/></span></pre><h5 id=\"-4-\"><span style=\"font-size: 16px;\">测试4，多个参数。</span></h5><pre class=\"code\"><span style=\"font-size: 16px;\"> console.log(&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;); &nbsp; // 打印出 aa bb cc , 之间有一个空格。<br/> console.log(&quot;aa %d%s&quot;,121,&quot;bbb&quot;) &nbsp; &nbsp;// &nbsp;打印出 aa 121bbb <br/> console.log(&quot;aa %d%s&quot;,&quot;ccc&quot;,&quot;bbb&quot;) &nbsp;// &nbsp;打印出 aa NaNbbb &nbsp;我们会看到 ccc 参数被转换为NaN，<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // &nbsp;说明内部会根据占位符类型转换相应的参数。<br/></span></pre><h3 id=\"console-info-data-\"><span style=\"font-size: 16px;\">console.info([data], [...])</span></h3><p><span style=\"font-size: 16px;\">与console.log使用方法相同。</span></p><h3 id=\"console-error-data-\"><span style=\"font-size: 16px;\">console.error([data], [...])</span></h3><p><span style=\"font-size: 16px;\">与console.log使用方法相同，不过，打印到stderr。</span></p><h3 id=\"console-warn-data-\"><span style=\"font-size: 16px;\">console.warn([data], [...])</span></h3><p><span style=\"font-size: 16px;\">与console.log使用方法相同，不过，打印到stderr。</span></p><h3 id=\"console-dir-object-\"><span style=\"font-size: 16px;\">console.dir(object)</span></h3><p><span style=\"font-size: 16px;\">打印出该对象的所有属性和属性值。</span></p><h3 id=\"console-time-label-\"><span style=\"font-size: 16px;\">console.time(label)</span></h3><p><span style=\"font-size: 16px;\">标记时间，与console.timeEnd 搭配使用。</span></p><h3 id=\"console-timeend-label-\"><span style=\"font-size: 16px;\">console.timeEnd(label)</span></h3><p><span style=\"font-size: 16px;\">完成计时器，打印出从console.time标记开始，到执行console.timeEnd之间的执行时间。</span></p><h5 id=\"-1\"><span style=\"font-size: 16px;\">测试1</span></h5><pre class=\"code\"><span style=\"font-size: 16px;\"> console.time(&quot;test&quot;);<br/> for (var i = 0; i &lt; 100; i++) {<br/> &nbsp; var o = new Object();<br/> }<br/> console.timeEnd(&quot;test&quot;);<br/> //打印出 test : 5ms <br/> //这个时间不是固定的，根据计算机性能而定。<br/></span></pre><h3 id=\"console-trace-label-\"><span style=\"font-size: 16px;\">console.trace(label)</span></h3><p><span style=\"font-size: 16px;\">打印当前位置的堆栈信息到标准错误stderr输出。可以追踪函数的调用轨迹。</span></p><h5 id=\"-1\"><span style=\"font-size: 16px;\">测试1</span></h5><pre class=\"code\"><span style=\"font-size: 16px;\"> console.trace(&quot;test&quot;);<br/></span></pre><p><span style=\"font-size: 16px;\">会打印出如下类似的信息：</span></p><pre class=\"code\"><span style=\"font-size: 16px;\">Trace: test<br/> &nbsp;at repl:1:10<br/> &nbsp;at REPLServer.self.eval (repl.js:110:21)<br/> &nbsp;at Interface.(repl.js:239:12)<br/> &nbsp;at Interface.EventEmitter.emit (events.js:95:17)<br/> &nbsp;at Interface._onLine (readline.js:202:10)<br/> &nbsp;......<br/></span></pre><h3 id=\"console-assert-expression-message-\"><span style=\"font-size: 16px;\">console.assert(expression, [message])</span></h3><p><span style=\"font-size: 16px;\">如果expression等于false，就会抛出消息为[message]的AssertionError异常。</span></p><h5 id=\"-1\"><span style=\"font-size: 16px;\">测试1</span></h5><pre class=\"code\"><span style=\"font-size: 16px;\">console.assert(false,&quot;test error&quot;);<br/>// 打印结果：<br/>AssertionError: test error<br/> &nbsp;at Console.assert (console.js:102:23)<br/> &nbsp;at repl:1:10<br/> &nbsp;at REPLServer.self.eval (repl.js:110:21)<br/> &nbsp;at Interface.(repl.js:239:12)<br/> &nbsp;......<br/></span></pre>','[{\"type\":\"contents\",\"content\":\"Node.js 控制台\\n什么是终端\\n在过去，一个机构可能只有一台主机，职员使用电传打印机（Teletypewritter 又简称为tty）通过串口连接到主机。后来人们又在电传打印机的基础上进行了改进，程序的输出不再是打印到纸带上而是显示屏上，并且支持彩色显示，这样的设备被称为终端（Terminal）。一台主机可以有很多个终端，早期的主机只支持串口线的终端，对应的设备叫做串口终端（Serials Terminal），又发展出了伪终端，以便于支持GUI，后来串口终端渐渐被图形界面的伪终端取代，也就是我们今天所说的终端。\\n但是在主机的系统启动完成之前，终端是不能连接到主机上的。为了能记录出主机开机过程的日志，也便于在主机出故障无法启动操作系统时进行检修维护，又多了一个叫做控制台的设备。一台主机有且只能有一个控制台。文件主机的重要日志，比如开机关机的日志和记录，重要应用程序的日志，都会输出到控制台来。 sex\\n与Node.js终端相关的模块有STDIO、TTY、REPL。\\nSTDIO\\n打印到stdout和stderr。与大多数Web浏览器的控制台对象提供的功能类似，这里将输出发送到stdout或stderr。\\nTTY\\n在Linux中，TTY也许是跟终端有关系的最为混乱的术语。TTY是TeleTYpe的一个老缩写。Teletypes，或者teletypewriters，原来指的是电传打字机，是通过串行线用打印机键盘通过阅读和发送信息的设备，和古老的电报机区别并不是很大。之后，当计算机只能以批处理方式运行时（当时穿孔卡片阅读器是唯一一种使程序载入运行的方式），电传打字机成为唯一能够被使用的“实时”输入/输出设备。最终，电传打字机被键盘和显示器终端所取代，但在终端或TTY接插的地方，操作系统仍然需要一个程序来监视串行端口。一个getty“Get TTY”的处理过程是：一个程序监视物理的TTY/终端接口。对一个虚拟网络服务器（VNC）来说，一个伪装的TTY(Pseudo-TTY，即假冒的TTY，也叫做“PTY”）是等价的终端。当你运行一个xterm(终端仿真程序）或GNOME终端程序时，PTY对虚拟的用户或者如xterm一样的伪终端来说，就像是一个TTY在运行。“Pseudo”的意思是“duplicating in a fake way”（用伪造的方法复制），它相比“virtual”或“emulated”更能真实的说明问题。而在现在的计算中，它却处于被放弃的阶段。\\nREPL\\n交互式解释器（REPL）既可以作为一个独立的程序运行，也可以很容易地包含在其他程序中作为整体程序的一部分使用。REPL为运行JavaScript脚本与查看运行结果提供了一种交互方式，通常REPL交互方式可以用于调试、测试以及试验某种想法。yellow\\n在终端输入 node 命令，会出现个 &gt; 箭头，可以输入javascript代码进行调试。\\n例如:\\nconsole.log(\'hello world\');  // 回车\\n打印出 hello world\\n\\nSTDIO - 标准输入输出到控制台(console)\\nconsole.log([data],[...])\\n换行打印到基本输入。\\n第一个参数是一个字符串，其中包含零个或多个占位符。每一个占位符被替换其相应的参数。如果占位符没有相应的参数，将占位符不会被替换，而是直接打印出占位符的字面量。\\n支持的占位符：\\nthis   ％s - 字符串。this\\nsex   ％d - 数字（包括整数和浮点数）。book\\nsex   ％j - JSON。sex\\n测试1，只有第一个参数的情况。\\n console.log(\\\"hello world\\\"); // 在终端会打印出 hello world\\n\\n测试2，具有占位符，但后面无对应参数。\\n console.log(\\\"hello %s\\\");   // 打印出 hello %s\\n\\n测试3，具有占位符，后面对应相关参数。\\n console.log(\\\"hello %s\\\",\\\"world!!\\\"); // 打印出 hello world!!\\n console.log(\\\"1+1 = %d\\\",2);    // 打印出 1+1 = 2\\n console.log(\\\"a json object : %j\\\",{bookAuthor:\\\"brighthas\\\"}); // 打印出 a json object : {\\\"bookAuthor\\\":\\\"brighthas\\\"}\\n\\n 注意：这里打印的是 \\\"bookAuthor\\\" 而不是 bookAuthor，\\n 如果直接用 console.log({bookAuthor:\\\"brighthas\\\"})打印 bookAuthor就不会出现双引号。\\n\\n测试4，多个参数。\\n console.log(\\\"aa\\\",\\\"bb\\\",\\\"cc\\\");   // 打印出 aa bb cc , 之间有一个空格。\\n console.log(\\\"aa %d%s\\\",121,\\\"bbb\\\")    //  打印出 aa 121bbb \\n console.log(\\\"aa %d%s\\\",\\\"ccc\\\",\\\"bbb\\\")  //  打印出 aa NaNbbb  我们会看到 ccc 参数被转换为NaN，\\n                                     //  说明内部会根据占位符类型转换相应的参数。\\n\\nconsole.info([data], [...])\\n与console.log使用方法相同。\\nconsole.error([data], [...])\\n与console.log使用方法相同，不过，打印到stderr。\\nconsole.warn([data], [...])\\n与console.log使用方法相同，不过，打印到stderr。\\nconsole.dir(object)\\n打印出该对象的所有属性和属性值。\\nconsole.time(label)\\n标记时间，与console.timeEnd 搭配使用。\\nconsole.timeEnd(label)\\n完成计时器，打印出从console.time标记开始，到执行console.timeEnd之间的执行时间。\\n测试1\\n console.time(\\\"test\\\");\\n for (var i = 0; i &lt; 100; i++) {\\n   var o = new Object();\\n }\\n console.timeEnd(\\\"test\\\");\\n //打印出 test : 5ms \\n //这个时间不是固定的，根据计算机性能而定。\\n\\nconsole.trace(label)\\n打印当前位置的堆栈信息到标准错误stderr输出。可以追踪函数的调用轨迹。\\n测试1\\n console.trace(\\\"test\\\");\\n\\n会打印出如下类似的信息：\\nTrace: test\\n  at repl:1:10\\n  at REPLServer.self.eval (repl.js:110:21)\\n  at Interface.(repl.js:239:12)\\n  at Interface.EventEmitter.emit (events.js:95:17)\\n  at Interface._onLine (readline.js:202:10)\\n  ......\\n\\nconsole.assert(expression, [message])\\n如果expression等于false，就会抛出消息为[message]的AssertionError异常。\\n测试1\\nconsole.assert(false,\\\"test error\\\");\\n// 打印结果：\\nAssertionError: test error\\n  at Console.assert (console.js:102:23)\\n  at repl:1:10\\n  at REPLServer.self.eval (repl.js:110:21)\\n  at Interface.(repl.js:239:12)\\n  ......\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1436421714000.jpg','2015-07-09 06:02:07','2020-08-20 15:44:27'),(261,'第7天 Post方法与上传——post.js 插件使用例子','post.js 插件使用例子','2','1','','post.js 插件','2',NULL,'','首先，在example目录下，建立post-example目录，建立一个run.js运行文件，还要建立一个public目录用来储存静态资源，public目录下建立一个index.html文件，下面是index.html网页代码。','1','','','0:01',762,'2','0',NULL,0,'0',222918,'<h3>post.js 插件使用例子</h3><p>首先，在example目录下，建立post-example目录，建立一个run.js运行文件，还要建立一个public目录用来储存静态资源，public目录下建立一个index.html文件，下面是index.html网页代码。</p><pre>&lt;!doctype&nbsp;html&gt;\n&lt;html&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;write&nbsp;article&lt;/title&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;body&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;form&nbsp;action=&quot;http://localhost:3000/post&quot;&nbsp;method=&quot;post&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;&lt;input&nbsp;type=&quot;text&quot;&nbsp;name=&quot;title&quot;/&gt;&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;&lt;textarea&nbsp;type=&quot;text&quot;&nbsp;name=&quot;content&quot;&nbsp;&gt;&lt;/textarea&gt;&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;submit&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/form&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/body&gt;\n&lt;/html&gt;</pre><p>然后编写run.js运行代码：</p><pre>var&nbsp;fk&nbsp;=&nbsp;require(&quot;../..&quot;)\n&nbsp;&nbsp;&nbsp;,App&nbsp;=&nbsp;fk.App\n&nbsp;&nbsp;&nbsp;,app&nbsp;=&nbsp;new&nbsp;App\n&nbsp;&nbsp;&nbsp;,static&nbsp;=&nbsp;fk.static\n&nbsp;&nbsp;&nbsp;,post&nbsp;=&nbsp;fk.post;\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.use(static(__dirname+&quot;/public&quot;));\n&nbsp;&nbsp;&nbsp;&nbsp;app.use(post);\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.post(&quot;/post&quot;,function(req,res){\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.write(&quot;post&nbsp;success!\\n&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.write(&quot;----------------\\n&quot;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.write(&quot;title:&nbsp;\\n&quot;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.write(req.body.title+&quot;\\n&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.write(&quot;content:&nbsp;\\n&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.write(req.body.content);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end();\n\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.listen(3000)</pre><p>启动 node run ，然后打开浏览器 localhost:3000/index.html ，这时候会打开表单页。</p><p><br/></p><p>提交之后，页面会出现：</p><pre>post&nbsp;success!\n----------------\ntitle:&nbsp;\nmy&nbsp;title&nbsp;is&nbsp;post&nbsp;method\ncontent:&nbsp;\ncontent&nbsp;is&nbsp;about&nbsp;post&nbsp;method&nbsp;and&nbsp;upload.</pre><p>通过这个例子，看到了post.js中间的作用。通过访问req.body，就可以javascript对象属性的形式访问，岂不美哉！这还不是全部，因为眼下的post.js插件并不支持上传数据的解析，虽然上传也是采用了post方法，但数据结构更为复杂。下一节将探讨上传的数据结构。</p>','[{\"type\":\"contents\",\"content\":\"post.js 插件使用例子\\n首先，在example目录下，建立post-example目录，建立一个run.js运行文件，还要建立一个public目录用来储存静态资源，public目录下建立一个index.html文件，下面是index.html网页代码。\\n&lt;!doctype html&gt;\\n&lt;html&gt;\\n    &lt;head&gt;\\n        &lt;title&gt;write article&lt;/title&gt;\\n    &lt;/head&gt;\\n    &lt;body&gt;\\n        &lt;form action=\\\"http://localhost:3000/post\\\" method=\\\"post\\\"&gt;\\n            &lt;p&gt;&lt;input type=\\\"text\\\" name=\\\"title\\\"/&gt;&lt;/p&gt;\\n            &lt;p&gt;&lt;textarea type=\\\"text\\\" name=\\\"content\\\" &gt;&lt;/textarea&gt;&lt;/p&gt;\\n            &lt;input type=\\\"submit\\\" /&gt;\\n        &lt;/form&gt;\\n    &lt;/body&gt;\\n&lt;/html&gt;\\n然后编写run.js运行代码：\\nvar fk = require(\\\"../..\\\")\\n   ,App = fk.App\\n   ,app = new App\\n   ,static = fk.static\\n   ,post = fk.post;\\n\\n    app.use(static(__dirname+\\\"/public\\\"));\\n    app.use(post);\\n\\n    app.post(\\\"/post\\\",function(req,res){\\n\\n        res.write(\\\"post success!\\\\n\\\");\\n        res.write(\\\"----------------\\\\n\\\")\\n        res.write(\\\"title: \\\\n\\\")\\n        res.write(req.body.title+\\\"\\\\n\\\");\\n        res.write(\\\"content: \\\\n\\\");\\n        res.write(req.body.content);\\n\\n        res.end();\\n\\n    })\\n\\n    app.listen(3000)\\n启动 node run ，然后打开浏览器 localhost:3000/index.html ，这时候会打开表单页。\\n\\n提交之后，页面会出现：\\npost success!\\n----------------\\ntitle: \\nmy title is post method\\ncontent: \\ncontent is about post method and upload.\\n通过这个例子，看到了post.js中间的作用。通过访问req.body，就可以javascript对象属性的形式访问，岂不美哉！这还不是全部，因为眼下的post.js插件并不支持上传数据的解析，虽然上传也是采用了post方法，但数据结构更为复杂。下一节将探讨上传的数据结构。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444981586000.jpg','2015-10-16 07:46:51','2020-08-20 15:44:23'),(262,'DoraCMS v1.0.9 —可以切换风格的版本','DoraCMS v1.0.9 —可以切换风格的版本','1','1',NULL,'doracms,模板,版本更新','2',NULL,'','本次变更的主要内容如下：1、模板模块的优化,2、后台angularjs重新整理，控制器，指令和过滤器提取处理了，便于维护和拓展，3、系统提醒，这是这个版本的一个新功能，管理员用户在新用户注册和收到新留言的提醒','1','','','0:01',762,'2','0',NULL,0,'0',224097,'<p>DoraCMS近期做了一些更新，具体变更如下：<br/></p><p><br/></p><p>###版本更新 2015年12月15日11:32:13</p><p>###版本号v1.0.9</p><p>###更新内容：</p><p><br/></p><p>- 1、优化了后台分页</p><p>- 2、优化了后台的提示窗口</p><p>- 3、后台首页添加了留言信息</p><p>- 4、后台头部添加了系统消息提醒，目前针对新用户注册和用户留言的提醒（新增了系统消息模块）</p><p>- 5、整理了后台的angularjs，抽取了controller,directive,filter便于维护</p><p>- 6、重新设计了模板配置模块，为前台换肤做准备，可以切换不同风格</p><p>- 7、优化了文档，文档类别，文档模板，系统公告等关联对象，提高查询效率</p><p>- 8、抽取了重量级的js树，便于复用</p><p>- 9、优化了注册，对注册邮箱进行可用性校验</p><p>- 10、修复了管理员登录了，进入 /admin 任然需要登录的bug</p><p>- 11、优化了详情页面展示</p><p>- 12、添加了一些可重用的静态方法</p><p>- 13、修复了一些小bug</p><p><br/></p><p>本次变更如果在之前版本基础上升级，请按以下步骤进行：</p><p>1、关闭正在运行的服务。</p><p>2、git版本库代码&nbsp;<a href=\"https://github.com/doramart/DoraCMS\" _src=\"https://github.com/doramart/DoraCMS\">https://github.com/doramart/DoraCMS</a>&nbsp;或&nbsp;<a href=\"https://git.oschina.net/doramart/DoraCMS\" _src=\"https://git.oschina.net/doramart/DoraCMS\">https://git.oschina.net/doramart/DoraCMS</a> </p><p>3、在代码根目录执行 npm install 安装package.json中的依赖</p><p>4、打开mongodb，执行 mongo 操作数据库（如果需要鉴权则执行 db.auth(&#39;username&#39;,&#39;psd&#39;)）,依次执行下面的脚本：<br/></p><p>文档表：</p><pre class=\"brush:js;toolbar:false\">db.contents.update({},{$set:{contentTemp:&#39;&#39;}},{multi&nbsp;:&nbsp;true})</pre><p>文档分类表：<br/></p><pre class=\"brush:js;toolbar:false\">db.ContentCategories.update({},{$set:{contentTemp:&#39;&#39;}},{multi&nbsp;:&nbsp;true})</pre><p>其实就是把两个表中的contentTemp字段置空，contents表中不需要该字段了，contentcategories表需要重新设置contentTemp字段</p><p>5、打开redis（redis-server）,执行redis-cli，如果redis有密码，则通过 auth password鉴权，通过后执行flushall清除所有缓存</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_58_0_946_1000.jpg\" title=\"\" alt=\"DoraCMSv1.0.9版本升级.jpg\"/></p><p><br/></p><p>6、重启node服务（node,mongdb,redis）</p><p><br/></p><p>重启服务后，会发现首页打开为空白页并显示：“亲爱哒，请先在后台安装并启用模板喔~!”，这是因为新版本需要重新在后台安装模板才能正常使用：</p><p><br/></p><p>7、进入后台，找到模板配置模块。如果第一次使用DoraCMS，请参照 <a href=\"http://www.html-js.cn/details/VymuSlpGg.html\" target=\"_blank\" title=\"DoraCMS V1.0.7升级指南\">DoraCMS V1.0.7升级指南</a> 查看如何不用密码进入后台添加管理员。&nbsp;</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_58_6_436_1001.jpg\" title=\"\" alt=\"DoraCMSv1.0.9版本升级1.jpg\"/></p><p><br/></p><p>8、切换到安装主题选项卡，点击安装。</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_58_11_78_1002.jpg\" title=\"\" alt=\"DoraCMSv1.0.9版本升级2.jpg\"/></p><p><br/></p><p>安装成功后会在可用主题中找到刚安装的主题：<br/></p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_58_20_482_1003.jpg\" title=\"\" alt=\"DoraCMSv1.0.9版本升级3.jpg\"/></p><p><br/></p><p>注意：当前正在使用的主题不允许卸载。</p><p><br/></p><p>9、在可用主题中点击“启用”，即可激活改主题：</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_58_24_694_1004.jpg\" title=\"\" alt=\"DoraCMSv1.0.9版本升级4.jpg\"/></p><p><br/></p><p>10、这时候再访问首页看看，是不是可以访问了？</p><p>10、默认情况下，模板是不需要配置的。但是如果我有这样的需求：不同的类别用不同的展示方式，个别的类别我只需要以及页面，不需要列表页，怎么办呢？这时候模板配置就有作用了：</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_58_29_915_1005.jpg\" title=\"\" alt=\"DoraCMSv1.0.9版本升级5.jpg\"/></p><p>我们可以通过添加模板单元的方式，给不同的类别准备不同的模板，然后在类别管理中做相应的配置就可以了：</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_58_37_353_1006.jpg\" title=\"\" alt=\"DoraCMSv1.0.9版本升级6.jpg\"/></p><p><br/></p><p>那么问题来了，模板单元是怎么来的呢，大家可以自己先研究下，后面我在出一个教程专门说模板。</p><p>至此，您应该可以正常打开各个页面了。</p><p><br/></p><p>下面对此版本重要的变更做详细说明：</p><p>1、模板模块的优化，上面已经说到了。</p><p>2、后台angularjs重新整理，后台主要用到了angularjs，以前主要是用dwz的一套后台框架在做后台，直到认识了angularjs，就果断放弃了dwz，省了不少代码，当然不是说dwz不好，看个人习惯，当然用任何新框架前，需要对原理有基础的认识，不然只会用并不能深入了解它。前面版本的angularjs相关内容都写在的当前页面，于是发现了一些问题，指令没办法复用，过滤器、server等也不好复用，利用这次升级重新整理了一下：</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_58_44_345_1007.jpg\" title=\"\" alt=\"DoraCMSv1.0.9版本升级7.jpg\"/></p><p>后台的所有数据处理在controller里，指令不多，都在directives里，filters也单独拿出来，便于复用和拓展。</p><p>3、系统提醒，这是这个版本的一个新功能，管理员用户在新用户注册和收到新留言的提醒：</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_58_49_407_1008.jpg\" title=\"\" alt=\"DoraCMSv1.0.9版本升级8.jpg\"/></p><p>就这么多，有任何疑问欢迎issue me&nbsp;</p><p><br/></p><p><a href=\"https://github.com/doramart/DoraCMS\" target=\"_blank\" title=\"DoraCMS源码\">DoraCMS源码下载</a></p><p><br/></p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"DoraCMS近期做了一些更新，具体变更如下：\\n\\n###版本更新 2015年12月15日11:32:13\\n###版本号v1.0.9\\n###更新内容：\\n\\n- 1、优化了后台分页\\n- 2、优化了后台的提示窗口\\n- 3、后台首页添加了留言信息\\n- 4、后台头部添加了系统消息提醒，目前针对新用户注册和用户留言的提醒（新增了系统消息模块）\\n- 5、整理了后台的angularjs，抽取了controller,directive,filter便于维护\\n- 6、重新设计了模板配置模块，为前台换肤做准备，可以切换不同风格\\n- 7、优化了文档，文档类别，文档模板，系统公告等关联对象，提高查询效率\\n- 8、抽取了重量级的js树，便于复用\\n- 9、优化了注册，对注册邮箱进行可用性校验\\n- 10、修复了管理员登录了，进入 /admin 任然需要登录的bug\\n- 11、优化了详情页面展示\\n- 12、添加了一些可重用的静态方法\\n- 13、修复了一些小bug\\n\\n本次变更如果在之前版本基础上升级，请按以下步骤进行：\\n1、关闭正在运行的服务。\\n2、git版本库代码 https://github.com/doramart/DoraCMS 或 https://git.oschina.net/doramart/DoraCMS \\n3、在代码根目录执行 npm install 安装package.json中的依赖\\n4、打开mongodb，执行 mongo 操作数据库（如果需要鉴权则执行 db.auth(\'username\',\'psd\')）,依次执行下面的脚本：\\n文档表：\\ndb.contents.update({},{$set:{contentTemp:\'\'}},{multi : true})\\n文档分类表：\\ndb.ContentCategories.update({},{$set:{contentTemp:\'\'}},{multi : true})\\n其实就是把两个表中的contentTemp字段置空，contents表中不需要该字段了，contentcategories表需要重新设置contentTemp字段\\n5、打开redis（redis-server）,执行redis-cli，如果redis有密码，则通过 auth password鉴权，通过后执行flushall清除所有缓存\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_58_0_946_1000.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n6、重启node服务（node,mongdb,redis）\\n\\n重启服务后，会发现首页打开为空白页并显示：“亲爱哒，请先在后台安装并启用模板喔~!”，这是因为新版本需要重新在后台安装模板才能正常使用：\\n\\n7、进入后台，找到模板配置模块。如果第一次使用DoraCMS，请参照 DoraCMS V1.0.7升级指南 查看如何不用密码进入后台添加管理员。 \\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_58_6_436_1001.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n8、切换到安装主题选项卡，点击安装。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_58_11_78_1002.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n安装成功后会在可用主题中找到刚安装的主题：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_58_20_482_1003.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n注意：当前正在使用的主题不允许卸载。\\n\\n9、在可用主题中点击“启用”，即可激活改主题：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_58_24_694_1004.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n10、这时候再访问首页看看，是不是可以访问了？\\n10、默认情况下，模板是不需要配置的。但是如果我有这样的需求：不同的类别用不同的展示方式，个别的类别我只需要以及页面，不需要列表页，怎么办呢？这时候模板配置就有作用了：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_58_29_915_1005.jpg\"},{\"type\":\"contents\",\"content\":\"\\n我们可以通过添加模板单元的方式，给不同的类别准备不同的模板，然后在类别管理中做相应的配置就可以了：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_58_37_353_1006.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n那么问题来了，模板单元是怎么来的呢，大家可以自己先研究下，后面我在出一个教程专门说模板。\\n至此，您应该可以正常打开各个页面了。\\n\\n下面对此版本重要的变更做详细说明：\\n1、模板模块的优化，上面已经说到了。\\n2、后台angularjs重新整理，后台主要用到了angularjs，以前主要是用dwz的一套后台框架在做后台，直到认识了angularjs，就果断放弃了dwz，省了不少代码，当然不是说dwz不好，看个人习惯，当然用任何新框架前，需要对原理有基础的认识，不然只会用并不能深入了解它。前面版本的angularjs相关内容都写在的当前页面，于是发现了一些问题，指令没办法复用，过滤器、server等也不好复用，利用这次升级重新整理了一下：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_58_44_345_1007.jpg\"},{\"type\":\"contents\",\"content\":\"\\n后台的所有数据处理在controller里，指令不多，都在directives里，filters也单独拿出来，便于复用和拓展。\\n3、系统提醒，这是这个版本的一个新功能，管理员用户在新用户注册和收到新留言的提醒：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_8_58_49_407_1008.jpg\"},{\"type\":\"contents\",\"content\":\"\\n就这么多，有任何疑问欢迎issue me \\n\\nDoraCMS源码下载\\n\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1450157318000.jpg','2015-12-15 06:13:51','2020-08-20 15:44:13');
INSERT INTO `doracms_content` VALUES (263,'基于React的模态窗实现—DLayer','基于React的模态窗实现','1','1','','reactjs,layer','2',NULL,'','layer是前端开发中经常用到的组件，有不同的形态，最近在做新项目，目前github上合适的layer并不多，而且很多缺陷，只能自己搞了，原理很简单，不怕麻烦自己可以试试','1','','','0:01',762,'2','0',NULL,0,'0',225501,'<p>layer是前端开发中经常用到的组件，有不同的形态，最近在做新项目，目前github上合适的layer并不多，而且很多缺陷，只能自己搞了，原理很简单，不怕麻烦自己可以试试。</p><p>Reactjs主要是通过控制组件状态来改变UI，组件状态是通过action触发（纯函数），DLayer组件包含了5种：</p><p>1、alert &nbsp;基础弹窗，只弹提示，只有确定按钮</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_11_4_19_58_6_320_1032.png\" title=\"\" alt=\"5E8F04FF-1D85-4358-9B8D-F2E6130BCE91.png\"/></p><p>2、confirm &nbsp;确认弹窗，需要用户反馈，默认有确认和取消，文字可以自定义</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_11_4_19_58_16_12_1033.png\" title=\"\" alt=\"E1E141AD-30A3-4B4D-B482-440F8B4E65FC.png\"/></p><p>3、tips 悬浮提示，2s后自动消失</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_11_4_19_58_27_607_1034.png\" title=\"\" alt=\"D310C7C8-3AED-401E-AF65-08D8C5423A47.png\"/></p><p>4、loading &nbsp;加载状态 模态窗</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_11_4_19_58_35_634_1035.png\" title=\"\" alt=\"5E760234-538F-44EA-8141-F418F656C4D0.png\"/></p><p>5、这个是项目定制的，悬浮窗带关闭按钮，针对文本比较多的情况</p><p><br/></p><p>下面直接上代码：</p><p>index.jsx</p><pre class=\"brush:js;toolbar:false\">import&nbsp;React,&nbsp;{PropTypes,Component}&nbsp;from&nbsp;&#39;react&#39;;\n\nimport&nbsp;AlertBox&nbsp;from&nbsp;&#39;components/common/layer/alertbox&#39;;\nimport&nbsp;NoticeBox&nbsp;from&nbsp;&#39;components/common/layer/noticebox&#39;;\nimport&nbsp;ConfirmBox&nbsp;from&nbsp;&#39;components/common/layer/confirmbox&#39;;\nimport&nbsp;TipsBox&nbsp;from&nbsp;&#39;components/common/layer/tipsbox&#39;;\nimport&nbsp;LoadingBox&nbsp;from&nbsp;&#39;components/common/layer/loadingbox&#39;;\n\nconst&nbsp;propTypes&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;PropTypes.number,\n&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;PropTypes.number,\n&nbsp;&nbsp;&nbsp;&nbsp;onConfirm:&nbsp;PropTypes.func,\n&nbsp;&nbsp;&nbsp;&nbsp;confirmTxtL:&nbsp;PropTypes.string,\n&nbsp;&nbsp;&nbsp;&nbsp;confirmTxtR:&nbsp;PropTypes.string,\n&nbsp;&nbsp;&nbsp;&nbsp;onCancel:&nbsp;PropTypes.func,\n&nbsp;&nbsp;&nbsp;&nbsp;onClose:&nbsp;PropTypes.func,\n&nbsp;&nbsp;&nbsp;&nbsp;visible:&nbsp;PropTypes.bool,\n&nbsp;&nbsp;&nbsp;&nbsp;showMask:&nbsp;PropTypes.bool,\n&nbsp;&nbsp;&nbsp;&nbsp;showClose:&nbsp;PropTypes.bool,\n&nbsp;&nbsp;&nbsp;&nbsp;maskClick:&nbsp;PropTypes.bool,\n&nbsp;&nbsp;&nbsp;&nbsp;animation:&nbsp;PropTypes.bool,\n&nbsp;&nbsp;&nbsp;&nbsp;duration:&nbsp;PropTypes.number,\n&nbsp;&nbsp;&nbsp;&nbsp;measure:&nbsp;PropTypes.string,\n&nbsp;&nbsp;&nbsp;&nbsp;title:&nbsp;PropTypes.string,\n&nbsp;&nbsp;&nbsp;&nbsp;message:&nbsp;PropTypes.string,\n&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;PropTypes.string\n};\n\nconst&nbsp;defaultProps&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;8,\n&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;3,\n&nbsp;&nbsp;&nbsp;&nbsp;measure:&nbsp;&#39;rem&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;visible:&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;showMask:&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;maskClick:&nbsp;true,&nbsp;&nbsp;//&nbsp;是否点击遮罩关闭模态窗口\n&nbsp;&nbsp;&nbsp;&nbsp;animation:&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;duration:&nbsp;300,\n&nbsp;&nbsp;&nbsp;&nbsp;title:&nbsp;&#39;&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;message:&nbsp;&#39;默认提示信息&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;&#39;alert&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;confirmTxtL:&nbsp;&#39;确定&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;confirmTxtR:&nbsp;&#39;取消&#39;\n};\n\nexport&nbsp;default&nbsp;class&nbsp;DLayer&nbsp;extends&nbsp;Component&nbsp;{\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;constructor(props)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(props);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.animationEnd&nbsp;=&nbsp;this.animationEnd.bind(this);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.state&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isShow:&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animationType:&nbsp;&#39;leave&#39;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;hideByMask()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(this.props.maskClick)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//this.props.onClose;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;componentDidMount()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(this.props.visible)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.enter();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;componentWillReceiveProps(nextProps)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!this.props.visible&nbsp;&amp;&amp;&nbsp;nextProps.visible)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.enter();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if&nbsp;(this.props.visible&nbsp;&amp;&amp;&nbsp;!nextProps.visible)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.leave();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;enter()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.setState({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isShow:&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animationType:&nbsp;&#39;enter&#39;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.lockBody(true);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;leave()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.setState({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animationType:&nbsp;&#39;leave&#39;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.lockBody(false);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;animationEnd()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(this.state.animationType&nbsp;===&nbsp;&#39;leave&#39;)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.setState({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isShow:&nbsp;false\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;lockBody(state){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.body.style.overflowY&nbsp;=&nbsp;state&nbsp;?&nbsp;&#39;hidden&#39;&nbsp;:&nbsp;&#39;auto&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.body.style.position&nbsp;=&nbsp;state&nbsp;?&nbsp;&#39;absolute&#39;&nbsp;:&nbsp;&#39;static&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.body.style.top&nbsp;=&nbsp;state&nbsp;?&nbsp;document.body.scrollTop&nbsp;*&nbsp;-1&nbsp;+&nbsp;&#39;px&#39;&nbsp;:&nbsp;&#39;auto&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;render()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;{type,visible}&nbsp;=&nbsp;this.props;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;currentObj;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(type&nbsp;==&nbsp;&#39;alert&#39;)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentObj&nbsp;=&nbsp;&lt;AlertBox&nbsp;{...this.props}/&gt;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if&nbsp;(type&nbsp;==&nbsp;&#39;confirm&#39;)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentObj&nbsp;=&nbsp;&lt;ConfirmBox&nbsp;{...this.props}&nbsp;/&gt;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if&nbsp;(type&nbsp;==&nbsp;&#39;tips&#39;)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentObj&nbsp;=&nbsp;&lt;TipsBox&nbsp;{...this.props}&nbsp;/&gt;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if&nbsp;(type&nbsp;==&nbsp;&#39;loading&#39;)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentObj&nbsp;=&nbsp;&lt;LoadingBox&nbsp;{...this.props}&nbsp;/&gt;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if&nbsp;(type&nbsp;==&nbsp;&#39;notice&#39;)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentObj&nbsp;=&nbsp;&lt;NoticeBox&nbsp;{...this.props}&nbsp;/&gt;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;style&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;this.state.isShow&nbsp;?&nbsp;&#39;block&#39;&nbsp;:&nbsp;&#39;none&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WebkitAnimationDuration:&nbsp;this.props.duration&nbsp;+&nbsp;&#39;ms&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animationDuration:&nbsp;this.props.duration&nbsp;+&nbsp;&#39;ms&#39;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;maskState&nbsp;=&nbsp;type&nbsp;==&nbsp;&#39;loading&#39;&nbsp;?&nbsp;false&nbsp;:&nbsp;true;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;layerState&nbsp;=&nbsp;visible&nbsp;?&nbsp;&#39;enter&#39;&nbsp;:&nbsp;&#39;leave&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;ref=&#39;layerBody&#39;&nbsp;className={&#39;layer-wrapper&nbsp;layer-fade-&#39;&nbsp;+&nbsp;this.state.animationType}&nbsp;style={&nbsp;style&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onAnimationEnd={&nbsp;this.animationEnd&nbsp;}&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;className=&#39;layer-mask&#39;&nbsp;style={{&nbsp;display&nbsp;:&nbsp;visible&nbsp;&amp;&amp;&nbsp;this.props.showMask&nbsp;?&nbsp;&#39;block&#39;&nbsp;:&nbsp;&#39;none&#39;&nbsp;}}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onClick={this.hideByMask.bind(this)}&gt;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;className={&#39;layer-body&nbsp;&#39;&nbsp;+&nbsp;type&nbsp;+&nbsp;&#39;&nbsp;layer-zoom-&#39;&nbsp;+&nbsp;this.state.animationType}&nbsp;style={&nbsp;style&nbsp;}&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{currentObj}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)\n\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n\nDLayer.defaultProps&nbsp;=&nbsp;defaultProps;\nDLayer.propTypes&nbsp;=&nbsp;propTypes;</pre><p><br/></p><p>alertbox.jsx</p><pre class=\"brush:js;toolbar:false\">import&nbsp;React,&nbsp;{PropTypes,Component}&nbsp;from&nbsp;&#39;react&#39;;\n\n\nexport&nbsp;default&nbsp;class&nbsp;AlertBox&nbsp;extends&nbsp;Component{\n\n&nbsp;&nbsp;&nbsp;&nbsp;\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;render(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;title&nbsp;=&nbsp;this.props.title&nbsp;?&nbsp;&lt;h3&nbsp;className=&#39;alert-title&#39;&gt;{this.props.title}&lt;/h3&gt;&nbsp;:&nbsp;&#39;&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;className=&#39;alert-block&#39;&nbsp;type=&quot;layer&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;className=&quot;icon-close&quot;&nbsp;onClick={this.props.onClose}&nbsp;style={{display&nbsp;:&nbsp;this.props.showClose&nbsp;?&nbsp;&#39;block&#39;&nbsp;:&nbsp;&#39;none&#39;}}&gt;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{title}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&nbsp;className=&quot;alert-body&quot;&gt;{this.props.message}&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;className=&quot;alert-footer&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul&nbsp;className=&quot;averagebox&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&nbsp;className=&#39;confirm-btn&#39;&nbsp;onClick={this.props.onConfirm}&gt;确定&lt;/li&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ul&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)\n\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n\n}</pre><p><br/></p><p>confirmbox.jsx</p><pre class=\"brush:js;toolbar:false\">import&nbsp;React,&nbsp;{PropTypes,Component}&nbsp;from&nbsp;&#39;react&#39;;\n\n\nexport&nbsp;default&nbsp;class&nbsp;ConfirmBox&nbsp;extends&nbsp;Component{\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;render(){\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;title&nbsp;=&nbsp;this.props.title&nbsp;?&nbsp;&lt;h3&nbsp;className=&#39;alert-title&#39;&gt;{this.props.title}&lt;/h3&gt;&nbsp;:&nbsp;&#39;&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;className={this.props.animation&nbsp;?&nbsp;&#39;alert-block&nbsp;show-layer&#39;&nbsp;:&nbsp;&#39;alert-block&#39;}&nbsp;type=&quot;layer&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;className=&quot;icon-close&quot;&nbsp;onClick={this.props.onClose}&nbsp;style={{display&nbsp;:&nbsp;this.props.showClose&nbsp;?&nbsp;&#39;block&#39;&nbsp;:&nbsp;&#39;none&#39;}}&gt;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{title}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;className=&quot;alert-body&quot;&nbsp;dangerouslySetInnerHTML={{__html:&nbsp;this.props.message}}/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;className=&quot;alert-footer&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul&nbsp;className=&quot;averagebox&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&nbsp;className=&#39;confirm-btn&#39;&nbsp;onClick={this.props.onConfirm}&gt;{this.props.confirmTxtL}&lt;/li&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&nbsp;className=&#39;confirm-btn&#39;&nbsp;onClick={this.props.onCancel}&gt;{this.props.confirmTxtR}&lt;/li&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ul&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)\n\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n\n}</pre><p><br/></p><p>loadingbox.jsx</p><pre class=\"brush:js;toolbar:false\">import&nbsp;React,&nbsp;{PropTypes,Component}&nbsp;from&nbsp;&#39;react&#39;;\n\nexport&nbsp;default&nbsp;class&nbsp;LoadingBox&nbsp;extends&nbsp;Component{\n\n&nbsp;&nbsp;&nbsp;&nbsp;render(){\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;className&nbsp;=&nbsp;&quot;alert-loading&quot;&nbsp;type=&quot;layer&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;className&nbsp;=&nbsp;&quot;loading-icon&quot;&gt;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;请等待...&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)\n\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n\n}</pre><p><br/></p><p>tipsbox.jsx</p><pre class=\"brush:js;toolbar:false\">import&nbsp;React,&nbsp;{PropTypes,Component}&nbsp;from&nbsp;&#39;react&#39;;\n\nexport&nbsp;default&nbsp;class&nbsp;TipsBox&nbsp;extends&nbsp;Component{\n\n&nbsp;&nbsp;&nbsp;&nbsp;render(){\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;className={this.props.animation&nbsp;?&nbsp;&#39;alert-tip&nbsp;show-layer&#39;&nbsp;:&nbsp;&#39;alert-tip&#39;}&nbsp;type=&quot;layer&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;{this.props.message}&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)\n\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n\n}</pre><p><br/></p><p>_dlayer.scss</p><pre class=\"brush:css;toolbar:false\">$divide:&nbsp;10;\n$pswWidth:&nbsp;375;\n$ppr:&nbsp;375/$divide/1;//&nbsp;定义单位,以iphone6为标准\n\n\n@mixin&nbsp;font-dpr($font-size){\n&nbsp;&nbsp;&nbsp;&nbsp;font-size:&nbsp;#{$font-size&nbsp;/&nbsp;$ppr}rem;\n}\n\n\n@mixin&nbsp;toGapRem($property,&nbsp;$values...)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;$max:&nbsp;length($values);\n&nbsp;&nbsp;&nbsp;&nbsp;$remValues:&nbsp;&#39;&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;@for&nbsp;$i&nbsp;from&nbsp;1&nbsp;through&nbsp;$max&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$newValue&nbsp;:&nbsp;nth($values,&nbsp;$i);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$value&nbsp;:&nbsp;&#39;&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@if&nbsp;$newValue&nbsp;==&nbsp;auto&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$value&nbsp;:&nbsp;$newValue;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$remValues:&nbsp;#{$remValues&nbsp;+&nbsp;$value};\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}@else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$value:&nbsp;$newValue&nbsp;*&nbsp;$divide&nbsp;/&nbsp;$pswWidth;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$remValues:&nbsp;#{$remValues&nbsp;+&nbsp;$value}rem;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@if&nbsp;$i&nbsp;&lt;&nbsp;$max&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$remValues:&nbsp;#{$remValues&nbsp;+&nbsp;&quot;&nbsp;&quot;};\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;#{$property}:&nbsp;$remValues;\n}\n/*遮罩*/\n\n.layer-wrapper&nbsp;{\n&nbsp;&nbsp;position:&nbsp;absolute;\n&nbsp;&nbsp;z-index:&nbsp;999999;\n}\n\n.layer-mask&nbsp;{\n&nbsp;&nbsp;position:&nbsp;fixed;\n&nbsp;&nbsp;z-index:&nbsp;1000;\n&nbsp;&nbsp;top:&nbsp;-20em;\n&nbsp;&nbsp;left:&nbsp;0;\n&nbsp;&nbsp;bottom:&nbsp;-20em;\n&nbsp;&nbsp;right:&nbsp;0;\n&nbsp;&nbsp;background:&nbsp;rgba(0,&nbsp;0,&nbsp;0,&nbsp;0.5);\n}\n\n.layer-body&nbsp;{\n&nbsp;&nbsp;position:&nbsp;fixed;\n&nbsp;&nbsp;left:&nbsp;0;\n&nbsp;&nbsp;right:&nbsp;0;\n&nbsp;&nbsp;margin-left:&nbsp;auto;\n&nbsp;&nbsp;margin-right:&nbsp;auto;\n&nbsp;&nbsp;text-align:&nbsp;center;\n&nbsp;&nbsp;top:&nbsp;40%;\n&nbsp;&nbsp;z-index:&nbsp;19870426;\n}\n\n.layer-body.confirm&nbsp;{\n&nbsp;&nbsp;top:&nbsp;35%;\n}\n\n.layer-body.loading&nbsp;{\n&nbsp;&nbsp;@include&nbsp;toGapRem(width,&nbsp;125);\n}\n\n.layer-body.alert,&nbsp;.layer-body.confirm&nbsp;{\n&nbsp;&nbsp;@include&nbsp;toGapRem(width,&nbsp;270);\n}\n\n.layer-body.tips&nbsp;{\n&nbsp;&nbsp;@include&nbsp;toGapRem(width,&nbsp;200);\n}\n\n.layer-body.notice&nbsp;{\n\n&nbsp;&nbsp;@include&nbsp;toGapRem(width,&nbsp;320);\n&nbsp;&nbsp;top:&nbsp;15%;\n&nbsp;&nbsp;p&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;@include&nbsp;font-dpr(12);\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;.icon-guanbi1&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;#FFFFFF;\n&nbsp;&nbsp;&nbsp;&nbsp;@include&nbsp;font-dpr(36);\n&nbsp;&nbsp;&nbsp;&nbsp;text-align:&nbsp;center;\n&nbsp;&nbsp;&nbsp;&nbsp;@include&nbsp;toGapRem(margin-top,&nbsp;10);\n&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;block;\n&nbsp;&nbsp;}\n\n}\n\n.layer-body.notice&nbsp;.alert-block&nbsp;{\n\n&nbsp;&nbsp;@include&nbsp;toGapRem(padding,&nbsp;10,&nbsp;0);\n\n&nbsp;&nbsp;.alert-title&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;#af292c;\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;.alert-body&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;@include&nbsp;toGapRem(max-height,&nbsp;375);\n&nbsp;&nbsp;}\n\n}\n\n.alert-block&nbsp;{\n&nbsp;&nbsp;width:&nbsp;100%;\n&nbsp;&nbsp;@include&nbsp;toGapRem(border-radius,&nbsp;10);\n&nbsp;&nbsp;background:&nbsp;#ffffff;\n&nbsp;&nbsp;box-shadow:&nbsp;0&nbsp;0&nbsp;8px&nbsp;rgba(0,&nbsp;0,&nbsp;0,&nbsp;0.1);\n&nbsp;&nbsp;@include&nbsp;toGapRem(padding,&nbsp;10,&nbsp;0,&nbsp;0);\n\n&nbsp;&nbsp;&gt;&nbsp;.alert-body&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;max-height:&nbsp;8em;\n&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;#FFFFFF;\n&nbsp;&nbsp;&nbsp;&nbsp;overflow-x:&nbsp;hidden;\n&nbsp;&nbsp;&nbsp;&nbsp;@include&nbsp;toGapRem(padding,&nbsp;20);\n&nbsp;&nbsp;&nbsp;&nbsp;@include&nbsp;font-dpr(15);\n&nbsp;&nbsp;&nbsp;&nbsp;text-align:&nbsp;left;\n&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;#111111;\n&nbsp;&nbsp;&nbsp;&nbsp;@include&nbsp;toGapRem(line-height,&nbsp;17);\n&nbsp;&nbsp;&nbsp;&nbsp;margin:0;\n\n&nbsp;&nbsp;&nbsp;&nbsp;h1&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@include&nbsp;font-dpr(14);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;#111111;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@include&nbsp;toGapRem(margin,&nbsp;20,&nbsp;0,&nbsp;15,&nbsp;0);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@include&nbsp;font-dpr(12);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;#333333;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@include&nbsp;toGapRem(line-height,&nbsp;17);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max-height:&nbsp;9999px;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&gt;&nbsp;.alert-title&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;@include&nbsp;font-dpr(15);\n&nbsp;&nbsp;&nbsp;&nbsp;text-align:&nbsp;center;\n&nbsp;&nbsp;&nbsp;&nbsp;@include&nbsp;toGapRem(padding,&nbsp;12,&nbsp;0,&nbsp;10,&nbsp;0);\n&nbsp;&nbsp;&nbsp;&nbsp;font-weight:&nbsp;bold;\n&nbsp;&nbsp;&nbsp;&nbsp;margin:&nbsp;0;\n&nbsp;&nbsp;&nbsp;&nbsp;text-overflow:&nbsp;ellipsis;\n&nbsp;&nbsp;&nbsp;&nbsp;overflow:&nbsp;hidden;\n&nbsp;&nbsp;&nbsp;&nbsp;white-space:&nbsp;nowrap;\n&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;#111111;\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&gt;&nbsp;.alert-footer&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;relative;\n&nbsp;&nbsp;&nbsp;&nbsp;text-align:&nbsp;center;\n&nbsp;&nbsp;&nbsp;&nbsp;border-top:&nbsp;1px&nbsp;solid&nbsp;#CCCCCC;\n&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;#FFFFFF;\n&nbsp;&nbsp;&nbsp;&nbsp;@include&nbsp;font-dpr(15);\n&nbsp;&nbsp;&nbsp;&nbsp;@include&nbsp;toGapRem(border-bottom-left-radius,&nbsp;10);\n&nbsp;&nbsp;&nbsp;&nbsp;@include&nbsp;toGapRem(border-bottom-right-radius,&nbsp;10);\n\n&nbsp;&nbsp;&nbsp;&nbsp;ul&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;margin:&nbsp;0;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding:&nbsp;0;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;li&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;relative;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align:&nbsp;center;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor:&nbsp;pointer;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@include&nbsp;toGapRem(height,&nbsp;45);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@include&nbsp;toGapRem(line-height,&nbsp;45);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-webkit-box-flex:&nbsp;1;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-moz-box-flex:&nbsp;1;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-ms-box-flex:&nbsp;1;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list-style-type:&nbsp;none;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;#0066cc;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&gt;&nbsp;.alert-footer&nbsp;li:nth-child(2):before&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;content:&nbsp;&#39;\\20&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;absolute;\n&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;1px;\n&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;100%;\n&nbsp;&nbsp;&nbsp;&nbsp;left:&nbsp;0;\n&nbsp;&nbsp;&nbsp;&nbsp;top:&nbsp;0;\n&nbsp;&nbsp;&nbsp;&nbsp;background-color:&nbsp;#aaaaaa;\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&gt;&nbsp;.icon-close&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;font-size:&nbsp;.4rem;\n&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;#999;\n&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;absolute;\n&nbsp;&nbsp;&nbsp;&nbsp;right:&nbsp;.8em;\n&nbsp;&nbsp;&nbsp;&nbsp;top:&nbsp;.3rem;\n&nbsp;&nbsp;}\n}\n\n.averagebox&nbsp;{\n&nbsp;&nbsp;display:&nbsp;-webkit-box;\n&nbsp;&nbsp;display:&nbsp;-moz-box;\n&nbsp;&nbsp;display:&nbsp;-ms-flexbox;\n&nbsp;&nbsp;-webkit-flex-flow:&nbsp;wrap;\n&nbsp;&nbsp;justify-content:&nbsp;space-around;\n}\n\n.alert-tip&nbsp;{\n&nbsp;&nbsp;background:&nbsp;#000000;\n&nbsp;&nbsp;opacity:&nbsp;0.7;\n&nbsp;&nbsp;width:&nbsp;100%;\n&nbsp;&nbsp;@include&nbsp;toGapRem(border-radius,&nbsp;5);\n\n&nbsp;&nbsp;&gt;&nbsp;p&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;@include&nbsp;toGapRem(padding,&nbsp;9,&nbsp;25);\n&nbsp;&nbsp;&nbsp;&nbsp;text-align:&nbsp;center;\n&nbsp;&nbsp;&nbsp;&nbsp;@include&nbsp;font-dpr(14);\n&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;#FFFFFF;\n&nbsp;&nbsp;}\n}\n\n.alert-loading&nbsp;{\n&nbsp;&nbsp;@include&nbsp;toGapRem(min-height,&nbsp;90);\n&nbsp;&nbsp;width:&nbsp;100%;\n&nbsp;&nbsp;position:&nbsp;fixed;\n&nbsp;&nbsp;background:&nbsp;rgba(0,&nbsp;0,&nbsp;0,&nbsp;.5);\n&nbsp;&nbsp;z-index:&nbsp;19870428;\n&nbsp;&nbsp;text-align:&nbsp;center;\n&nbsp;&nbsp;@include&nbsp;toGapRem(border-radius,&nbsp;8);\n&nbsp;&nbsp;@include&nbsp;toGapRem(padding,&nbsp;5);\n\n&nbsp;&nbsp;&gt;&nbsp;p&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;#FFFFFF;\n&nbsp;&nbsp;&nbsp;&nbsp;@include&nbsp;toGapRem(margin,&nbsp;10,&nbsp;0,&nbsp;0);\n&nbsp;&nbsp;&nbsp;&nbsp;@include&nbsp;font-dpr(14);\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&gt;&nbsp;.loading-icon&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;3em;\n&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;3em;\n&nbsp;&nbsp;&nbsp;&nbsp;margin:&nbsp;0&nbsp;auto;\n&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;url(images/ajaxLoading.gif);\n&nbsp;&nbsp;&nbsp;&nbsp;background-size:&nbsp;3em&nbsp;3em;\n&nbsp;&nbsp;&nbsp;&nbsp;@include&nbsp;toGapRem(margin-top,&nbsp;10);\n&nbsp;&nbsp;}\n}\n\n//定义动画\n/*&nbsp;--&nbsp;fade&nbsp;--&nbsp;*/\n@-webkit-keyframes&nbsp;layer-fade-enter&nbsp;{\n&nbsp;&nbsp;from&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;opacity:&nbsp;0;\n&nbsp;&nbsp;}\n}\n\n@keyframes&nbsp;layer-fade-enter&nbsp;{\n&nbsp;&nbsp;from&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;opacity:&nbsp;0;\n&nbsp;&nbsp;}\n}\n\n.layer-fade-enter&nbsp;{\n&nbsp;&nbsp;-webkit-animation:&nbsp;layer-fade-enter&nbsp;both&nbsp;ease-in;\n&nbsp;&nbsp;animation:&nbsp;layer-fade-enter&nbsp;both&nbsp;ease-in;\n}\n\n@-webkit-keyframes&nbsp;layer-fade-leave&nbsp;{\n&nbsp;&nbsp;to&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;opacity:&nbsp;0\n&nbsp;&nbsp;}\n}\n\n@keyframes&nbsp;layer-fade-leave&nbsp;{\n&nbsp;&nbsp;to&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;opacity:&nbsp;0\n&nbsp;&nbsp;}\n}\n\n.layer-fade-leave&nbsp;{\n&nbsp;&nbsp;-webkit-animation:&nbsp;layer-fade-leave&nbsp;both&nbsp;ease-out;\n&nbsp;&nbsp;animation:&nbsp;layer-fade-leave&nbsp;both&nbsp;ease-out;\n}\n\n@-webkit-keyframes&nbsp;layer-zoom-enter&nbsp;{\n&nbsp;&nbsp;from&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;-webkit-transform:&nbsp;scale3d(.3,&nbsp;.3,&nbsp;.3);\n&nbsp;&nbsp;&nbsp;&nbsp;transform:&nbsp;scale3d(.3,&nbsp;.3,&nbsp;.3);\n&nbsp;&nbsp;}\n}\n\n@keyframes&nbsp;layer-zoom-enter&nbsp;{\n&nbsp;&nbsp;from&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;-webkit-transform:&nbsp;scale3d(.3,&nbsp;.3,&nbsp;.3);\n&nbsp;&nbsp;&nbsp;&nbsp;transform:&nbsp;scale3d(.3,&nbsp;.3,&nbsp;.3);\n&nbsp;&nbsp;}\n}\n\n.layer-zoom-enter&nbsp;{\n&nbsp;&nbsp;-webkit-animation:&nbsp;layer-zoom-enter&nbsp;both&nbsp;cubic-bezier(0.4,&nbsp;0,&nbsp;0,&nbsp;1.5);\n&nbsp;&nbsp;animation:&nbsp;layer-zoom-enter&nbsp;both&nbsp;cubic-bezier(0.4,&nbsp;0,&nbsp;0,&nbsp;1.5);\n}\n\n@-webkit-keyframes&nbsp;layer-zoom-leave&nbsp;{\n&nbsp;&nbsp;to&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;-webkit-transform:&nbsp;scale3d(.3,&nbsp;.3,&nbsp;.3);\n&nbsp;&nbsp;&nbsp;&nbsp;transform:&nbsp;scale3d(.3,&nbsp;.3,&nbsp;.3);\n&nbsp;&nbsp;}\n}\n\n@keyframes&nbsp;layer-zoom-leave&nbsp;{\n&nbsp;&nbsp;to&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;-webkit-transform:&nbsp;scale3d(.3,&nbsp;.3,&nbsp;.3);\n&nbsp;&nbsp;&nbsp;&nbsp;transform:&nbsp;scale3d(.3,&nbsp;.3,&nbsp;.3);\n&nbsp;&nbsp;}\n}\n\n.layer-zoom-leave&nbsp;{\n&nbsp;&nbsp;-webkit-animation:&nbsp;layer-zoom-leave&nbsp;both;\n&nbsp;&nbsp;animation:&nbsp;layer-zoom-leave&nbsp;both;\n}</pre><p><br/></p><p><br/></p><p>调用方式：</p><p><br/></p><p>1、页面引入</p><pre class=\"brush:js;toolbar:false\">import&nbsp;DLayer&nbsp;from&nbsp;&#39;components/common/layer&#39;;//index.jsx\nlet&nbsp;{layerTitle,layerType,layerShow,showMask,layerMsg,animation,confirmTxtL,confirmTxtR,confirm,cancel}&nbsp;=&nbsp;this.props.layerInfo;\n&lt;DLayer\n&nbsp;&nbsp;&nbsp;&nbsp;title={layerTitle}\n&nbsp;&nbsp;&nbsp;&nbsp;type={layerType}\n&nbsp;&nbsp;&nbsp;&nbsp;visible={layerShow}\n&nbsp;&nbsp;&nbsp;&nbsp;message={layerMsg}\n&nbsp;&nbsp;&nbsp;&nbsp;animation={animation}\n&nbsp;&nbsp;&nbsp;&nbsp;showMask={showMask}\n&nbsp;&nbsp;&nbsp;&nbsp;confirmTxtL={confirmTxtL}\n&nbsp;&nbsp;&nbsp;&nbsp;confirmTxtR={confirmTxtR}\n&nbsp;&nbsp;&nbsp;&nbsp;onConfirm={confirm}\n&nbsp;&nbsp;&nbsp;&nbsp;onCancel={cancel}/&gt;</pre><p><br/></p><p>注意： layerInfo 状态通过redux维护</p><p><br/></p><p>2、调用：</p><p><br/></p><p>alert:</p><pre class=\"brush:js;toolbar:false\">pageConfig.alert(this,&nbsp;&#39;hello&nbsp;Word&#39;);</pre><p><br/></p><p>confirm:</p><pre class=\"brush:js;toolbar:false\">pageConfig.confirm(this,&nbsp;{msg:&nbsp;&#39;This&nbsp;is&nbsp;msg&#39;,&nbsp;title:&nbsp;&#39;提示&#39;,&nbsp;confirmTxtL:&nbsp;&#39;Yes&#39;,&nbsp;confirmTxtR:&nbsp;&#39;No&#39;},&nbsp;()=&gt;&nbsp;{\n},&nbsp;()=&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;native.callPhone();\n});</pre><p><br/></p><p>tips</p><pre class=\"brush:js;toolbar:false\">pageConfig.tips(this,&nbsp;&#39;hello&nbsp;Word&#39;);</pre><p><br/></p><p>loading</p><pre class=\"brush:js;toolbar:false\">pageConfig.alert(this,&nbsp;true);</pre><p><br/></p><p>pageConfig.js</p><pre class=\"brush:js;toolbar:false\">alert(_this,&nbsp;msg,&nbsp;confirm&nbsp;=&nbsp;()=&gt;&nbsp;{\n}){\n&nbsp;&nbsp;&nbsp;&nbsp;if(Object.keys(_this).length&nbsp;===&nbsp;0)&nbsp;return&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;action&nbsp;=&nbsp;_this.props.actions.queryLayerInfo;\n&nbsp;&nbsp;&nbsp;&nbsp;action({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title:&#39;&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;layerShow:&nbsp;true,&nbsp;layerType:&nbsp;&#39;alert&#39;,&nbsp;showMask:&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;layerMsg:&nbsp;msg,&nbsp;confirm:&nbsp;()=&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action({layerShow:&nbsp;false});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;confirm();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;});\n},\n\nconfirm(_this,&nbsp;params,&nbsp;confirm&nbsp;=&nbsp;()=&gt;&nbsp;{\n},&nbsp;cancel&nbsp;=&nbsp;()=&gt;&nbsp;{\n}){\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;action&nbsp;=&nbsp;_this.props.actions.queryLayerInfo;\n&nbsp;&nbsp;&nbsp;&nbsp;action({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;layerShow:&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;layerType:&nbsp;&#39;confirm&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;layerMsg:&nbsp;params.msg,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;layerTitle:&nbsp;params.title,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showMask:&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;confirmTxtL:&nbsp;params.confirmTxtL,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;confirmTxtR:&nbsp;params.confirmTxtR,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;confirm:&nbsp;()=&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action({layerShow:&nbsp;false});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;confirm();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cancel:&nbsp;()=&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action({layerShow:&nbsp;false});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cancel();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;});\n},\n\ntips(_this,&nbsp;msg,&nbsp;callback&nbsp;=&nbsp;()=&gt;&nbsp;{\n}){\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;action&nbsp;=&nbsp;_this.props.actions.queryLayerInfo;\n&nbsp;&nbsp;&nbsp;&nbsp;action({layerShow:&nbsp;true,&nbsp;layerType:&nbsp;&#39;tips&#39;,&nbsp;showMask:&nbsp;false,&nbsp;layerMsg:&nbsp;msg});\n&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(()=&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action({layerShow:&nbsp;false});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback()\n&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;2000);\n},\n\nloading(_this,&nbsp;state){\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;action&nbsp;=&nbsp;_this.props.actions.queryLayerInfo;\n&nbsp;&nbsp;&nbsp;&nbsp;action({layerShow:&nbsp;state,&nbsp;layerType:&nbsp;&#39;loading&#39;,&nbsp;showMask:&nbsp;false})\n}</pre><p><br/></p>','[{\"type\":\"contents\",\"content\":\"layer是前端开发中经常用到的组件，有不同的形态，最近在做新项目，目前github上合适的layer并不多，而且很多缺陷，只能自己搞了，原理很简单，不怕麻烦自己可以试试。\\nReactjs主要是通过控制组件状态来改变UI，组件状态是通过action触发（纯函数），DLayer组件包含了5种：\\n1、alert  基础弹窗，只弹提示，只有确定按钮\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_11_4_19_58_6_320_1032.png\"},{\"type\":\"contents\",\"content\":\"\\n2、confirm  确认弹窗，需要用户反馈，默认有确认和取消，文字可以自定义\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_11_4_19_58_16_12_1033.png\"},{\"type\":\"contents\",\"content\":\"\\n3、tips 悬浮提示，2s后自动消失\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_11_4_19_58_27_607_1034.png\"},{\"type\":\"contents\",\"content\":\"\\n4、loading  加载状态 模态窗\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_11_4_19_58_35_634_1035.png\"},{\"type\":\"contents\",\"content\":\"\\n5、这个是项目定制的，悬浮窗带关闭按钮，针对文本比较多的情况\\n\\n下面直接上代码：\\nindex.jsx\\nimport React, {PropTypes,Component} from \'react\';\\n\\nimport AlertBox from \'components/common/layer/alertbox\';\\nimport NoticeBox from \'components/common/layer/noticebox\';\\nimport ConfirmBox from \'components/common/layer/confirmbox\';\\nimport TipsBox from \'components/common/layer/tipsbox\';\\nimport LoadingBox from \'components/common/layer/loadingbox\';\\n\\nconst propTypes = {\\n    width: PropTypes.number,\\n    height: PropTypes.number,\\n    onConfirm: PropTypes.func,\\n    confirmTxtL: PropTypes.string,\\n    confirmTxtR: PropTypes.string,\\n    onCancel: PropTypes.func,\\n    onClose: PropTypes.func,\\n    visible: PropTypes.bool,\\n    showMask: PropTypes.bool,\\n    showClose: PropTypes.bool,\\n    maskClick: PropTypes.bool,\\n    animation: PropTypes.bool,\\n    duration: PropTypes.number,\\n    measure: PropTypes.string,\\n    title: PropTypes.string,\\n    message: PropTypes.string,\\n    type: PropTypes.string\\n};\\n\\nconst defaultProps = {\\n    width: 8,\\n    height: 3,\\n    measure: \'rem\',\\n    visible: false,\\n    showMask: true,\\n    maskClick: true,  // 是否点击遮罩关闭模态窗口\\n    animation: false,\\n    duration: 300,\\n    title: \'\',\\n    message: \'默认提示信息\',\\n    type: \'alert\',\\n    confirmTxtL: \'确定\',\\n    confirmTxtR: \'取消\'\\n};\\n\\nexport default class DLayer extends Component {\\n\\n\\n    constructor(props) {\\n        super(props);\\n        this.animationEnd = this.animationEnd.bind(this);\\n        this.state = {\\n            isShow: false,\\n            animationType: \'leave\'\\n        }\\n    }\\n\\n    hideByMask() {\\n        if (this.props.maskClick) {\\n            //this.props.onClose;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    componentDidMount() {\\n        if (this.props.visible) {\\n            this.enter();\\n        }\\n    }\\n\\n    componentWillReceiveProps(nextProps) {\\n        if (!this.props.visible &amp;&amp; nextProps.visible) {\\n            this.enter();\\n        } else if (this.props.visible &amp;&amp; !nextProps.visible) {\\n            this.leave();\\n        }\\n    }\\n\\n    enter() {\\n        this.setState({\\n            isShow: true,\\n            animationType: \'enter\'\\n        });\\n        this.lockBody(true);\\n    }\\n\\n    leave() {\\n        this.setState({\\n            animationType: \'leave\'\\n        });\\n        this.lockBody(false);\\n    }\\n\\n    animationEnd() {\\n        if (this.state.animationType === \'leave\') {\\n            this.setState({\\n                isShow: false\\n            });\\n        }\\n    }\\n\\n    lockBody(state){\\n        document.body.style.overflowY = state ? \'hidden\' : \'auto\';\\n        document.body.style.position = state ? \'absolute\' : \'static\';\\n        document.body.style.top = state ? document.body.scrollTop * -1 + \'px\' : \'auto\';\\n    }\\n\\n    render() {\\n        const {type,visible} = this.props;\\n        let currentObj;\\n\\n        if (type == \'alert\') {\\n            currentObj = &lt;AlertBox {...this.props}/&gt;;\\n        } else if (type == \'confirm\') {\\n            currentObj = &lt;ConfirmBox {...this.props} /&gt;;\\n        } else if (type == \'tips\') {\\n            currentObj = &lt;TipsBox {...this.props} /&gt;;\\n        } else if (type == \'loading\') {\\n            currentObj = &lt;LoadingBox {...this.props} /&gt;;\\n        } else if (type == \'notice\') {\\n            currentObj = &lt;NoticeBox {...this.props} /&gt;;\\n        }\\n        const style = {\\n            display: this.state.isShow ? \'block\' : \'none\',\\n            WebkitAnimationDuration: this.props.duration + \'ms\',\\n            animationDuration: this.props.duration + \'ms\'\\n        };\\n        const maskState = type == \'loading\' ? false : true;\\n        const layerState = visible ? \'enter\' : \'leave\';\\n        return (\\n            &lt;div ref=\'layerBody\' className={\'layer-wrapper layer-fade-\' + this.state.animationType} style={ style }\\n                 onAnimationEnd={ this.animationEnd }&gt;\\n                &lt;div className=\'layer-mask\' style={{ display : visible &amp;&amp; this.props.showMask ? \'block\' : \'none\' }}\\n                     onClick={this.hideByMask.bind(this)}&gt;&lt;/div&gt;\\n                &lt;div className={\'layer-body \' + type + \' layer-zoom-\' + this.state.animationType} style={ style }&gt;\\n                    {currentObj}\\n                &lt;/div&gt;\\n            &lt;/div&gt;\\n\\n        )\\n\\n    }\\n}\\n\\nDLayer.defaultProps = defaultProps;\\nDLayer.propTypes = propTypes;\\n\\nalertbox.jsx\\nimport React, {PropTypes,Component} from \'react\';\\n\\n\\nexport default class AlertBox extends Component{\\n\\n    \\n\\n\\n    render(){\\n        \\n        const title = this.props.title ? &lt;h3 className=\'alert-title\'&gt;{this.props.title}&lt;/h3&gt; : \'\';\\n        return (\\n            &lt;div className=\'alert-block\' type=\\\"layer\\\"&gt;\\n                &lt;div className=\\\"icon-close\\\" onClick={this.props.onClose} style={{display : this.props.showClose ? \'block\' : \'none\'}}&gt;&lt;/div&gt;\\n                {title}\\n                &lt;p className=\\\"alert-body\\\"&gt;{this.props.message}&lt;/p&gt;\\n                &lt;div className=\\\"alert-footer\\\"&gt;\\n                    &lt;ul className=\\\"averagebox\\\"&gt;\\n                            &lt;li className=\'confirm-btn\' onClick={this.props.onConfirm}&gt;确定&lt;/li&gt;\\n                    &lt;/ul&gt;\\n                &lt;/div&gt;\\n            &lt;/div&gt;\\n        )\\n\\n    }\\n\\n\\n}\\n\\nconfirmbox.jsx\\nimport React, {PropTypes,Component} from \'react\';\\n\\n\\nexport default class ConfirmBox extends Component{\\n\\n\\n    render(){\\n\\n        const title = this.props.title ? &lt;h3 className=\'alert-title\'&gt;{this.props.title}&lt;/h3&gt; : \'\';\\n        return (\\n            &lt;div className={this.props.animation ? \'alert-block show-layer\' : \'alert-block\'} type=\\\"layer\\\"&gt;\\n                &lt;div className=\\\"icon-close\\\" onClick={this.props.onClose} style={{display : this.props.showClose ? \'block\' : \'none\'}}&gt;&lt;/div&gt;\\n                {title}\\n                &lt;div className=\\\"alert-body\\\" dangerouslySetInnerHTML={{__html: this.props.message}}/&gt;\\n                &lt;div className=\\\"alert-footer\\\"&gt;\\n                    &lt;ul className=\\\"averagebox\\\"&gt;\\n                        &lt;li className=\'confirm-btn\' onClick={this.props.onConfirm}&gt;{this.props.confirmTxtL}&lt;/li&gt;\\n                        &lt;li className=\'confirm-btn\' onClick={this.props.onCancel}&gt;{this.props.confirmTxtR}&lt;/li&gt;\\n                    &lt;/ul&gt;\\n                &lt;/div&gt;\\n            &lt;/div&gt;\\n        )\\n\\n    }\\n\\n\\n}\\n\\nloadingbox.jsx\\nimport React, {PropTypes,Component} from \'react\';\\n\\nexport default class LoadingBox extends Component{\\n\\n    render(){\\n\\n        return (\\n            &lt;div className = \\\"alert-loading\\\" type=\\\"layer\\\"&gt;\\n                &lt;div className = \\\"loading-icon\\\"&gt;&lt;/div&gt;\\n                &lt;p&gt;请等待...&lt;/p&gt;\\n            &lt;/div&gt;\\n        )\\n\\n    }\\n\\n\\n}\\n\\ntipsbox.jsx\\nimport React, {PropTypes,Component} from \'react\';\\n\\nexport default class TipsBox extends Component{\\n\\n    render(){\\n\\n        return (\\n            &lt;div className={this.props.animation ? \'alert-tip show-layer\' : \'alert-tip\'} type=\\\"layer\\\"&gt;\\n                    &lt;p&gt;{this.props.message}&lt;/p&gt;\\n            &lt;/div&gt;\\n        )\\n\\n    }\\n\\n\\n}\\n\\n_dlayer.scss\\n$divide: 10;\\n$pswWidth: 375;\\n$ppr: 375/$divide/1;// 定义单位,以iphone6为标准\\n\\n\\n@mixin font-dpr($font-size){\\n    font-size: #{$font-size / $ppr}rem;\\n}\\n\\n\\n@mixin toGapRem($property, $values...) {\\n    $max: length($values);\\n    $remValues: \'\';\\n    @for $i from 1 through $max {\\n        $newValue : nth($values, $i);\\n        $value : \'\';\\n        @if $newValue == auto {\\n            $value : $newValue;\\n            $remValues: #{$remValues + $value};\\n        }@else{\\n            $value: $newValue * $divide / $pswWidth;\\n            $remValues: #{$remValues + $value}rem;\\n        }\\n        @if $i &lt; $max {\\n            $remValues: #{$remValues + \\\" \\\"};\\n        }\\n    }\\n    #{$property}: $remValues;\\n}\\n/*遮罩*/\\n\\n.layer-wrapper {\\n  position: absolute;\\n  z-index: 999999;\\n}\\n\\n.layer-mask {\\n  position: fixed;\\n  z-index: 1000;\\n  top: -20em;\\n  left: 0;\\n  bottom: -20em;\\n  right: 0;\\n  background: rgba(0, 0, 0, 0.5);\\n}\\n\\n.layer-body {\\n  position: fixed;\\n  left: 0;\\n  right: 0;\\n  margin-left: auto;\\n  margin-right: auto;\\n  text-align: center;\\n  top: 40%;\\n  z-index: 19870426;\\n}\\n\\n.layer-body.confirm {\\n  top: 35%;\\n}\\n\\n.layer-body.loading {\\n  @include toGapRem(width, 125);\\n}\\n\\n.layer-body.alert, .layer-body.confirm {\\n  @include toGapRem(width, 270);\\n}\\n\\n.layer-body.tips {\\n  @include toGapRem(width, 200);\\n}\\n\\n.layer-body.notice {\\n\\n  @include toGapRem(width, 320);\\n  top: 15%;\\n  p {\\n    @include font-dpr(12);\\n  }\\n\\n  .icon-guanbi1 {\\n    color: #FFFFFF;\\n    @include font-dpr(36);\\n    text-align: center;\\n    @include toGapRem(margin-top, 10);\\n    display: block;\\n  }\\n\\n}\\n\\n.layer-body.notice .alert-block {\\n\\n  @include toGapRem(padding, 10, 0);\\n\\n  .alert-title {\\n    color: #af292c;\\n  }\\n\\n  .alert-body {\\n    @include toGapRem(max-height, 375);\\n  }\\n\\n}\\n\\n.alert-block {\\n  width: 100%;\\n  @include toGapRem(border-radius, 10);\\n  background: #ffffff;\\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.1);\\n  @include toGapRem(padding, 10, 0, 0);\\n\\n  &gt; .alert-body {\\n    max-height: 8em;\\n    background: #FFFFFF;\\n    overflow-x: hidden;\\n    @include toGapRem(padding, 20);\\n    @include font-dpr(15);\\n    text-align: left;\\n    color: #111111;\\n    @include toGapRem(line-height, 17);\\n    margin:0;\\n\\n    h1 {\\n      @include font-dpr(14);\\n      color: #111111;\\n      @include toGapRem(margin, 20, 0, 15, 0);\\n    }\\n\\n    p {\\n      @include font-dpr(12);\\n      color: #333333;\\n      @include toGapRem(line-height, 17);\\n      max-height: 9999px;\\n    }\\n  }\\n\\n  &gt; .alert-title {\\n    @include font-dpr(15);\\n    text-align: center;\\n    @include toGapRem(padding, 12, 0, 10, 0);\\n    font-weight: bold;\\n    margin: 0;\\n    text-overflow: ellipsis;\\n    overflow: hidden;\\n    white-space: nowrap;\\n    color: #111111;\\n  }\\n\\n  &gt; .alert-footer {\\n    position: relative;\\n    text-align: center;\\n    border-top: 1px solid #CCCCCC;\\n    background: #FFFFFF;\\n    @include font-dpr(15);\\n    @include toGapRem(border-bottom-left-radius, 10);\\n    @include toGapRem(border-bottom-right-radius, 10);\\n\\n    ul {\\n      margin: 0;\\n      padding: 0;\\n\\n      li {\\n        position: relative;\\n        text-align: center;\\n        cursor: pointer;\\n        @include toGapRem(height, 45);\\n        @include toGapRem(line-height, 45);\\n        -webkit-box-flex: 1;\\n        -moz-box-flex: 1;\\n        -ms-box-flex: 1;\\n        list-style-type: none;\\n        color: #0066cc;\\n      }\\n    }\\n\\n  }\\n\\n  &gt; .alert-footer li:nth-child(2):before {\\n    content: \'\\\\20\';\\n    position: absolute;\\n    width: 1px;\\n    height: 100%;\\n    left: 0;\\n    top: 0;\\n    background-color: #aaaaaa;\\n  }\\n\\n  &gt; .icon-close {\\n    font-size: .4rem;\\n    color: #999;\\n    position: absolute;\\n    right: .8em;\\n    top: .3rem;\\n  }\\n}\\n\\n.averagebox {\\n  display: -webkit-box;\\n  display: -moz-box;\\n  display: -ms-flexbox;\\n  -webkit-flex-flow: wrap;\\n  justify-content: space-around;\\n}\\n\\n.alert-tip {\\n  background: #000000;\\n  opacity: 0.7;\\n  width: 100%;\\n  @include toGapRem(border-radius, 5);\\n\\n  &gt; p {\\n    @include toGapRem(padding, 9, 25);\\n    text-align: center;\\n    @include font-dpr(14);\\n    color: #FFFFFF;\\n  }\\n}\\n\\n.alert-loading {\\n  @include toGapRem(min-height, 90);\\n  width: 100%;\\n  position: fixed;\\n  background: rgba(0, 0, 0, .5);\\n  z-index: 19870428;\\n  text-align: center;\\n  @include toGapRem(border-radius, 8);\\n  @include toGapRem(padding, 5);\\n\\n  &gt; p {\\n    color: #FFFFFF;\\n    @include toGapRem(margin, 10, 0, 0);\\n    @include font-dpr(14);\\n  }\\n\\n  &gt; .loading-icon {\\n    width: 3em;\\n    height: 3em;\\n    margin: 0 auto;\\n    background: url(images/ajaxLoading.gif);\\n    background-size: 3em 3em;\\n    @include toGapRem(margin-top, 10);\\n  }\\n}\\n\\n//定义动画\\n/* -- fade -- */\\n@-webkit-keyframes layer-fade-enter {\\n  from {\\n    opacity: 0;\\n  }\\n}\\n\\n@keyframes layer-fade-enter {\\n  from {\\n    opacity: 0;\\n  }\\n}\\n\\n.layer-fade-enter {\\n  -webkit-animation: layer-fade-enter both ease-in;\\n  animation: layer-fade-enter both ease-in;\\n}\\n\\n@-webkit-keyframes layer-fade-leave {\\n  to {\\n    opacity: 0\\n  }\\n}\\n\\n@keyframes layer-fade-leave {\\n  to {\\n    opacity: 0\\n  }\\n}\\n\\n.layer-fade-leave {\\n  -webkit-animation: layer-fade-leave both ease-out;\\n  animation: layer-fade-leave both ease-out;\\n}\\n\\n@-webkit-keyframes layer-zoom-enter {\\n  from {\\n    -webkit-transform: scale3d(.3, .3, .3);\\n    transform: scale3d(.3, .3, .3);\\n  }\\n}\\n\\n@keyframes layer-zoom-enter {\\n  from {\\n    -webkit-transform: scale3d(.3, .3, .3);\\n    transform: scale3d(.3, .3, .3);\\n  }\\n}\\n\\n.layer-zoom-enter {\\n  -webkit-animation: layer-zoom-enter both cubic-bezier(0.4, 0, 0, 1.5);\\n  animation: layer-zoom-enter both cubic-bezier(0.4, 0, 0, 1.5);\\n}\\n\\n@-webkit-keyframes layer-zoom-leave {\\n  to {\\n    -webkit-transform: scale3d(.3, .3, .3);\\n    transform: scale3d(.3, .3, .3);\\n  }\\n}\\n\\n@keyframes layer-zoom-leave {\\n  to {\\n    -webkit-transform: scale3d(.3, .3, .3);\\n    transform: scale3d(.3, .3, .3);\\n  }\\n}\\n\\n.layer-zoom-leave {\\n  -webkit-animation: layer-zoom-leave both;\\n  animation: layer-zoom-leave both;\\n}\\n\\n\\n调用方式：\\n\\n1、页面引入\\nimport DLayer from \'components/common/layer\';//index.jsx\\nlet {layerTitle,layerType,layerShow,showMask,layerMsg,animation,confirmTxtL,confirmTxtR,confirm,cancel} = this.props.layerInfo;\\n&lt;DLayer\\n    title={layerTitle}\\n    type={layerType}\\n    visible={layerShow}\\n    message={layerMsg}\\n    animation={animation}\\n    showMask={showMask}\\n    confirmTxtL={confirmTxtL}\\n    confirmTxtR={confirmTxtR}\\n    onConfirm={confirm}\\n    onCancel={cancel}/&gt;\\n\\n注意： layerInfo 状态通过redux维护\\n\\n2、调用：\\n\\nalert:\\npageConfig.alert(this, \'hello Word\');\\n\\nconfirm:\\npageConfig.confirm(this, {msg: \'This is msg\', title: \'提示\', confirmTxtL: \'Yes\', confirmTxtR: \'No\'}, ()=&gt; {\\n}, ()=&gt; {\\n    native.callPhone();\\n});\\n\\ntips\\npageConfig.tips(this, \'hello Word\');\\n\\nloading\\npageConfig.alert(this, true);\\n\\npageConfig.js\\nalert(_this, msg, confirm = ()=&gt; {\\n}){\\n    if(Object.keys(_this).length === 0) return false;\\n    let action = _this.props.actions.queryLayerInfo;\\n    action({\\n        title:\'\',\\n        layerShow: true, layerType: \'alert\', showMask: true,\\n        layerMsg: msg, confirm: ()=&gt; {\\n            action({layerShow: false});\\n            confirm();\\n        }\\n    });\\n},\\n\\nconfirm(_this, params, confirm = ()=&gt; {\\n}, cancel = ()=&gt; {\\n}){\\n    let action = _this.props.actions.queryLayerInfo;\\n    action({\\n        layerShow: true,\\n        layerType: \'confirm\',\\n        layerMsg: params.msg,\\n        layerTitle: params.title,\\n        showMask: true,\\n        confirmTxtL: params.confirmTxtL,\\n        confirmTxtR: params.confirmTxtR,\\n        confirm: ()=&gt; {\\n            action({layerShow: false});\\n            confirm();\\n        },\\n        cancel: ()=&gt; {\\n            action({layerShow: false});\\n            cancel();\\n        }\\n    });\\n},\\n\\ntips(_this, msg, callback = ()=&gt; {\\n}){\\n    let action = _this.props.actions.queryLayerInfo;\\n    action({layerShow: true, layerType: \'tips\', showMask: false, layerMsg: msg});\\n    setTimeout(()=&gt; {\\n        action({layerShow: false});\\n        callback()\\n    }, 2000);\\n},\\n\\nloading(_this, state){\\n    let action = _this.props.actions.queryLayerInfo;\\n    action({layerShow: state, layerType: \'loading\', showMask: false})\\n}\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20161104194533.png','2016-11-04 11:43:47','2020-08-20 15:44:08'),(264,'Node.js 探秘（一）- 初识单线程的 Node.js','初识单线程的 Node.js','2','1','','单线程','2',NULL,'','从Node.js进入人们的视野时，我们所知道的它就由这些关键字组成 事件驱动、非阻塞I/O、高效、轻量，它在官网中也是这么描述自己的。','1','','','0:01',762,'2','0',NULL,0,'0',225001,'<h2 id=\"前言\" dir=\"ltr\"><span style=\"font-size: 14px;\">原文链接 &nbsp;http://taobaofed.org/blog/2015/10/29/deep-into-node-1/</span></h2><h2 id=\"前言\">前言</h2><p>从Node.js进入人们的视野时，我们所知道的它就由这些关键字组成 <strong>事件驱动、非阻塞I/O、高效、轻量</strong>，它在官网中也是这么描述自己的。</p><blockquote><p>Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine. Node.js uses an <strong>event-driven</strong>, <strong>non-blocking I/O model</strong> that makes it <strong>lightweight</strong> and <strong>efficient</strong>.</p></blockquote><p>于是，会有下面的场景出现：</p><p>当我们刚开始接触它时，可能会好奇：</p><ul class=\" list-paddingleft-2\"><li><p><strong>为什么在浏览器中运行的 Javascript 能与操作系统进行如此底层的交互？</strong></p></li></ul><p>当我们在用它进行文件 I/O 和网络 I/O 的时候，发现方法都需要传入回调，是异步的：</p><ul class=\" list-paddingleft-2\"><li><p><strong>那么这种异步，非阻塞的 I/O 是如何实现的？</strong></p></li></ul><p>当我们习惯了用回调来处理 I/O，发现当需要顺序处理时，Callback Hell 出现了，于是有想到了同步的方法：</p><ul class=\" list-paddingleft-2\"><li><p><strong>那么在异步为主的 Node.js，有同步的方法嘛？</strong></p></li></ul><p>身为一个前端，你在使用时，发现它的异步处理是基于事件的，跟前端很相似：</p><ul class=\" list-paddingleft-2\"><li><p><strong>那么它如何实现的这种事件驱动的处理方式呢？</strong></p></li></ul><p>当我们慢慢写的多了，处理了大量 I/O 请求的时候，你会想：</p><ul class=\" list-paddingleft-2\"><li><p><strong>Node.js 异步非阻塞的 I/O 就不会有瓶颈出现吗？</strong></p></li></ul><p>之后你还会想：</p><ul class=\" list-paddingleft-2\"><li><p><strong>Node.js 这么厉害，难道没有它不适合的事情吗？</strong></p></li></ul><p>等等。。。</p><p>看到这些问题，是否有点头大，别急，带着这些问题我们来慢慢看这篇文章。</p><h2 id=\"Node-js_结构\">Node.js 结构</h2><p>上面的问题，都挺底层的，所以我们从 Node.js 本身入手，先来看看 Node.js 的结构。</p><p><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_11_13_15_5_21_406_1000.jpg\" title=\"\" alt=\"NodeJs的结构.jpg\"/></p><p>我们可以看到，Node.js 的结构大致分为三个层次：</p><ul class=\" list-paddingleft-2\"><li><p>Node.js 标准库，这部分是由 Javascript 编写的，即我们使用过程中直接能调用的 API。在源码中的 <a href=\"https://github.com/nodejs/node/tree/master/lib\" target=\"_blank\" rel=\"external\">lib</a> 目录下可以看到。</p></li><li><p>Node bindings，这一层是 Javascript 与底层 C/C++ 能够沟通的关键，前者通过 bindings 调用后者，相互交换数据。实现在 <a href=\"https://github.com/nodejs/node/blob/master/src/node.cc\" target=\"_blank\" rel=\"external\">node.cc</a></p></li><li><p>这一层是支撑 Node.js 运行的关键，由 C/C++ 实现。</p></li><ul class=\" list-paddingleft-2\" style=\"list-style-type: square;\"><li><p>V8：Google 推出的 Javascript VM，也是 Node.js 为什么使用的是 Javascript 的关键，它为 Javascript 提供了在非浏览器端运行的环境，它的高效是 Node.js 之所以高效的原因之一。</p></li><li><p>Libuv：它为 Node.js 提供了跨平台，线程池，事件池，异步 I/O 等能力，是 Node.js 如此强大的关键。</p></li><li><p>C-ares：提供了异步处理 DNS 相关的能力。</p></li><li><p>http_parser、OpenSSL、zlib 等：提供包括 http 解析、SSL、数据压缩等其他的能力。</p></li></ul></ul><h2 id=\"Libuv\">Libuv</h2><p>Libuv 是 Node.js 关键的一个组成部分，它为上层的 Node.js 提供了统一的 API 调用，使其不用考虑平台差距，隐藏了底层实现。</p><p>具体它能做什么，官网的这张图体现的很好：</p><p><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_11_13_15_5_30_570_1001.png\" title=\"\" alt=\"Libuv.png\"/></p><p>可以看出，它是一个对开发者友好的工具集，包含定时器，非阻塞的网络 I/O，异步文件系统访问，子进程等功能。它封装了 Libev、Libeio 以及 IOCP，保证了跨平台的通用性。</p><p>我们只要先知道它本身是异步和事件驱动的，记住这点，下面的问题就有了答案，我们一一来看。</p><h2 id=\"与操作系统交互\">与操作系统交互</h2><p>举个简单的例子，我们想要打开一个文件，并进行一些操作，可以写下面这样一段代码：</p><p><br/></p><figure class=\"highlight javascript\"><pre id=\"coder\" class=\"brush:js;toolbar:false\">var&nbsp;fs&nbsp;=&nbsp;require(&#39;fs&#39;);\nfs.open(&#39;./test.txt&#39;,&nbsp;&quot;w&quot;,&nbsp;function(err,&nbsp;fd)&nbsp;{\n	//..do&nbsp;something\n});</pre><br/></figure><p><br/></p><p>这段代码的调用过程大致可描述为：<a href=\"https://github.com/nodejs/node/blob/master/lib/fs.js\" target=\"_blank\" rel=\"external\">lib/fs.js</a> → <a href=\"https://github.com/nodejs/node/blob/master/src/node_file.cc\" target=\"_blank\" rel=\"external\">src/node_file.cc</a> → <a href=\"https://github.com/nodejs/node/tree/master/deps/uv/src\" target=\"_blank\" rel=\"external\">uv_fs</a></p><p>Node.js 深入浅出上的一幅图：</p><p><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_11_13_15_5_38_826_1002.png\" title=\"\" alt=\"NodeJs代码的调用过程.png\"/></p><p>具体来说，当我们调用 <code>fs.open</code> 时，Node.js 通过 <code>process.binding</code> 调用 C/C++ 层面的 <code>Open</code> 函数，然后通过它调用 Libuv 中的具体方法 <code>uv_fs_open</code>，最后执行的结果通过回调的方式传回，完成流程。在图中，可以看到平台判断的流程，需要说明的是，这一步是在编译的时候已经决定好的，并不是在运行时中。</p><p>总体来说，我们在 Javascript 中调用的方法，最终都会通过 <code>process.binding</code> 传递到 C/C++ 层面，最终由他们来执行真正的操作。Node.js 即这样与操作系统进行互动。</p><p>通过这个过程，我们可以发现，实际上，Node.js 虽然说是用的 Javascript，但只是在开发时使用 Javascript 的语法来编写程序。真正的执行过程还是由 V8 将 Javascript 解释，然后由 C/C++ 来执行真正的系统调用，所以并不需要过分担心 Javascript 执行效率的问题。可以看出，Node.js 并不是一门语言，而是一个 <strong>平台</strong>，这点一定要分清楚。</p><h2 id=\"异步、非阻塞_I/O\">异步、非阻塞 I/O</h2><p>通过上文，我们了解到，真正执行系统调用的其实是 Libuv。之前我们提到，Libuv 本身就是异步和事件驱动的，所以，当我们将 I/O 操作的请求传达给 Libuv 之后，Libuv 开启线程来执行这次 I/O 调用，并在执行完成后，传回给 Javascript 进行后续处理。</p><p>这里面的 I/O 包括文件 I/O 和 网络 I/O。两者的底层执行略有不同。从上面的 Libuv 官网的图中，我们可以看到，文件 I/O，DNS 等操作，都是依托线程池（Thread Pool）来实现的。而网络 I/O 这一大类，包括：TCP、UDP、TTY 等，是由 epoll、IOCP、kqueue 来具体实现的。</p><p>总结来说，一个异步 I/O 的大致流程如下：</p><ul class=\" list-paddingleft-2\"><li><p>发起 I/O 调用</p></li><ol class=\" list-paddingleft-2\"><li><p>用户通过 Javascript 代码调用 Node 核心模块，将参数和回调函数传入到核心模块；</p></li><li><p>Node 核心模块会将传入的参数和回调函数封装成一个请求对象；</p></li><li><p>将这个请求对象推入到 I/O 线程池等待执行；</p></li><li><p>Javascript 发起的异步调用结束，Javascript 线程继续执行后续操作。</p></li></ol><li><p>执行回调</p></li><ol class=\" list-paddingleft-2\"><li><p>I/O 操作完成后，会将结果储存到请求对象的 result 属性上，并发出操作完成的通知；</p></li><li><p>每次事件循环时会检查是否有完成的 I/O 操作，如果有就将请求对象加入到 I/O 观察者队列中，之后当做事件处理；</p></li><li><p>处理 I/O 观察者事件时，会取出之前封装在请求对象中的回调函数，执行这个回调函数，并将 result 当参数，以完成 Javascript 回调的目的。</p></li></ol></ul><p><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_11_13_15_5_47_725_1003.png\" title=\"\" alt=\"线程池模拟异步io.png\"/></p><p>这里面涉及到了 Libuv 本身的一个设计理念，事件循环（Event Loop），它是一个类似于 <code>while true</code> 的无限循环，其核心函数是 <code>uv_run</code>，下文会用到。</p><p>从这里，我们可以看到，我们其实对 Node.js 的单线程一直有个误会。事实上，它的单线程指的是自身 Javascript 运行环境的单线程，Node.js 并没有给 Javascript 执行时创建新线程的能力，最终的实际操作，还是通过 Libuv 以及它的事件循环来执行的。这也就是为什么 Javascript 一个单线程的语言，能在 Node.js 里面实现异步操作的原因，两者并不冲突。</p><h2 id=\"事件驱动\">事件驱动</h2><p>说到，事件驱动，对于前端来说，并不陌生。事件，是一个在 GUI 开发时很常用的一个概念，常见的有鼠标事件，键盘事件等等。在异步的多种实现中，事件是一种比较容易理解和实现的方式。</p><p>说到事件，一定会想到回调，当我们写了一大堆事件处理函数后，Libuv 如何来执行这些回调呢？这就提到了我们之前说到的 <code>uv_run</code>，先看一张它的执行流程图：</p><p><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_11_13_15_5_54_566_1004.png\" title=\"\" alt=\"Libuv执行流程图.png\"/></p><p>在 <code>uv_run</code> 函数中，会维护一系列的监视器：</p><pre class=\"brush:js;toolbar:false\">typedef&nbsp;struct&nbsp;uv_loop_s&nbsp;uv_loop_t;\ntypedef&nbsp;struct&nbsp;uv_err_s&nbsp;uv_err_t;\ntypedef&nbsp;struct&nbsp;uv_handle_s&nbsp;uv_handle_t;\ntypedef&nbsp;struct&nbsp;uv_stream_s&nbsp;uv_stream_t;\ntypedef&nbsp;struct&nbsp;uv_tcp_s&nbsp;uv_tcp_t;\ntypedef&nbsp;struct&nbsp;uv_udp_s&nbsp;uv_udp_t;\ntypedef&nbsp;struct&nbsp;uv_pipe_s&nbsp;uv_pipe_t;\ntypedef&nbsp;struct&nbsp;uv_tty_s&nbsp;uv_tty_t;\ntypedef&nbsp;struct&nbsp;uv_poll_s&nbsp;uv_poll_t;\ntypedef&nbsp;struct&nbsp;uv_timer_s&nbsp;uv_timer_t;\ntypedef&nbsp;struct&nbsp;uv_prepare_s&nbsp;uv_prepare_t;\ntypedef&nbsp;struct&nbsp;uv_check_s&nbsp;uv_check_t;\ntypedef&nbsp;struct&nbsp;uv_idle_s&nbsp;uv_idle_t;\ntypedef&nbsp;struct&nbsp;uv_async_s&nbsp;uv_async_t;\ntypedef&nbsp;struct&nbsp;uv_process_s&nbsp;uv_process_t;\ntypedef&nbsp;struct&nbsp;uv_fs_event_s&nbsp;uv_fs_event_t;\ntypedef&nbsp;struct&nbsp;uv_fs_poll_s&nbsp;uv_fs_poll_t;\ntypedef&nbsp;struct&nbsp;uv_signal_s&nbsp;uv_signal_t;</pre><figure class=\"highlight c\"><br/>这些监视器都有对应着一种异步操作，它们通过 <code>uv_TYPE_start</code>，来注册事件监听以及相应的回调。</figure><p>在 <code>uv_run</code> 执行过程中，它会不断的检查这些队列中是或有 <code>pending</code> 状态的事件，有则触发，而且它在这里只会执行一个回调，避免在多个回调调用时发生竞争关系，因为 Javascript 是单线程的，无法处理这种情况。</p><p>上面的图中，对 I/O 操作的事件驱动，表达的比较清楚。除了我们常提到的 I/O 操作，图中还表述了一种情况，timer（定时器）。它与其他两者不同之处在于，它没有单独开立新的线程，而是在事件循环中直接完成的。</p><p>事件循环除了维护那些观察者队列，还维护了一个 <code>time</code> 字段，在初始化时会被赋值为0，每次循环都会更新这个值。所有与时间相关的操作，都会和这个值进行比较，来决定是否执行。</p><p>在图中，与 timer 相关的过程如下：</p><ol class=\" list-paddingleft-2\"><li><p>更新当前循环的 time 字段，即当前循环下的“现在”；</p></li><li><p>检查循环中是否还有需要处理的任务（handlers/requests），如果没有就不必循环了，即是否 alive。</p></li><li><p>检查注册过的 timer，如果某一个 timer 中指定的时间落后于当前时间了，说明该 timer 已到期，于是执行其对应的回调函数；</p></li><li><p>执行一次 I/O polling（即阻塞住线程，等待 I/O 事件发生），如果在下一个 timer 到期时还没有任何 I/O 完成，则停止等待，执行下一个 timer 的回调。如果发生了 I/O 事件，则执行对应的回调；由于执行回调的时间里可能又有 timer 到期了，这里要再次检查 timer 并执行回调。</p></li></ol><p>Node.js 会一直调用 <code>uv_run</code> 直到到循环不在 alive。</p><h2 id=\"同步方法\">同步方法</h2><p>虽然 Node.js 是以异步为主要模式的，但我们在实际开发中，难免会有一些情况是有时序性的，如果由异步来写，就会写出很丑的 Callback Hell，如下：</p><p><br/></p><figure class=\"highlight javascript\"><pre id=\"coder\" class=\"brush:js;toolbar:false\">db.query(&#39;select&nbsp;nickname&nbsp;from&nbsp;users&nbsp;where&nbsp;id=&quot;12&quot;&#39;,&nbsp;function()&nbsp;{\n	db.query(&#39;select&nbsp;*&nbsp;from&nbsp;xxx&nbsp;where&nbsp;id=&quot;12&quot;&#39;,&nbsp;function()&nbsp;{\n		db.query(&#39;select&nbsp;*&nbsp;from&nbsp;xxx&nbsp;where&nbsp;id=&quot;12&quot;&#39;,&nbsp;function()&nbsp;{\n			db.query(&#39;select&nbsp;*&nbsp;from&nbsp;xxx&nbsp;where&nbsp;id=&quot;12&quot;&#39;,&nbsp;function()&nbsp;{\n				//...	\n			});\n		});\n	});\n});</pre><br/></figure><p><br/></p><p>这个时候如果有同步方法，就会方便很多。这一点，Node.js 的开发者也想到了，目前大部分的异步操作函数，都存在其对应的同步版本，只需要在其名称后面加上 <code>Sync</code> 即可，不用传入回调。</p><p><br/></p><figure class=\"highlight javascript\"><pre id=\"coder\" class=\"brush:js;toolbar:false\">var&nbsp;file&nbsp;=&nbsp;fs.readFileSync(&#39;/test.txt&#39;,&nbsp;{&quot;encoding&quot;:&nbsp;&quot;utf-8});</pre><br/></figure><p>这写方法还是比较好用的，执行 shell 命令，读取文件等都比较方便。不过，体验不太好的一点就是这种调用的错误收集，它不会像回调函数那样，在第一参数中传入错误信息，它会将错误直接抛出，你需要使用 <code>try...catch</code> 来获取，如下：</p><p><br/></p><figure class=\"highlight javascript\"><pre id=\"coder\" class=\"brush:js;toolbar:false\">var&nbsp;data;\ntry&nbsp;{\n&nbsp;&nbsp;data&nbsp;=&nbsp;fs.readFileSync(&#39;/test.txt&#39;);\n}&nbsp;catch&nbsp;(e)&nbsp;{\n	if&nbsp;(e.code&nbsp;==&nbsp;&#39;ENOENT&#39;)&nbsp;{\n		//...\n	}\n&nbsp;	//...\n}</pre><br/></figure><p><br/></p><p>至于这些方法如何实现的，我们下回再论。</p><h2 id=\"一些可能的瓶颈\">一些可能的瓶颈</h2><p>这里只见到讨论下自己的理解，欢迎指正。</p><p>首先，文件的 I/O 方面，用户代码的运行，事件循环的通知等，是通过 Libuv 维护的线程池来进行操作的，它会运行全部的文件系统操作。既然这样，我们抛开硬盘的影响，对于严谨的 C/C++ 来说，这个线程池一定是有大小限制的。官方默认给出的大小是 <strong>4</strong>。当然是可以改变的。在启动时，通过设置 <code>UV_THREADPOOL_SIZE</code> 来改变这个值即可。不过，最大也只能是 <strong>128</strong>，因为这个是涉及到内存占用的。</p><p>这个线程池对于所有的事件循环是共享的。当一个函数要使用线程池的时候（比如调用 <code>uv_queue_work</code>），Libuv 会预先分配并初始化 <code>UV_THREADPOOL_SIZE</code> 所允许的线程出来。而 &nbsp;<strong>128</strong> 占用的内存大约是 1MB，如果设置的太高，当使用线程池频繁时，会因为内存占用过多而降低线程的性能。<a href=\"https://github.com/libuv/libuv/blob/master/docs/src/threadpool.rst\" target=\"_blank\" rel=\"external\">具体说明</a>;</p><p>对于网络 I/O 方面，以 Linux 系统下来说，网络 I/O 采用的是 epoll 这个异步模型。它的优点是采用了事件回调的方式，大大降低了文件描述符的创建（Linux下什么都是文件）。</p><p>在每次调用 <code>epoll_wait</code> 时，实际返回的是就绪描述符的数量，根据这个值，去 epoll 指定的数组里面取对应数量的描述符，是一种 <strong>内存映射</strong> 的方式，减少了文件描述符的复制开销。</p><p>上面提到的 epoll 指定的数组，它的大小即可监听的数量大小，它在不同的系统下，有不同的默认值，可见这里 <a href=\"https://github.com/nodejs/node/blob/master/deps/uv/src/unix/linux-syscalls.c#L80\" target=\"_blank\" rel=\"external\">epoll create</a>。</p><p>有了大小的限制，还远不够，为了保证运行的稳定，防止你在调用 epoll 函数时，指针越界，导致内存泄漏。还会用到另外一个值 <code>maxevents</code>，它是 <code>epoll_wait</code> 所能处理的最大数量，在调用 <code>epoll_wait</code> 时可以指定。一般情况下小于创建时（epoll_create）的数组大小，当然，也可以设置的比 size 大，不过应该没什么用。可以想到如果就绪的事件很多，超过了 <code>maxevents</code>，那么超出的事件就要等待前面的事件处理完成，才可以继续，可能会导致效率的下降。</p><p>在这种情况下，你可能会担心事件会丢失。其实，是不会丢失的，它会通过 <code>ep_collect_ready_items</code> 将这些事件保存在一个队列中，在下一个 <code>epoll_wait</code> 再进行通知。</p><h2 id=\"Node-js_不适合做什么\">Node.js 不适合做什么</h2><p>虽然看起来，Node.js 可以做很多事情，并且拥有很高的性能。比如做聊天室，搭建 Blog 等等，这些 I/O 密集型的应用，是比较适合 Node.js 的。</p><p>但是，有一种类型的应用，可能 Node.js 处理起来会比较吃力，那就是 CPU 密集型的应用。前文提到，Libuv 通过事件循环来处理异步的事件，这是存在于 Node.js 主线程的机制。通过这个机制，所有的 I/O 操作，底层API的调用都变成了异步的。但用户的 Javascript 代码是运行在主线程中的，如果这部分代码运行耗时很长，就会导致事件循环被阻塞。因为，它对于事件的处理，都是按照队列顺序的，所以如果其中的任何一个事务/事件本身没有完成，那么其他的回调、监听器、超时、nextTick() 都得不到运行的机会，被阻塞的事件循环没有机会去处理它们。这样下去，轻则效率降低，重则运行停滞。</p><p>比如我们常见的模板渲染，压缩，解压缩，加/解密等操作，都是 Node.js 的软肋，所以使用的时候要考虑到这方面。</p><h2 id=\"总结\">总结</h2><ul class=\" list-paddingleft-2\"><li><p>Node.js 通过 <code>libuv</code> 来处理与操作系统的交互，并且因此具备了异步、非阻塞、事件驱动的能力。</p></li><li><p>Node.js 实际上是 Javascript 执行线程的单线程，真正的的 I/O 操作，底层 API 调用都是通过多线程执行的。</p></li><li><p>CPU 密集型的任务是 Node.js 的软肋。</p></li></ul><p><br/></p>','[{\"type\":\"contents\",\"content\":\"原文链接  http://taobaofed.org/blog/2015/10/29/deep-into-node-1/\\n前言\\n从Node.js进入人们的视野时，我们所知道的它就由这些关键字组成 事件驱动、非阻塞I/O、高效、轻量，它在官网中也是这么描述自己的。\\nNode.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient.\\n\\n于是，会有下面的场景出现：\\n当我们刚开始接触它时，可能会好奇：\\n为什么在浏览器中运行的 Javascript 能与操作系统进行如此底层的交互？\\n\\n当我们在用它进行文件 I/O 和网络 I/O 的时候，发现方法都需要传入回调，是异步的：\\n那么这种异步，非阻塞的 I/O 是如何实现的？\\n\\n当我们习惯了用回调来处理 I/O，发现当需要顺序处理时，Callback Hell 出现了，于是有想到了同步的方法：\\n那么在异步为主的 Node.js，有同步的方法嘛？\\n\\n身为一个前端，你在使用时，发现它的异步处理是基于事件的，跟前端很相似：\\n那么它如何实现的这种事件驱动的处理方式呢？\\n\\n当我们慢慢写的多了，处理了大量 I/O 请求的时候，你会想：\\nNode.js 异步非阻塞的 I/O 就不会有瓶颈出现吗？\\n\\n之后你还会想：\\nNode.js 这么厉害，难道没有它不适合的事情吗？\\n\\n等等。。。\\n看到这些问题，是否有点头大，别急，带着这些问题我们来慢慢看这篇文章。\\nNode.js 结构\\n上面的问题，都挺底层的，所以我们从 Node.js 本身入手，先来看看 Node.js 的结构。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_11_13_15_5_21_406_1000.jpg\"},{\"type\":\"contents\",\"content\":\"\\n我们可以看到，Node.js 的结构大致分为三个层次：\\nNode.js 标准库，这部分是由 Javascript 编写的，即我们使用过程中直接能调用的 API。在源码中的 lib 目录下可以看到。\\nNode bindings，这一层是 Javascript 与底层 C/C++ 能够沟通的关键，前者通过 bindings 调用后者，相互交换数据。实现在 node.cc\\n这一层是支撑 Node.js 运行的关键，由 C/C++ 实现。\\nV8：Google 推出的 Javascript VM，也是 Node.js 为什么使用的是 Javascript 的关键，它为 Javascript 提供了在非浏览器端运行的环境，它的高效是 Node.js 之所以高效的原因之一。\\nLibuv：它为 Node.js 提供了跨平台，线程池，事件池，异步 I/O 等能力，是 Node.js 如此强大的关键。\\nC-ares：提供了异步处理 DNS 相关的能力。\\nhttp_parser、OpenSSL、zlib 等：提供包括 http 解析、SSL、数据压缩等其他的能力。\\n\\n\\nLibuv\\nLibuv 是 Node.js 关键的一个组成部分，它为上层的 Node.js 提供了统一的 API 调用，使其不用考虑平台差距，隐藏了底层实现。\\n具体它能做什么，官网的这张图体现的很好：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_11_13_15_5_30_570_1001.png\"},{\"type\":\"contents\",\"content\":\"\\n可以看出，它是一个对开发者友好的工具集，包含定时器，非阻塞的网络 I/O，异步文件系统访问，子进程等功能。它封装了 Libev、Libeio 以及 IOCP，保证了跨平台的通用性。\\n我们只要先知道它本身是异步和事件驱动的，记住这点，下面的问题就有了答案，我们一一来看。\\n与操作系统交互\\n举个简单的例子，我们想要打开一个文件，并进行一些操作，可以写下面这样一段代码：\\n\\nvar fs = require(\'fs\');\\nfs.open(\'./test.txt\', \\\"w\\\", function(err, fd) {\\n\\t//..do something\\n});\\n\\n\\n这段代码的调用过程大致可描述为：lib/fs.js → src/node_file.cc → uv_fs\\nNode.js 深入浅出上的一幅图：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_11_13_15_5_38_826_1002.png\"},{\"type\":\"contents\",\"content\":\"\\n具体来说，当我们调用 fs.open 时，Node.js 通过 process.binding 调用 C/C++ 层面的 Open 函数，然后通过它调用 Libuv 中的具体方法 uv_fs_open，最后执行的结果通过回调的方式传回，完成流程。在图中，可以看到平台判断的流程，需要说明的是，这一步是在编译的时候已经决定好的，并不是在运行时中。\\n总体来说，我们在 Javascript 中调用的方法，最终都会通过 process.binding 传递到 C/C++ 层面，最终由他们来执行真正的操作。Node.js 即这样与操作系统进行互动。\\n通过这个过程，我们可以发现，实际上，Node.js 虽然说是用的 Javascript，但只是在开发时使用 Javascript 的语法来编写程序。真正的执行过程还是由 V8 将 Javascript 解释，然后由 C/C++ 来执行真正的系统调用，所以并不需要过分担心 Javascript 执行效率的问题。可以看出，Node.js 并不是一门语言，而是一个 平台，这点一定要分清楚。\\n<h2>异步、非阻塞 I/O\\n通过上文，我们了解到，真正执行系统调用的其实是 Libuv。之前我们提到，Libuv 本身就是异步和事件驱动的，所以，当我们将 I/O 操作的请求传达给 Libuv 之后，Libuv 开启线程来执行这次 I/O 调用，并在执行完成后，传回给 Javascript 进行后续处理。\\n这里面的 I/O 包括文件 I/O 和 网络 I/O。两者的底层执行略有不同。从上面的 Libuv 官网的图中，我们可以看到，文件 I/O，DNS 等操作，都是依托线程池（Thread Pool）来实现的。而网络 I/O 这一大类，包括：TCP、UDP、TTY 等，是由 epoll、IOCP、kqueue 来具体实现的。\\n总结来说，一个异步 I/O 的大致流程如下：\\n发起 I/O 调用\\n用户通过 Javascript 代码调用 Node 核心模块，将参数和回调函数传入到核心模块；\\nNode 核心模块会将传入的参数和回调函数封装成一个请求对象；\\n将这个请求对象推入到 I/O 线程池等待执行；\\nJavascript 发起的异步调用结束，Javascript 线程继续执行后续操作。\\n\\n执行回调\\nI/O 操作完成后，会将结果储存到请求对象的 result 属性上，并发出操作完成的通知；\\n每次事件循环时会检查是否有完成的 I/O 操作，如果有就将请求对象加入到 I/O 观察者队列中，之后当做事件处理；\\n处理 I/O 观察者事件时，会取出之前封装在请求对象中的回调函数，执行这个回调函数，并将 result 当参数，以完成 Javascript 回调的目的。\\n\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_11_13_15_5_47_725_1003.png\"},{\"type\":\"contents\",\"content\":\"\\n这里面涉及到了 Libuv 本身的一个设计理念，事件循环（Event Loop），它是一个类似于 while true 的无限循环，其核心函数是 uv_run，下文会用到。\\n从这里，我们可以看到，我们其实对 Node.js 的单线程一直有个误会。事实上，它的单线程指的是自身 Javascript 运行环境的单线程，Node.js 并没有给 Javascript 执行时创建新线程的能力，最终的实际操作，还是通过 Libuv 以及它的事件循环来执行的。这也就是为什么 Javascript 一个单线程的语言，能在 Node.js 里面实现异步操作的原因，两者并不冲突。\\n事件驱动\\n说到，事件驱动，对于前端来说，并不陌生。事件，是一个在 GUI 开发时很常用的一个概念，常见的有鼠标事件，键盘事件等等。在异步的多种实现中，事件是一种比较容易理解和实现的方式。\\n说到事件，一定会想到回调，当我们写了一大堆事件处理函数后，Libuv 如何来执行这些回调呢？这就提到了我们之前说到的 uv_run，先看一张它的执行流程图：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_11_13_15_5_54_566_1004.png\"},{\"type\":\"contents\",\"content\":\"\\n在 uv_run 函数中，会维护一系列的监视器：\\ntypedef struct uv_loop_s uv_loop_t;\\ntypedef struct uv_err_s uv_err_t;\\ntypedef struct uv_handle_s uv_handle_t;\\ntypedef struct uv_stream_s uv_stream_t;\\ntypedef struct uv_tcp_s uv_tcp_t;\\ntypedef struct uv_udp_s uv_udp_t;\\ntypedef struct uv_pipe_s uv_pipe_t;\\ntypedef struct uv_tty_s uv_tty_t;\\ntypedef struct uv_poll_s uv_poll_t;\\ntypedef struct uv_timer_s uv_timer_t;\\ntypedef struct uv_prepare_s uv_prepare_t;\\ntypedef struct uv_check_s uv_check_t;\\ntypedef struct uv_idle_s uv_idle_t;\\ntypedef struct uv_async_s uv_async_t;\\ntypedef struct uv_process_s uv_process_t;\\ntypedef struct uv_fs_event_s uv_fs_event_t;\\ntypedef struct uv_fs_poll_s uv_fs_poll_t;\\ntypedef struct uv_signal_s uv_signal_t;\\n\\n这些监视器都有对应着一种异步操作，它们通过 uv_TYPE_start，来注册事件监听以及相应的回调。在 uv_run 执行过程中，它会不断的检查这些队列中是或有 pending 状态的事件，有则触发，而且它在这里只会执行一个回调，避免在多个回调调用时发生竞争关系，因为 Javascript 是单线程的，无法处理这种情况。\\n上面的图中，对 I/O 操作的事件驱动，表达的比较清楚。除了我们常提到的 I/O 操作，图中还表述了一种情况，timer（定时器）。它与其他两者不同之处在于，它没有单独开立新的线程，而是在事件循环中直接完成的。\\n事件循环除了维护那些观察者队列，还维护了一个 time 字段，在初始化时会被赋值为0，每次循环都会更新这个值。所有与时间相关的操作，都会和这个值进行比较，来决定是否执行。\\n在图中，与 timer 相关的过程如下：\\n更新当前循环的 time 字段，即当前循环下的“现在”；\\n检查循环中是否还有需要处理的任务（handlers/requests），如果没有就不必循环了，即是否 alive。\\n检查注册过的 timer，如果某一个 timer 中指定的时间落后于当前时间了，说明该 timer 已到期，于是执行其对应的回调函数；\\n执行一次 I/O polling（即阻塞住线程，等待 I/O 事件发生），如果在下一个 timer 到期时还没有任何 I/O 完成，则停止等待，执行下一个 timer 的回调。如果发生了 I/O 事件，则执行对应的回调；由于执行回调的时间里可能又有 timer 到期了，这里要再次检查 timer 并执行回调。\\n\\nNode.js 会一直调用 uv_run 直到到循环不在 alive。\\n同步方法\\n虽然 Node.js 是以异步为主要模式的，但我们在实际开发中，难免会有一些情况是有时序性的，如果由异步来写，就会写出很丑的 Callback Hell，如下：\\n\\ndb.query(\'select nickname from users where id=\\\"12\\\"\', function() {\\n\\tdb.query(\'select * from xxx where id=\\\"12\\\"\', function() {\\n\\t\\tdb.query(\'select * from xxx where id=\\\"12\\\"\', function() {\\n\\t\\t\\tdb.query(\'select * from xxx where id=\\\"12\\\"\', function() {\\n\\t\\t\\t\\t//...\\t\\n\\t\\t\\t});\\n\\t\\t});\\n\\t});\\n});\\n\\n\\n这个时候如果有同步方法，就会方便很多。这一点，Node.js 的开发者也想到了，目前大部分的异步操作函数，都存在其对应的同步版本，只需要在其名称后面加上 Sync 即可，不用传入回调。\\n\\nvar file = fs.readFileSync(\'/test.txt\', {\\\"encoding\\\": \\\"utf-8});\\n\\n这写方法还是比较好用的，执行 shell 命令，读取文件等都比较方便。不过，体验不太好的一点就是这种调用的错误收集，它不会像回调函数那样，在第一参数中传入错误信息，它会将错误直接抛出，你需要使用 try...catch 来获取，如下：\\n\\nvar data;\\ntry {\\n  data = fs.readFileSync(\'/test.txt\');\\n} catch (e) {\\n\\tif (e.code == \'ENOENT\') {\\n\\t\\t//...\\n\\t}\\n \\t//...\\n}\\n\\n\\n至于这些方法如何实现的，我们下回再论。\\n一些可能的瓶颈\\n这里只见到讨论下自己的理解，欢迎指正。\\n首先，文件的 I/O 方面，用户代码的运行，事件循环的通知等，是通过 Libuv 维护的线程池来进行操作的，它会运行全部的文件系统操作。既然这样，我们抛开硬盘的影响，对于严谨的 C/C++ 来说，这个线程池一定是有大小限制的。官方默认给出的大小是 4。当然是可以改变的。在启动时，通过设置 UV_THREADPOOL_SIZE 来改变这个值即可。不过，最大也只能是 128，因为这个是涉及到内存占用的。\\n这个线程池对于所有的事件循环是共享的。当一个函数要使用线程池的时候（比如调用 uv_queue_work），Libuv 会预先分配并初始化 UV_THREADPOOL_SIZE 所允许的线程出来。而  128 占用的内存大约是 1MB，如果设置的太高，当使用线程池频繁时，会因为内存占用过多而降低线程的性能。具体说明;\\n对于网络 I/O 方面，以 Linux 系统下来说，网络 I/O 采用的是 epoll 这个异步模型。它的优点是采用了事件回调的方式，大大降低了文件描述符的创建（Linux下什么都是文件）。\\n在每次调用 epoll_wait 时，实际返回的是就绪描述符的数量，根据这个值，去 epoll 指定的数组里面取对应数量的描述符，是一种 内存映射 的方式，减少了文件描述符的复制开销。\\n上面提到的 epoll 指定的数组，它的大小即可监听的数量大小，它在不同的系统下，有不同的默认值，可见这里 epoll create。\\n有了大小的限制，还远不够，为了保证运行的稳定，防止你在调用 epoll 函数时，指针越界，导致内存泄漏。还会用到另外一个值 maxevents，它是 epoll_wait 所能处理的最大数量，在调用 epoll_wait 时可以指定。一般情况下小于创建时（epoll_create）的数组大小，当然，也可以设置的比 size 大，不过应该没什么用。可以想到如果就绪的事件很多，超过了 maxevents，那么超出的事件就要等待前面的事件处理完成，才可以继续，可能会导致效率的下降。\\n在这种情况下，你可能会担心事件会丢失。其实，是不会丢失的，它会通过 ep_collect_ready_items 将这些事件保存在一个队列中，在下一个 epoll_wait 再进行通知。\\nNode.js 不适合做什么\\n虽然看起来，Node.js 可以做很多事情，并且拥有很高的性能。比如做聊天室，搭建 Blog 等等，这些 I/O 密集型的应用，是比较适合 Node.js 的。\\n但是，有一种类型的应用，可能 Node.js 处理起来会比较吃力，那就是 CPU 密集型的应用。前文提到，Libuv 通过事件循环来处理异步的事件，这是存在于 Node.js 主线程的机制。通过这个机制，所有的 I/O 操作，底层API的调用都变成了异步的。但用户的 Javascript 代码是运行在主线程中的，如果这部分代码运行耗时很长，就会导致事件循环被阻塞。因为，它对于事件的处理，都是按照队列顺序的，所以如果其中的任何一个事务/事件本身没有完成，那么其他的回调、监听器、超时、nextTick() 都得不到运行的机会，被阻塞的事件循环没有机会去处理它们。这样下去，轻则效率降低，重则运行停滞。\\n比如我们常见的模板渲染，压缩，解压缩，加/解密等操作，都是 Node.js 的软肋，所以使用的时候要考虑到这方面。\\n总结\\nNode.js 通过 libuv 来处理与操作系统的交互，并且因此具备了异步、非阻塞、事件驱动的能力。\\nNode.js 实际上是 Javascript 执行线程的单线程，真正的的 I/O 操作，底层 API 调用都是通过多线程执行的。\\nCPU 密集型的任务是 Node.js 的软肋。\\n\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1447398491000.jpg','2015-11-13 07:09:47','2020-08-20 15:44:15'),(265,'Node.js API实例讲解——创建http服务器','创建http服务器','2','1','','创建http服务器,nodejs','2',NULL,'','什么是http？这里就不详解了，感兴趣的可以通过各种途径找到相关知识，这里要主要讲解的是通过node.js建立http服务器和http客户端。','1','','','0:01',762,'2','0',NULL,0,'0',224756,'<h3>创建http服务器</h3><p>什么是http？这里就不详解了，感兴趣的可以通过各种途径找到相关知识，这里要主要讲解的是通过node.js建立http服务器和http客户端。</p><p>先开发个http服务器，然后让浏览器访问。</p><pre class=\"code\">var&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\nvar&nbsp;server&nbsp;=&nbsp;http.createServer(\n&nbsp;&nbsp;&nbsp;&nbsp;function(incomingMsg,response){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.write(&quot;hello&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n);\nserver.listen(8080);</pre><p>ok，运行这个http服务器，浏览器访问 localhost:8080 会在浏览器中显示 hello。</p><p>看起来没任何作用，但如果用net.createServer建立个服务器，浏览器就无法显示hello，因为http模型可以处理http的请求和响应，而net是很低级的数据的传输，而这些复杂的http协议的解析，node.js都已封装好，只要用就可以了。</p><p>这个例子虽然没什么功能，但可以分析出几个对象，server服务器对象，incomingMsg是传入的信息（请求信息），response响应对象。</p><p>server对象是http.Server实例，incomingMsg对象是http.IncomingMessage实例,response对象是http.ServerResponse实例。</p><p>下面对着三个类进行详解。</p><h4 id=\"http-server-\">http.Server类</h4><p>http.Server是net.Server的子类。</p><h5 id=\"server-\">server对象可产生的事件</h5><p>&#39;request&#39;事件，但有客户访问请求数据库资源时，会产生这个事件，这个事件的监听器可接收两个参数，incomingMessage和response。前面的http.createServer(function(incomingMsg,response)...) 也是加入一个监听器。</p><pre class=\"code\">server.on(&quot;request&quot;,function(msg,response){\n&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;...\n})</pre><p>&#39;connection&#39;事件和net.Server的一致，可参阅。监听器会接收到一个socket，和net.Server一致，也可通过incomingMessage.socket得到。</p><pre class=\"code\">server.on(&quot;connection&quot;,function(socket){&nbsp;...&nbsp;})</pre><p>&#39;close&#39;事件是当服务器关闭时产生</p><pre class=\"code\">server.on(&quot;close&quot;,function(){&nbsp;...&nbsp;})</pre><p>&#39;checkContinue&#39; 事件，是当客户端发送 Expect:100-continue 请求时产生的事件，客户之所以这么做，是先要请求一下服务器是否同意继续发送主体内容，这个一般不会用到，有兴趣的可以搜索一下 Expect:100-continue 相关资料。</p><p>&#39;connect&#39;事件，是当客户请求方法是&quot;CONNECT&quot;时，会产生的事件，下面写个例子：</p><pre class=\"code\">//&nbsp;服务器\nvar&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\nvar&nbsp;server&nbsp;=&nbsp;http.createServer();\nserver.on(&quot;connect&quot;,function(req,socket,head){\n&nbsp;&nbsp;&nbsp;......\n})\nserver.listen(8080)\n\n//&nbsp;客户端\nvar&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\nvar&nbsp;req&nbsp;=&nbsp;http.request({\nport:8080,\nmethod:&quot;CONNECT&quot;\n},function(res){\n&nbsp;&nbsp;&nbsp;&nbsp;......\n})\nreq.end();</pre><p>当然CONNECT方法并不是浏览器支持的，所以浏览器访问就不会被接收到。</p><p>&#39;upgrade&#39; 事件，是当请求头部信息有 upgrade 属性时产生这个事件。例如的html5 websocket协议，请求时就会产生这个事件。</p><p>&#39;clientError&#39;事件，是客户端出现异常时抛出，这里的异常并不能通过request.destory来模拟，只能通过throw抛出异常来模拟，看例子：</p><pre class=\"code\">//&nbsp;服务器\nvar&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\nvar&nbsp;server&nbsp;=&nbsp;http.createServer();\nserver.on(&quot;clientError&quot;,function(exception,socket){\n&nbsp;&nbsp;&nbsp;console.log(&quot;客户端有错误&quot;)\n})\nserver.listen(8080)\n\n//&nbsp;客户端\nvar&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\nvar&nbsp;req&nbsp;=&nbsp;http.request(8080)\nsetTimeout(function(){\n&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;Error();&nbsp;//&nbsp;抛出异常\n},1000);</pre><p>exception是异常原因,socket是抛出异常的socket。</p><h5 id=\"server-listen-port-hostname-backlog-callback-\">server.listen(port, [hostname], [backlog], [callback])</h5><p>port 参数，是打开一个服务器端的监听端口，如果是0，表示由系统分配一个随机端口。</p><p>host[可选]参数，表示主机名，如果设置localhost那么就拒绝通过127.0.0.1访问服务器的客户端。</p><p>backlog[可选]参数，表示同时访问的最大数，默认511。</p><p>callback[可选]参数，回调函数，http server已经准备妥当时会调用它。</p><h5 id=\"server-close-callback-\">server.close([callback])</h5><p>参看上一节“创建socket服务器”</p><h5 id=\"server-settimeout-msecs-callback-\">server.setTimeout(msecs,callback)</h5><p>设置客户端空闲超时的监听器。注意，这个不是设置服务器超时,而是指客户端与服务器建立的socket超时。msecs以毫秒为单位，callback(socket) 是超时监听器，监听器会获得一个socket参数。server.timeout值默认是120000毫秒。</p><p>第一种写法</p><pre class=\"code\">var&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\nvar&nbsp;Socket&nbsp;=&nbsp;require(&quot;net&quot;).Socket;\nvar&nbsp;server&nbsp;=&nbsp;http.createServer();\nserver.on(&quot;request&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;//res.end();这里不调用res.end从而模拟超时\n})\nserver.timeout&nbsp;=&nbsp;3000;\nserver.on(&quot;timeout&quot;,function(s){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(s&nbsp;instanceof&nbsp;Socket)&nbsp;//&nbsp;true\n})\nserver.listen(8080);</pre><p>第二种写法</p><pre class=\"code\">var&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\n\nvar&nbsp;Socket&nbsp;=&nbsp;require(&quot;net&quot;).Socket;\nvar&nbsp;server&nbsp;=&nbsp;http.createServer();\nserver.on(&quot;request&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;//res.end();\n})\n//server.timeout&nbsp;=&nbsp;3000;\nserver.setTimeout(5000,function(s){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(s&nbsp;instanceof&nbsp;Socket)&nbsp;//&nbsp;true\n})\nserver.listen(8080)</pre><h5 id=\"-\">【小结】</h5><p>本节开始做了一个简单的http服务器，通过浏览器访问，然后通过这个例子分析出3个主要的对象，Server，IncommingMessage，ServerResponse，\n本节对Server类进行了讲解，下一节将对IncommingMessage讲解。</p>','[{\"type\":\"contents\",\"content\":\"创建http服务器\\n什么是http？这里就不详解了，感兴趣的可以通过各种途径找到相关知识，这里要主要讲解的是通过node.js建立http服务器和http客户端。\\n先开发个http服务器，然后让浏览器访问。\\nvar http = require(\\\"http\\\");\\nvar server = http.createServer(\\n    function(incomingMsg,response){\\n        response.write(\\\"hello\\\");\\n        response.end();\\n    }\\n);\\nserver.listen(8080);\\nok，运行这个http服务器，浏览器访问 localhost:8080 会在浏览器中显示 hello。\\n看起来没任何作用，但如果用net.createServer建立个服务器，浏览器就无法显示hello，因为http模型可以处理http的请求和响应，而net是很低级的数据的传输，而这些复杂的http协议的解析，node.js都已封装好，只要用就可以了。\\n这个例子虽然没什么功能，但可以分析出几个对象，server服务器对象，incomingMsg是传入的信息（请求信息），response响应对象。\\nserver对象是http.Server实例，incomingMsg对象是http.IncomingMessage实例,response对象是http.ServerResponse实例。\\n下面对着三个类进行详解。\\nhttp.Server类\\nhttp.Server是net.Server的子类。\\nserver对象可产生的事件\\n\'request\'事件，但有客户访问请求数据库资源时，会产生这个事件，这个事件的监听器可接收两个参数，incomingMessage和response。前面的http.createServer(function(incomingMsg,response)...) 也是加入一个监听器。\\nserver.on(\\\"request\\\",function(msg,response){\\n    ... ...\\n})\\n\'connection\'事件和net.Server的一致，可参阅。监听器会接收到一个socket，和net.Server一致，也可通过incomingMessage.socket得到。\\nserver.on(\\\"connection\\\",function(socket){ ... })\\n\'close\'事件是当服务器关闭时产生\\nserver.on(\\\"close\\\",function(){ ... })\\n\'checkContinue\' 事件，是当客户端发送 Expect:100-continue 请求时产生的事件，客户之所以这么做，是先要请求一下服务器是否同意继续发送主体内容，这个一般不会用到，有兴趣的可以搜索一下 Expect:100-continue 相关资料。\\n\'connect\'事件，是当客户请求方法是\\\"CONNECT\\\"时，会产生的事件，下面写个例子：\\n// 服务器\\nvar http = require(\\\"http\\\");\\nvar server = http.createServer();\\nserver.on(\\\"connect\\\",function(req,socket,head){\\n   ......\\n})\\nserver.listen(8080)\\n\\n// 客户端\\nvar http = require(\\\"http\\\");\\nvar req = http.request({\\nport:8080,\\nmethod:\\\"CONNECT\\\"\\n},function(res){\\n    ......\\n})\\nreq.end();\\n当然CONNECT方法并不是浏览器支持的，所以浏览器访问就不会被接收到。\\n\'upgrade\' 事件，是当请求头部信息有 upgrade 属性时产生这个事件。例如的html5 websocket协议，请求时就会产生这个事件。\\n\'clientError\'事件，是客户端出现异常时抛出，这里的异常并不能通过request.destory来模拟，只能通过throw抛出异常来模拟，看例子：\\n// 服务器\\nvar http = require(\\\"http\\\");\\nvar server = http.createServer();\\nserver.on(\\\"clientError\\\",function(exception,socket){\\n   console.log(\\\"客户端有错误\\\")\\n})\\nserver.listen(8080)\\n\\n// 客户端\\nvar http = require(\\\"http\\\");\\nvar req = http.request(8080)\\nsetTimeout(function(){\\n   throw new Error(); // 抛出异常\\n},1000);\\nexception是异常原因,socket是抛出异常的socket。\\nserver.listen(port, [hostname], [backlog], [callback])\\nport 参数，是打开一个服务器端的监听端口，如果是0，表示由系统分配一个随机端口。\\nhost[可选]参数，表示主机名，如果设置localhost那么就拒绝通过127.0.0.1访问服务器的客户端。\\nbacklog[可选]参数，表示同时访问的最大数，默认511。\\ncallback[可选]参数，回调函数，http server已经准备妥当时会调用它。\\nserver.close([callback])\\n参看上一节“创建socket服务器”\\nserver.setTimeout(msecs,callback)\\n设置客户端空闲超时的监听器。注意，这个不是设置服务器超时,而是指客户端与服务器建立的socket超时。msecs以毫秒为单位，callback(socket) 是超时监听器，监听器会获得一个socket参数。server.timeout值默认是120000毫秒。\\n第一种写法\\nvar http = require(\\\"http\\\");\\nvar Socket = require(\\\"net\\\").Socket;\\nvar server = http.createServer();\\nserver.on(\\\"request\\\",function(req,res){\\n    //res.end();这里不调用res.end从而模拟超时\\n})\\nserver.timeout = 3000;\\nserver.on(\\\"timeout\\\",function(s){\\n    console.log(s instanceof Socket) // true\\n})\\nserver.listen(8080);\\n第二种写法\\nvar http = require(\\\"http\\\");\\n\\nvar Socket = require(\\\"net\\\").Socket;\\nvar server = http.createServer();\\nserver.on(\\\"request\\\",function(req,res){\\n    //res.end();\\n})\\n//server.timeout = 3000;\\nserver.setTimeout(5000,function(s){\\n    console.log(s instanceof Socket) // true\\n})\\nserver.listen(8080)\\n【小结】\\n本节开始做了一个简单的http服务器，通过浏览器访问，然后通过这个例子分析出3个主要的对象，Server，IncommingMessage，ServerResponse，本节对Server类进行了讲解，下一节将对IncommingMessage讲解。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444890496000.jpg','2015-08-09 14:00:23','2020-08-20 15:44:25'),(266,'Express 4.8.x—必备中间件的使用','必备中间件的使用','2','1','','express中间件','2',NULL,'','下面介绍常用中间件的使用方法：cookie-parser','1','','','0:01',762,'2','0',NULL,0,'0',224808,'<h3>必备中间件的使用</h3><p>下面介绍常用中间件的使用方法：</p><h4 id=\"cookie-parser\">cookie-parser</h4><p>用于解析cookie的中间件，添加中间后，req具备cookies属性。通过<code>req.cookies.xxx</code>可以访问cookie的值。</p><p>安装：</p><pre>$&nbsp;npm&nbsp;install&nbsp;cookie-parser</pre><p>使用</p><pre>var&nbsp;cookieParser&nbsp;=&nbsp;require(&#39;cookie-parser&#39;)\napp.use(cookieParser(secret,&nbsp;options))</pre><p><code>secret</code> 是可选参数，用于对cookie进行<code>签名</code> ，通过它可以判断出客户是否修改了cookie，这是处于安全考虑，这个参数是任意字符串。</p><p><code>options</code> 可选参数，是一个json对象。</p><ul class=\" list-paddingleft-2\"><li><p>path</p></li><li><p>expires</p></li><li><p>maxAge</p></li><li><p>domain</p></li><li><p>secure</p></li><li><p>httpOnly</p></li></ul><p>这几个选项中，expires 过期日期设置方式是： new Date(Date.now() + 90000); 也就是说它接收一个Date日期对象，而不是数字，因为中间件内部是这样做的， expires.toUTCString() 。</p><h4 id=\"express-session\">express-session</h4><pre>var&nbsp;express&nbsp;=&nbsp;require(&#39;express&#39;)\nvar&nbsp;session&nbsp;=&nbsp;require(&#39;express-session&#39;)\n\nvar&nbsp;app&nbsp;=&nbsp;express()\n\napp.use(session({secret:&nbsp;&#39;keyboard&nbsp;cat&#39;}))</pre><p>session(options )中间件的 options 常用选项如下：\nname - 默认&#39;connect.sid&#39;，可自定义。\nstore - session 储存器实例。\nsecret - 用于对cookie进行<code>签名</code> ，通过它可以判断出客户是否修改了cookie，这是处于安全考虑，这个参数是任意字符串。\ncookie - 对session cookie的设置 。默认值 { path: &#39;/&#39;, httpOnly: true, secure: false, maxAge: null }\ngenid - &nbsp;是个函数，调用它来生成一个新的会话ID。 （默认：使用UID2库） \nrolling - &nbsp;强制对每个响应的Cookie，重置到期日期。 （默认：false）\nresave - 每一次都重新保存，即使没修改过（默认：true）\nproxy - ture／false，是否支持<code>trust proxy</code>, 需要设置 <code>app.enable(&#39;trust proxy&#39;);</code>一般来说，无需设置。</p><h4 id=\"serve-favicon\">serve-favicon</h4><p>通过下面代码可以设置网站的 favicon图标。</p><pre>app.use(favicon(__dirname&nbsp;+&nbsp;&#39;/public/favicon.ico&#39;));</pre><h4 id=\"body-parser\">body-parser</h4><pre>var&nbsp;bodyParser&nbsp;=&nbsp;require(&#39;body-parser&#39;);\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded());</pre><p>通过以上的设置，即可让post请求接收到的表单信息保存在 <code>req.body</code> 当中。</p><p>其他中间件可在 <a href=\"https://github.com/senchalabs/connect#middleware\">https://github.com/senchalabs/connect#middleware</a> 找到。</p><p>有中间件使用问题可在线提问。</p>','[{\"type\":\"contents\",\"content\":\"必备中间件的使用\\n下面介绍常用中间件的使用方法：\\ncookie-parser\\n用于解析cookie的中间件，添加中间后，req具备cookies属性。通过req.cookies.xxx可以访问cookie的值。\\n安装：\\n$ npm install cookie-parser\\n使用\\nvar cookieParser = require(\'cookie-parser\')\\napp.use(cookieParser(secret, options))\\nsecret 是可选参数，用于对cookie进行签名 ，通过它可以判断出客户是否修改了cookie，这是处于安全考虑，这个参数是任意字符串。\\noptions 可选参数，是一个json对象。\\npath\\nexpires\\nmaxAge\\ndomain\\nsecure\\nhttpOnly\\n\\n这几个选项中，expires 过期日期设置方式是： new Date(Date.now() + 90000); 也就是说它接收一个Date日期对象，而不是数字，因为中间件内部是这样做的， expires.toUTCString() 。\\nexpress-session\\nvar express = require(\'express\')\\nvar session = require(\'express-session\')\\n\\nvar app = express()\\n\\napp.use(session({secret: \'keyboard cat\'}))\\nsession(options )中间件的 options 常用选项如下：name - 默认\'connect.sid\'，可自定义。store - session 储存器实例。secret - 用于对cookie进行签名 ，通过它可以判断出客户是否修改了cookie，这是处于安全考虑，这个参数是任意字符串。cookie - 对session cookie的设置 。默认值 { path: \'/\', httpOnly: true, secure: false, maxAge: null }genid -  是个函数，调用它来生成一个新的会话ID。 （默认：使用UID2库） rolling -  强制对每个响应的Cookie，重置到期日期。 （默认：false）resave - 每一次都重新保存，即使没修改过（默认：true）proxy - ture／false，是否支持trust proxy, 需要设置 app.enable(\'trust proxy\');一般来说，无需设置。\\nserve-favicon\\n通过下面代码可以设置网站的 favicon图标。\\napp.use(favicon(__dirname + \'/public/favicon.ico\'));\\nbody-parser\\nvar bodyParser = require(\'body-parser\');\\n\\napp.use(bodyParser.json());\\napp.use(bodyParser.urlencoded());\\n通过以上的设置，即可让post请求接收到的表单信息保存在 req.body 当中。\\n其他中间件可在 https://github.com/senchalabs/connect#middleware 找到。\\n有中间件使用问题可在线提问。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445059488000.jpg','2015-10-17 05:26:04','2020-08-20 15:44:22'),(267,'angularjs filter 详解','angularjs filter 详解','1','1','','nodejs,angularjs','2',NULL,'','系统的学习了一下angularjs，发现angularjs的有些思想根php的模块smarty很像，例如数据绑定，filter。如果对smarty比较熟悉的话，学习angularjs会比较容易一点。这篇简单说一下angularjs的filter功能，angularjs的','2','/blogpicture/2015_7_2_15_26_39_126_1000.jpg','','0:01',762,'2','0',NULL,NULL,'0',223201,'<p style=\"text-align: center;\">&nbsp;&nbsp;&nbsp;&nbsp;<img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_7_2_15_26_39_126_1000.jpg\" title=\"\" alt=\"asss.jpg\"/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;系统的学习了一下angularjs，发现angularjs的有些思想根php的模块smarty很像，例如数据绑定，filter。如果对\nsmarty比较熟悉的话，学习angularjs会比较容易一点。这篇简单说一下angularjs的filter功能，angularjs的\nfilter功能可分为二种，一种是内置的过滤器，一种是自定义的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br/></p><p><strong>一，内置的过滤器</strong></p><p><strong>1，uppercase，lowercase大小转换</strong></p><pre class=\"brush:js;toolbar:false\">{{&nbsp;&quot;lower&nbsp;cap&nbsp;string&quot;&nbsp;|&nbsp;uppercase&nbsp;}}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//结果：LOWER&nbsp;CAP&nbsp;STRING&nbsp;&nbsp;\n{{&nbsp;&quot;TANK&nbsp;is&nbsp;GOOD&quot;&nbsp;|&nbsp;lowercase&nbsp;}}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//结果：tank&nbsp;is&nbsp;good</pre><p><span style=\"color: #800080;\"><strong>｜这里的竖线是一种管道功能，如果对linux比较熟悉的话，这块的｜根linux的管道功能，基本是一样的</strong></span></p><p><strong>2，json格式化</strong></p><pre class=\"brush:js;toolbar:false\">{{&nbsp;{foo:&nbsp;&quot;bar&quot;,&nbsp;baz:&nbsp;23}&nbsp;|&nbsp;json&nbsp;}}&nbsp;&nbsp;&nbsp;&nbsp;//结果：{&nbsp;&quot;foo&quot;:&nbsp;&quot;bar&quot;,&nbsp;&quot;baz&quot;:&nbsp;23&nbsp;}</pre><p>注意：bza没格式前是没有双引号的，格式化后就转换成了json数据了。</p><p><strong>3，date格式化</strong></p><pre class=\"brush:js;toolbar:false\">{{&nbsp;1304375948024&nbsp;|&nbsp;date&nbsp;}}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//结果：May&nbsp;3,&nbsp;2011&nbsp;&nbsp;\n{{&nbsp;1304375948024&nbsp;|&nbsp;date:&quot;MM/dd/yyyy&nbsp;@&nbsp;h:mma&quot;&nbsp;}}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//结果：05/03/2011&nbsp;@&nbsp;6:39AM&nbsp;&nbsp;\n{{&nbsp;1304375948024&nbsp;|&nbsp;date:&quot;yyyy-MM-dd&nbsp;hh:mm:ss&quot;&nbsp;}}&nbsp;&nbsp;&nbsp;&nbsp;//结果：2011-05-03&nbsp;06:39:08</pre><p><strong>4，number格式化</strong></p><pre class=\"brush:js;toolbar:false\">{{&nbsp;1.234567&nbsp;|&nbsp;number:1&nbsp;}}&nbsp;&nbsp;&nbsp;&nbsp;//结果：1.2&nbsp;&nbsp;\n{{&nbsp;1234567&nbsp;|&nbsp;number&nbsp;}}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//结果：1,234,567</pre><p><strong>5，currency货币格式化</strong></p><pre class=\"brush:js;toolbar:false\">{{&nbsp;250&nbsp;|&nbsp;currency&nbsp;}}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//结果：$250.00&nbsp;&nbsp;\n{{&nbsp;250&nbsp;|&nbsp;currency:&quot;RMB&nbsp;￥&nbsp;&quot;&nbsp;}}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//结果：RMB&nbsp;￥&nbsp;250.00</pre><p><strong>6，filter查找</strong></p><pre class=\"brush:js;toolbar:false\">{{&nbsp;[{&quot;age&quot;:&nbsp;20,&quot;id&quot;:&nbsp;10,&quot;name&quot;:&nbsp;&quot;iphone&quot;},&nbsp;&nbsp;\n{&quot;age&quot;:&nbsp;12,&quot;id&quot;:&nbsp;11,&quot;name&quot;:&nbsp;&quot;sunm&nbsp;xing&quot;},&nbsp;&nbsp;\n{&quot;age&quot;:&nbsp;44,&quot;id&quot;:&nbsp;12,&quot;name&quot;:&nbsp;&quot;test&nbsp;abc&quot;}&nbsp;&nbsp;\n]&nbsp;|&nbsp;filter:&#39;s&#39;}}&nbsp;&nbsp;&nbsp;&nbsp;//查找含有有s的行&nbsp;&nbsp;\n&nbsp;&nbsp;\n//上例结果：[{&quot;age&quot;:12,&quot;id&quot;:11,&quot;name&quot;:&quot;sunm&nbsp;xing&quot;},{&quot;age&quot;:44,&quot;id&quot;:12,&quot;name&quot;:&quot;test&nbsp;abc&quot;}]&nbsp;&nbsp;\n&nbsp;&nbsp;\n{{&nbsp;[{&quot;age&quot;:&nbsp;20,&quot;id&quot;:&nbsp;10,&quot;name&quot;:&nbsp;&quot;iphone&quot;},&nbsp;&nbsp;\n{&quot;age&quot;:&nbsp;12,&quot;id&quot;:&nbsp;11,&quot;name&quot;:&nbsp;&quot;sunm&nbsp;xing&quot;},&nbsp;&nbsp;\n{&quot;age&quot;:&nbsp;44,&quot;id&quot;:&nbsp;12,&quot;name&quot;:&nbsp;&quot;test&nbsp;abc&quot;}&nbsp;&nbsp;\n]&nbsp;|&nbsp;filter:{&#39;name&#39;:&#39;iphone&#39;}&nbsp;}}&nbsp;&nbsp;&nbsp;//查找name为iphone的行&nbsp;&nbsp;\n&nbsp;&nbsp;\n//上例结果:[{&quot;age&quot;:20,&quot;id&quot;:10,&quot;name&quot;:&quot;iphone&quot;}]</pre><p><strong>7，limitTo字符串，对像的截取</strong></p><pre class=\"brush:js;toolbar:false\">{{&nbsp;&quot;i&nbsp;love&nbsp;tank&quot;&nbsp;|&nbsp;limitTo:6&nbsp;}}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//结果：i&nbsp;love&nbsp;&nbsp;\n{{&nbsp;&quot;i&nbsp;love&nbsp;tank&quot;&nbsp;|&nbsp;limitTo:-4&nbsp;}}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//结果：tank&nbsp;&nbsp;\n&nbsp;&nbsp;\n{{&nbsp;[{&quot;age&quot;:&nbsp;20,&quot;id&quot;:&nbsp;10,&quot;name&quot;:&nbsp;&quot;iphone&quot;},&nbsp;&nbsp;\n{&quot;age&quot;:&nbsp;12,&quot;id&quot;:&nbsp;11,&quot;name&quot;:&nbsp;&quot;sunm&nbsp;xing&quot;},&nbsp;&nbsp;\n{&quot;age&quot;:&nbsp;44,&quot;id&quot;:&nbsp;12,&quot;name&quot;:&nbsp;&quot;test&nbsp;abc&quot;}&nbsp;&nbsp;\n]&nbsp;|&nbsp;limitTo:1&nbsp;}}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//结果：[{&quot;age&quot;:20,&quot;id&quot;:10,&quot;name&quot;:&quot;iphone&quot;}]</pre><p><strong>8，orderBy对像排序</strong></p><pre class=\"brush:js;toolbar:false\">{{&nbsp;[{&quot;age&quot;:&nbsp;20,&quot;id&quot;:&nbsp;10,&quot;name&quot;:&nbsp;&quot;iphone&quot;},&nbsp;&nbsp;\n{&quot;age&quot;:&nbsp;12,&quot;id&quot;:&nbsp;11,&quot;name&quot;:&nbsp;&quot;sunm&nbsp;xing&quot;},&nbsp;&nbsp;\n{&quot;age&quot;:&nbsp;44,&quot;id&quot;:&nbsp;12,&quot;name&quot;:&nbsp;&quot;test&nbsp;abc&quot;}&nbsp;&nbsp;\n]&nbsp;|&nbsp;orderBy:&#39;id&#39;:true&nbsp;}}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//根id降序排&nbsp;&nbsp;\n&nbsp;&nbsp;\n{{&nbsp;[{&quot;age&quot;:&nbsp;20,&quot;id&quot;:&nbsp;10,&quot;name&quot;:&nbsp;&quot;iphone&quot;},&nbsp;&nbsp;\n{&quot;age&quot;:&nbsp;12,&quot;id&quot;:&nbsp;11,&quot;name&quot;:&nbsp;&quot;sunm&nbsp;xing&quot;},&nbsp;&nbsp;\n{&quot;age&quot;:&nbsp;44,&quot;id&quot;:&nbsp;12,&quot;name&quot;:&nbsp;&quot;test&nbsp;abc&quot;}&nbsp;&nbsp;\n]&nbsp;|&nbsp;orderBy:&#39;id&#39;&nbsp;}}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//根据id升序排</pre><p><strong>二，自定filter功能</strong></p><p><strong>我找了一个基本angularjs的mvc框架，phonecat，自定义filter也是在这基础写的，这个框架挺好用的。</strong></p><p><strong>1，filters.js添加一个module</strong></p><pre class=\"brush:js;toolbar:false\">angular.module(&#39;tanktest&#39;,&nbsp;[]).filter(&#39;tankreplace&#39;,&nbsp;function()&nbsp;{&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;function(input)&nbsp;{&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;input.replace(/tank/,&nbsp;&quot;=====&quot;)&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;};&nbsp;&nbsp;\n});</pre><p><strong>2，app.js中加载这个module</strong></p><pre class=\"brush:js;toolbar:false\">var&nbsp;phonecatApp&nbsp;=&nbsp;angular.module(&#39;phonecatApp&#39;,&nbsp;[&nbsp;&nbsp;\n&nbsp;&nbsp;&#39;ngRoute&#39;,&nbsp;&nbsp;\n&nbsp;&nbsp;&#39;phonecatControllers&#39;,&nbsp;&nbsp;\n&nbsp;&nbsp;&#39;facebookControllers&#39;,&nbsp;&nbsp;\n&nbsp;&nbsp;&#39;tanktest&#39;&nbsp;&nbsp;\n]);</pre><p><strong>3，html中调用</strong></p><pre class=\"brush:js;toolbar:false\">{{&nbsp;&quot;TANK&nbsp;is&nbsp;GOOD&quot;&nbsp;|&nbsp;lowercase&nbsp;|tankreplace}}&nbsp;&nbsp;&nbsp;//结果：=====&nbsp;is&nbsp;good</pre><p><br/></p><p>总结： AngularJs 在数据展示中filter会经常用到，特别对于字符截取（limitTo）以及排序（orderBy）等会经常用到。</p>','[{\"type\":\"contents\",\"content\":\"    \"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_7_2_15_26_39_126_1000.jpg\"},{\"type\":\"contents\",\"content\":\"\\n    系统的学习了一下angularjs，发现angularjs的有些思想根php的模块smarty很像，例如数据绑定，filter。如果对smarty比较熟悉的话，学习angularjs会比较容易一点。这篇简单说一下angularjs的filter功能，angularjs的filter功能可分为二种，一种是内置的过滤器，一种是自定义的。\\n    \\n一，内置的过滤器\\n1，uppercase，lowercase大小转换\\n{{ \\\"lower cap string\\\" | uppercase }}     //结果：LOWER CAP STRING  \\n{{ \\\"TANK is GOOD\\\" | lowercase }}         //结果：tank is good\\n｜这里的竖线是一种管道功能，如果对linux比较熟悉的话，这块的｜根linux的管道功能，基本是一样的\\n2，json格式化\\n{{ {foo: \\\"bar\\\", baz: 23} | json }}    //结果：{ \\\"foo\\\": \\\"bar\\\", \\\"baz\\\": 23 }\\n注意：bza没格式前是没有双引号的，格式化后就转换成了json数据了。\\n3，date格式化\\n{{ 1304375948024 | date }}                          //结果：May 3, 2011  \\n{{ 1304375948024 | date:\\\"MM/dd/yyyy @ h:mma\\\" }}     //结果：05/03/2011 @ 6:39AM  \\n{{ 1304375948024 | date:\\\"yyyy-MM-dd hh:mm:ss\\\" }}    //结果：2011-05-03 06:39:08\\n4，number格式化\\n{{ 1.234567 | number:1 }}    //结果：1.2  \\n{{ 1234567 | number }}       //结果：1,234,567\\n5，currency货币格式化\\n{{ 250 | currency }}                 //结果：$250.00  \\n{{ 250 | currency:\\\"RMB ￥ \\\" }}       //结果：RMB ￥ 250.00\\n6，filter查找\\n{{ [{\\\"age\\\": 20,\\\"id\\\": 10,\\\"name\\\": \\\"iphone\\\"},  \\n{\\\"age\\\": 12,\\\"id\\\": 11,\\\"name\\\": \\\"sunm xing\\\"},  \\n{\\\"age\\\": 44,\\\"id\\\": 12,\\\"name\\\": \\\"test abc\\\"}  \\n] | filter:\'s\'}}    //查找含有有s的行  \\n  \\n//上例结果：[{\\\"age\\\":12,\\\"id\\\":11,\\\"name\\\":\\\"sunm xing\\\"},{\\\"age\\\":44,\\\"id\\\":12,\\\"name\\\":\\\"test abc\\\"}]  \\n  \\n{{ [{\\\"age\\\": 20,\\\"id\\\": 10,\\\"name\\\": \\\"iphone\\\"},  \\n{\\\"age\\\": 12,\\\"id\\\": 11,\\\"name\\\": \\\"sunm xing\\\"},  \\n{\\\"age\\\": 44,\\\"id\\\": 12,\\\"name\\\": \\\"test abc\\\"}  \\n] | filter:{\'name\':\'iphone\'} }}   //查找name为iphone的行  \\n  \\n//上例结果:[{\\\"age\\\":20,\\\"id\\\":10,\\\"name\\\":\\\"iphone\\\"}]\\n7，limitTo字符串，对像的截取\\n{{ \\\"i love tank\\\" | limitTo:6 }}           //结果：i love  \\n{{ \\\"i love tank\\\" | limitTo:-4 }}          //结果：tank  \\n  \\n{{ [{\\\"age\\\": 20,\\\"id\\\": 10,\\\"name\\\": \\\"iphone\\\"},  \\n{\\\"age\\\": 12,\\\"id\\\": 11,\\\"name\\\": \\\"sunm xing\\\"},  \\n{\\\"age\\\": 44,\\\"id\\\": 12,\\\"name\\\": \\\"test abc\\\"}  \\n] | limitTo:1 }}     //结果：[{\\\"age\\\":20,\\\"id\\\":10,\\\"name\\\":\\\"iphone\\\"}]\\n8，orderBy对像排序\\n{{ [{\\\"age\\\": 20,\\\"id\\\": 10,\\\"name\\\": \\\"iphone\\\"},  \\n{\\\"age\\\": 12,\\\"id\\\": 11,\\\"name\\\": \\\"sunm xing\\\"},  \\n{\\\"age\\\": 44,\\\"id\\\": 12,\\\"name\\\": \\\"test abc\\\"}  \\n] | orderBy:\'id\':true }}        //根id降序排  \\n  \\n{{ [{\\\"age\\\": 20,\\\"id\\\": 10,\\\"name\\\": \\\"iphone\\\"},  \\n{\\\"age\\\": 12,\\\"id\\\": 11,\\\"name\\\": \\\"sunm xing\\\"},  \\n{\\\"age\\\": 44,\\\"id\\\": 12,\\\"name\\\": \\\"test abc\\\"}  \\n] | orderBy:\'id\' }}           //根据id升序排\\n二，自定filter功能\\n我找了一个基本angularjs的mvc框架，phonecat，自定义filter也是在这基础写的，这个框架挺好用的。\\n1，filters.js添加一个module\\nangular.module(\'tanktest\', []).filter(\'tankreplace\', function() {  \\n    return function(input) {  \\n        return input.replace(/tank/, \\\"=====\\\")  \\n    };  \\n});\\n2，app.js中加载这个module\\nvar phonecatApp = angular.module(\'phonecatApp\', [  \\n  \'ngRoute\',  \\n  \'phonecatControllers\',  \\n  \'facebookControllers\',  \\n  \'tanktest\'  \\n]);\\n3，html中调用\\n{{ \\\"TANK is GOOD\\\" | lowercase |tankreplace}}   //结果：===== is good\\n\\n总结： AngularJs 在数据展示中filter会经常用到，特别对于字符截取（limitTo）以及排序（orderBy）等会经常用到。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1435821435000.jpg','2015-07-02 07:26:48','2020-08-20 15:44:27'),(268,'nodeJs基础教程系列(5)——异步与同步','nodeJs基础教程系列(5)','1','1','','nodejs','2',NULL,'','从调用方式上，可以把他们分为三类：同步调用、回调和异步调用。同步调用是一种阻塞式调用，调用方要等待对方执行完毕才返回，它是一种单向调用；回调是一种双向调用模式','1','','','0:01',762,'2','0',NULL,0,'0',223930,'<h3><span style=\"font-size: 16px;\">异步与同步</span></h3><blockquote><p><span style=\"font-size: 16px;\">从调用方式上，可以把他们分为三类：同步调用、回调和异步调用。同步调用是一种阻塞式调用，调用方要等待对方执行完毕才返回，它是一种单向调用；回调是一种双向调用模式，也就是说，被调用方在接口被调用时也会调用对方的接口；异步调用是一种类似消息或事件的机制，不过它的调用方向刚好相反，接口的服务在收到某种讯息或发生某种事件时，会主动通知客户方（即调用客户方的接口）。</span></p></blockquote><p><span style=\"font-size: 16px;\">看的懂更好，通过下面的实例也同样可以理解。</span></p><pre><span style=\"font-size: 16px;\">var fs = require(&quot;fs&quot;);<br/>var data = fs.readFileSync(&quot;new.txt&quot;);<br/>console.log(data.toString());<br/></span></pre><p><span style=\"font-size: 16px;\">fuck</span><code><span style=\"font-size: 16px;\">readFileSync</span></code><span style=\"font-size: 16px;\">是同步方法，会阻塞直到得到结果后，才继续执行之后的语句。god</span></p><pre><span style=\"font-size: 16px;\">var fs = require(&quot;fs&quot;);<br/>fs.readFile(&quot;new.txt&quot;,function callback(err,data){<br/> &nbsp; &nbsp;console.log(data.toString());<br/>});<br/>console.log(“first me run”);<br/></span></pre><p><span style=\"font-size: 16px;\">会发现 </span><code><span style=\"font-size: 16px;\">console.log(“first me run”)</span></code><span style=\"font-size: 16px;\">先执行。 因为</span><code><span style=\"font-size: 16px;\">readFile</span></code><span style=\"font-size: 16px;\">是异步函数，不会阻塞之后的语句。</span><code><span style=\"font-size: 16px;\">callback</span></code><span style=\"font-size: 16px;\">是回调函数，等到底层读取完数据后，会调用该函数。god</span></p><p><span style=\"font-size: 16px;\">bookNode.js中回调函数的规范是：</span></p><pre><span style=\"font-size: 16px;\">function callback(err,args0,args1 … ){}<br/></span></pre><p><span style=\"font-size: 16px;\">下面我们模拟一个异步函数，和回调函数，加深理解。</span></p><pre><span style=\"font-size: 16px;\">function sumAsync(a,b,callback){<br/> &nbsp; &nbsp;setTimeout(function(){<br/> &nbsp; &nbsp; &nbsp; &nbsp;if(typeof a === &quot;number&quot; &amp;&amp; typeof a === &quot;number&quot;){<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;callback(null,a+b);<br/> &nbsp; &nbsp; &nbsp; &nbsp;}else{<br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;callback(new Error(&quot;must number&quot;));<br/> &nbsp; &nbsp; &nbsp; &nbsp;}<br/> &nbsp; &nbsp;},200)<br/>}<br/><br/>sumAsync(2,3,function callback(err,rs){<br/> &nbsp; &nbsp;console.log(rs);<br/>})<br/><br/>console.log(&quot;first run !&quot;);<br/></span></pre><p><span style=\"font-size: 16px;\">我们定义一个</span><code><span style=\"font-size: 16px;\">sumAsync</span></code><span style=\"font-size: 16px;\">异步函数，运行后，会先执行 </span><code><span style=\"font-size: 16px;\">console.log(&quot;first run !&quot;);</span></code><span style=\"font-size: 16px;\"> ，根据这个实例，应对异步函数、回调概念已理解。在Node.js 的实际开发中，I/O操作都应该调用异步函数，这样才能发挥更好的性能，但回调函数的嵌套很丑，为了解决这个问题，之后的几节中，会介绍 Promises 的Q库 和 ES6 generator 及 co 库，通过这几个工具即能发挥Node.js高性能，又可让代码更好维护、更可控和更好的可读性。</span></p>','[{\"type\":\"contents\",\"content\":\"异步与同步\\n从调用方式上，可以把他们分为三类：同步调用、回调和异步调用。同步调用是一种阻塞式调用，调用方要等待对方执行完毕才返回，它是一种单向调用；回调是一种双向调用模式，也就是说，被调用方在接口被调用时也会调用对方的接口；异步调用是一种类似消息或事件的机制，不过它的调用方向刚好相反，接口的服务在收到某种讯息或发生某种事件时，会主动通知客户方（即调用客户方的接口）。\\n\\n看的懂更好，通过下面的实例也同样可以理解。\\nvar fs = require(\\\"fs\\\");\\nvar data = fs.readFileSync(\\\"new.txt\\\");\\nconsole.log(data.toString());\\n\\nfuckreadFileSync是同步方法，会阻塞直到得到结果后，才继续执行之后的语句。god\\nvar fs = require(\\\"fs\\\");\\nfs.readFile(\\\"new.txt\\\",function callback(err,data){\\n    console.log(data.toString());\\n});\\nconsole.log(“first me run”);\\n\\n会发现 console.log(“first me run”)先执行。 因为readFile是异步函数，不会阻塞之后的语句。callback是回调函数，等到底层读取完数据后，会调用该函数。god\\nbookNode.js中回调函数的规范是：\\nfunction callback(err,args0,args1 … ){}\\n\\n下面我们模拟一个异步函数，和回调函数，加深理解。\\nfunction sumAsync(a,b,callback){\\n    setTimeout(function(){\\n        if(typeof a === \\\"number\\\" &amp;&amp; typeof a === \\\"number\\\"){\\n            callback(null,a+b);\\n        }else{\\n            callback(new Error(\\\"must number\\\"));\\n        }\\n    },200)\\n}\\n\\nsumAsync(2,3,function callback(err,rs){\\n    console.log(rs);\\n})\\n\\nconsole.log(\\\"first run !\\\");\\n\\n我们定义一个sumAsync异步函数，运行后，会先执行 console.log(\\\"first run !\\\"); ，根据这个实例，应对异步函数、回调概念已理解。在Node.js 的实际开发中，I/O操作都应该调用异步函数，这样才能发挥更好的性能，但回调函数的嵌套很丑，为了解决这个问题，之后的几节中，会介绍 Promises 的Q库 和 ES6 generator 及 co 库，通过这几个工具即能发挥Node.js高性能，又可让代码更好维护、更可控和更好的可读性。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1436164375000.jpg','2015-07-06 06:33:02','2020-08-20 15:44:27'),(269,'DoraCMS广告模块优化','DoraCMS广告模块优化','1','1','','广告模块','2',NULL,'','DoraCMS 后台是有广告模块的，下面简要介绍一下DoraCMS的广告模块可以做什么： 1、友情链接.  2、简单的文本链接. 3、图片广告','1','','','0:01',762,'2','0',NULL,0,'0',223546,'<p>&nbsp; DoraCMS 后台是有广告模块的，下面简要介绍一下DoraCMS的广告模块可以做什么：</p><p>&nbsp; 1、友情链接</p><p>&nbsp; 2、简单的文本链接</p><p>&nbsp; 3、图片广告</p><p>&nbsp; 以上的内容都可以在后台添加</p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_10_21_15_6_13_890_1002.jpg\" title=\"\" alt=\"DoraCMS添加广告.jpg\"/></p><p><br/></p><p>&nbsp; 但是怎么展示呢，展示功能之前就做了，今天做了进一步优化，以面向对象的方式介绍一下图片广告的展示：</p><p><br/></p><p>&nbsp; 前端的图片广告展示，默认使用了bootstrap的一个叫&nbsp;Carousel 的插件，是什么样的呢：</p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_10_21_14_49_39_232_1000.jpg\" title=\"\" alt=\"Carousel.jpg\"/></p><p><br/></p><p>它具备了幻灯片的基础功能，可以轮播并可以随意切换。DoraCMS目前使用它作为前端展现广告的方式。它的结构是这样的：</p><pre class=\"brush:js;toolbar:false\">&lt;div&nbsp;id=&quot;carousel-example-generic&quot;&nbsp;class=&quot;carousel&nbsp;slide&quot;&nbsp;data-ride=&quot;carousel&quot;&gt;\n&nbsp;&nbsp;&lt;!--&nbsp;Indicators&nbsp;--&gt;\n&nbsp;&nbsp;&lt;ol&nbsp;class=&quot;carousel-indicators&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&nbsp;data-target=&quot;#carousel-example-generic&quot;&nbsp;data-slide-to=&quot;0&quot;&nbsp;class=&quot;active&quot;&gt;&lt;/li&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&nbsp;data-target=&quot;#carousel-example-generic&quot;&nbsp;data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&nbsp;data-target=&quot;#carousel-example-generic&quot;&nbsp;data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;\n&nbsp;&nbsp;&lt;/ol&gt;\n\n&nbsp;&nbsp;&lt;!--&nbsp;Wrapper&nbsp;for&nbsp;slides&nbsp;--&gt;\n&nbsp;&nbsp;&lt;div&nbsp;class=&quot;carousel-inner&quot;&nbsp;role=&quot;listbox&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&nbsp;active&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;img&nbsp;src=&quot;...&quot;&nbsp;alt=&quot;...&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;carousel-caption&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;img&nbsp;src=&quot;...&quot;&nbsp;alt=&quot;...&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;carousel-caption&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;...\n&nbsp;&nbsp;&lt;/div&gt;\n\n&nbsp;&nbsp;&lt;!--&nbsp;Controls&nbsp;--&gt;\n&nbsp;&nbsp;&lt;a&nbsp;class=&quot;left&nbsp;carousel-control&quot;&nbsp;href=&quot;#carousel-example-generic&quot;&nbsp;role=&quot;button&quot;&nbsp;data-slide=&quot;prev&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;span&nbsp;class=&quot;glyphicon&nbsp;glyphicon-chevron-left&quot;&nbsp;aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;span&nbsp;class=&quot;sr-only&quot;&gt;Previous&lt;/span&gt;\n&nbsp;&nbsp;&lt;/a&gt;\n&nbsp;&nbsp;&lt;a&nbsp;class=&quot;right&nbsp;carousel-control&quot;&nbsp;href=&quot;#carousel-example-generic&quot;&nbsp;role=&quot;button&quot;&nbsp;data-slide=&quot;next&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;span&nbsp;class=&quot;glyphicon&nbsp;glyphicon-chevron-right&quot;&nbsp;aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;span&nbsp;class=&quot;sr-only&quot;&gt;Next&lt;/span&gt;\n&nbsp;&nbsp;&lt;/a&gt;\n&lt;/div&gt;</pre><p><br/></p><p>下面看一下js是怎样实现的：</p><pre class=\"brush:js;toolbar:false\">&#39;use&nbsp;strict&#39;;\n/*滑动组件\n*&nbsp;adsId&nbsp;广告id\n*&nbsp;containerId&nbsp;自定义广告容器ID\n*&nbsp;showPoint&nbsp;是否显示小圆点&nbsp;默认false\n*&nbsp;*/\n\nfunction&nbsp;initSlides(jsonData){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;jsonData&nbsp;=&nbsp;jsonData&nbsp;||&nbsp;{};\n&nbsp;&nbsp;&nbsp;&nbsp;jsonData.adsId&nbsp;=&nbsp;jsonData.adsId&nbsp;||&nbsp;&#39;&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;jsonData.containerId&nbsp;=&nbsp;jsonData.containerId&nbsp;||&nbsp;&#39;&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;jsonData.showPoint&nbsp;=&nbsp;jsonData.showPoint&nbsp;||&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;if(jsonData.adsId&nbsp;&amp;&amp;&nbsp;jsonData.containerId){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.init(jsonData);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n\n\ninitSlides.prototype&nbsp;=&nbsp;{\n\n&nbsp;&nbsp;&nbsp;&nbsp;init&nbsp;:&nbsp;function(jsonData){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$.ajax({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url:&quot;/content/requestAds/ads/item?uid=&quot;+jsonData.adsId,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&quot;get&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataType:&quot;json&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success:function(data){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!data){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(data.type&nbsp;===&nbsp;&quot;1&quot;){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;imgContent&nbsp;=&nbsp;data.content;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;imgList&nbsp;=&nbsp;imgContent.replace(/},/g,&quot;};&quot;).split(&quot;;&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;adsTemp(imgList,jsonData);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;contentObj&nbsp;=&nbsp;JSON.parse(data.content);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;txtHtml&nbsp;=&nbsp;&quot;&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;txtHtml&nbsp;+=&nbsp;&quot;&lt;a&nbsp;href=&#39;&quot;+contentObj.link+&quot;&#39;&nbsp;target=&#39;_blank&#39;&gt;&lt;i&nbsp;class=&#39;fa&nbsp;fa-tags&#39;&gt;&lt;/i&gt;&quot;+contentObj.title+&quot;&lt;/a&gt;&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;#&quot;+jsonData.containerId).html(txtHtml);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;}\n};\n\nfunction&nbsp;adsTemp(imgList,jsonData){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;imgIcons&nbsp;=&nbsp;&quot;&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;imgItems&nbsp;=&nbsp;&quot;&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;for(var&nbsp;i=0;i&lt;imgList.length;i++){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;item&nbsp;=&nbsp;JSON.parse(imgList[i]);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(i==0){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imgIcons&nbsp;+=&nbsp;&quot;&lt;li&nbsp;data-target=&#39;#carousel-example-generic&#39;&nbsp;data-slide-to=&#39;0&#39;&nbsp;class=&#39;active&#39;&gt;&lt;/li&gt;&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imgItems&nbsp;+=&nbsp;&quot;&lt;div&nbsp;class=&#39;item&nbsp;active&#39;&gt;&lt;a&nbsp;href=&#39;&quot;+item.link+&quot;&#39;&nbsp;target=&#39;&quot;+item.target+&quot;&#39;&gt;&lt;img&nbsp;width=&#39;&quot;+item.width+&quot;&#39;&nbsp;height=&#39;&quot;+item.height+&quot;&#39;&nbsp;src=&#39;&quot;+item.sImg+&quot;&#39;&nbsp;alt=&#39;&quot;+item.discription+&quot;&#39;&gt;&lt;/a&gt;&lt;/div&gt;&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imgIcons&nbsp;+=&nbsp;&quot;&lt;li&nbsp;data-target=&#39;#carousel-example-generic&#39;&nbsp;data-slide-to=&#39;&quot;+i+&quot;&#39;&gt;&lt;/li&gt;&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imgItems&nbsp;+=&nbsp;&quot;&lt;div&nbsp;class=&#39;item&#39;&gt;&lt;a&nbsp;href=&#39;&quot;+item.link+&quot;&#39;&nbsp;target=&#39;&quot;+item.target+&quot;&#39;&gt;&lt;img&nbsp;width=&#39;&quot;+item.width+&quot;&#39;&nbsp;height=&#39;&quot;+item.height+&quot;&#39;&nbsp;src=&#39;&quot;+item.sImg+&quot;&#39;&nbsp;alt=&#39;&quot;+item.discription+&quot;&#39;&gt;&lt;/a&gt;&lt;/div&gt;&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;adsHtml&nbsp;=&nbsp;`\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id=&quot;carousel-example-generic&quot;&nbsp;class=&quot;carousel&nbsp;slide&quot;&nbsp;data-ride=&quot;carousel&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;Indicators&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ol&nbsp;class=&quot;carousel-indicators&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;${jsonData.showPoint&nbsp;?&nbsp;imgIcons&nbsp;:&nbsp;&#39;&#39;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ol&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;Wrapper&nbsp;for&nbsp;slides&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;carousel-inner&quot;&nbsp;role=&quot;listbox&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;${imgItems}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;Controls&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a&nbsp;class=&quot;left&nbsp;carousel-control&nbsp;${imgList.length&nbsp;==&nbsp;1&nbsp;?&nbsp;&#39;hide&#39;&nbsp;:&nbsp;&#39;&#39;}&quot;&nbsp;href=&quot;#carousel-example-generic&quot;&nbsp;role=&quot;button&quot;&nbsp;data-slide=&quot;prev&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span&nbsp;class=&quot;glyphicon&nbsp;glyphicon-chevron-left&quot;&nbsp;aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span&nbsp;class=&quot;sr-only&quot;&gt;Previous&lt;/span&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/a&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a&nbsp;class=&quot;right&nbsp;carousel-control&nbsp;${imgList.length&nbsp;==&nbsp;1&nbsp;?&nbsp;&#39;hide&#39;&nbsp;:&nbsp;&#39;&#39;}&quot;&nbsp;href=&quot;#carousel-example-generic&quot;&nbsp;role=&quot;button&quot;&nbsp;data-slide=&quot;next&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span&nbsp;class=&quot;glyphicon&nbsp;glyphicon-chevron-right&quot;&nbsp;aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span&nbsp;class=&quot;sr-only&quot;&gt;Next&lt;/span&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/a&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;`;\n&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;#&quot;+jsonData.containerId).html(adsHtml);\n\n}</pre><p><br/></p><p>在需要添加广告的位置加入代码：</p><pre class=\"brush:js;toolbar:false\">&lt;div&nbsp;id=&quot;expressAds1&quot;&gt;&lt;/div&gt;</pre><p>在页面初始化时加入代码：<br/></p><pre class=\"brush:js;toolbar:false\">$(function(){\n	new&nbsp;initSlides({\n		adsId&nbsp;:&nbsp;&#39;Vkbq3feZg&#39;,\n		containerId&nbsp;:&nbsp;&#39;expressAds1&#39;\n	})\n})</pre><p><br/></p><p>这里提供三个参数：</p><p>1、adsId 传入新增广告的key，可以在后台查看</p><p>2、containerId 传入需要插入广告位置的id，自定义即可</p><p>3、如果需要小圆点显示出来，设置&nbsp;showPoint 属性为 true</p><p><br/></p><p>其实重写的目的也是为了熟悉一下es6的语法，突然感觉，某些地方（特别是在html拼接）用es6的语法更加直观，省了很多麻烦，以上实现思路是这样的：通过调用接口获取广告相关信息，填入到组装好的html中，当然中间针对不同参数也进行了特别处理。比如，针对单图片是不需要滑动的，去掉了左右的切换图标等，实现效果：</p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_10_21_15_0_18_234_1001.jpg\" title=\"\" alt=\"DoraCMS广告模块.jpg\"/></p>','[{\"type\":\"contents\",\"content\":\"  DoraCMS 后台是有广告模块的，下面简要介绍一下DoraCMS的广告模块可以做什么：\\n  1、友情链接\\n  2、简单的文本链接\\n  3、图片广告\\n  以上的内容都可以在后台添加\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_10_21_15_6_13_890_1002.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n  但是怎么展示呢，展示功能之前就做了，今天做了进一步优化，以面向对象的方式介绍一下图片广告的展示：\\n\\n  前端的图片广告展示，默认使用了bootstrap的一个叫 Carousel 的插件，是什么样的呢：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_10_21_14_49_39_232_1000.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n它具备了幻灯片的基础功能，可以轮播并可以随意切换。DoraCMS目前使用它作为前端展现广告的方式。它的结构是这样的：\\n&lt;div id=\\\"carousel-example-generic\\\" class=\\\"carousel slide\\\" data-ride=\\\"carousel\\\"&gt;\\n  &lt;!-- Indicators --&gt;\\n  &lt;ol class=\\\"carousel-indicators\\\"&gt;\\n    &lt;li data-target=\\\"#carousel-example-generic\\\" data-slide-to=\\\"0\\\" class=\\\"active\\\"&gt;&lt;/li&gt;\\n    &lt;li data-target=\\\"#carousel-example-generic\\\" data-slide-to=\\\"1\\\"&gt;&lt;/li&gt;\\n    &lt;li data-target=\\\"#carousel-example-generic\\\" data-slide-to=\\\"2\\\"&gt;&lt;/li&gt;\\n  &lt;/ol&gt;\\n\\n  &lt;!-- Wrapper for slides --&gt;\\n  &lt;div class=\\\"carousel-inner\\\" role=\\\"listbox\\\"&gt;\\n    &lt;div class=\\\"item active\\\"&gt;\\n      &lt;img src=\\\"...\\\" alt=\\\"...\\\"&gt;\\n      &lt;div class=\\\"carousel-caption\\\"&gt;\\n        ...\\n      &lt;/div&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"item\\\"&gt;\\n      &lt;img src=\\\"...\\\" alt=\\\"...\\\"&gt;\\n      &lt;div class=\\\"carousel-caption\\\"&gt;\\n        ...\\n      &lt;/div&gt;\\n    &lt;/div&gt;\\n    ...\\n  &lt;/div&gt;\\n\\n  &lt;!-- Controls --&gt;\\n  &lt;a class=\\\"left carousel-control\\\" href=\\\"#carousel-example-generic\\\" role=\\\"button\\\" data-slide=\\\"prev\\\"&gt;\\n    &lt;span class=\\\"glyphicon glyphicon-chevron-left\\\" aria-hidden=\\\"true\\\"&gt;&lt;/span&gt;\\n    &lt;span class=\\\"sr-only\\\"&gt;Previous&lt;/span&gt;\\n  &lt;/a&gt;\\n  &lt;a class=\\\"right carousel-control\\\" href=\\\"#carousel-example-generic\\\" role=\\\"button\\\" data-slide=\\\"next\\\"&gt;\\n    &lt;span class=\\\"glyphicon glyphicon-chevron-right\\\" aria-hidden=\\\"true\\\"&gt;&lt;/span&gt;\\n    &lt;span class=\\\"sr-only\\\"&gt;Next&lt;/span&gt;\\n  &lt;/a&gt;\\n&lt;/div&gt;\\n\\n下面看一下js是怎样实现的：\\n\'use strict\';\\n/*滑动组件\\n* adsId 广告id\\n* containerId 自定义广告容器ID\\n* showPoint 是否显示小圆点 默认false\\n* */\\n\\nfunction initSlides(jsonData){\\n    var jsonData = jsonData || {};\\n    jsonData.adsId = jsonData.adsId || \'\';\\n    jsonData.containerId = jsonData.containerId || \'\';\\n    jsonData.showPoint = jsonData.showPoint || false;\\n    if(jsonData.adsId &amp;&amp; jsonData.containerId){\\n        this.init(jsonData);\\n    }\\n}\\n\\n\\ninitSlides.prototype = {\\n\\n    init : function(jsonData){\\n        $.ajax({\\n            url:\\\"/content/requestAds/ads/item?uid=\\\"+jsonData.adsId,\\n            type:\\\"get\\\",\\n            dataType:\\\"json\\\",\\n            success:function(data){\\n                if(!data){\\n                    return;\\n                }\\n                if(data.type === \\\"1\\\"){\\n                    var imgContent = data.content;\\n                    var imgList = imgContent.replace(/},/g,\\\"};\\\").split(\\\";\\\");\\n                    adsTemp(imgList,jsonData);\\n                }else{\\n                    var contentObj = JSON.parse(data.content);\\n                    var txtHtml = \\\"\\\";\\n                    txtHtml += \\\"&lt;a href=\'\\\"+contentObj.link+\\\"\' target=\'_blank\'&gt;&lt;i class=\'fa fa-tags\'&gt;&lt;/i&gt;\\\"+contentObj.title+\\\"&lt;/a&gt;\\\";\\n                    $(\\\"#\\\"+jsonData.containerId).html(txtHtml);\\n                }\\n\\n            }\\n        });\\n    }\\n};\\n\\nfunction adsTemp(imgList,jsonData){\\n    var imgIcons = \\\"\\\";\\n    var imgItems = \\\"\\\";\\n    for(var i=0;i&lt;imgList.length;i++){\\n        var item = JSON.parse(imgList[i]);\\n        if(i==0){\\n            imgIcons += \\\"&lt;li data-target=\'#carousel-example-generic\' data-slide-to=\'0\' class=\'active\'&gt;&lt;/li&gt;\\\";\\n            imgItems += \\\"&lt;div class=\'item active\'&gt;&lt;a href=\'\\\"+item.link+\\\"\' target=\'\\\"+item.target+\\\"\'&gt;&lt;img width=\'\\\"+item.width+\\\"\' height=\'\\\"+item.height+\\\"\' src=\'\\\"+item.sImg+\\\"\' alt=\'\\\"+item.discription+\\\"\'&gt;&lt;/a&gt;&lt;/div&gt;\\\";\\n        }\\n        else{\\n            imgIcons += \\\"&lt;li data-target=\'#carousel-example-generic\' data-slide-to=\'\\\"+i+\\\"\'&gt;&lt;/li&gt;\\\";\\n            imgItems += \\\"&lt;div class=\'item\'&gt;&lt;a href=\'\\\"+item.link+\\\"\' target=\'\\\"+item.target+\\\"\'&gt;&lt;img width=\'\\\"+item.width+\\\"\' height=\'\\\"+item.height+\\\"\' src=\'\\\"+item.sImg+\\\"\' alt=\'\\\"+item.discription+\\\"\'&gt;&lt;/a&gt;&lt;/div&gt;\\\";\\n        }\\n    }\\n\\n    var adsHtml = `\\n        &lt;div id=\\\"carousel-example-generic\\\" class=\\\"carousel slide\\\" data-ride=\\\"carousel\\\"&gt;\\n        &lt;!-- Indicators --&gt;\\n        &lt;ol class=\\\"carousel-indicators\\\"&gt;\\n            ${jsonData.showPoint ? imgIcons : \'\'}\\n        &lt;/ol&gt;\\n\\n        &lt;!-- Wrapper for slides --&gt;\\n        &lt;div class=\\\"carousel-inner\\\" role=\\\"listbox\\\"&gt;\\n            ${imgItems}\\n        &lt;/div&gt;\\n\\n        &lt;!-- Controls --&gt;\\n        &lt;a class=\\\"left carousel-control ${imgList.length == 1 ? \'hide\' : \'\'}\\\" href=\\\"#carousel-example-generic\\\" role=\\\"button\\\" data-slide=\\\"prev\\\"&gt;\\n            &lt;span class=\\\"glyphicon glyphicon-chevron-left\\\" aria-hidden=\\\"true\\\"&gt;&lt;/span&gt;\\n            &lt;span class=\\\"sr-only\\\"&gt;Previous&lt;/span&gt;\\n        &lt;/a&gt;\\n        &lt;a class=\\\"right carousel-control ${imgList.length == 1 ? \'hide\' : \'\'}\\\" href=\\\"#carousel-example-generic\\\" role=\\\"button\\\" data-slide=\\\"next\\\"&gt;\\n            &lt;span class=\\\"glyphicon glyphicon-chevron-right\\\" aria-hidden=\\\"true\\\"&gt;&lt;/span&gt;\\n            &lt;span class=\\\"sr-only\\\"&gt;Next&lt;/span&gt;\\n        &lt;/a&gt;\\n    &lt;/div&gt;\\n\\n    `;\\n    $(\\\"#\\\"+jsonData.containerId).html(adsHtml);\\n\\n}\\n\\n在需要添加广告的位置加入代码：\\n&lt;div id=\\\"expressAds1\\\"&gt;&lt;/div&gt;\\n在页面初始化时加入代码：\\n$(function(){\\n\\tnew initSlides({\\n\\t\\tadsId : \'Vkbq3feZg\',\\n\\t\\tcontainerId : \'expressAds1\'\\n\\t})\\n})\\n\\n这里提供三个参数：\\n1、adsId 传入新增广告的key，可以在后台查看\\n2、containerId 传入需要插入广告位置的id，自定义即可\\n3、如果需要小圆点显示出来，设置 showPoint 属性为 true\\n\\n其实重写的目的也是为了熟悉一下es6的语法，突然感觉，某些地方（特别是在html拼接）用es6的语法更加直观，省了很多麻烦，以上实现思路是这样的：通过调用接口获取广告相关信息，填入到组装好的html中，当然中间针对不同参数也进行了特别处理。比如，针对单图片是不需要滑动的，去掉了左右的切换图标等，实现效果：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_10_21_15_0_18_234_1001.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445409892000.jpg','2015-10-21 07:01:10','2020-08-20 15:44:15'),(270,'windows+安卓调试Hybrid混合应用的实践','windows+安卓调试Hybrid混合应用的实践','2','1','','Hybrid','2',NULL,'','开发Hybrid混合应用时，很多人都觉得调试是一件比较麻烦的事情，因为它可能会依赖于app环境，绝不是普通的h5页面那么简单。','1','','','0:01',762,'2','0',NULL,0,'0',224238,'<p><span style=\"margin-left: 10px;\"><br/></span></p><p><span style=\"margin-left: 10px;\">本文作者：imweb helinjiang</span>\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style=\"margin-left: 10px;\">原文出处：<a href=\"http://imweb.io/topic/56b768ed5c49f9d377ed8ef2\">imweb社区</a></span>\n &nbsp; <br/></p><p>&nbsp; &nbsp; &nbsp;&nbsp; <strong style=\"margin-left: 10px;\"></strong><br/></p><p>开发Hybrid混合应用时，很多人都觉得调试是一件比较麻烦的事情，因为它可能会依赖于app环境，绝不是普通的h5页面那么简单。</p><p>前些日子一直做手Q上的页面开发，针对如何调试，有一些心得，在此记录。注意，本文内容仅限于在windows中调试安卓系统中的Hybrid混合应用。本文是在 @<a href=\"https://github.com/feix760\" target=\"_blank\">feix760</a> 相关文档基础上整理而来，并作了适当的内容补充，在此特别表示感谢！</p><h2 id=\"1-\">1. 原理简介</h2><p>借助Chrome的DevTools工具，连接手机后，可以呼起Chrome浏览器中的开发者工具，然后就能够像调试普通页面一样调试手机中的页面。</p><p>更详细的细节，请看 <a href=\"https://developers.google.com/web/tools/chrome-devtools/debug/remote-debugging/remote-debugging\" target=\"_blank\">官方说明</a>。</p><h2 id=\"2-\">2. 安卓手机</h2><p>从 <strong>Android 4.4</strong> 开始，webkit是支持远程调试的，不过需要将app的debug模式打开，可以使用如下代码：</p><pre class=\"hljs javascript\">WebView.setWebContentsDebuggingEnabled(true);</pre><p>由于大部分 App 的 debug 模式是关闭的，即便是内部 App，比如 QQ/微信，要去找一个开启了debug 模式的版本还是比较麻烦的。因此需要使用借助第三方工具来强制开启任何 App 的 <strong>Android webview debug模式</strong>，使之可以使用 chrome inspect。<strong>而这个工具就是 Xposed </strong>。</p><p>我们已经提供了一份要安装的文件，请首先到 <a href=\"https://github.com/feix760/WebViewDebugHook\" target=\"_blank\">https://github.com/feix760/WebViewDebugHook</a> 下载文件。</p><h3 id=\"2-1-root-\">2.1 root设备</h3><p>因为涉及到 root 权限，因此需要将手机进行 root。有很多工具可以来 root，比如KingRoot、一键root、360一键root等。如果你安装了QQ电脑管家，可以在“电脑管家-工具箱-其他”列表里面看到KingRoot。</p><h3 id=\"2-2-xposed-\">2.2 安装xposed框架</h3><p>在下载文件的hook.zip中，找到 <strong>de.robv.android.xposed.installer_v33_36570c.apk</strong>，安装之。也可以去 <a href=\"http://repo.xposed.info/module/de.robv.android.xposed.installer\" target=\"_blank\">官网</a> 下载。</p><h3 id=\"2-3-xposed-webview-debugging-\">2.3 安装xposed webview debugging模块</h3><p>在下载文件的hook.zip中，找到 <strong>WebViewDebugHook.apk</strong>，安装之。</p><h3 id=\"2-4-xposed\">2.4 激活Xposed</h3><p>安装后上述两个apk之后，可以看到手机上面出现了一个叫 <strong>Xposed Installer</strong> 的图标，点击进去之后会看到提示说Xposed未激活，点击红色字体部分，会切换到另外一条页面，点击“安装/更新”按钮即可。</p><p><img alt=\"FsU6GtkbkKsAu5O1TN14ixn1eaM2.png\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_2_26_17_35_16_561_1009.png\" title=\"\"/></p><p>但有部分手机会出现类似如下的错误，导致无法点击“安装/更新”，目前已知的是部分版本的MIUI是会出现这个问题的（红米Note和小米Note试过不行，但小米4是没问题的）。</p><p><img alt=\"FoB7kotxxLrzskJXK5Dh0MFFTY1M.png\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_2_26_17_35_32_197_1010.png\" title=\"\"/></p><p>安装完成之后，重启再打开，再点击刚才点击过的地方，切入页面之后，勾选，再重启，重启之后即激活了Xposed。</p><p><img alt=\"FpcxK9Al1macGpj90bhDG2xmt9yL.png\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_2_26_17_34_52_984_1008.png\" title=\"\"/></p><p><img alt=\"FsGGDwdDAXHBnUMo-h9C5G6qxi5a.png\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_2_26_17_35_39_512_1011.png\" title=\"\"/></p><h3 id=\"2-5-qq-\">2.5 关于QQ等</h3><p>QQ等默认会使用X5内核，把下载文件中的 <strong>debug.conf</strong> 放在sd卡根目录下就可以强制它使用 Android 自带 webview 。</p><h2 id=\"3-fiddler\">3. Fiddler</h2><p>Fiddler是最强大最好用的Web调试工具之一，它能记录所有客户端和服务器的http和https请求，允许监视，设置断点，甚至修改输入输出数据．所以无论是从事什么开发，哪种语言，只要你想了解HTTP，这个工具就值得你去了解。</p><p>在Windows中下载Fiddler2或Fiddler4，安装完成之后，点击菜单中的Tools-Fiddler \nOptions，之后会弹出一个设置面板，切换到Connections 标签页，设置其端口号为8888，且勾选 “Allow remote \ncomputers to connect”</p><blockquote><p>Fiddler是以代理web服务器的形式工作的，它使用代理地址：127.0.0.1,端口:8888。当Fiddler退出的时候它会自动注\n销，这样就不会影响别的程序。不过如果Fiddler非正常退出，这时候因为Fiddler没有自动注销，会造成网页无法访问。解决的办法是重新启动下\nFiddler。</p></blockquote><h2 id=\"4-\">4. 测试连接</h2><p>我们推荐PC和手机在同一个局域网内，这样比较好操作，这也意味着如果是台式机，则需要安装无线网卡。</p><p>按照以下步骤：</p><ol class=\" list-paddingleft-2\"><li><p>PC和手机都在同一个局域网内</p></li><li><p>获取PC的IP地址（如果其有多个IP地址，记得是和手机在同一个局域网内的IP地址）</p></li><li><p>设置手机连接wifi时启用 http 代理，其中代理ip就是PC的ip，端口号填写Fiddler中设置了的8888</p></li><li><p>在手机上使用浏览器打开任意一个网页，观察PC端Fiddler是否已经成功代理了手机上发出的http请求。</p></li><li><p>PC 上使用 chrome 打开 chrome://inspect ，然后打开任意 App 的 webview ，此时就应该能够在chrome浏览器上看到出现了可调试的入口，点击 &quot;inspect&quot;，即可打开调试工具，此时就可以愉快的调试了。</p></li></ol><p><br/></p>','[{\"type\":\"contents\",\"content\":\"\\n\\n本文作者：imweb helinjiang                      原文出处：imweb社区   \\n       \\n开发Hybrid混合应用时，很多人都觉得调试是一件比较麻烦的事情，因为它可能会依赖于app环境，绝不是普通的h5页面那么简单。\\n前些日子一直做手Q上的页面开发，针对如何调试，有一些心得，在此记录。注意，本文内容仅限于在windows中调试安卓系统中的Hybrid混合应用。本文是在 @feix760 相关文档基础上整理而来，并作了适当的内容补充，在此特别表示感谢！\\n1. 原理简介\\n借助Chrome的DevTools工具，连接手机后，可以呼起Chrome浏览器中的开发者工具，然后就能够像调试普通页面一样调试手机中的页面。\\n更详细的细节，请看 官方说明。\\n2. 安卓手机\\n从 Android 4.4 开始，webkit是支持远程调试的，不过需要将app的debug模式打开，可以使用如下代码：\\nWebView.setWebContentsDebuggingEnabled(true);\\n由于大部分 App 的 debug 模式是关闭的，即便是内部 App，比如 QQ/微信，要去找一个开启了debug 模式的版本还是比较麻烦的。因此需要使用借助第三方工具来强制开启任何 App 的 Android webview debug模式，使之可以使用 chrome inspect。而这个工具就是 Xposed 。\\n我们已经提供了一份要安装的文件，请首先到 https://github.com/feix760/WebViewDebugHook 下载文件。\\n2.1 root设备\\n因为涉及到 root 权限，因此需要将手机进行 root。有很多工具可以来 root，比如KingRoot、一键root、360一键root等。如果你安装了QQ电脑管家，可以在“电脑管家-工具箱-其他”列表里面看到KingRoot。\\n2.2 安装xposed框架\\n在下载文件的hook.zip中，找到 de.robv.android.xposed.installer_v33_36570c.apk，安装之。也可以去 官网 下载。\\n2.3 安装xposed webview debugging模块\\n在下载文件的hook.zip中，找到 WebViewDebugHook.apk，安装之。\\n2.4 激活Xposed\\n安装后上述两个apk之后，可以看到手机上面出现了一个叫 Xposed Installer 的图标，点击进去之后会看到提示说Xposed未激活，点击红色字体部分，会切换到另外一条页面，点击“安装/更新”按钮即可。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_2_26_17_35_16_561_1009.png\"},{\"type\":\"contents\",\"content\":\"\\n但有部分手机会出现类似如下的错误，导致无法点击“安装/更新”，目前已知的是部分版本的MIUI是会出现这个问题的（红米Note和小米Note试过不行，但小米4是没问题的）。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_2_26_17_35_32_197_1010.png\"},{\"type\":\"contents\",\"content\":\"\\n安装完成之后，重启再打开，再点击刚才点击过的地方，切入页面之后，勾选，再重启，重启之后即激活了Xposed。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_2_26_17_34_52_984_1008.png\"},{\"type\":\"contents\",\"content\":\"\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_2_26_17_35_39_512_1011.png\"},{\"type\":\"contents\",\"content\":\"\\n2.5 关于QQ等\\nQQ等默认会使用X5内核，把下载文件中的 debug.conf 放在sd卡根目录下就可以强制它使用 Android 自带 webview 。\\n3. Fiddler\\nFiddler是最强大最好用的Web调试工具之一，它能记录所有客户端和服务器的http和https请求，允许监视，设置断点，甚至修改输入输出数据．所以无论是从事什么开发，哪种语言，只要你想了解HTTP，这个工具就值得你去了解。\\n在Windows中下载Fiddler2或Fiddler4，安装完成之后，点击菜单中的Tools-Fiddler Options，之后会弹出一个设置面板，切换到Connections 标签页，设置其端口号为8888，且勾选 “Allow remote computers to connect”\\nFiddler是以代理web服务器的形式工作的，它使用代理地址：127.0.0.1,端口:8888。当Fiddler退出的时候它会自动注销，这样就不会影响别的程序。不过如果Fiddler非正常退出，这时候因为Fiddler没有自动注销，会造成网页无法访问。解决的办法是重新启动下Fiddler。\\n\\n4. 测试连接\\n我们推荐PC和手机在同一个局域网内，这样比较好操作，这也意味着如果是台式机，则需要安装无线网卡。\\n按照以下步骤：\\nPC和手机都在同一个局域网内\\n获取PC的IP地址（如果其有多个IP地址，记得是和手机在同一个局域网内的IP地址）\\n设置手机连接wifi时启用 http 代理，其中代理ip就是PC的ip，端口号填写Fiddler中设置了的8888\\n在手机上使用浏览器打开任意一个网页，观察PC端Fiddler是否已经成功代理了手机上发出的http请求。\\nPC 上使用 chrome 打开 chrome://inspect ，然后打开任意 App 的 webview ，此时就应该能够在chrome浏览器上看到出现了可调试的入口，点击 \\\"inspect\\\"，即可打开调试工具，此时就可以愉快的调试了。\\n\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20160226173157.jpg','2016-02-26 09:36:06','2020-08-20 15:44:10'),(271,'再爬梧桐山','再爬梧桐山','1','1','','梧桐山','2',NULL,'','程序猿最缺的就是锻炼了，长期的对着电脑，肚子周围积累了厚厚的脂肪，于是突然感觉到，是该锻炼的时候了。','1','','','0:01',762,'2','0',NULL,0,'0',225136,'<p>程序猿最缺的就是锻炼了，长期的对着电脑，肚子周围积累了厚厚的脂肪，于是突然感觉到，是该锻炼的时候了。</p><p>于是昨天和瓶子一起去爬梧桐山，去征服一直没征服过的大梧桐。不得不说，大梧桐实在是太高了。</p><p><br/></p><p style=\"text-align: center;\"><img alt=\"再爬梧桐山1.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_5_19_14_53_708_1001.jpg\" title=\"\"/></p><p><br/></p><p>不过这次没有走弯路，为了避免走崎岖的山路。上山之前我就仔细研究了一下地图，照着步道路线一路而上。到达山顶大概三点半，足足爬的有3个半小时。中途还遇到了短暂的大雨，不过似乎也凉爽了许多。不知道走了一共有多少里，只知道到达山顶，腿脚已经不听使唤了。</p><p><br/></p><p>在这里也得特别表扬下瓶子，作为女汉纸一枚，居然一路而上，和我一起到达山顶，不得不赞一个。</p><p><br/></p><p style=\"text-align: center;\"><img alt=\"再爬梧桐山3.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_5_19_15_12_209_1002.jpg\" title=\"\"/></p><p><br/></p><p>&nbsp; 山顶上的人很多，看来很多人很早就过来了。值得开心的是，在山顶居然还遇到了乐队，休息之余，听听音乐，别有一番情趣，疲劳慢慢舒缓了下来。</p><p><br/></p><p style=\"text-align: center;\"><img alt=\"再爬梧桐山2.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_5_19_15_33_519_1003.jpg\" title=\"\"/></p><p><br/></p><p>建议爬梧桐山的朋友，不要走没路的偏道，上是可以上，但是非常消耗体力，梧桐山的步道是很成熟的，直接沿着走就行了，崎岖的山路可以爬，但是要想到山顶非常不容易，下山也很好时，当然，体力没问题就不用担心咯。 <br/></p><p><br/></p><p>特别拍了一段，是作者原创哦，大家一起听下： <br/></p><p><br/></p><p style=\"text-align: center;\"><embed type=\"application/x-shockwave-flash\" class=\"edui-faked-video\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" src=\"http://player.youku.com/player.php/sid/XMTMyNzg0ODE2MA==/v.swf\" width=\"650\" height=\"480\" wmode=\"transparent\" play=\"true\" loop=\"false\" menu=\"false\" allowscriptaccess=\"never\" allowfullscreen=\"true\"/></p>','[{\"type\":\"contents\",\"content\":\"程序猿最缺的就是锻炼了，长期的对着电脑，肚子周围积累了厚厚的脂肪，于是突然感觉到，是该锻炼的时候了。\\n于是昨天和瓶子一起去爬梧桐山，去征服一直没征服过的大梧桐。不得不说，大梧桐实在是太高了。\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_5_19_14_53_708_1001.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n不过这次没有走弯路，为了避免走崎岖的山路。上山之前我就仔细研究了一下地图，照着步道路线一路而上。到达山顶大概三点半，足足爬的有3个半小时。中途还遇到了短暂的大雨，不过似乎也凉爽了许多。不知道走了一共有多少里，只知道到达山顶，腿脚已经不听使唤了。\\n\\n在这里也得特别表扬下瓶子，作为女汉纸一枚，居然一路而上，和我一起到达山顶，不得不赞一个。\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_5_19_15_12_209_1002.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n  山顶上的人很多，看来很多人很早就过来了。值得开心的是，在山顶居然还遇到了乐队，休息之余，听听音乐，别有一番情趣，疲劳慢慢舒缓了下来。\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_5_19_15_33_519_1003.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n建议爬梧桐山的朋友，不要走没路的偏道，上是可以上，但是非常消耗体力，梧桐山的步道是很成熟的，直接沿着走就行了，崎岖的山路可以爬，但是要想到山顶非常不容易，下山也很好时，当然，体力没问题就不用担心咯。 \\n\\n特别拍了一段，是作者原创哦，大家一起听下： \\n\\n\"},{\"type\":\"image\",\"content\":\"/ueditor/themes/default/images/spacer.gif\"},{\"type\":\"contents\",\"content\":\"\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444892715000.jpg','2015-09-05 06:51:16','2020-08-20 15:44:25'),(272,'Express 4.8.x—创建mongoose model','创建mongoose model','2','1','','mongoose','2',NULL,'','​mongoose 是优雅MongoDB的对象建模工具，封装了mongodb 的使用方法，让操作更OO 更方便。','1','','','0:01',762,'2','0',NULL,0,'0',224636,'<h3>创建mongoose model</h3><p>mongoose 是优雅MongoDB的对象建模工具，封装了mongodb 的使用方法，让操作更OO 更方便。</p><h4 id=\"-\">安装</h4><pre>$&nbsp;npm&nbsp;install&nbsp;mongoose</pre><h4 id=\"-\">连接数据库</h4><pre>var&nbsp;mongoose&nbsp;=&nbsp;require(&#39;mongoose&#39;);\nmongoose.connect(&#39;mongodb://localhost/test&#39;);</pre><h4 id=\"-schema\">定义 schema</h4><pre>var&nbsp;Schema&nbsp;=&nbsp;mongoose.Schema;\n\nvar&nbsp;blogSchema&nbsp;=&nbsp;new&nbsp;Schema({\n&nbsp;&nbsp;title:&nbsp;&nbsp;String,\n&nbsp;&nbsp;author:&nbsp;String,\n&nbsp;&nbsp;body:&nbsp;&nbsp;&nbsp;String,\n&nbsp;&nbsp;comments:&nbsp;[{&nbsp;body:&nbsp;String,&nbsp;date:&nbsp;Date&nbsp;}],\n&nbsp;&nbsp;date:&nbsp;{&nbsp;type:&nbsp;Date,&nbsp;default:&nbsp;Date.now&nbsp;},\n&nbsp;&nbsp;hidden:&nbsp;Boolean,\n&nbsp;&nbsp;meta:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;votes:&nbsp;Number,\n&nbsp;&nbsp;&nbsp;&nbsp;favs:&nbsp;&nbsp;Number\n&nbsp;&nbsp;}\n});</pre><p>schema 定义了类型化模块。mongoose &nbsp;支持的类型有：</p><ul class=\" list-paddingleft-2\"><li><p>String</p></li><li><p>Number</p></li><li><p>Date</p></li><li><p>Buffer</p></li><li><p>Boolean</p></li><li><p>Mixed</p></li><li><p>ObjectId</p></li><li><p>Array</p></li></ul><h4 id=\"-model-\">创建 model 模型</h4><pre>var&nbsp;Blog&nbsp;=&nbsp;mongoose.model(&#39;Blog&#39;,&nbsp;blogSchema);</pre><p>终于Blog模型建好了。</p>','[{\"type\":\"contents\",\"content\":\"创建mongoose model\\nmongoose 是优雅MongoDB的对象建模工具，封装了mongodb 的使用方法，让操作更OO 更方便。\\n安装\\n$ npm install mongoose\\n连接数据库\\nvar mongoose = require(\'mongoose\');\\nmongoose.connect(\'mongodb://localhost/test\');\\n定义 schema\\nvar Schema = mongoose.Schema;\\n\\nvar blogSchema = new Schema({\\n  title:  String,\\n  author: String,\\n  body:   String,\\n  comments: [{ body: String, date: Date }],\\n  date: { type: Date, default: Date.now },\\n  hidden: Boolean,\\n  meta: {\\n    votes: Number,\\n    favs:  Number\\n  }\\n});\\nschema 定义了类型化模块。mongoose  支持的类型有：\\nString\\nNumber\\nDate\\nBuffer\\nBoolean\\nMixed\\nObjectId\\nArray\\n\\n创建 model 模型\\nvar Blog = mongoose.model(\'Blog\', blogSchema);\\n终于Blog模型建好了。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445059957000.jpg','2015-10-17 05:33:12','2020-08-20 15:44:22'),(273,'第9天response 响应渲染 —动态渲染实例','动态渲染实例','2','1','','动态渲染','2',NULL,'','首先，我们建立一个views目录，用来储存动态模板文件，里面建立两个文件index.html和about.html','1','','','0:01',762,'2','0',NULL,0,'0',223543,'<h3>动态渲染实例</h3><p>首先，我们建立一个views目录，用来储存动态模板文件，里面建立两个文件<code>index.html</code>和<code>about.html</code></p><p><code>index.html</code></p><pre>&lt;!doctype&nbsp;html&gt;\n&lt;html&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;&lt;%=locals.title%&gt;&lt;/title&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;body&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hello:&lt;%=locals.name%&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/body&gt;\n&lt;/html&gt;</pre><p><span class=\"invade-word\">book</span><code>about.html</code><span class=\"invade-word\">book</span></p><pre>&lt;!doctype&nbsp;html&gt;\n&lt;html&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;locals.title&lt;/title&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;body&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;About&nbsp;me:&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;table&nbsp;border=1&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%&nbsp;locals.info.forEach(function(r){%&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;%=r[0]%&gt;&lt;/td&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;%=r[1]%&gt;&lt;/td&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%&nbsp;})&nbsp;%&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/table&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/body&gt;\n&lt;/html&gt;</pre><p><code>run.js</code>运行文件</p><pre>var&nbsp;fk&nbsp;=&nbsp;require(&quot;../..&quot;)\n&nbsp;&nbsp;&nbsp;,App&nbsp;=&nbsp;fk.App\n&nbsp;&nbsp;&nbsp;,download&nbsp;=&nbsp;fk.download\n&nbsp;&nbsp;&nbsp;,app&nbsp;=&nbsp;new&nbsp;App\n&nbsp;&nbsp;&nbsp;,view&nbsp;=&nbsp;fk.view\n&nbsp;&nbsp;&nbsp;,fs&nbsp;=&nbsp;require(&quot;fs&quot;);\n\n&nbsp;&nbsp;&nbsp;app.use(view(__dirname+&quot;/views&quot;));\n\n&nbsp;&nbsp;&nbsp;app.get(&quot;/&quot;,function(req,res){\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.view(&quot;index.html&quot;,{title:&quot;index&nbsp;page&quot;,name:&quot;leo&quot;});\n&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;app.get(&quot;/about&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;info&nbsp;=&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&quot;Name&quot;,&quot;Leo&quot;],\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&quot;Tel&quot;,&quot;213442322&quot;],\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&quot;Card&quot;,&quot;322232&quot;]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.view(&#39;about.html&#39;,{title:&quot;about&nbsp;me&nbsp;info&quot;,info:info});\n&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;app.listen(3000);</pre><p>当启动 node run 后，在浏览器中输入 <a href=\"http://localhost:3000\">http://localhost:3000</a> &nbsp;会显示index.html模板+数据的页面。下面是浏览器显示的html源代码：</p><pre>&lt;!doctype&nbsp;html&gt;\n&lt;html&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;index&nbsp;page&lt;/title&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;body&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hello:leo\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/body&gt;\n&lt;/html&gt;</pre><p>当输入 <a href=\"http://localhost:3000/about\">http://localhost:3000/about</a> &nbsp;时，浏览器页面的html源代码如下：</p><pre>&lt;!doctype&nbsp;html&gt;\n&lt;html&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;locals.title&lt;/title&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;body&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;About&nbsp;me:&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;table&nbsp;border=1&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Name&lt;/td&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Leo&lt;/td&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Tel&lt;/td&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;213442322&lt;/td&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Card&lt;/td&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;322232&lt;/td&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/table&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/body&gt;\n&lt;/html&gt;</pre><p>通过这个实例，我们知道了动态模板渲染的重要性，想象一下如果web框架没有这个功能，那还能用它做什么呢。明天是stuwebfk框架开发的最后一天，让stuwebfk具有session会话特性。</p>','[{\"type\":\"contents\",\"content\":\"动态渲染实例\\n首先，我们建立一个views目录，用来储存动态模板文件，里面建立两个文件index.html和about.html\\nindex.html\\n&lt;!doctype html&gt;\\n&lt;html&gt;\\n    &lt;head&gt;\\n        &lt;title&gt;&lt;%=locals.title%&gt;&lt;/title&gt;\\n    &lt;/head&gt;\\n    &lt;body&gt;\\n        hello:&lt;%=locals.name%&gt;\\n    &lt;/body&gt;\\n&lt;/html&gt;\\nbookabout.htmlbook\\n&lt;!doctype html&gt;\\n&lt;html&gt;\\n    &lt;head&gt;\\n        &lt;title&gt;locals.title&lt;/title&gt;\\n    &lt;/head&gt;\\n    &lt;body&gt;\\n        &lt;p&gt;About me:&lt;/p&gt;\\n        &lt;table border=1&gt;\\n        &lt;% locals.info.forEach(function(r){%&gt;\\n            &lt;tr&gt;\\n                &lt;td&gt;&lt;%=r[0]%&gt;&lt;/td&gt;\\n                &lt;td&gt;&lt;%=r[1]%&gt;&lt;/td&gt;\\n            &lt;/tr&gt;\\n        &lt;% }) %&gt;\\n        &lt;/table&gt;\\n    &lt;/body&gt;\\n&lt;/html&gt;\\nrun.js运行文件\\nvar fk = require(\\\"../..\\\")\\n   ,App = fk.App\\n   ,download = fk.download\\n   ,app = new App\\n   ,view = fk.view\\n   ,fs = require(\\\"fs\\\");\\n\\n   app.use(view(__dirname+\\\"/views\\\"));\\n\\n   app.get(\\\"/\\\",function(req,res){\\n\\n       res.view(\\\"index.html\\\",{title:\\\"index page\\\",name:\\\"leo\\\"});\\n   })\\n\\n   app.get(\\\"/about\\\",function(req,res){\\n       var info = [\\n          [\\\"Name\\\",\\\"Leo\\\"],\\n          [\\\"Tel\\\",\\\"213442322\\\"],\\n          [\\\"Card\\\",\\\"322232\\\"]\\n       ]\\n       res.view(\'about.html\',{title:\\\"about me info\\\",info:info});\\n   })\\n\\n   app.listen(3000);\\n当启动 node run 后，在浏览器中输入 http://localhost:3000  会显示index.html模板+数据的页面。下面是浏览器显示的html源代码：\\n&lt;!doctype html&gt;\\n&lt;html&gt;\\n    &lt;head&gt;\\n        &lt;title&gt;index page&lt;/title&gt;\\n    &lt;/head&gt;\\n    &lt;body&gt;\\n        hello:leo\\n    &lt;/body&gt;\\n&lt;/html&gt;\\n当输入 http://localhost:3000/about  时，浏览器页面的html源代码如下：\\n&lt;!doctype html&gt;\\n&lt;html&gt;\\n    &lt;head&gt;\\n        &lt;title&gt;locals.title&lt;/title&gt;\\n    &lt;/head&gt;\\n    &lt;body&gt;\\n        &lt;p&gt;About me:&lt;/p&gt;\\n        &lt;table border=1&gt;\\n\\n            &lt;tr&gt;\\n                &lt;td&gt;Name&lt;/td&gt;\\n                &lt;td&gt;Leo&lt;/td&gt;\\n            &lt;/tr&gt;\\n\\n            &lt;tr&gt;\\n                &lt;td&gt;Tel&lt;/td&gt;\\n                &lt;td&gt;213442322&lt;/td&gt;\\n            &lt;/tr&gt;\\n\\n            &lt;tr&gt;\\n                &lt;td&gt;Card&lt;/td&gt;\\n                &lt;td&gt;322232&lt;/td&gt;\\n            &lt;/tr&gt;\\n\\n        &lt;/table&gt;\\n    &lt;/body&gt;\\n&lt;/html&gt;\\n通过这个实例，我们知道了动态模板渲染的重要性，想象一下如果web框架没有这个功能，那还能用它做什么呢。明天是stuwebfk框架开发的最后一天，让stuwebfk具有session会话特性。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445236156000.jpg','2015-10-19 06:29:21','2020-08-20 15:44:17'),(274,'Node.js API实例讲解——其他工具模块','其他工具模块','2','1','','工具模块','2',NULL,'','node.js 提供了setTimeout定时器方式，对应清除定时器的方法是 clearTimeout。','1','','','0:01',762,'2','0',NULL,0,'0',223629,'<h3>其他工具模块</h3><h3 id=\"-\">定时器</h3><p>node.js 提供了setTimeout定时器方式，对应清除定时器的方法是 clearTimeout。</p><p>这里没有介绍 setInterval，因为其不确定性和诸多问题，这里不进行详说。所以下一个定论，不要再任何时候使用 setInterval。</p><p>定时器的意思就是，设定一个倒计时，时间一到就执行指定的函数。</p><p>看下面例子：</p><pre class=\"code\">function&nbsp;test(){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;hello&quot;);\n}\nsetTimeout(test,3000);\nconsole.log(&quot;lol&quot;);</pre><p>先打印出“lol”，等待大约3000后，执行test函数，打印出“hello”。这里为什么用大约呢？因为虽然设置了3秒，但系统如果忙碌会推迟执行test。</p><p>clearTimeout是清除定时器的方法，看下面代码：</p><pre class=\"code\">function&nbsp;test(){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;hello&quot;);\n}\nvar&nbsp;time&nbsp;=&nbsp;setTimeout(test,3000);\nclearTimeout(time);\nconsole.log(&quot;lol&quot;);</pre><p>setTimeout方法会返回一个id值，通过clearTimeout(id)就可清除该监听器。所以这段代码只会打印出lol。</p><p>setTimeout还可以为定时器方法传递参数，看下面例子：</p><pre class=\"code\">function&nbsp;test(name){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;hello&nbsp;&quot;,name);\n}\nvar&nbsp;time&nbsp;=&nbsp;setTimeout(test,3000,&quot;brighthas&quot;);\n\nconsole.log(&quot;lol&quot;);</pre><p>打印结果:</p><pre class=\"code\">lol\nhello&nbsp;&nbsp;brighthas</pre><p>node.js 还提供了一个 setImmediate方法，该方法不是定时器，它的作用类似于 setTimeout(test,0)，定时为0 时，并不会马上执行，系统内部会设定最小值 &gt; 0 。&nbsp;</p><p>可以简单理解为 setImmediate 的性能要比 setTimeout(... , 0) 好很多。看下面例子：</p><pre class=\"code\">function&nbsp;test(name){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;hello&nbsp;&quot;,name);\n}\nvar&nbsp;time&nbsp;=&nbsp;setImmediate(test,&quot;brighthas&quot;);\n\nconsole.log(&quot;lol&quot;);</pre><p>打印结果：</p><pre class=\"code\">lol\nhello&nbsp;&nbsp;brighthas</pre><p>setImmediate方法也会返回一个id，通过clearImmeiate(id) 方式删除。</p><hr/><h3 id=\"util-\">util模块</h3><p>util是个工具箱，有一些很有用处的工具，下面进行介绍。</p><p>var util = require(&quot;util&quot;) 导入模块。</p><h5 id=\"util-format-str-\">util.format(str, [...])</h5><p>这个方法会把字符串格式化后返回</p><p>第一个参数是一个字符串，其中包含零个或多个占位符。每一个占位符被替换其相应的参数。如果占位符没有相应的参数，将占位符不会被替换，而是直接打印出占位符的字面量。</p><p>支持的占位符：</p><p>％s - 字符串。<span class=\"invade-word\">look</span></p><p>％d - 数字（包括整数和浮点数）。</p><p>％j - JSON。<span class=\"invade-word\">good</span></p><h5 id=\"-1-\">测试1，只有第一个参数的情况。</h5><pre class=\"code\">&nbsp;util.format(&quot;hello&nbsp;world&quot;);&nbsp;//&nbsp;&nbsp;hello&nbsp;world</pre><h5 id=\"-2-\">测试2，具有占位符，但后面无对应参数。</h5><pre class=\"code\">&nbsp;util.format(&quot;hello&nbsp;%s&quot;);&nbsp;&nbsp;&nbsp;//&nbsp;hello&nbsp;%s</pre><h5 id=\"-3-\">测试3，具有占位符，后面对应相关参数。</h5><pre class=\"code\">&nbsp;util.format(&quot;hello&nbsp;%s&quot;,&quot;world!!&quot;);&nbsp;//&nbsp;hello&nbsp;world!!\n&nbsp;util.format(&quot;1+1&nbsp;=&nbsp;%d&quot;,2);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;打印出&nbsp;1+1&nbsp;=&nbsp;2\n&nbsp;util.format(&quot;a&nbsp;json&nbsp;object&nbsp;:&nbsp;%j&quot;,{bookAuthor:&quot;brighthas&quot;});&nbsp;//&nbsp;打印出&nbsp;a&nbsp;json&nbsp;object&nbsp;:&nbsp;{&quot;bookAuthor&quot;:&quot;brighthas&quot;}</pre><h5 id=\"-4-\">测试4，多个参数。</h5><pre class=\"code\">&nbsp;util.format(&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;);&nbsp;&nbsp;&nbsp;//&nbsp;打印出&nbsp;aa&nbsp;bb&nbsp;cc&nbsp;,&nbsp;之间有一个空格。\n&nbsp;util.format(&quot;aa&nbsp;%d%s&quot;,121,&quot;bbb&quot;)&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;打印出&nbsp;aa&nbsp;121bbb&nbsp;\n&nbsp;util.format(&quot;aa&nbsp;%d%s&quot;,&quot;ccc&quot;,&quot;bbb&quot;)&nbsp;&nbsp;//&nbsp;&nbsp;打印出&nbsp;aa&nbsp;NaNbbb&nbsp;&nbsp;我们会看到&nbsp;ccc&nbsp;参数被转换为NaN，\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;说明内部会根据占位符类型转换相应的参数。</pre><h5 id=\"util-debug-string-\">util.debug(string)</h5><p>这个方法是把字符串信息同步输出到stderr。</p><pre class=\"code\">util.debug(&quot;have&nbsp;a&nbsp;bug.&quot;);</pre><p>打印出：</p><pre class=\"code\">DEBUG:&nbsp;have&nbsp;a&nbsp;bug.</pre><h5 id=\"util-error-\">util.error([...])</h5><p>这个方法是把字符串信息输出到stderr，可以输入多个字符串。</p><pre class=\"code\">util.error(&quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;);</pre><p>打印结果：</p><pre class=\"code\">aaa\nbbb\nccc</pre><h5 id=\"util-puts-\">util.puts([...])</h5><p>这个方法是把字符串信息同步输出到stdout，可以输入多个字符串。</p><pre class=\"code\">util.puts(&quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;);</pre><p>打印结果：</p><pre class=\"code\">aaa\nbbb\nccc</pre><h5 id=\"util-print-\">util.print([...])</h5><p>这个方法是把字符串信息同步输出到stdout，可以输入多个字符串，打印在一行显示。</p><pre class=\"code\">util.print(&quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;);</pre><p>打印结果：</p><pre class=\"code\">aaabbbccc</pre><h5 id=\"util-log-string-\">util.log(string)</h5><p>这个方法是把字符串信息输出到stdout，并且前面加上发布时间。</p><pre class=\"code\">util.log(&quot;abc&quot;)</pre><p>打印结果:</p><pre class=\"code\">12&nbsp;Apr&nbsp;09:51:27&nbsp;-&nbsp;abc</pre><h5 id=\"util-inspect-object-options-\">util.inspect(object, [options])</h5><p>这个方法是返回javascript对象的字符串形式，第二个参数是可选项。</p><p>options { showHidden 参数默认false，true表示打印出非枚举属性 depth 查询对象深度默认2，depath设置为null表示无限深度（一查到底）， colors选项默认false，true表示颜色显示}</p><p>看下面例子：</p><p>例1&nbsp;</p><pre class=\"code\">function&nbsp;User(name){\n&nbsp;this.name&nbsp;=&nbsp;name;\n}\nvar&nbsp;u&nbsp;=&nbsp;new&nbsp;User(&quot;leo&quot;);\n\nvar&nbsp;util&nbsp;=&nbsp;require(&quot;util&quot;);\n\nconsole.log(util.inspect(u,{colors:true}));</pre><p>打印出：</p><pre class=\"code\">{name:&#39;leo&#39;}</pre><p>其中 leo 是带有颜色的。</p><h5 id=\"util-isarray-object-\">util.isArray(object)</h5><p><span class=\"invade-word\">sex</span>判断对象是否是数组类型<span class=\"invade-word\">sex</span></p><h5 id=\"util-isregexp-object-\">util.isRegExp(object)</h5><p>判断对象是否是正则类型</p><h5 id=\"util-isdate-object-\">util.isDate(object)</h5><p>判断对象是否是日期类型</p><h5 id=\"util-iserror-object-\">util.isError(object)</h5><p>判断对象是否是Error类型</p><h5 id=\"util-inherits-constructor-superconstructor-\">util.inherits(constructor, superConstructor)</h5><p>继承prototype ，这里显示一下util.inherits源代码：</p><pre class=\"code\">exports.inherits&nbsp;=&nbsp;function(ctor,&nbsp;superCtor)&nbsp;{\n&nbsp;ctor.super_&nbsp;=&nbsp;superCtor;\n&nbsp;ctor.prototype&nbsp;=&nbsp;Object.create(superCtor.prototype,&nbsp;{\n&nbsp;&nbsp;&nbsp;constructor:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;ctor,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enumerable:&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writable:&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;configurable:&nbsp;true\n&nbsp;&nbsp;&nbsp;}\n&nbsp;});\n};</pre><p>下面举个例子：</p><pre class=\"code\">function&nbsp;A(){}\nA.prototype.abc&nbsp;=&nbsp;function(){}\nfunction&nbsp;B(){}\n\nvar&nbsp;util&nbsp;=&nbsp;require(&quot;util&quot;);\nutil.inherits(B,A);\n\nconsole.log(B.prototype.abc);</pre><p>这样B.prototype 就具有了abc方法。</p><hr/><h3 id=\"domain-\">domain模块</h3><p>domain模块的意义是建立一个环境，在这个域环境内的代码如果有异步或同步错误都可以统一处理。下面举个例子：</p><pre class=\"code\">var&nbsp;Domain&nbsp;=&nbsp;require(&quot;domain&quot;);\nvar&nbsp;domain&nbsp;=&nbsp;Domain.create();\n\ndomain.on(&quot;error&quot;,function(){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;有个错误&quot;)\n});\n\ndomain.run(function(){\n&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;Error(&quot;错误！！！&quot;);\n})</pre><p>运行后打印出 &quot;有个错误&quot;。</p><p>有人说这个好办，用 try ... catch 也可以做到，但如果是异步的话，try ... catch 是处理不了的。</p><p><span class=\"invade-word\">sex</span>下面具体看一下 domain 模块的各个方法<span class=\"invade-word\">this</span></p><h5 id=\"domain-create-\">Domain.create()</h5><p>创建一个 Domain 对象 domain</p><h5 id=\"domain-run-fn-\">domain.run(fn)</h5><p>把要运行的代码加入到域内，可以多次加入。 一旦加入的代码有异常就会触发domain的error事件。</p><h5 id=\"domain-error-\">domain 的 error 事件</h5><p>error事件是当加入domain的代码抛出异常时触发的事件。</p><h5 id=\"domain-bind-callback-\">domain.bind(callback)</h5><p>返回的函数将是一个包装，提供的回调函数。当返回的函数被调用时，被抛出的任何错误，将被路由到域的错误事件。</p><p>看例子：</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\nvar&nbsp;Domain&nbsp;=&nbsp;require(&quot;domain&quot;);\nvar&nbsp;d&nbsp;=&nbsp;Domain.create();\n\nfunction&nbsp;readFile(filename,&nbsp;cb)&nbsp;{\n&nbsp;&nbsp;fs.readFile(filename,&nbsp;&#39;utf8&#39;,&nbsp;d.bind(function(er,&nbsp;data)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cb(er,&nbsp;data&nbsp;?&nbsp;JSON.parse(data)&nbsp;:&nbsp;null);\n&nbsp;&nbsp;}));\n}\n\nd.on(&#39;error&#39;,&nbsp;function(er)&nbsp;{\n&nbsp;&nbsp;console.log(&quot;有错误这里处理！&quot;)\n});\n\nreadFile(&quot;abc.txt&quot;);</pre><h5 id=\"domain-intercept-callback-\">domain.intercept(callback)</h5><p>这个方法和bind方法很类似，但是包装器会把第一个err参数去掉，当有错误时只是单独的触发domain error事件。看下面代码：</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\nvar&nbsp;Domain&nbsp;=&nbsp;require(&quot;domain&quot;);\nvar&nbsp;d&nbsp;=&nbsp;Domain.create();\n\nfunction&nbsp;readFile(filename,&nbsp;cb)&nbsp;{\n&nbsp;&nbsp;//&nbsp;这里没有er\n&nbsp;&nbsp;fs.readFile(filename,&nbsp;&#39;utf8&#39;,&nbsp;d.intercept(function(data)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cb(data&nbsp;?&nbsp;JSON.parse(data)&nbsp;:&nbsp;null);\n&nbsp;&nbsp;}));\n}\n\nd.on(&#39;error&#39;,&nbsp;function(er)&nbsp;{\n&nbsp;&nbsp;console.log(&quot;有错误这里处理！&quot;)\n});\n\nreadFile(&quot;abc.txt&quot;);</pre><h5 id=\"-\">【说明】</h5><p>domain 模块不只这些方法，但除了上述介绍的方法外，其他的方法并没什么用，而且作者本人也不推荐用，所以没有介绍。</p><hr/><h3 id=\"-\">查看操作系统信息</h3><p>这一节很简单，通过这个os模块可以得到操作系统相关的一些信息。var os = require(&quot;os&quot;);得到模块。</p><h5 id=\"os-tmpdir-\">os.tmpdir();</h5><p>得到系统临时文件夹路径。</p><h5 id=\"os-endianness-\">os.endianness();</h5><p>得到CPU字节顺序，在Buffer一章介绍过字节有&quot;BE&quot;和&quot;LE&quot;两种顺序。</p><h5 id=\"os-hostname-\">os.hostname()</h5><p>得到主机名称。</p><h5 id=\"os-type-\">os.type()</h5><p>得到系统类型，比如windows7 得到的结果是 Windows_NT</p><h5 id=\"os-platform-\">os.platform()</h5><p>得到系统平台名称，比如windows7 得到的结果是 win32</p><h5 id=\"os-arch-\">os.arch()</h5><p>得到系统架构名称，比如windows7 得到的结果是 ia32</p><h5 id=\"os-release-\">os.release()</h5><p>得到系统版本</p><h5 id=\"os-uptime-\">os.uptime()</h5><p>得到系统从开机到现在的运行时间，以秒为单位。</p><h5 id=\"os-totalmem-\">os.totalmem()</h5><p><span class=\"invade-word\">this</span>得到内存总大小<span class=\"invade-word\">book</span></p><h5 id=\"os-freemem-\">os.freemem()</h5><p>得到系统可用内存大小</p><h5 id=\"os-cpus-\">os.cpus()</h5><p>得到CPU的信息</p><h5 id=\"os-networkinterfaces-\">os.networkInterfaces()</h5><p>得到全部网络接口信息。</p><h5 id=\"os-eol\">os.EOL</h5><p>得到系统的行结束标记。</p><hr/><h3 id=\"-\">单元测试</h3><p>通过 var assert = require(&quot;assert&quot;) 得到断言模块。</p><p>下面讲解assert的各个测试方法。</p><h5 id=\"assert-value-message-\">assert(value, message)</h5><h5 id=\"assert-ok-value-message-\">assert.ok(value, [message])</h5><p>上面两个方法相同，value如果为真值不会抛出异常，否则会抛出异常，message是错误信息。</p><h5 id=\"assert-equal-actual-expected-message-\">assert.equal(actual, expected, [message])</h5><p>断言 actual与expected相等。</p><h5 id=\"assert-notequal-actual-expected-message-\">assert.notEqual(actual, expected, [message])</h5><p>断言 actual和expected不相等。</p><h5 id=\"assert-deepequal-actual-expected-message-\">assert.deepEqual(actual, expected, [message])</h5><p>断言 actual和expected相等(深度测试)。</p><h5 id=\"assert-notdeepequal-actual-expected-message-\">assert.notDeepEqual(actual, expected, [message])</h5><p>断言 actual和expected不相等（深度测试）。</p><h5 id=\"assert-strictequal-actual-expected-message-\">assert.strictEqual(actual, expected, [message])</h5><p>严格测试actual和expected相等。 相当于 ===</p><h5 id=\"assert-notstrictequal-actual-expected-message-\">assert.notStrictEqual(actual, expected, [message])</h5><p>严格测试actual和expected不相等。相当于 !==&nbsp;</p><h5 id=\"assert-throws-block-error-message-\">assert.throws(block, [error], [message])</h5><p>断言 block 函数会抛出异常。</p><pre class=\"code\">assert.throws(\n&nbsp;&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;Error(&quot;Wrong&nbsp;value&quot;);\n&nbsp;&nbsp;},\n&nbsp;&nbsp;function(err)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(&nbsp;(err&nbsp;instanceof&nbsp;Error)&nbsp;&amp;&amp;&nbsp;/value/.test(err)&nbsp;)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;},\n&nbsp;&nbsp;&quot;unexpected&nbsp;error&quot;\n);</pre><h5 id=\"assert-doesnotthrow-block-message-\">assert.doesNotThrow(block, [message])</h5><p>断言 block 函数不会抛出异常。</p><h5 id=\"assert-iferror-value-\">assert.ifError(value)</h5><p>断言 value是个Error对象。</p><hr/><h3 id=\"-\">路径操作</h3><p>这里的路径含义比较广，包括url，文件系统路径等，下面分别进行讲解。</p><h5 id=\"path-\">path模块</h5><p>这个模块是对文件系统的路径进行转换，它不会直接牵扯到文件系统，而仅仅是对路径字符串进行转换。</p><h6 id=\"path-normalize-p-\">path.normalize(p)</h6><p>路径规范化，说也没用，还是例子最实在。</p><pre class=\"code\">var&nbsp;path&nbsp;=&nbsp;require(&quot;path&quot;);\nconsole.log(\n&nbsp;&nbsp;&nbsp;&nbsp;path.normalize(&quot;c:\\\\windows\\\\system32\\\\..&quot;))\nconsole.log(\n&nbsp;&nbsp;&nbsp;&nbsp;path.normalize(&quot;c:\\\\windows\\\\system32\\\\..\\\\..&quot;))\nconsole.log(\n&nbsp;&nbsp;&nbsp;&nbsp;path.normalize(&quot;/user/home/brighthas/../leo&quot;))</pre><p>打印结果</p><pre class=\"code\">c:\\windows\nc:\\\n\\user\\home\\leo</pre><h6 id=\"path-join-path1-path2-\">path.join([path1], [path2], [...])</h6><p>连接路径，看例子：</p><pre class=\"code\">var&nbsp;path&nbsp;=&nbsp;require(&quot;path&quot;);\nconsole.log(path.join(&quot;c:&quot;,&quot;windows&quot;));\nconsole.log(path.join(&quot;c:&quot;,&quot;windows&quot;,&quot;..&quot;));</pre><p><span class=\"invade-word\">god</span>打印结果<span class=\"invade-word\">good</span></p><pre class=\"code\">c:\\windows\nc:\\</pre><h6 id=\"path-resolve-from-to-\">path.resolve([from ...], to)</h6><p>相当于系统的cd命令，看例子：</p><pre class=\"code\">path.resolve(&#39;/foo/bar&#39;,&nbsp;&#39;./baz&#39;)\n//&nbsp;返回&nbsp;&nbsp;&#39;/foo/bar/baz&#39;\n\npath.resolve(&#39;/foo/bar&#39;,&nbsp;&#39;/tmp/file/&#39;)\n//&nbsp;返回&nbsp;&nbsp;&#39;/tmp/file&#39;\n\npath.resolve(&#39;wwwroot&#39;,&nbsp;&#39;static_files/png/&#39;,&nbsp;&#39;../gif/image.gif&#39;)\n//&nbsp;返回&nbsp;&#39;/home/myself/node/wwwroot/static_files/gif/image.gif&#39;</pre><h6 id=\"path-relative-from-to-\">path.relative(from, to)</h6><p>返回相对路径</p><pre class=\"code\">path.relative(&#39;C:\\\\orandea\\\\test\\\\aaa&#39;,&nbsp;&#39;C:\\\\orandea\\\\impl\\\\bbb&#39;)\n//&nbsp;返回&nbsp;&nbsp;&#39;..\\\\..\\\\impl\\\\bbb&#39;\n\npath.relative(&#39;/data/orandea/test/aaa&#39;,&nbsp;&#39;/data/orandea/impl/bbb&#39;)\n//&nbsp;返回&nbsp;&#39;../../impl/bbb&#39;</pre><h6 id=\"path-dirname-p-\">path.dirname(p)</h6><p>返回目录</p><pre class=\"code\">path.dirname(&#39;/foo/bar/baz/asdf/quux&#39;)\n//&nbsp;返回&nbsp;&#39;/foo/bar/baz/asdf&#39;</pre><h6 id=\"path-basename-p-ext-\">path.basename(p, [ext])</h6><p>返回路径的最后部分</p><pre class=\"code\">path.basename(&#39;/foo/bar/baz/asdf/quux.html&#39;)\n//&nbsp;返回&nbsp;&nbsp;&#39;quux.html&#39;\n\npath.basename(&#39;/foo/bar/baz/asdf/quux.html&#39;,&nbsp;&#39;.html&#39;)\n//&nbsp;返回&nbsp;&nbsp;&#39;quux&#39;</pre><h6 id=\"path-extname-p-\">path.extname(p)</h6><p>返回扩展名</p><pre class=\"code\">path.extname(&#39;index.html&#39;)\n//&nbsp;返回&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;.html&#39;\n\npath.extname(&#39;index.&#39;)\n//&nbsp;返回&nbsp;&nbsp;&nbsp;&nbsp;&#39;.&#39;\n\npath.extname(&#39;index&#39;)\n//&nbsp;返回&nbsp;&nbsp;&nbsp;&nbsp;&#39;&#39;</pre><h6 id=\"path-sep\">path.sep</h6><p>特定系统的文件分割符，windows下是 “\\” linux下是 “/” &nbsp;。</p><h6 id=\"path-delimiter\">path.delimiter</h6><p>特定系统的路径分割符，windows下是 “;” &nbsp;而linux下是 “:” &nbsp;。</p><h5 id=\"url-\">URL模块</h5><p>模块可以对url字符串进行解析和转换。</p><p>下面通过具体例子，来掌握url模块的使用方式。</p><pre class=\"code\">var&nbsp;url&nbsp;=&nbsp;require(&#39;url&#39;);\nvar&nbsp;o&nbsp;=&nbsp;url.parse(&quot;http://user:pass@host.com:8080/p/a/t/h?query=string#hash&quot;)\nconsole.log(o);</pre><p>url.parse把url字符串转换成json对象，会打印出：</p><pre class=\"code\">{&nbsp;protocol:&nbsp;&#39;http:&#39;,\n&nbsp;&nbsp;slashes:&nbsp;true,\n&nbsp;&nbsp;auth:&nbsp;&#39;user:pass&#39;,\n&nbsp;&nbsp;host:&nbsp;&#39;host.com:8080&#39;,\n&nbsp;&nbsp;port:&nbsp;&#39;8080&#39;,\n&nbsp;&nbsp;hostname:&nbsp;&#39;host.com&#39;,\n&nbsp;&nbsp;hash:&nbsp;&#39;#hash&#39;,\n&nbsp;&nbsp;search:&nbsp;&#39;?query=string&#39;,\n&nbsp;&nbsp;query:&nbsp;&#39;query=string&#39;,\n&nbsp;&nbsp;pathname:&nbsp;&#39;/p/a/t/h&#39;,\n&nbsp;&nbsp;path:&nbsp;&#39;/p/a/t/h?query=string&#39;,\n&nbsp;&nbsp;href:&nbsp;&#39;http://user:pass@host.com:8080/p/a/t/h?query=string#hash&#39;&nbsp;}</pre><p>下面把上述的json对象转换为url字符串形式，通过url.format方法</p><pre class=\"code\">url.format({&nbsp;protocol:&nbsp;&#39;http:&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;slashes:&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;auth:&nbsp;&#39;user:pass&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;host:&nbsp;&#39;host.com:8080&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;port:&nbsp;&#39;8080&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;hostname:&nbsp;&#39;host.com&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;hash:&nbsp;&#39;#hash&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;search:&nbsp;&#39;?query=string&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;query:&nbsp;&#39;query=string&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;pathname:&nbsp;&#39;/p/a/t/h&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;path:&nbsp;&#39;/p/a/t/h?query=string&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;href:&nbsp;&#39;http://user:pass@host.com:8080/p/a/t/h?query=string#hash&#39;&nbsp;})</pre><p>得到如下结果：</p><pre class=\"code\">http://user:pass@host.com:8080/p/a/t/h?query=string#hash</pre><p>通过url.resolve功能类似于path.resolve功能，参看官方给的例子。</p><pre class=\"code\">url.resolve(&#39;/one/two/three&#39;,&nbsp;&#39;four&#39;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&#39;/one/two/four&#39;\nurl.resolve(&#39;http://example.com/&#39;,&nbsp;&#39;/one&#39;)&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&#39;http://example.com/one&#39;\nurl.resolve(&#39;http://example.com/one&#39;,&nbsp;&#39;/two&#39;)&nbsp;//&nbsp;&#39;http://example.com/two&#39;</pre><h5 id=\"querystring-\">querystring模块</h5><p>querystring模块能处理url的查询部分。</p><h6 id=\"querystring-stringify-obj-sep-eq-\">querystring.stringify(obj,[sep],[eq])</h6><p>obj参数是要转换的对象，sep[可选参数]表示分割器，默认&amp;。 eq[可选]分配符，默认= 。 看下面官方例子。</p><pre class=\"code\">querystring.stringify({&nbsp;foo:&nbsp;&#39;bar&#39;,&nbsp;baz:&nbsp;[&#39;qux&#39;,&nbsp;&#39;quux&#39;],&nbsp;corge:&nbsp;&#39;&#39;&nbsp;})\n//&nbsp;返回&nbsp;&#39;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=&#39;\n\nquerystring.stringify({foo:&nbsp;&#39;bar&#39;,&nbsp;baz:&nbsp;&#39;qux&#39;},&nbsp;&#39;;&#39;,&nbsp;&#39;:&#39;)\n//&nbsp;返回&nbsp;&#39;foo:bar;baz:qux&#39;</pre><h6 id=\"querystring-parse-str-sep-eq-\">querystring.parse(str, [sep], [eq])</h6><p>这个方法与querystring.stringify正好相反，是把查询字符串形式转换为json形式。看官方例子：</p><pre class=\"code\">querystring.parse(&#39;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge&#39;)\n//&nbsp;返回&nbsp;{&nbsp;foo:&nbsp;&#39;bar&#39;,&nbsp;baz:&nbsp;[&#39;qux&#39;,&nbsp;&#39;quux&#39;],&nbsp;corge:&nbsp;&#39;&#39;&nbsp;}</pre>','[{\"type\":\"contents\",\"content\":\"其他工具模块\\n定时器\\nnode.js 提供了setTimeout定时器方式，对应清除定时器的方法是 clearTimeout。\\n这里没有介绍 setInterval，因为其不确定性和诸多问题，这里不进行详说。所以下一个定论，不要再任何时候使用 setInterval。\\n定时器的意思就是，设定一个倒计时，时间一到就执行指定的函数。\\n看下面例子：\\nfunction test(){\\n    console.log(\\\"hello\\\");\\n}\\nsetTimeout(test,3000);\\nconsole.log(\\\"lol\\\");\\n先打印出“lol”，等待大约3000后，执行test函数，打印出“hello”。这里为什么用大约呢？因为虽然设置了3秒，但系统如果忙碌会推迟执行test。\\nclearTimeout是清除定时器的方法，看下面代码：\\nfunction test(){\\n    console.log(\\\"hello\\\");\\n}\\nvar time = setTimeout(test,3000);\\nclearTimeout(time);\\nconsole.log(\\\"lol\\\");\\nsetTimeout方法会返回一个id值，通过clearTimeout(id)就可清除该监听器。所以这段代码只会打印出lol。\\nsetTimeout还可以为定时器方法传递参数，看下面例子：\\nfunction test(name){\\n    console.log(\\\"hello \\\",name);\\n}\\nvar time = setTimeout(test,3000,\\\"brighthas\\\");\\n\\nconsole.log(\\\"lol\\\");\\n打印结果:\\nlol\\nhello  brighthas\\nnode.js 还提供了一个 setImmediate方法，该方法不是定时器，它的作用类似于 setTimeout(test,0)，定时为0 时，并不会马上执行，系统内部会设定最小值 &gt; 0 。 \\n可以简单理解为 setImmediate 的性能要比 setTimeout(... , 0) 好很多。看下面例子：\\nfunction test(name){\\n    console.log(\\\"hello \\\",name);\\n}\\nvar time = setImmediate(test,\\\"brighthas\\\");\\n\\nconsole.log(\\\"lol\\\");\\n打印结果：\\nlol\\nhello  brighthas\\nsetImmediate方法也会返回一个id，通过clearImmeiate(id) 方式删除。\\nutil模块\\nutil是个工具箱，有一些很有用处的工具，下面进行介绍。\\nvar util = require(\\\"util\\\") 导入模块。\\nutil.format(str, [...])\\n这个方法会把字符串格式化后返回\\n第一个参数是一个字符串，其中包含零个或多个占位符。每一个占位符被替换其相应的参数。如果占位符没有相应的参数，将占位符不会被替换，而是直接打印出占位符的字面量。\\n支持的占位符：\\n％s - 字符串。look\\n％d - 数字（包括整数和浮点数）。\\n％j - JSON。good\\n测试1，只有第一个参数的情况。\\n util.format(\\\"hello world\\\"); //  hello world\\n测试2，具有占位符，但后面无对应参数。\\n util.format(\\\"hello %s\\\");   // hello %s\\n测试3，具有占位符，后面对应相关参数。\\n util.format(\\\"hello %s\\\",\\\"world!!\\\"); // hello world!!\\n util.format(\\\"1+1 = %d\\\",2);    // 打印出 1+1 = 2\\n util.format(\\\"a json object : %j\\\",{bookAuthor:\\\"brighthas\\\"}); // 打印出 a json object : {\\\"bookAuthor\\\":\\\"brighthas\\\"}\\n测试4，多个参数。\\n util.format(\\\"aa\\\",\\\"bb\\\",\\\"cc\\\");   // 打印出 aa bb cc , 之间有一个空格。\\n util.format(\\\"aa %d%s\\\",121,\\\"bbb\\\")    //  打印出 aa 121bbb \\n util.format(\\\"aa %d%s\\\",\\\"ccc\\\",\\\"bbb\\\")  //  打印出 aa NaNbbb  我们会看到 ccc 参数被转换为NaN，\\n                                     //  说明内部会根据占位符类型转换相应的参数。\\nutil.debug(string)\\n这个方法是把字符串信息同步输出到stderr。\\nutil.debug(\\\"have a bug.\\\");\\n打印出：\\nDEBUG: have a bug.\\nutil.error([...])\\n这个方法是把字符串信息输出到stderr，可以输入多个字符串。\\nutil.error(\\\"aaa\\\",\\\"bbb\\\",\\\"ccc\\\");\\n打印结果：\\naaa\\nbbb\\nccc\\nutil.puts([...])\\n这个方法是把字符串信息同步输出到stdout，可以输入多个字符串。\\nutil.puts(\\\"aaa\\\",\\\"bbb\\\",\\\"ccc\\\");\\n打印结果：\\naaa\\nbbb\\nccc\\nutil.print([...])\\n这个方法是把字符串信息同步输出到stdout，可以输入多个字符串，打印在一行显示。\\nutil.print(\\\"aaa\\\",\\\"bbb\\\",\\\"ccc\\\");\\n打印结果：\\naaabbbccc\\nutil.log(string)\\n这个方法是把字符串信息输出到stdout，并且前面加上发布时间。\\nutil.log(\\\"abc\\\")\\n打印结果:\\n12 Apr 09:51:27 - abc\\nutil.inspect(object, [options])\\n这个方法是返回javascript对象的字符串形式，第二个参数是可选项。\\noptions { showHidden 参数默认false，true表示打印出非枚举属性 depth 查询对象深度默认2，depath设置为null表示无限深度（一查到底）， colors选项默认false，true表示颜色显示}\\n看下面例子：\\n例1 \\nfunction User(name){\\n this.name = name;\\n}\\nvar u = new User(\\\"leo\\\");\\n\\nvar util = require(\\\"util\\\");\\n\\nconsole.log(util.inspect(u,{colors:true}));\\n打印出：\\n{name:\'leo\'}\\n其中 leo 是带有颜色的。\\nutil.isArray(object)\\nsex判断对象是否是数组类型sex\\nutil.isRegExp(object)\\n判断对象是否是正则类型\\nutil.isDate(object)\\n判断对象是否是日期类型\\nutil.isError(object)\\n判断对象是否是Error类型\\nutil.inherits(constructor, superConstructor)\\n继承prototype ，这里显示一下util.inherits源代码：\\nexports.inherits = function(ctor, superCtor) {\\n ctor.super_ = superCtor;\\n ctor.prototype = Object.create(superCtor.prototype, {\\n   constructor: {\\n     value: ctor,\\n     enumerable: false,\\n     writable: true,\\n     configurable: true\\n   }\\n });\\n};\\n下面举个例子：\\nfunction A(){}\\nA.prototype.abc = function(){}\\nfunction B(){}\\n\\nvar util = require(\\\"util\\\");\\nutil.inherits(B,A);\\n\\nconsole.log(B.prototype.abc);\\n这样B.prototype 就具有了abc方法。\\ndomain模块\\ndomain模块的意义是建立一个环境，在这个域环境内的代码如果有异步或同步错误都可以统一处理。下面举个例子：\\nvar Domain = require(\\\"domain\\\");\\nvar domain = Domain.create();\\n\\ndomain.on(\\\"error\\\",function(){\\n    console.log(\\\"有个错误\\\")\\n});\\n\\ndomain.run(function(){\\n    throw new Error(\\\"错误！！！\\\");\\n})\\n运行后打印出 \\\"有个错误\\\"。\\n有人说这个好办，用 try ... catch 也可以做到，但如果是异步的话，try ... catch 是处理不了的。\\nsex下面具体看一下 domain 模块的各个方法this\\nDomain.create()\\n创建一个 Domain 对象 domain\\ndomain.run(fn)\\n把要运行的代码加入到域内，可以多次加入。 一旦加入的代码有异常就会触发domain的error事件。\\ndomain 的 error 事件\\nerror事件是当加入domain的代码抛出异常时触发的事件。\\ndomain.bind(callback)\\n返回的函数将是一个包装，提供的回调函数。当返回的函数被调用时，被抛出的任何错误，将被路由到域的错误事件。\\n看例子：\\nvar fs = require(\\\"fs\\\");\\nvar Domain = require(\\\"domain\\\");\\nvar d = Domain.create();\\n\\nfunction readFile(filename, cb) {\\n  fs.readFile(filename, \'utf8\', d.bind(function(er, data) {\\n    return cb(er, data ? JSON.parse(data) : null);\\n  }));\\n}\\n\\nd.on(\'error\', function(er) {\\n  console.log(\\\"有错误这里处理！\\\")\\n});\\n\\nreadFile(\\\"abc.txt\\\");\\ndomain.intercept(callback)\\n这个方法和bind方法很类似，但是包装器会把第一个err参数去掉，当有错误时只是单独的触发domain error事件。看下面代码：\\nvar fs = require(\\\"fs\\\");\\nvar Domain = require(\\\"domain\\\");\\nvar d = Domain.create();\\n\\nfunction readFile(filename, cb) {\\n  // 这里没有er\\n  fs.readFile(filename, \'utf8\', d.intercept(function(data) {\\n    return cb(data ? JSON.parse(data) : null);\\n  }));\\n}\\n\\nd.on(\'error\', function(er) {\\n  console.log(\\\"有错误这里处理！\\\")\\n});\\n\\nreadFile(\\\"abc.txt\\\");\\n【说明】\\ndomain 模块不只这些方法，但除了上述介绍的方法外，其他的方法并没什么用，而且作者本人也不推荐用，所以没有介绍。\\n查看操作系统信息\\n这一节很简单，通过这个os模块可以得到操作系统相关的一些信息。var os = require(\\\"os\\\");得到模块。\\nos.tmpdir();\\n得到系统临时文件夹路径。\\nos.endianness();\\n得到CPU字节顺序，在Buffer一章介绍过字节有\\\"BE\\\"和\\\"LE\\\"两种顺序。\\nos.hostname()\\n得到主机名称。\\nos.type()\\n得到系统类型，比如windows7 得到的结果是 Windows_NT\\nos.platform()\\n得到系统平台名称，比如windows7 得到的结果是 win32\\nos.arch()\\n得到系统架构名称，比如windows7 得到的结果是 ia32\\nos.release()\\n得到系统版本\\nos.uptime()\\n得到系统从开机到现在的运行时间，以秒为单位。\\nos.totalmem()\\nthis得到内存总大小book\\nos.freemem()\\n得到系统可用内存大小\\nos.cpus()\\n得到CPU的信息\\nos.networkInterfaces()\\n得到全部网络接口信息。\\nos.EOL\\n得到系统的行结束标记。\\n单元测试\\n通过 var assert = require(\\\"assert\\\") 得到断言模块。\\n下面讲解assert的各个测试方法。\\nassert(value, message)\\nassert.ok(value, [message])\\n上面两个方法相同，value如果为真值不会抛出异常，否则会抛出异常，message是错误信息。\\nassert.equal(actual, expected, [message])\\n断言 actual与expected相等。\\nassert.notEqual(actual, expected, [message])\\n断言 actual和expected不相等。\\nassert.deepEqual(actual, expected, [message])\\n断言 actual和expected相等(深度测试)。\\nassert.notDeepEqual(actual, expected, [message])\\n断言 actual和expected不相等（深度测试）。\\nassert.strictEqual(actual, expected, [message])\\n严格测试actual和expected相等。 相当于 ===\\nassert.notStrictEqual(actual, expected, [message])\\n严格测试actual和expected不相等。相当于 !== \\nassert.throws(block, [error], [message])\\n断言 block 函数会抛出异常。\\nassert.throws(\\n  function() {\\n    throw new Error(\\\"Wrong value\\\");\\n  },\\n  function(err) {\\n    if ( (err instanceof Error) &amp;&amp; /value/.test(err) ) {\\n      return true;\\n    }\\n  },\\n  \\\"unexpected error\\\"\\n);\\nassert.doesNotThrow(block, [message])\\n断言 block 函数不会抛出异常。\\nassert.ifError(value)\\n断言 value是个Error对象。\\n路径操作\\n这里的路径含义比较广，包括url，文件系统路径等，下面分别进行讲解。\\npath模块\\n这个模块是对文件系统的路径进行转换，它不会直接牵扯到文件系统，而仅仅是对路径字符串进行转换。\\npath.normalize(p)\\n路径规范化，说也没用，还是例子最实在。\\nvar path = require(\\\"path\\\");\\nconsole.log(\\n    path.normalize(\\\"c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\..\\\"))\\nconsole.log(\\n    path.normalize(\\\"c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\..\\\\\\\\..\\\"))\\nconsole.log(\\n    path.normalize(\\\"/user/home/brighthas/../leo\\\"))\\n打印结果\\nc:\\\\windows\\nc:\\\\\\n\\\\user\\\\home\\\\leo\\npath.join([path1], [path2], [...])\\n连接路径，看例子：\\nvar path = require(\\\"path\\\");\\nconsole.log(path.join(\\\"c:\\\",\\\"windows\\\"));\\nconsole.log(path.join(\\\"c:\\\",\\\"windows\\\",\\\"..\\\"));\\ngod打印结果good\\nc:\\\\windows\\nc:\\\\\\npath.resolve([from ...], to)\\n相当于系统的cd命令，看例子：\\npath.resolve(\'/foo/bar\', \'./baz\')\\n// 返回  \'/foo/bar/baz\'\\n\\npath.resolve(\'/foo/bar\', \'/tmp/file/\')\\n// 返回  \'/tmp/file\'\\n\\npath.resolve(\'wwwroot\', \'static_files/png/\', \'../gif/image.gif\')\\n// 返回 \'/home/myself/node/wwwroot/static_files/gif/image.gif\'\\npath.relative(from, to)\\n返回相对路径\\npath.relative(\'C:\\\\\\\\orandea\\\\\\\\test\\\\\\\\aaa\', \'C:\\\\\\\\orandea\\\\\\\\impl\\\\\\\\bbb\')\\n// 返回  \'..\\\\\\\\..\\\\\\\\impl\\\\\\\\bbb\'\\n\\npath.relative(\'/data/orandea/test/aaa\', \'/data/orandea/impl/bbb\')\\n// 返回 \'../../impl/bbb\'\\npath.dirname(p)\\n返回目录\\npath.dirname(\'/foo/bar/baz/asdf/quux\')\\n// 返回 \'/foo/bar/baz/asdf\'\\npath.basename(p, [ext])\\n返回路径的最后部分\\npath.basename(\'/foo/bar/baz/asdf/quux.html\')\\n// 返回  \'quux.html\'\\n\\npath.basename(\'/foo/bar/baz/asdf/quux.html\', \'.html\')\\n// 返回  \'quux\'\\npath.extname(p)\\n返回扩展名\\npath.extname(\'index.html\')\\n// 返回     \'.html\'\\n\\npath.extname(\'index.\')\\n// 返回    \'.\'\\n\\npath.extname(\'index\')\\n// 返回    \'\'\\npath.sep\\n特定系统的文件分割符，windows下是 “\\\\” linux下是 “/”  。\\npath.delimiter\\n特定系统的路径分割符，windows下是 “;”  而linux下是 “:”  。\\nURL模块\\n模块可以对url字符串进行解析和转换。\\n下面通过具体例子，来掌握url模块的使用方式。\\nvar url = require(\'url\');\\nvar o = url.parse(\\\"http://user:pass@host.com:8080/p/a/t/h?query=string#hash\\\")\\nconsole.log(o);\\nurl.parse把url字符串转换成json对象，会打印出：\\n{ protocol: \'http:\',\\n  slashes: true,\\n  auth: \'user:pass\',\\n  host: \'host.com:8080\',\\n  port: \'8080\',\\n  hostname: \'host.com\',\\n  hash: \'#hash\',\\n  search: \'?query=string\',\\n  query: \'query=string\',\\n  pathname: \'/p/a/t/h\',\\n  path: \'/p/a/t/h?query=string\',\\n  href: \'http://user:pass@host.com:8080/p/a/t/h?query=string#hash\' }\\n下面把上述的json对象转换为url字符串形式，通过url.format方法\\nurl.format({ protocol: \'http:\',\\n    slashes: true,\\n    auth: \'user:pass\',\\n    host: \'host.com:8080\',\\n    port: \'8080\',\\n    hostname: \'host.com\',\\n    hash: \'#hash\',\\n    search: \'?query=string\',\\n    query: \'query=string\',\\n    pathname: \'/p/a/t/h\',\\n    path: \'/p/a/t/h?query=string\',\\n    href: \'http://user:pass@host.com:8080/p/a/t/h?query=string#hash\' })\\n得到如下结果：\\nhttp://user:pass@host.com:8080/p/a/t/h?query=string#hash\\n通过url.resolve功能类似于path.resolve功能，参看官方给的例子。\\nurl.resolve(\'/one/two/three\', \'four\')         // \'/one/two/four\'\\nurl.resolve(\'http://example.com/\', \'/one\')    // \'http://example.com/one\'\\nurl.resolve(\'http://example.com/one\', \'/two\') // \'http://example.com/two\'\\nquerystring模块\\nquerystring模块能处理url的查询部分。\\nquerystring.stringify(obj,[sep],[eq])\\nobj参数是要转换的对象，sep[可选参数]表示分割器，默认&amp;。 eq[可选]分配符，默认= 。 看下面官方例子。\\nquerystring.stringify({ foo: \'bar\', baz: [\'qux\', \'quux\'], corge: \'\' })\\n// 返回 \'foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=\'\\n\\nquerystring.stringify({foo: \'bar\', baz: \'qux\'}, \';\', \':\')\\n// 返回 \'foo:bar;baz:qux\'\\nquerystring.parse(str, [sep], [eq])\\n这个方法与querystring.stringify正好相反，是把查询字符串形式转换为json形式。看官方例子：\\nquerystring.parse(\'foo=bar&amp;baz=qux&amp;baz=quux&amp;corge\')\\n// 返回 { foo: \'bar\', baz: [\'qux\', \'quux\'], corge: \'\' }\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444889830000.jpg','2015-08-23 14:54:05','2020-08-20 15:44:25'),(275,'DoraCMS的静态文件压缩','DoraCMS的静态文件压缩','1','1','','静态文件压缩','2',NULL,'','前一段时间看了桑大的gulp教程，对gulpjs有了初步的了解，入门比较容易，下面简要介绍一下gulp：简单的讲，gulp是一个构建工具，一个streaming构建工具，一个nodejs写的构建工具','1','','','0:01',762,'2','0',NULL,0,'0',223227,'<p>前一段时间看了桑大的gulp教程，对gulpjs有了初步的了解，入门比较容易，下面简要介绍一下gulp：</p><p>简单的讲，gulp是一个构建工具，一个streaming构建工具，一个nodejs写的构建工具</p><p>总之，它是一个构建工具</p><p>那么什么是构建工具呢？</p><p>构建工具本质就是为了自动化构建，解放程序员、提供程序员效率的工具</p><p>我们来举个例子，最早的make，因为每次都cc编译，太恶心了，而且当文件特别多的时候，编译速度又慢下来，能不能按需编译，增量编译？</p><p>make是通过makefile文件来描述源程序之间的相互关系并自动维护编译工作的</p><p>例子就不举了，写过c的人多少都知道点</p><p>其实编译在每个语言世界里，都是痛，骨子里的风湿一样，于是产生了make类似的东西</p><p><br/></p><p>&nbsp; &nbsp; 比如java里的ant，c#里的NAnt</p><p>&nbsp; &nbsp; 比如ruby里rake</p><p>&nbsp; &nbsp; 比如coffeescript里有cake</p><p><br/></p><p>它们的共同特点</p><p><br/></p><p>&nbsp; &nbsp; 1)基于task，定义简单</p><p>&nbsp; &nbsp; 2)task有串行，并行，作业依赖等控制方式</p><p>&nbsp; &nbsp; 3)通过xxxfile来定义task</p><p>如此看来，nodejs的构建系统也应该是这样的，可以说gulp是node世界里和上面几个构建工具最像的一个，它们太像了，以至于学习起来特别简单</p><p>其实上面还提了一个streaming，是流式的意思，后面讲原理的时候会深入讲解</p><p><br/></p><p>更具体的内容可以参考桑大的文档，写的非常详细：&nbsp;<a href=\"http://i5ting.github.io/stuq-gulp/\" target=\"_blank\" title=\"gulp实战和原理解析\">StuQ-Gulp实战和原理解析</a></p><p><br/></p><p>针对DoraCMS的静态资源压缩，我写了几个非常简单的脚本，对前台和后台的css和js进行压缩处理，压缩的好处这里就不多说了，这里看下如何实现：</p><p><br/></p><p>DoraCMS的静态资源都在public文件夹下：</p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_21_15_743_1016.jpg\" title=\"\" alt=\"DoraCMS静态文件压缩.jpg\"/></p><p><br/></p><p>经常变化的是 javascripts和stylesheets两个文件夹，我们只对这两个文件夹进行压缩处理。</p><p><br/></p><p>1、全局安装gulp</p><pre class=\"brush:js;toolbar:false\">npm&nbsp;install&nbsp;--global&nbsp;gulp</pre><p><br/></p><p>2、在DoraCMS的package.json下添加下面的依赖：</p><pre class=\"brush:js;toolbar:false\">&quot;del&quot;:&nbsp;&quot;^2.0.2&quot;,\n&quot;gulp-concat&quot;:&nbsp;&quot;^2.6.0&quot;,\n&quot;gulp-minify-css&quot;:&nbsp;&quot;^1.2.1&quot;,\n&quot;gulp-uglify&quot;:&nbsp;&quot;^1.4.2&quot;,\n&quot;gulp&quot;:&nbsp;&quot;^3.9.0&quot;</pre><p><br/></p><p>3、在DoraCMS根目录下执行 npm install 安装这些依赖</p><p>4、在DoraCMS根目录下添加gulpfile.js文件，代码如下：</p><pre class=\"brush:js;toolbar:false\">/**\n&nbsp;*&nbsp;Created&nbsp;by&nbsp;Administrator&nbsp;on&nbsp;2015/10/22.\n&nbsp;*/\nvar&nbsp;gulp&nbsp;=&nbsp;require(&#39;gulp&#39;);\nvar&nbsp;uglify&nbsp;=&nbsp;require(&#39;gulp-uglify&#39;);\nvar&nbsp;concat&nbsp;=&nbsp;require(&#39;gulp-concat&#39;);\nvar&nbsp;minifycss&nbsp;=&nbsp;require(&#39;gulp-minify-css&#39;);\nvar&nbsp;del&nbsp;=&nbsp;require(&#39;del&#39;);\nvar&nbsp;path&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;scripts:[&#39;js/dora-angular.js&#39;,&#39;js/dora.public.js&#39;]\n};\n\ngulp.task(&#39;default&#39;,&nbsp;[&#39;clean&#39;]&nbsp;,function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;将你的默认的任务代码放在这\n&nbsp;&nbsp;&nbsp;&nbsp;gulp.start(&#39;mainjs&#39;,&#39;backstyle&#39;);\n});\n\n\n//原量输入所有plugins\ngulp.task(&#39;plugsjs&#39;,function(){\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;gulp.src(&#39;public/plugins/**/*.*&#39;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(gulp.dest(&#39;build/public/plugins&#39;));\n});\n\n//原量输入所有ueditor相关文件\ngulp.task(&#39;ueditor&#39;,function(){\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;gulp.src(&#39;public/ueditor/**/*.*&#39;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(gulp.dest(&#39;build/public/ueditor&#39;));\n});\n\n//原量输出所有样式文件\ngulp.task(&#39;stylesheets&#39;,function(){\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;gulp.src(&#39;public/stylesheets/**/*.*&#39;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(gulp.dest(&#39;build/public/stylesheets&#39;));\n});\n\n//原量输出所有样式文件\ngulp.task(&#39;javascripts&#39;,function(){\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;gulp.src(&#39;public/javascripts/**/*.*&#39;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(gulp.dest(&#39;build/public/javascripts&#39;));\n});\n\n\n//压缩主要js\ngulp.task(&#39;mainjs&#39;,[&#39;javascripts&#39;],function(){\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;gulp.src(&#39;public/javascripts/**/*.js&#39;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(uglify())\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(gulp.dest(&#39;build/public/javascripts&#39;));\n});\n\n\n\n//压缩前端样式\ngulp.task(&#39;frontstyle&#39;,[&#39;stylesheets&#39;],function(cb){\n\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;gulp.src(&#39;public/stylesheets/front/css/*.css&#39;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(minifycss())\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(gulp.dest(&#39;build/public/stylesheets/front/css&#39;));\n\n});\n\n//压缩后台样式\ngulp.task(&#39;backstyle&#39;,[&#39;frontstyle&#39;],function(cb){\n\n&nbsp;&nbsp;&nbsp;&nbsp;gulp.src(&#39;public/stylesheets/backstage/css/style.css&#39;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(minifycss())\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pipe(gulp.dest(&#39;build/public/stylesheets/backstage/css&#39;));\n\n});\n\ngulp.task(&#39;clean&#39;,&nbsp;function(cb)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;del([&#39;build/public/javascripts&#39;,&#39;build/public/stylesheets&#39;],&nbsp;cb)\n});</pre><p><br/></p><p>5、根目录下执行 gulp</p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_21_21_776_1017.jpg\" title=\"\" alt=\"DoraCMS静态文件压缩1.jpg\"/></p><p><br/></p><p><br/></p><p>压缩后的文件在build目录下，需要注意的是，压缩操作都在开发环境下，至于生产环境上如何部署，你可以自己根据需要处理。gulp的有很多功能强大的插件，比如文件重命名，添加版本号等。这里只是介绍了一下压缩基本方法，感兴趣的童鞋可以进一步研究一下。&nbsp;</p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"前一段时间看了桑大的gulp教程，对gulpjs有了初步的了解，入门比较容易，下面简要介绍一下gulp：\\n简单的讲，gulp是一个构建工具，一个streaming构建工具，一个nodejs写的构建工具\\n总之，它是一个构建工具\\n那么什么是构建工具呢？\\n构建工具本质就是为了自动化构建，解放程序员、提供程序员效率的工具\\n我们来举个例子，最早的make，因为每次都cc编译，太恶心了，而且当文件特别多的时候，编译速度又慢下来，能不能按需编译，增量编译？\\nmake是通过makefile文件来描述源程序之间的相互关系并自动维护编译工作的\\n例子就不举了，写过c的人多少都知道点\\n其实编译在每个语言世界里，都是痛，骨子里的风湿一样，于是产生了make类似的东西\\n\\n    比如java里的ant，c#里的NAnt\\n    比如ruby里rake\\n    比如coffeescript里有cake\\n\\n它们的共同特点\\n\\n    1)基于task，定义简单\\n    2)task有串行，并行，作业依赖等控制方式\\n    3)通过xxxfile来定义task\\n如此看来，nodejs的构建系统也应该是这样的，可以说gulp是node世界里和上面几个构建工具最像的一个，它们太像了，以至于学习起来特别简单\\n其实上面还提了一个streaming，是流式的意思，后面讲原理的时候会深入讲解\\n\\n更具体的内容可以参考桑大的文档，写的非常详细： StuQ-Gulp实战和原理解析\\n\\n针对DoraCMS的静态资源压缩，我写了几个非常简单的脚本，对前台和后台的css和js进行压缩处理，压缩的好处这里就不多说了，这里看下如何实现：\\n\\nDoraCMS的静态资源都在public文件夹下：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_21_15_743_1016.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n经常变化的是 javascripts和stylesheets两个文件夹，我们只对这两个文件夹进行压缩处理。\\n\\n1、全局安装gulp\\nnpm install --global gulp\\n\\n2、在DoraCMS的package.json下添加下面的依赖：\\n\\\"del\\\": \\\"^2.0.2\\\",\\n\\\"gulp-concat\\\": \\\"^2.6.0\\\",\\n\\\"gulp-minify-css\\\": \\\"^1.2.1\\\",\\n\\\"gulp-uglify\\\": \\\"^1.4.2\\\",\\n\\\"gulp\\\": \\\"^3.9.0\\\"\\n\\n3、在DoraCMS根目录下执行 npm install 安装这些依赖\\n4、在DoraCMS根目录下添加gulpfile.js文件，代码如下：\\n/**\\n * Created by Administrator on 2015/10/22.\\n */\\nvar gulp = require(\'gulp\');\\nvar uglify = require(\'gulp-uglify\');\\nvar concat = require(\'gulp-concat\');\\nvar minifycss = require(\'gulp-minify-css\');\\nvar del = require(\'del\');\\nvar path = {\\n    scripts:[\'js/dora-angular.js\',\'js/dora.public.js\']\\n};\\n\\ngulp.task(\'default\', [\'clean\'] ,function() {\\n    // 将你的默认的任务代码放在这\\n    gulp.start(\'mainjs\',\'backstyle\');\\n});\\n\\n\\n//原量输入所有plugins\\ngulp.task(\'plugsjs\',function(){\\n    return gulp.src(\'public/plugins/**/*.*\')\\n        .pipe(gulp.dest(\'build/public/plugins\'));\\n});\\n\\n//原量输入所有ueditor相关文件\\ngulp.task(\'ueditor\',function(){\\n    return gulp.src(\'public/ueditor/**/*.*\')\\n        .pipe(gulp.dest(\'build/public/ueditor\'));\\n});\\n\\n//原量输出所有样式文件\\ngulp.task(\'stylesheets\',function(){\\n    return gulp.src(\'public/stylesheets/**/*.*\')\\n        .pipe(gulp.dest(\'build/public/stylesheets\'));\\n});\\n\\n//原量输出所有样式文件\\ngulp.task(\'javascripts\',function(){\\n    return gulp.src(\'public/javascripts/**/*.*\')\\n        .pipe(gulp.dest(\'build/public/javascripts\'));\\n});\\n\\n\\n//压缩主要js\\ngulp.task(\'mainjs\',[\'javascripts\'],function(){\\n    return gulp.src(\'public/javascripts/**/*.js\')\\n        .pipe(uglify())\\n        .pipe(gulp.dest(\'build/public/javascripts\'));\\n});\\n\\n\\n\\n//压缩前端样式\\ngulp.task(\'frontstyle\',[\'stylesheets\'],function(cb){\\n\\n    return gulp.src(\'public/stylesheets/front/css/*.css\')\\n        .pipe(minifycss())\\n        .pipe(gulp.dest(\'build/public/stylesheets/front/css\'));\\n\\n});\\n\\n//压缩后台样式\\ngulp.task(\'backstyle\',[\'frontstyle\'],function(cb){\\n\\n    gulp.src(\'public/stylesheets/backstage/css/style.css\')\\n        .pipe(minifycss())\\n        .pipe(gulp.dest(\'build/public/stylesheets/backstage/css\'));\\n\\n});\\n\\ngulp.task(\'clean\', function(cb) {\\n    return del([\'build/public/javascripts\',\'build/public/stylesheets\'], cb)\\n});\\n\\n5、根目录下执行 gulp\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_21_21_776_1017.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n\\n压缩后的文件在build目录下，需要注意的是，压缩操作都在开发环境下，至于生产环境上如何部署，你可以自己根据需要处理。gulp的有很多功能强大的插件，比如文件重命名，添加版本号等。这里只是介绍了一下压缩基本方法，感兴趣的童鞋可以进一步研究一下。 \\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1447030152000.jpg','2015-11-09 01:06:33','2020-08-20 15:44:15'),(276,'第7天 Post方法与上传——解析分类数据','解析分类数据','2','1','','解析分类数据','2',NULL,'','表单的字段有两种，一个是表单字段，一个是二进制的文件。而这两种格式的不同在于信息头，下面是个信息头的例子：\n表单字段信息头','1','','','0:01',762,'2','0',NULL,0,'0',224283,'<h3>解析分类数据</h3><p>表单的字段有两种，一个是表单字段，一个是二进制的文件。而这两种格式的不同在于信息头，下面是个信息头的例子：</p><p><code>表单字段信息头</code></p><pre>Content-Disposition:&nbsp;form-data;&nbsp;name=&quot;title&quot;&nbsp;\\r\\n\\r\\n</pre><p><code>二进制文件信息头</code></p><pre>Content-Disposition:&nbsp;form-data;&nbsp;name=&quot;img&quot;;&nbsp;filename=&quot;favicon2.ico&quot;&nbsp;\\r\\n\nContent-Type:&nbsp;image/x-icon&nbsp;\\r\\n\\r\\n</pre><p>解析过程要分别处理，最终要把表单字段的信息，解析后放入 req.body 。把上传文件的信息，保存在req.files中。下面是解析代码：</p><pre>//&nbsp;头信息和体信息的之间分割字符串\nvar&nbsp;RN&nbsp;=&nbsp;&quot;\\r\\n\\r\\n&quot;;\n\nvar&nbsp;files&nbsp;=&nbsp;{};&nbsp;&nbsp;&nbsp;//&nbsp;储存解析出的上传文件的信息\n\nvar&nbsp;bodys&nbsp;=&nbsp;{};&nbsp;&nbsp;&nbsp;//&nbsp;储存表单字段的信息\n\nfields.forEach(function(field){\n\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;index&nbsp;&nbsp;=&nbsp;field.indexOf(RN);\n\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;解析出头信息块\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;header&nbsp;=&nbsp;field.substring(0,index);\n\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;从头信息中解析出表单字段的名称，也就是表单的name属性值。\n&nbsp;&nbsp;&nbsp;&nbsp;/name=\\&quot;(.*?)\\&quot;/g.test(header);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;fieldName&nbsp;=&nbsp;RegExp.$1;\n\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;判断是上传的文件，还是一般的表单字段。\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;isFile&nbsp;=&nbsp;/filename/g.test(header);\n\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;解析出数据体\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;body&nbsp;=&nbsp;field.substring(index+RN.length);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body&nbsp;=&nbsp;body.substring(0,body.length&nbsp;-&nbsp;RN.length/2);\n\n&nbsp;&nbsp;&nbsp;&nbsp;if(isFile){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;files[fieldName]&nbsp;=&nbsp;new&nbsp;Buffer(body);\n&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bodys[fieldName]&nbsp;=&nbsp;body;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n})</pre><p>代码中把二进制上传文件信息保存到files里，一般的表单字段信息保存到bodys中。通过 new Buffer(字符串) 的方式转换成二进制对象。</p><p>下一节，要把这些代码整合一下，集成到post.js中间件里。</p>','[{\"type\":\"contents\",\"content\":\"解析分类数据\\n表单的字段有两种，一个是表单字段，一个是二进制的文件。而这两种格式的不同在于信息头，下面是个信息头的例子：\\n表单字段信息头\\nContent-Disposition: form-data; name=\\\"title\\\" \\\\r\\\\n\\\\r\\\\n\\n二进制文件信息头\\nContent-Disposition: form-data; name=\\\"img\\\"; filename=\\\"favicon2.ico\\\" \\\\r\\\\n\\nContent-Type: image/x-icon \\\\r\\\\n\\\\r\\\\n\\n解析过程要分别处理，最终要把表单字段的信息，解析后放入 req.body 。把上传文件的信息，保存在req.files中。下面是解析代码：\\n// 头信息和体信息的之间分割字符串\\nvar RN = \\\"\\\\r\\\\n\\\\r\\\\n\\\";\\n\\nvar files = {};   // 储存解析出的上传文件的信息\\n\\nvar bodys = {};   // 储存表单字段的信息\\n\\nfields.forEach(function(field){\\n\\n    var index  = field.indexOf(RN);\\n\\n    // 解析出头信息块\\n    var header = field.substring(0,index);\\n\\n    // 从头信息中解析出表单字段的名称，也就是表单的name属性值。\\n    /name=\\\\\\\"(.*?)\\\\\\\"/g.test(header);\\n    var fieldName = RegExp.$1;\\n\\n    // 判断是上传的文件，还是一般的表单字段。\\n    var isFile = /filename/g.test(header);\\n\\n    // 解析出数据体\\n    var body = field.substring(index+RN.length);\\n        body = body.substring(0,body.length - RN.length/2);\\n\\n    if(isFile){\\n        files[fieldName] = new Buffer(body);\\n    }else{\\n        bodys[fieldName] = body;\\n    }\\n\\n})\\n代码中把二进制上传文件信息保存到files里，一般的表单字段信息保存到bodys中。通过 new Buffer(字符串) 的方式转换成二进制对象。\\n下一节，要把这些代码整合一下，集成到post.js中间件里。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444982141000.jpg','2015-10-16 07:56:20','2020-08-20 15:44:23'),(277,'DoraCMS系统操作指南（一）','DoraCMS系统操作指南','1','1',NULL,'doracms,nodejs,内容管理系统','2',NULL,'','DoraCMS慢慢趋于稳定，现有的功能已经渐渐完善，后续我会把操作指南和开发指南归档整理一下，同时也会根据整理过程中发现的问题进行修改，尽量减少bug和重大隐患。文档整理完毕后，代码开源。','1','','','0:01',762,'2','0',NULL,0,'0',242897,'<p>&nbsp;&nbsp;&nbsp;&nbsp;DoraCMS慢慢趋于稳定，现有的功能已经渐渐完善，后续我会把操作指南和开发指南归档整理一下，同时也会根据整理过程中发现的问题进行修改，尽量减少bug和重大隐患。文档整理完毕后，代码开源。</p><p><br/></p><p>目录</p><p>一、概述<span class=\"Apple-tab-span\" style=\"white-space:pre\"></span></p><p>二、后台模块<span class=\"Apple-tab-span\" style=\"white-space:pre\"></span></p><p>1、后台登录<span class=\"Apple-tab-span\" style=\"white-space:pre\"></span></p><p>2、后台模块简介<span class=\"Apple-tab-span\" style=\"white-space:pre\"></span></p><p>3、模块详情<span class=\"Apple-tab-span\" style=\"white-space:pre\"></span></p><p>1、用户组设置<span class=\"Apple-tab-span\" style=\"white-space:pre\"></span></p><p>2、系统用户管理<span class=\"Apple-tab-span\" style=\"white-space:pre\"></span></p><p>3、邮件模板<span class=\"Apple-tab-span\" style=\"white-space:pre\"></span></p><p>4、广告管理<span class=\"Apple-tab-span\" style=\"white-space:pre\"></span></p><p>5、文件管理器<span class=\"Apple-tab-span\" style=\"white-space:pre\"></span></p><p>6、数据管理<span class=\"Apple-tab-span\" style=\"white-space: pre;\"></span></p><p><br/></p><p><br/></p><p>一、概述</p><p>DoraCMS是基于Nodejs+express+mongodb编写的一套内容管理系统。前前后后编写和修改大体用了3个月左右的时间（本人也有工作，也是有空就写写）。考虑到准备开源，为更多nodejs初学者提供入门帮助，特编写该文档，对DoraCMS系统做细节说明，并不保证程序没有bug或其它问题，目前我也是边发现边修改存在的问题，希望广大的开发者发现问题能及时反馈给我，我会不断完善，我们一起进步。</p><p><br/></p><p><br/></p><p>二、后台模块</p><p><br/></p><p>1、后台登录</p><p style=\"text-align: center;\">&nbsp;<img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_13_11_51_23_208_1000.jpg\" title=\"\" alt=\"1.jpg\"/></p><p><br/></p><p>&nbsp; 后台登录比较简单，后台登录的信息需要从后台录入，这就出现一个问题，如果你是第一次安装doracms,数据库是空的，进不来后台设置，如何登录呢？找到routes下的validat.js文件,注释下面的代码：</p><p style=\"white-space: normal;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_11_12_11_18_13_476_1000.jpg\" title=\"\" alt=\"QQ截图20151112111825.jpg\"/></p><p style=\"white-space: normal;\">找到/models/db 下的&nbsp;adminFunc.js ，注释下面的一段，直接返回true</p><p style=\"white-space: normal;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_11_12_11_19_18_815_1001.jpg\" title=\"\" alt=\"QQ截图20151112111915.jpg\"/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">至此，访问后台页面就不需要登录了，开启服务后，你可以直接访问地址：</p><p style=\"white-space: normal;\">管理员添加 ：&nbsp;<a href=\"http://127.0.0.1:81/admin/manage/adminUsersList\" _src=\"http://127.0.0.1:81/admin/manage/adminUsersList\">http://127.0.0.1:81/admin/manage/adminUsersList</a></p><p style=\"white-space: normal;\">用户组管理 ：<a href=\"http://127.0.0.1:81/admin/manage/adminGroupList\" _src=\"http://127.0.0.1:81/admin/manage/adminGroupList\">http://127.0.0.1:81/admin/manage/adminGroupList</a></p><p style=\"white-space: normal;\">注意：先添加用户组，在添加管理员，完成上面的操作，把代码还原回去，并重启服务。用刚才设置的管理员信息登录后台。</p><p><br/></p><p>2、后台模块简介</p><p>&nbsp;</p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_13_11_51_51_859_1001.jpg\" title=\"\" alt=\"2.jpg\"/></p><p><br/></p><p>后台模块按功能分为3大部分：系统管理、文档管理、会员管理。</p><p><br/></p><p>1、系统管理——包含了系统用户管理、用户组设定、邮件模板、广告管理、文件管理器、数据管理。</p><p>2、文档管理——包含了文档管理、文档类别管理、文档标签管理、文档模板配置、文档属性管理、留言管理。</p><p>3、会员管理——包含注册会员列表。</p><p><br/></p><p><br/></p><p>3、模块详情</p><p>1、用户组设置</p><p><br/></p><p style=\"text-align: center;\">&nbsp;<img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_9_22_21_49_9_186_1000.jpg\" title=\"4.jpg\" alt=\"4.jpg\" width=\"606\" height=\"649\" border=\"0\" vspace=\"0\" style=\"width: 606px; height: 649px;\"/></p><p><br/></p><p><br/></p><p>作用：设置管理员组别，同时设置管理权限</p><p>操作：组名称可自定义（如：超级管理员），选择需要设定的管理模块</p><p>备注：目前的权限设置只针对于大模块，只要对大模块有权限操作，模块中的增删改查都是有权限的。</p><p>2、系统用户管理</p><p>&nbsp;</p><p><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_13_11_53_17_839_1003.jpg\" title=\"\" alt=\"3.jpg\" style=\"width: 786px; height: 131px;\" height=\"131\" width=\"786\"/></p><p>&nbsp;</p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_13_11_53_50_25_1004.jpg\" title=\"\" alt=\"5.jpg\"/></p><p><br/></p><p>作用：管理员用户设置</p><p>操作：点击添加用户可以添加新的管理员，在设置用户组之后可以赋予新管理员的用户权限，没有权限的用户无法访问指定的模块。</p><p>备注：通过校验的表单才可以提交，其它所有模块都采用了类似的模式。</p><p><br/></p><p>3、邮件模板（已干掉）</p><p style=\"text-align: center;\"><br/></p><p><br/></p><p>4、广告管理</p><p>作用：管理员可以添加图片、文字两种广告。针对前台显示单广告、图片轮播广告或者文字广告。</p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_13_11_54_46_483_1006.jpg\" title=\"\" alt=\"7.jpg\"/></p><p>&nbsp;</p><p><br/></p><p>文字广告比较简单，直接添加文本和链接就可以了。图片广告规定添加一张图片不轮播，多张图片轮播的形式，单张图片属性设置如图：</p><p style=\"text-align: center;\">&nbsp;<img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_13_11_55_3_815_1007.jpg\" title=\"\" alt=\"8.jpg\"/></p><p><br/></p><p><br/></p><p>您可以设置图片的基本属性和打开方式。</p><p>调用方式：</p><pre class=\"brush:js;toolbar:false\">new&nbsp;initSlides({adsId&nbsp;:&nbsp;key,containerId&nbsp;:&nbsp;&#39;exampleId&#39;})</pre><p>其中key 是广告ID，在创建完广告后可以在广告列表获取，exampleId 可以自定义。</p><p><br/></p><p><br/></p><p>5、文件管理器</p><p>做文件管理器是一个朋友提出的，最初的设想是管理上传文件，目前的功能比较简单。</p><p><br/></p><p style=\"text-align: center;\">&nbsp;<img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_13_11_56_59_530_1008.jpg\" title=\"\" alt=\"11.jpg\"/></p><p><br/></p><p>&nbsp;</p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_13_11_57_14_513_1009.jpg\" title=\"\" alt=\"12.jpg\"/></p><p>用户可以对上传文件进行修改、删除等操作。目前只定义了对图片进行重命名和删除操作，对html等静态文件进行内容修改的操作，而且加入了列表和缩略图视图，对于图片缩略图是可以点击查看的。做这个模块也是为了巩固nodejs 文件操作的方式和方法。</p><p><br/></p><p><br/></p><p>6、数据管理</p><p>数据管理功能是后来加的，考虑到以后博客是数据会越来越多，于是数据备份是很有必要的。</p><p><br/></p><p style=\"text-align: center;\">&nbsp;<img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_13_11_57_30_306_1010.jpg\" title=\"\" alt=\"13.jpg\"/></p><p><br/></p><p>这里利用了mongodb自带的数据备份脚本，通过Nodejs执行脚本的命令来执行数据库备份，数据按时间戳命名，备份完成后执行打包操作，形成完整的备份数据压缩文件。</p><p><br/></p><p>未完待续...</p>','[{\"type\":\"contents\",\"content\":\"    DoraCMS慢慢趋于稳定，现有的功能已经渐渐完善，后续我会把操作指南和开发指南归档整理一下，同时也会根据整理过程中发现的问题进行修改，尽量减少bug和重大隐患。文档整理完毕后，代码开源。\\n\\n目录\\n一、概述\\n二、后台模块\\n1、后台登录\\n2、后台模块简介\\n3、模块详情\\n1、用户组设置\\n2、系统用户管理\\n3、邮件模板\\n4、广告管理\\n5、文件管理器\\n6、数据管理\\n\\n\\n一、概述\\nDoraCMS是基于Nodejs+express+mongodb编写的一套内容管理系统。前前后后编写和修改大体用了3个月左右的时间（本人也有工作，也是有空就写写）。考虑到准备开源，为更多nodejs初学者提供入门帮助，特编写该文档，对DoraCMS系统做细节说明，并不保证程序没有bug或其它问题，目前我也是边发现边修改存在的问题，希望广大的开发者发现问题能及时反馈给我，我会不断完善，我们一起进步。\\n\\n\\n二、后台模块\\n\\n1、后台登录\\n \"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_13_11_51_23_208_1000.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n  后台登录比较简单，后台登录的信息需要从后台录入，这就出现一个问题，如果你是第一次安装doracms,数据库是空的，进不来后台设置，如何登录呢？找到routes下的validat.js文件,注释下面的代码：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_11_12_11_18_13_476_1000.jpg\"},{\"type\":\"contents\",\"content\":\"\\n找到/models/db 下的 adminFunc.js ，注释下面的一段，直接返回true\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_11_12_11_19_18_815_1001.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n至此，访问后台页面就不需要登录了，开启服务后，你可以直接访问地址：\\n管理员添加 ： http://127.0.0.1:81/admin/manage/adminUsersList\\n用户组管理 ：http://127.0.0.1:81/admin/manage/adminGroupList\\n注意：先添加用户组，在添加管理员，完成上面的操作，把代码还原回去，并重启服务。用刚才设置的管理员信息登录后台。\\n\\n2、后台模块简介\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_13_11_51_51_859_1001.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n后台模块按功能分为3大部分：系统管理、文档管理、会员管理。\\n\\n1、系统管理——包含了系统用户管理、用户组设定、邮件模板、广告管理、文件管理器、数据管理。\\n2、文档管理——包含了文档管理、文档类别管理、文档标签管理、文档模板配置、文档属性管理、留言管理。\\n3、会员管理——包含注册会员列表。\\n\\n\\n3、模块详情\\n1、用户组设置\\n\\n \"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_9_22_21_49_9_186_1000.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n\\n作用：设置管理员组别，同时设置管理权限\\n操作：组名称可自定义（如：超级管理员），选择需要设定的管理模块\\n备注：目前的权限设置只针对于大模块，只要对大模块有权限操作，模块中的增删改查都是有权限的。\\n2、系统用户管理\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_13_11_53_17_839_1003.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_13_11_53_50_25_1004.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n作用：管理员用户设置\\n操作：点击添加用户可以添加新的管理员，在设置用户组之后可以赋予新管理员的用户权限，没有权限的用户无法访问指定的模块。\\n备注：通过校验的表单才可以提交，其它所有模块都采用了类似的模式。\\n\\n3、邮件模板（已干掉）\\n\\n\\n4、广告管理\\n作用：管理员可以添加图片、文字两种广告。针对前台显示单广告、图片轮播广告或者文字广告。\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_13_11_54_46_483_1006.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n\\n文字广告比较简单，直接添加文本和链接就可以了。图片广告规定添加一张图片不轮播，多张图片轮播的形式，单张图片属性设置如图：\\n \"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_13_11_55_3_815_1007.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n\\n您可以设置图片的基本属性和打开方式。\\n调用方式：\\nnew initSlides({adsId : key,containerId : \'exampleId\'})\\n其中key 是广告ID，在创建完广告后可以在广告列表获取，exampleId 可以自定义。\\n\\n\\n5、文件管理器\\n做文件管理器是一个朋友提出的，最初的设想是管理上传文件，目前的功能比较简单。\\n\\n \"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_13_11_56_59_530_1008.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_13_11_57_14_513_1009.jpg\"},{\"type\":\"contents\",\"content\":\"\\n用户可以对上传文件进行修改、删除等操作。目前只定义了对图片进行重命名和删除操作，对html等静态文件进行内容修改的操作，而且加入了列表和缩略图视图，对于图片缩略图是可以点击查看的。做这个模块也是为了巩固nodejs 文件操作的方式和方法。\\n\\n\\n6、数据管理\\n数据管理功能是后来加的，考虑到以后博客是数据会越来越多，于是数据备份是很有必要的。\\n\\n \"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_13_11_57_30_306_1010.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n这里利用了mongodb自带的数据备份脚本，通过Nodejs执行脚本的命令来执行数据库备份，数据按时间戳命名，备份完成后执行打包操作，形成完整的备份数据压缩文件。\\n\\n未完待续...\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444889990000.jpg','2015-08-13 03:57:48','2020-10-30 15:32:03'),(278,'Express 4.8.x—Request 对象实例讲解','Request 对象实例讲解','2','1','','Request','2',NULL,'','​request是客户请求的抽象，这个对象是只读的，包含了客户请求的信息。由于API很简单，以下内容基本上是Express官网API的中文翻译，特殊的地方会做解释说明。','1','','','0:01',762,'2','0',NULL,0,'0',225533,'<h3>Request 对象实例讲解</h3><p>request是客户请求的抽象，这个对象是只读的，包含了客户请求的信息。由于API很简单，以下内容基本上是Express官网API的中文翻译，特殊的地方会做解释说明。</p><h4 id=\"req-params\">req.params</h4><pre>//&nbsp;&nbsp;/user/id001\nrouter.get(“/user/:id”,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;userId&nbsp;=&nbsp;req.params.id;&nbsp;//&nbsp;id001\n})</pre><p><span class=\"invade-word\">this</span>也可通过req.params[0] 获得id参数。<span class=\"invade-word\">look</span></p><h4 id=\"req-query\">req.query</h4><pre>//&nbsp;&nbsp;/user?id=id001&amp;name=leo\nrouter.get(“/user”,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;userId&nbsp;=&nbsp;req.query.id;&nbsp;//&nbsp;id001\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;name&nbsp;=&nbsp;req.query.name&nbsp;&nbsp;//&nbsp;leo\n})</pre><h4 id=\"req-param-name-\">req.param(name)</h4><pre>这是个方法，和params作用一样。\n\n//&nbsp;&nbsp;/user/id001\nrouter.get(“/user/:id”,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;var&nbsp;userId&nbsp;=&nbsp;req.params.id;&nbsp;//&nbsp;id001\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;userId&nbsp;=&nbsp;req.param(“id”);&nbsp;//&nbsp;id001&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n})</pre><h4 id=\"req-route\">req.route</h4><p>获得路由信息</p><pre>app.get(&#39;/user/:id?&#39;,&nbsp;function(req,&nbsp;res){\n&nbsp;&nbsp;console.log(req.route);\n});</pre><p>通过 /user/12 输出结果为：</p><pre>{&nbsp;path:&nbsp;&#39;/user/:id?&#39;,\n&nbsp;&nbsp;keys:&nbsp;[&nbsp;{&nbsp;name:&nbsp;&#39;id&#39;,&nbsp;optional:&nbsp;true&nbsp;}&nbsp;],\n&nbsp;&nbsp;regexp:&nbsp;/^\\/user(?:\\/([^\\/]+?))?\\/?$/i,\n&nbsp;&nbsp;params:&nbsp;[&nbsp;id:&nbsp;&#39;12&#39;&nbsp;]&nbsp;}</pre><p>这些信息在特定时，会很有用途。</p><h4 id=\"req-cookies\">req.cookies</h4><pre>req.cookies.name&nbsp;//&nbsp;访问cookies信息</pre><h4 id=\"req-signedcookies\">req.signedCookies</h4><p>获得签名cookies信息，当我们在<code>cookieParser(secret)</code> &nbsp;插件应用 secret时，cookie是经过签名的。</p><pre>//&nbsp;真实cookie值是&nbsp;user=leo.CP7AWaXDfAKIRfH49dQzKJx7sKzzSoPq7/AcBBRVwlI3\nreq.signedCookies.user&nbsp;//&nbsp;可以得到抛弃签名后的cookie值。\n//&nbsp;=&gt;&nbsp;&quot;leo&quot;</pre><h4 id=\"req-get-field-\">req.get(field)</h4><p>得到请求头部信息，field不区分大小写。</p><pre>req.get(&#39;Content-Type&#39;);\n//&nbsp;=&gt;&nbsp;&quot;text/plain&quot;\n\nreq.get(&#39;content-type&#39;);\n//&nbsp;=&gt;&nbsp;&quot;text/plain&quot;</pre><p>它的别名是 &nbsp;<code>req.header(field)</code><span class=\"invade-word\">this</span></p><h4 id=\"req-accepts-types-\">req.accepts(types)</h4><p>检查给定的类型是可以接受的。</p><pre>//&nbsp;Accept:&nbsp;text/html\nreq.accepts(&#39;html&#39;);\n//&nbsp;=&gt;&nbsp;&quot;html&quot;\n\n//&nbsp;Accept:&nbsp;text/*,&nbsp;application/json\nreq.accepts(&#39;html&#39;);\n//&nbsp;=&gt;&nbsp;&quot;html&quot;\nreq.accepts(&#39;text/html&#39;);\n//&nbsp;=&gt;&nbsp;&quot;text/html&quot;\nreq.accepts(&#39;json,&nbsp;text&#39;);\n//&nbsp;=&gt;&nbsp;&quot;json&quot;\nreq.accepts(&#39;application/json&#39;);\n//&nbsp;=&gt;&nbsp;&quot;application/json&quot;\n\n//&nbsp;Accept:&nbsp;text/*,&nbsp;application/json\nreq.accepts(&#39;image/png&#39;);\nreq.accepts(&#39;png&#39;);\n//&nbsp;=&gt;&nbsp;undefined&nbsp;不允许的类型，将返回undefined\n\n//&nbsp;Accept:&nbsp;text/*;q=.5,&nbsp;application/json\nreq.accepts([&#39;html&#39;,&nbsp;&#39;json&#39;]);\nreq.accepts(&#39;html,&nbsp;json&#39;);\n//&nbsp;=&gt;&nbsp;&quot;json&quot;</pre><h4 id=\"req-acceptscharset-charset-\">req.acceptsCharset(charset)</h4><p>检查给定的字符集是可以接受的。</p><h4 id=\"req-acceptslanguage-lang-\">req.acceptsLanguage(lang)</h4><p>检查给定语言是可以接受的。</p><h4 id=\"req-is-type-\">req.is(type)</h4><p>检查请求对象的内容类型，内部根据<code>Context-Type</code>判断。</p><pre>//&nbsp;如果请求头部信息是&nbsp;&nbsp;&nbsp;Content-Type:&nbsp;text/html;&nbsp;charset=utf-8\nreq.is(&#39;html&#39;);\nreq.is(&#39;text/html&#39;);\nreq.is(&#39;text/*&#39;);\n//&nbsp;=&gt;&nbsp;true\n\n//&nbsp;如果请求头部信息是&nbsp;Content-Type&nbsp;is&nbsp;application/json\nreq.is(&#39;json&#39;);\nreq.is(&#39;application/json&#39;);\nreq.is(&#39;application/*&#39;);\n//&nbsp;=&gt;&nbsp;true\nreq.is(&#39;html&#39;);\n//&nbsp;=&gt;&nbsp;false</pre><h4 id=\"req-ip\">req.ip</h4><p>客户ip地址</p><h4 id=\"req-ips\">req.ips</h4><p>返回代理ip和客户端ip，[“客户ip”,”代理ip2“,”代理ip1”]</p><h4 id=\"req-path\">req.path</h4><p>返回请求路径。</p><pre>//&nbsp;/users?sort=desc\nreq.path\n//&nbsp;=&gt;&nbsp;&quot;/users&quot;</pre><h4 id=\"req-host\">req.host</h4><p>返回主机名</p><pre>//&nbsp;Host:&nbsp;&quot;localhost:3000&quot;\nreq.host\n//&nbsp;=&gt;&nbsp;&quot;localhost&quot;</pre><pre>//&nbsp;Host:&nbsp;&quot;127.0.0.1:3000&quot;\nreq.host\n//&nbsp;=&gt;&nbsp;&quot;127.0.0.1&quot;</pre><h4 id=\"req-fresh\">req.fresh</h4><p>测试请求req是否新鲜，true／false ，如果客户端没有这个资源的缓冲，那么就表示这个请求的新鲜的。\n如果 &nbsp;fresh = false，这时我们可调用 res.status(304) ，这样客户端会直接应用缓冲内容，节省服务器开销。</p><h4 id=\"req-stale\">req.stale</h4><p>与req.fresh相反，测试请求req是否是陈旧的，true／false</p><h4 id=\"req-xhr\">req.xhr</h4><p>请求是否是ajax方式，true／false</p><h4 id=\"req-protocol\">req.protocol</h4><p>请求协议，http / https</p><h4 id=\"req-secure\">req.secure</h4><p>是否为安全协议\nreq.protocol === “https”</p><h4 id=\"req-subdomains\">req.subdomains</h4><p>得到子域名数组。\n// Host: &quot;a.book.jsera.net&quot;\nreq.subdomains\n// =&gt; [&quot;book&quot;, &quot;a&quot;]</p><h4 id=\"req-originalurl\">req.originalUrl</h4><p>得到完整请求地址</p><p>/user/leo/id001</p><h4 id=\"req-url\">req.url</h4><p>这里的url是路由本身域内的，看下面例子：</p><p>访问 <code>/user/leo/id001</code></p><pre>var&nbsp;router&nbsp;=&nbsp;express.Router();\nrouter.get(&quot;/:name/:id&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(req.originalUrl);&nbsp;&nbsp;&nbsp;//&nbsp;/user/leo/id001\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(req.url);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;/leo/id001\n})\n\napp.use(&quot;/user&quot;,router);</pre>','[{\"type\":\"contents\",\"content\":\"Request 对象实例讲解\\nrequest是客户请求的抽象，这个对象是只读的，包含了客户请求的信息。由于API很简单，以下内容基本上是Express官网API的中文翻译，特殊的地方会做解释说明。\\nreq.params\\n//  /user/id001\\nrouter.get(“/user/:id”,function(req,res){\\n    var userId = req.params.id; // id001\\n})\\nthis也可通过req.params[0] 获得id参数。look\\nreq.query\\n//  /user?id=id001&amp;name=leo\\nrouter.get(“/user”,function(req,res){\\n    var userId = req.query.id; // id001\\n    var name = req.query.name  // leo\\n})\\nreq.param(name)\\n这是个方法，和params作用一样。\\n\\n//  /user/id001\\nrouter.get(“/user/:id”,function(req,res){\\n    // var userId = req.params.id; // id001\\n        var userId = req.param(“id”); // id001        \\n})\\nreq.route\\n获得路由信息\\napp.get(\'/user/:id?\', function(req, res){\\n  console.log(req.route);\\n});\\n通过 /user/12 输出结果为：\\n{ path: \'/user/:id?\',\\n  keys: [ { name: \'id\', optional: true } ],\\n  regexp: /^\\\\/user(?:\\\\/([^\\\\/]+?))?\\\\/?$/i,\\n  params: [ id: \'12\' ] }\\n这些信息在特定时，会很有用途。\\nreq.cookies\\nreq.cookies.name // 访问cookies信息\\nreq.signedCookies\\n获得签名cookies信息，当我们在cookieParser(secret)  插件应用 secret时，cookie是经过签名的。\\n// 真实cookie值是 user=leo.CP7AWaXDfAKIRfH49dQzKJx7sKzzSoPq7/AcBBRVwlI3\\nreq.signedCookies.user // 可以得到抛弃签名后的cookie值。\\n// =&gt; \\\"leo\\\"\\nreq.get(field)\\n得到请求头部信息，field不区分大小写。\\nreq.get(\'Content-Type\');\\n// =&gt; \\\"text/plain\\\"\\n\\nreq.get(\'content-type\');\\n// =&gt; \\\"text/plain\\\"\\n它的别名是  req.header(field)this\\nreq.accepts(types)\\n检查给定的类型是可以接受的。\\n// Accept: text/html\\nreq.accepts(\'html\');\\n// =&gt; \\\"html\\\"\\n\\n// Accept: text/*, application/json\\nreq.accepts(\'html\');\\n// =&gt; \\\"html\\\"\\nreq.accepts(\'text/html\');\\n// =&gt; \\\"text/html\\\"\\nreq.accepts(\'json, text\');\\n// =&gt; \\\"json\\\"\\nreq.accepts(\'application/json\');\\n// =&gt; \\\"application/json\\\"\\n\\n// Accept: text/*, application/json\\nreq.accepts(\'image/png\');\\nreq.accepts(\'png\');\\n// =&gt; undefined 不允许的类型，将返回undefined\\n\\n// Accept: text/*;q=.5, application/json\\nreq.accepts([\'html\', \'json\']);\\nreq.accepts(\'html, json\');\\n// =&gt; \\\"json\\\"\\nreq.acceptsCharset(charset)\\n检查给定的字符集是可以接受的。\\nreq.acceptsLanguage(lang)\\n检查给定语言是可以接受的。\\nreq.is(type)\\n检查请求对象的内容类型，内部根据Context-Type判断。\\n// 如果请求头部信息是   Content-Type: text/html; charset=utf-8\\nreq.is(\'html\');\\nreq.is(\'text/html\');\\nreq.is(\'text/*\');\\n// =&gt; true\\n\\n// 如果请求头部信息是 Content-Type is application/json\\nreq.is(\'json\');\\nreq.is(\'application/json\');\\nreq.is(\'application/*\');\\n// =&gt; true\\nreq.is(\'html\');\\n// =&gt; false\\nreq.ip\\n客户ip地址\\nreq.ips\\n返回代理ip和客户端ip，[“客户ip”,”代理ip2“,”代理ip1”]\\nreq.path\\n返回请求路径。\\n// /users?sort=desc\\nreq.path\\n// =&gt; \\\"/users\\\"\\nreq.host\\n返回主机名\\n// Host: \\\"localhost:3000\\\"\\nreq.host\\n// =&gt; \\\"localhost\\\"\\n// Host: \\\"127.0.0.1:3000\\\"\\nreq.host\\n// =&gt; \\\"127.0.0.1\\\"\\nreq.fresh\\n测试请求req是否新鲜，true／false ，如果客户端没有这个资源的缓冲，那么就表示这个请求的新鲜的。如果  fresh = false，这时我们可调用 res.status(304) ，这样客户端会直接应用缓冲内容，节省服务器开销。\\nreq.stale\\n与req.fresh相反，测试请求req是否是陈旧的，true／false\\nreq.xhr\\n请求是否是ajax方式，true／false\\nreq.protocol\\n请求协议，http / https\\nreq.secure\\n是否为安全协议req.protocol === “https”\\nreq.subdomains\\n得到子域名数组。// Host: \\\"a.book.jsera.net\\\"req.subdomains// =&gt; [\\\"book\\\", \\\"a\\\"]\\nreq.originalUrl\\n得到完整请求地址\\n/user/leo/id001\\nreq.url\\n这里的url是路由本身域内的，看下面例子：\\n访问 /user/leo/id001\\nvar router = express.Router();\\nrouter.get(\\\"/:name/:id\\\",function(req,res){\\n    console.log(req.originalUrl);   // /user/leo/id001\\n    console.log(req.url);    // /leo/id001\\n})\\n\\napp.use(\\\"/user\\\",router);\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445058635000.jpg','2015-10-17 05:12:27','2020-08-20 15:44:22'),(279,'[转]让你的 Node.js 应用跑得更快的 10 个技巧','Nodejs 应用跑得更快 10 个技巧','1','1','','Nodejs ,前端开发','2',NULL,'','Node.js 受益于它的事件驱动和异步的特征，已经很快了。但是，在现代网络中只是快是不行的。如果你打算用 Node.js 开发你的下一个Web 应用的话，那么你就应该无所不用其极，让你的应用更快，异常的快。本文将介绍 10 条，经过检验得知可大大提高 Node 应用的技巧。','1','','','0:01',762,'2','0',NULL,0,'0',225803,'<p><span style=\"font-size: 16px;\">&nbsp; &nbsp;Node.js 受益于它的事件驱动和异步的特征，已经很快了。但是，在现代网络中只是快是不行的。如果你打算用 Node.js 开发你的下一个Web\n 应用的话，那么你就应该无所不用其极，让你的应用更快，异常的快。本文将介绍 10 条，经过检验得知可大大提高 Node \n应用的技巧。废话不多说，让我们逐条来看看。</span></p><p><span style=\"font-size: 16px;\">1、并行<br/></span></p><p><span style=\"font-size: 16px;\">创建 Web 应用的时候，你可能要多次调用内部 API 来获取各种数据。比如说，假设在 Dashboard 页面上，你要执行下面这几个调用:</span></p><ul class=\" list-paddingleft-2\"><li><p><span style=\"font-size: 16px;\">用户信息 -getUserProfile().</span></p></li><li><p><span style=\"font-size: 16px;\">当前活动 -getRecentActivity().</span></p></li><li><p><span style=\"font-size: 16px;\">订阅内容 -getSubscriptions().</span></p></li><li><p><span style=\"font-size: 16px;\">通知内容 -getNotifications().</span></p></li></ul><p><span style=\"font-size: 16px;\">为了拿到这些信息，你应该会为每个方法创建独立的中间件，然后将它们链接到 Dashboard 路由上。不过问题是，这些方法的执行是线性的，上一个没结束之前下一个不会开始。可行解决案是并行调用它们。</span></p><p><span style=\"font-size: 16px;\">如你所知由于异步性，Node.js 非常擅长并行调用多个方法。我们不能暴殄天物。我上面提到的那些方法没有依赖性，所以我们可以并行执行它们。这样我们可以削减中间件数量，大幅提高速度。</span></p><p><span style=\"font-size: 16px;\">我们可以用 </span><a target=\"_blank\" href=\"http://www.oschina.net/p/async-js\" rel=\"nofollow\" style=\"font-size: 16px; text-decoration: underline;\"><span style=\"font-size: 16px;\">async.js</span></a><span style=\"font-size: 16px;\"> 来处理并行，它是一个专门用来调教 JavaScript 异步的 Node 模块。下面代码演示怎样用 async.js 并行调用多个方法的:</span></p><pre class=\"brush:js;toolbar:false\"><span style=\"font-size: 16px;\">function&nbsp;runInParallel()&nbsp;{<br/>&nbsp;&nbsp;async.parallel([<br/>&nbsp;&nbsp;&nbsp;&nbsp;getUserProfile,<br/>&nbsp;&nbsp;&nbsp;&nbsp;getRecentActivity,<br/>&nbsp;&nbsp;&nbsp;&nbsp;getSubscriptions,<br/>&nbsp;&nbsp;&nbsp;&nbsp;getNotifications<br/>&nbsp;&nbsp;],&nbsp;function(err,&nbsp;results)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;//This&nbsp;callback&nbsp;runs&nbsp;when&nbsp;all&nbsp;the&nbsp;functions&nbsp;complete<br/>&nbsp;&nbsp;});<br/>}<br/></span></pre><h2 id=\"content_h2_3_5\"><span style=\"font-size: 16px;\">2. 异步</span></h2><p><span style=\"font-size: 16px;\">根据设计 Node.js 是单线程的。基于这点，同步代码会堵塞整个应用。比如说，多数的文件系统 API 都有它们的同步版本。下面代码演示了文件读取的同步和异步两种操作:</span></p><pre class=\"brush:js;toolbar:false\"><span style=\"font-size: 16px;\">//&nbsp;Asynchronous<br/>fs.readFile(&#39;file.txt&#39;,&nbsp;function(err,&nbsp;buffer)&nbsp;{<br/>&nbsp;&nbsp;var&nbsp;content&nbsp;=&nbsp;buffer.toString();<br/>});<br/>&nbsp;<br/>//&nbsp;Synchronous<br/>var&nbsp;content&nbsp;=&nbsp;fs.readFileSync(&#39;file.txt&#39;).toString();<br/></span></pre><p><br/><span style=\"font-size: 16px;\">不过要是你执行那种长时间的阻塞操作，主线程就会被阻塞到这些操作完成为止。这大大降低你应用的性能。所以，最好确保你的代码里用的都是异步版本 \nAPI，最起码你应该在性能节点异步。而且，你在选用第三方模块的时候也要很小心。因为当你想方设法把同步操作从你代码中剔除之后，一个外部库的同步调用\n会让你前功尽弃，降低你的应用性能。</span></p><h2 id=\"content_h2_4_5\"><span style=\"font-size: 16px;\">3. 缓存</span></h2><p><span style=\"font-size: 16px;\">如果你用到一些不经常变化的数据，你应该把它们缓存起来，改善性能。比如说，下面的代码是获取最新帖子并显示的例子:</span></p><pre class=\"brush:js;toolbar:false\"><span style=\"font-size: 16px;\">var&nbsp;router&nbsp;=&nbsp;express.Router();<br/>&nbsp;<br/>router.route(&#39;/latestPosts&#39;).get(function(req,&nbsp;res)&nbsp;{<br/>&nbsp;&nbsp;Post.getLatest(function(err,&nbsp;posts)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(err)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;err;<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;res.render(&#39;posts&#39;,&nbsp;{&nbsp;posts:&nbsp;posts&nbsp;});<br/>&nbsp;&nbsp;});<br/>});<br/></span></pre><p><span style=\"font-size: 16px;\"><br/></span></p><p><span style=\"font-size: 16px;\">&nbsp; 如果你不经常发贴的话，你可以把帖子列表缓存起来，然后一段时间之后再把它们清理掉。比如，我们可以用&nbsp;</span><a target=\"_blank\" href=\"http://www.oschina.net/p/redis\" rel=\"nofollow\" style=\"font-size: 16px; text-decoration: underline;\"><span style=\"font-size: 16px;\">Redis</span></a><span style=\"font-size: 16px;\"> 模块来达到这个目的。当然，你必须在你的服务器上装 Redis。然后你可以用叫做&nbsp;</span><a target=\"_blank\" href=\"http://www.oschina.net/p/node_redis\" rel=\"nofollow\" style=\"font-size: 16px; text-decoration: underline;\"><span style=\"font-size: 16px;\">node_redis</span></a><span style=\"font-size: 16px;\">&nbsp;的客户端来保存键/值对。下面的例子演示我们怎么缓存帖子:</span></p><pre class=\"brush:js;toolbar:false\"><span style=\"font-size: 16px;\">var&nbsp;redis&nbsp;=&nbsp;require(&#39;redis&#39;),<br/>&nbsp;&nbsp;&nbsp;&nbsp;client&nbsp;=&nbsp;redis.createClient(null,&nbsp;null,&nbsp;{&nbsp;detect_buffers:&nbsp;true&nbsp;}),<br/>&nbsp;&nbsp;&nbsp;&nbsp;router&nbsp;=&nbsp;express.Router();<br/>&nbsp;<br/>router.route(&#39;/latestPosts&#39;).get(function(req,res){<br/>&nbsp;&nbsp;client.get(&#39;posts&#39;,&nbsp;function&nbsp;(err,&nbsp;posts)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(posts)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;res.render(&#39;posts&#39;,&nbsp;{&nbsp;posts:&nbsp;JSON.parse(posts)&nbsp;});<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;Post.getLatest(function(err,&nbsp;posts)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(err)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;err;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;client.set(&#39;posts&#39;,&nbsp;JSON.stringify(posts));&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.render(&#39;posts&#39;,&nbsp;{&nbsp;posts:&nbsp;posts&nbsp;});<br/>&nbsp;&nbsp;&nbsp;&nbsp;});<br/>&nbsp;&nbsp;});<br/>});<br/></span></pre><p><br/><span style=\"font-size: 16px;\">&nbsp; 看到了吧，我们首先检查 Redis 缓存，看看是否有帖子。如果有，我们从缓存中拿这些帖子列表。否则我们就检索数据库内容，然后把结果缓存。此外，一定时间之后，我们可以清理 Redis 缓存，这样就可以更新内容了。</span></p><h2 id=\"content_h2_5_5\"><span style=\"font-size: 16px;\">4. gzip&nbsp;压缩</span></h2><p><span style=\"font-size: 16px;\">&nbsp; 开启 gzip 压缩对你的 Web 应用会产生巨大影响。当一个&nbsp;gzip 压缩浏览器请求某些资源的时候，服务器会在响应返回给浏览器之前进行压缩。如果你不用 gzip 压缩你的静态资源，浏览器拿到它们可能会花费更长时间。</span></p><p><span style=\"font-size: 16px;\">在 Express 应用中，我们可以用内建 express.static() 中间件来处理静态内容。此外，还可以用&nbsp;</span><a target=\"_blank\" href=\"https://github.com/expressjs/compression\" rel=\"nofollow\" style=\"font-size: 16px; text-decoration: underline;\"><span style=\"font-size: 16px;\">compression</span></a><span style=\"font-size: 16px;\">&nbsp;中间件压缩和处理静态内容。下面是使用例:</span></p><pre class=\"brush:js;toolbar:false\"><span style=\"font-size: 16px;\">var compression = require(&#39;compression&#39;);<br/> <br/>app.use(compression()); //use compression <br/>app.use(express.static(path.join(__dirname, &#39;public&#39;)));<br/></span></pre><h2 id=\"content_h2_6_5\"><span style=\"font-size: 16px;\">&nbsp;5. 如果可以，在用客户端渲染<br/> </span></h2><p><span style=\"font-size: 16px;\">&nbsp; 现在有超多功能强劲的客户端 MVC/MVVM 框架，比如说 </span><a target=\"_blank\" href=\"http://www.oschina.net/p/angularjs\" rel=\"nofollow\" style=\"font-size: 16px; text-decoration: underline;\"><span style=\"font-size: 16px;\">AngularJS</span></a><span style=\"font-size: 16px;\">, </span><a target=\"_blank\" href=\"http://www.oschina.net/p/ember\" rel=\"nofollow\" style=\"font-size: 16px; text-decoration: underline;\"><span style=\"font-size: 16px;\">Ember</span></a><span style=\"font-size: 16px;\">, </span><a target=\"_blank\" href=\"http://www.oschina.net/p/meteor\" rel=\"nofollow\" style=\"font-size: 16px; text-decoration: underline;\"><span style=\"font-size: 16px;\">Meteor</span></a><span style=\"font-size: 16px;\">, 等等，构建一个单页面应用变得非常简单。基本上，你只要公开一个 API，返回 </span><a target=\"_blank\" href=\"http://www.oschina.net/p/json\" rel=\"nofollow\" style=\"font-size: 16px; text-decoration: underline;\"><span style=\"font-size: 16px;\">JSON</span></a><span style=\"font-size: 16px;\">\n 响应给客户端就可以了，而不需要在服务端渲染页面。在客户端，你可以用框架来组织&nbsp;JSON 然后把它们显示在 UI 上。服务端只发送 JSON \n响应可以节省带宽，改善性能，因为你不需要在每个响应里面都返回布局标记了，对吧，你只需要返回纯 JSON，然后在客户端渲染它们。</span></p><p><span style=\"font-size: 16px;\">看下我的</span><a target=\"_blank\" href=\"http://www.sitepoint.com/creating-restful-apis-express-4/\" rel=\"nofollow\" style=\"font-size: 16px; text-decoration: underline;\"><span style=\"font-size: 16px;\">这个教程</span></a><span style=\"font-size: 16px;\">，它是关于怎样用&nbsp;Express 4&nbsp;公开一个 RESTful APIs的。我还写了</span><a target=\"_blank\" href=\"http://www.sitepoint.com/creating-crud-app-minutes-angulars-resource/\" rel=\"nofollow\" style=\"font-size: 16px; text-decoration: underline;\"><span style=\"font-size: 16px;\">另一篇教程</span></a><span style=\"font-size: 16px;\">，演示了怎样把这些 APIs 和&nbsp;AngularJS 结合起来。&nbsp;</span></p><p><br/></p><h2 id=\"content_h2_7_5\"><span style=\"font-size: 16px;\">6. 不要在 Sessions 存储太多数据</span></h2><p><span style=\"font-size: 16px;\">&nbsp; 典型的 </span><a href=\"http://www.oschina.net/p/expressjs\" target=\"_blank\" rel=\"nofollow\" style=\"font-size: 16px; text-decoration: underline;\"><span style=\"font-size: 16px;\">Express</span></a><span style=\"font-size: 16px;\"> 页面应用， Session 数据默认是保存在内存中的。当你把太多数据保存在 Session 的时候，会导致服务器开销显著增大。所以，要么你切换到别的储存方式来保存 Session 数据，要么尽量减少存储在 Session 中的数据量。</span></p><p><span style=\"font-size: 16px;\">比如说，当用户登录到你的应用的时候，你可以只在 Session 中保存他们的 ID 而不是整个用户数据对象。还有，对于那些你能够从 id 拿到对象的查询，你应该会喜欢用 &nbsp;</span><a href=\"http://www.oschina.net/p/mongodb\" target=\"_blank\" rel=\"nofollow\" style=\"font-size: 16px; text-decoration: underline;\"><span style=\"font-size: 16px;\">MongoDB</span></a><span style=\"font-size: 16px;\"> 或者 </span><a href=\"http://www.oschina.net/p/redis\" target=\"_blank\" rel=\"nofollow\" style=\"font-size: 16px; text-decoration: underline;\"><span style=\"font-size: 16px;\">Redis</span></a><span style=\"font-size: 16px;\"> 来存储 session 数据。</span></p><p><br/></p><h2 id=\"content_h2_8_5\"><span style=\"font-size: 16px;\">7. 优化查询</span></h2><p><span style=\"font-size: 16px;\">&nbsp; 假设你有个博客，你要在主页上显示最新帖子。你可能会通过&nbsp;</span><a target=\"_blank\" href=\"http://www.oschina.net/p/mongoose\" rel=\"nofollow\" style=\"font-size: 16px; text-decoration: underline;\"><span style=\"font-size: 16px;\">Mongoose</span></a><span style=\"font-size: 16px;\">&nbsp;这样取数据:</span></p><pre class=\"brush:js;toolbar:false\"><span style=\"font-size: 16px;\">Post.find().limit(10).exec(function(err, posts) {<br/> &nbsp;//send posts to client<br/>});<br/></span></pre><p><span style=\"font-size: 16px;\">不过问题是 Mongoose 的&nbsp;find() 方法会把对象的所有字段都查询出来，而许多字段在主页上并不要求。比如说，commentsis \n保存的是特定帖子的回复。我们不需要显示文章回复，所以我们可以在查询的时候把它给剔除掉。这无疑会提高速度。可以像这样优化上面那条查询:</span></p><pre class=\"brush:js;toolbar:false\"><span style=\"font-size: 16px;\">Post.find().limit(10).exclude(&#39;comments&#39;).exec(function(err, posts) {<br/> &nbsp;//send posts to client<br/>});<br/></span></pre><h2 id=\"content_h2_9_5\"><span style=\"font-size: 16px;\">&nbsp;8. 用标准的 V8 方法<br/> </span></h2><p><span style=\"font-size: 16px;\">&nbsp; 集合上的一些操作，比如 map，reduce，和 forEach 不一定支持所有浏览器。我们可以通过前台的库解决部分浏览器兼容性问题。但对于&nbsp;Node.js，你要确切知道 Google 的 </span><a target=\"_blank\" href=\"http://www.oschina.net/p/v8\" rel=\"nofollow\" style=\"font-size: 16px; text-decoration: underline;\"><span style=\"font-size: 16px;\">V8 JavaScript 引擎</span></a><span style=\"font-size: 16px;\">支持哪些操作。这样，你就可以在服务端直接用这些内建方法来操作集合了。&nbsp;</span></p><p><br/></p><h2 id=\"content_h2_9_9\"><span style=\"font-size: 16px;\">&nbsp;9. 在 Node 前面用 Nginx</span></h2><p><span style=\"font-size: 16px; text-decoration: underline;\">&nbsp;&nbsp;<a target=\"_blank\" href=\"http://www.oschina.net/p/nginx\" rel=\"nofollow\" style=\"font-size: 16px; text-decoration: underline;\">Nginx</a></span><span style=\"font-size: 16px;\">&nbsp;是个微小型轻量 Web 服务器，用它可以降低你的 </span><a target=\"_blank\" href=\"http://www.oschina.net/p/nodejs\" rel=\"nofollow\" style=\"font-size: 16px; text-decoration: underline;\"><span style=\"font-size: 16px;\">Node.js</span></a><span style=\"font-size: 16px;\"> 服务器的负载。你可以把静态资源配置到 nginx 上，而不是在 Node 上。你可以在&nbsp;nginx 上用 gzip 压缩响应，让所有的响应都变得更小。所以，如果你有个正在营运的产品，我觉得你应该会想用 nginx 来改善运行速度的。&nbsp;</span></p><p><br/></p><h2 id=\"content_h2_10_5\"><span style=\"font-size: 16px;\">10. 打包 JavaScript</span></h2><p><span style=\"font-size: 16px;\">&nbsp; 最后，你还可以大大提高页面应用速度，通过把多个 JS 文件打包。当浏览器在页面渲染中碰到&nbsp;&lt;script&gt; \n元素的时候会被堵塞，直到拿到这个脚本才继续运行(除非设置了异步属性)。比如，如果你的页面有五个 JavaScript \n文件，浏览器会发出五个独立的&nbsp;HTTP 请求来获取他们。如果把这五个文件压缩打包成一个，整体性能将可以大幅提升。CSS \n文件也是一样。你可以用诸如&nbsp;Grunt/Gulp 这样的编译工具来打包你的资源文件。</span></p><p><br/></p><h2 id=\"content_h2_10_7\"><span style=\"font-size: 16px;\">结论</span></h2><p><span style=\"font-size: 16px;\">上面 10 条技巧肯定可以提高你的 Web 应用的速度的。不过，我知道还有改善和优化的空间。如果你有任何改善性能的技巧的话，在回复里告诉我。</span></p><p><br/></p><h3><span style=\"font-size: 16px;\">英文原文：</span><a href=\"http://www.sitepoint.com/10-tips-make-node-js-web-app-faster/\" target=\"_blank\" style=\"font-size: 16px; text-decoration: underline;\"><span style=\"font-size: 16px;\">10 Tips to Make Your Node.js Web App Faster</span></a></h3>','[{\"type\":\"contents\",\"content\":\"   Node.js 受益于它的事件驱动和异步的特征，已经很快了。但是，在现代网络中只是快是不行的。如果你打算用 Node.js 开发你的下一个Web 应用的话，那么你就应该无所不用其极，让你的应用更快，异常的快。本文将介绍 10 条，经过检验得知可大大提高 Node 应用的技巧。废话不多说，让我们逐条来看看。\\n1、并行\\n\\n创建 Web 应用的时候，你可能要多次调用内部 API 来获取各种数据。比如说，假设在 Dashboard 页面上，你要执行下面这几个调用:\\n用户信息 -getUserProfile().\\n当前活动 -getRecentActivity().\\n订阅内容 -getSubscriptions().\\n通知内容 -getNotifications().\\n\\n为了拿到这些信息，你应该会为每个方法创建独立的中间件，然后将它们链接到 Dashboard 路由上。不过问题是，这些方法的执行是线性的，上一个没结束之前下一个不会开始。可行解决案是并行调用它们。\\n如你所知由于异步性，Node.js 非常擅长并行调用多个方法。我们不能暴殄天物。我上面提到的那些方法没有依赖性，所以我们可以并行执行它们。这样我们可以削减中间件数量，大幅提高速度。\\n我们可以用 async.js 来处理并行，它是一个专门用来调教 JavaScript 异步的 Node 模块。下面代码演示怎样用 async.js 并行调用多个方法的:\\nfunction runInParallel() {\\n  async.parallel([\\n    getUserProfile,\\n    getRecentActivity,\\n    getSubscriptions,\\n    getNotifications\\n  ], function(err, results) {\\n    //This callback runs when all the functions complete\\n  });\\n}\\n\\n2. 异步\\n根据设计 Node.js 是单线程的。基于这点，同步代码会堵塞整个应用。比如说，多数的文件系统 API 都有它们的同步版本。下面代码演示了文件读取的同步和异步两种操作:\\n// Asynchronous\\nfs.readFile(\'file.txt\', function(err, buffer) {\\n  var content = buffer.toString();\\n});\\n \\n// Synchronous\\nvar content = fs.readFileSync(\'file.txt\').toString();\\n\\n\\n不过要是你执行那种长时间的阻塞操作，主线程就会被阻塞到这些操作完成为止。这大大降低你应用的性能。所以，最好确保你的代码里用的都是异步版本 API，最起码你应该在性能节点异步。而且，你在选用第三方模块的时候也要很小心。因为当你想方设法把同步操作从你代码中剔除之后，一个外部库的同步调用会让你前功尽弃，降低你的应用性能。\\n3. 缓存\\n如果你用到一些不经常变化的数据，你应该把它们缓存起来，改善性能。比如说，下面的代码是获取最新帖子并显示的例子:\\nvar router = express.Router();\\n \\nrouter.route(\'/latestPosts\').get(function(req, res) {\\n  Post.getLatest(function(err, posts) {\\n    if (err) {\\n      throw err;\\n    }\\n \\n    res.render(\'posts\', { posts: posts });\\n  });\\n});\\n\\n\\n\\n  如果你不经常发贴的话，你可以把帖子列表缓存起来，然后一段时间之后再把它们清理掉。比如，我们可以用 Redis 模块来达到这个目的。当然，你必须在你的服务器上装 Redis。然后你可以用叫做 node_redis 的客户端来保存键/值对。下面的例子演示我们怎么缓存帖子:\\nvar redis = require(\'redis\'),\\n    client = redis.createClient(null, null, { detect_buffers: true }),\\n    router = express.Router();\\n \\nrouter.route(\'/latestPosts\').get(function(req,res){\\n  client.get(\'posts\', function (err, posts) {\\n    if (posts) {\\n      return res.render(\'posts\', { posts: JSON.parse(posts) });\\n    }\\n \\n    Post.getLatest(function(err, posts) {\\n      if (err) {\\n        throw err;\\n      }\\n \\n      client.set(\'posts\', JSON.stringify(posts));    \\n      res.render(\'posts\', { posts: posts });\\n    });\\n  });\\n});\\n\\n\\n  看到了吧，我们首先检查 Redis 缓存，看看是否有帖子。如果有，我们从缓存中拿这些帖子列表。否则我们就检索数据库内容，然后把结果缓存。此外，一定时间之后，我们可以清理 Redis 缓存，这样就可以更新内容了。\\n4. gzip 压缩\\n  开启 gzip 压缩对你的 Web 应用会产生巨大影响。当一个 gzip 压缩浏览器请求某些资源的时候，服务器会在响应返回给浏览器之前进行压缩。如果你不用 gzip 压缩你的静态资源，浏览器拿到它们可能会花费更长时间。\\n在 Express 应用中，我们可以用内建 express.static() 中间件来处理静态内容。此外，还可以用 compression 中间件压缩和处理静态内容。下面是使用例:\\nvar compression = require(\'compression\');\\n \\napp.use(compression()); //use compression \\napp.use(express.static(path.join(__dirname, \'public\')));\\n\\n 5. 如果可以，在用客户端渲染\\n \\n  现在有超多功能强劲的客户端 MVC/MVVM 框架，比如说 AngularJS, Ember, Meteor, 等等，构建一个单页面应用变得非常简单。基本上，你只要公开一个 API，返回 JSON 响应给客户端就可以了，而不需要在服务端渲染页面。在客户端，你可以用框架来组织 JSON 然后把它们显示在 UI 上。服务端只发送 JSON 响应可以节省带宽，改善性能，因为你不需要在每个响应里面都返回布局标记了，对吧，你只需要返回纯 JSON，然后在客户端渲染它们。\\n看下我的这个教程，它是关于怎样用 Express 4 公开一个 RESTful APIs的。我还写了另一篇教程，演示了怎样把这些 APIs 和 AngularJS 结合起来。 \\n\\n6. 不要在 Sessions 存储太多数据\\n  典型的 Express 页面应用， Session 数据默认是保存在内存中的。当你把太多数据保存在 Session 的时候，会导致服务器开销显著增大。所以，要么你切换到别的储存方式来保存 Session 数据，要么尽量减少存储在 Session 中的数据量。\\n比如说，当用户登录到你的应用的时候，你可以只在 Session 中保存他们的 ID 而不是整个用户数据对象。还有，对于那些你能够从 id 拿到对象的查询，你应该会喜欢用  MongoDB 或者 Redis 来存储 session 数据。\\n\\n7. 优化查询\\n  假设你有个博客，你要在主页上显示最新帖子。你可能会通过 Mongoose 这样取数据:\\nPost.find().limit(10).exec(function(err, posts) {\\n  //send posts to client\\n});\\n\\n不过问题是 Mongoose 的 find() 方法会把对象的所有字段都查询出来，而许多字段在主页上并不要求。比如说，commentsis 保存的是特定帖子的回复。我们不需要显示文章回复，所以我们可以在查询的时候把它给剔除掉。这无疑会提高速度。可以像这样优化上面那条查询:\\nPost.find().limit(10).exclude(\'comments\').exec(function(err, posts) {\\n  //send posts to client\\n});\\n\\n 8. 用标准的 V8 方法\\n \\n  集合上的一些操作，比如 map，reduce，和 forEach 不一定支持所有浏览器。我们可以通过前台的库解决部分浏览器兼容性问题。但对于 Node.js，你要确切知道 Google 的 V8 JavaScript 引擎支持哪些操作。这样，你就可以在服务端直接用这些内建方法来操作集合了。 \\n\\n 9. 在 Node 前面用 Nginx\\n  Nginx 是个微小型轻量 Web 服务器，用它可以降低你的 Node.js 服务器的负载。你可以把静态资源配置到 nginx 上，而不是在 Node 上。你可以在 nginx 上用 gzip 压缩响应，让所有的响应都变得更小。所以，如果你有个正在营运的产品，我觉得你应该会想用 nginx 来改善运行速度的。 \\n\\n10. 打包 JavaScript\\n  最后，你还可以大大提高页面应用速度，通过把多个 JS 文件打包。当浏览器在页面渲染中碰到 &lt;script&gt; 元素的时候会被堵塞，直到拿到这个脚本才继续运行(除非设置了异步属性)。比如，如果你的页面有五个 JavaScript 文件，浏览器会发出五个独立的 HTTP 请求来获取他们。如果把这五个文件压缩打包成一个，整体性能将可以大幅提升。CSS 文件也是一样。你可以用诸如 Grunt/Gulp 这样的编译工具来打包你的资源文件。\\n\\n结论\\n上面 10 条技巧肯定可以提高你的 Web 应用的速度的。不过，我知道还有改善和优化的空间。如果你有任何改善性能的技巧的话，在回复里告诉我。\\n\\n英文原文：10 Tips to Make Your Node.js Web App Faster\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1436411120000.jpg','2015-07-09 03:13:41','2020-08-20 15:44:27'),(280,'第4天 路由——路由例子演示','路由例子演示','2','1','','路由演示','2',NULL,'','这一节，我们要做一个测试路由功能的小程序，很简单，我们一起动手来做。我们 的意思就是你和我一起思考和编码，不要光看着，那样对学习是毫无用途的','1','','','0:01',762,'2','0',NULL,1,'0',225620,'<h3>路由例子演示</h3><p>这一节，我们要做一个测试路由功能的小程序，很简单，我们一起动手来做。我们 的意思就是你和我一起思考和编码，不要光看着，那样对学习是毫无用途的，人有个习惯，对于显而易见的或简单的事情就想等会去做，我也有这个习惯。</p><blockquote><p>记得有人去后台看篮球巨星们如何练球，发现其他篮球巨星都做着各种花哨的动作和常人无法做到的扣篮，而只有乔丹在三分线上不停的练投篮。这个简单的练习，在赛末最关键的时刻，借助乔丹魔术般三分球，让全场轰动掌声一片。</p></blockquote><p>回到路由例子上来，以下是我编写的测试代码，然后会用视频方式，演示其效果。</p><p>在example/route目录内建立一个<code>run.js</code>文件。</p><pre>var&nbsp;App&nbsp;=&nbsp;require(&quot;../..&quot;).App,\n&nbsp;&nbsp;&nbsp;&nbsp;app&nbsp;=&nbsp;new&nbsp;App;\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.get(&quot;/about&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.write(&quot;my&nbsp;name&nbsp;is&nbsp;leo&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end();\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.get(&quot;/contact&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.write(&quot;contact&nbsp;me&nbsp;use&nbsp;QQ&nbsp;1405491181&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end();\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.listen(3000);</pre><hr/><p>视频演示：<span class=\"invade-word\"></span></p><p><span class=\"invade-word\"></span><embed type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" quality=\"high\" allowfullscreen=\"true\" src=\"http://static.video.qq.com/TPout.swf?vid=w0115uq99pi\" align=\"middle\" height=\"400\" width=\"480\"/><span class=\"invade-word\"></span></p><hr/><p>（小胖问：那么如果同时加入static静态资源插件呢？）</p><p>你这个问题很值得深思！你可以自己做个实验，比如下面的代码，到底会有出现什么效果呢？</p><pre>......\napp.use(static(&quot;/public&quot;));&nbsp;&nbsp;//&nbsp;在&nbsp;public目录下有about.html文件\napp.get(&quot;/about.html&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.write(&quot;hello&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.send();\n});\n......</pre><p>到底什么效果呢？ 自己试试看吧。</p><p>下一节，我们把新版本发布到npmjs和git上去，版本为0.0.3 。<span class=\"invade-word\"></span></p>','[{\"type\":\"contents\",\"content\":\"路由例子演示\\n这一节，我们要做一个测试路由功能的小程序，很简单，我们一起动手来做。我们 的意思就是你和我一起思考和编码，不要光看着，那样对学习是毫无用途的，人有个习惯，对于显而易见的或简单的事情就想等会去做，我也有这个习惯。\\n记得有人去后台看篮球巨星们如何练球，发现其他篮球巨星都做着各种花哨的动作和常人无法做到的扣篮，而只有乔丹在三分线上不停的练投篮。这个简单的练习，在赛末最关键的时刻，借助乔丹魔术般三分球，让全场轰动掌声一片。\\n\\n回到路由例子上来，以下是我编写的测试代码，然后会用视频方式，演示其效果。\\n在example/route目录内建立一个run.js文件。\\nvar App = require(\\\"../..\\\").App,\\n    app = new App;\\n\\n    app.get(\\\"/about\\\",function(req,res){\\n        res.write(\\\"my name is leo\\\");\\n        res.end();\\n    })\\n\\n    app.get(\\\"/contact\\\",function(req,res){\\n        res.write(\\\"contact me use QQ 1405491181\\\");\\n        res.end();\\n    })\\n\\n    app.listen(3000);\\n视频演示：\\n&lt;embed type=\\\"application/x-shockwave-flash\\\" allowscriptaccess=\\\"always\\\" quality=\\\"high\\\" allowfullscreen=\\\"true\\\" src=\\\"http://static.video.qq.com/TPout.swf?vid=w0115uq99pi\\\" align=\\\"middle\\\" height=\\\"400\\\" width=\\\"480\\\"&gt;\\n（小胖问：那么如果同时加入static静态资源插件呢？）\\n你这个问题很值得深思！你可以自己做个实验，比如下面的代码，到底会有出现什么效果呢？\\n......\\napp.use(static(\\\"/public\\\"));  // 在 public目录下有about.html文件\\napp.get(\\\"/about.html\\\",function(req,res){\\n      res.write(\\\"hello\\\");\\n      res.send();\\n});\\n......\\n到底什么效果呢？ 自己试试看吧。\\n下一节，我们把新版本发布到npmjs和git上去，版本为0.0.3 。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444892053000.jpg','2015-09-20 11:00:09','2020-08-20 15:44:24'),(281,'Express 4.8.x—编写第一个Express应用','编写第一个Express应用','2','1','','Express应用','2',NULL,'','编写第一个Express应用,生成应用程序目录,之前已介绍这里不再提。','1','','','0:01',762,'2','0',NULL,0,'0',225948,'<h3>编写第一个Express应用</h3><h4 id=\"-\">生成应用程序目录</h4><p>之前已介绍这里不再提。</p><h4 id=\"-\">程序目录介绍</h4><ul class=\" list-paddingleft-2\"><li><p>app.js &nbsp;主程序</p></li><li><p>node_modules &nbsp; 依赖模块包</p></li><li><p>public &nbsp; 静态网目录</p></li><li><p>views &nbsp; 动态页目录</p></li><li><p>bin &nbsp; 启动程序</p></li><li><p>package.json &nbsp; npm命令需要的描述信息</p></li><li><p>routes &nbsp; &nbsp;路由器处理器目录</p></li></ul><h4 id=\"-\">启动</h4><p>运行 <code>npm start</code> 启动程序，为什么能启动呢？你可以打开package.</p><pre>&nbsp;&nbsp;&quot;scripts&quot;:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;start&quot;:&nbsp;&quot;node&nbsp;./bin/www&quot;\n&nbsp;&nbsp;}</pre><p>其实是运行的 <code>node ./bin/www</code> <span class=\"invade-word\">this</span></p><h4 id=\"bin-www-\">bin/www 启动程序</h4><p>那么我们就知道了，启动程序是 bin/www，下面是对这个程序的注释说明。</p><pre>var&nbsp;debug&nbsp;=&nbsp;require(&#39;debug&#39;)(&#39;myapp&#39;);\n\n//&nbsp;加载主程序\nvar&nbsp;app&nbsp;=&nbsp;require(&#39;../app&#39;);\n\n//&nbsp;如果不指定服务器监听端口号默认就是&nbsp;3000\napp.set(&#39;port&#39;,&nbsp;process.env.PORT&nbsp;||&nbsp;3000);\n\n//&nbsp;&nbsp;启动程序，开始监听客户端请求。\nvar&nbsp;server&nbsp;=&nbsp;app.listen(app.get(&#39;port&#39;),&nbsp;function()&nbsp;{\n&nbsp;&nbsp;debug(&#39;Express&nbsp;server&nbsp;listening&nbsp;on&nbsp;port&nbsp;&#39;&nbsp;+&nbsp;server.address().port);\n});</pre><p>那么我们可以通过下面的命令指定一个端口号</p><pre>$&nbsp;PORT=8080&nbsp;npm&nbsp;start</pre><p>这时候，浏览器通过 localhost:8080 能访问到页面。</p><h4 id=\"app-js-\">app.js 主程序</h4><p>下面对主程序关键代码进行注释说明。</p><pre>//&nbsp;创建应用程序\nvar&nbsp;app&nbsp;=&nbsp;express();\n\n//&nbsp;设置动态页目录\napp.set(&#39;views&#39;,&nbsp;path.join(__dirname,&nbsp;&#39;views&#39;));\n\n//&nbsp;设置动态页模版引擎\napp.set(&#39;view&nbsp;engine&#39;,&nbsp;&#39;jade&#39;);\n\n//&nbsp;中间件加载，这里不多说，之后章节会详细介绍\napp.use(favicon());\napp.use(logger(&#39;dev&#39;));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded());\napp.use(cookieParser());\n\n//&nbsp;指定静态页目录\napp.use(express.static(path.join(__dirname,&nbsp;&#39;public&#39;)));\n\n//&nbsp;加载路由处理器\napp.use(&#39;/&#39;,&nbsp;routes);\napp.use(&#39;/users&#39;,&nbsp;users);\n\n//&nbsp;如果有任何错误都会设置成&nbsp;404错误\napp.use(function(req,&nbsp;res,&nbsp;next)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;err&nbsp;=&nbsp;new&nbsp;Error(&#39;Not&nbsp;Found&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;err.status&nbsp;=&nbsp;404;\n&nbsp;&nbsp;&nbsp;&nbsp;next(err);\n});\n\n//&nbsp;如果环境设置成&nbsp;开发模式，那么会打印出详细的错误信息\nif&nbsp;(app.get(&#39;env&#39;)&nbsp;===&nbsp;&#39;development&#39;)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;app.use(function(err,&nbsp;req,&nbsp;res,&nbsp;next)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.status(err.status&nbsp;||&nbsp;500);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.render(&#39;error&#39;,&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;message:&nbsp;err.message,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error:&nbsp;err\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;});\n}\n\n//&nbsp;生产模式下，不会泄漏error\napp.use(function(err,&nbsp;req,&nbsp;res,&nbsp;next)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;res.status(err.status&nbsp;||&nbsp;500);\n&nbsp;&nbsp;&nbsp;&nbsp;res.render(&#39;error&#39;,&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;message:&nbsp;err.message,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error:&nbsp;{}&nbsp;&nbsp;//&nbsp;不会泄漏error\n&nbsp;&nbsp;&nbsp;&nbsp;});\n});</pre><p>我们可以在public 目录下创建一个 test.html 文件，内容任意，然后通过 localhost:3000/test.html 即可访问到。</p><h4 id=\"-\">路由</h4><p><code>routes</code> 目录下是路由处理器。</p><p>下面对 &nbsp;<code>routes/index.js</code> &nbsp;做注释说明。</p><pre>var&nbsp;express&nbsp;=&nbsp;require(&#39;express&#39;);\n\n//&nbsp;创建一个路由器\nvar&nbsp;router&nbsp;=&nbsp;express.Router();\n\n//&nbsp;为路由器添加路由处理器，也就是为&nbsp;`/`&nbsp;请求路由加入处理器\n//&nbsp;当有人访问时会执行这个函数。\n//&nbsp;req&nbsp;是请求对象，res是响应对象。\nrouter.get(&#39;/&#39;,&nbsp;function(req,&nbsp;res)&nbsp;{\n\n&nbsp;&nbsp;//&nbsp;调用响应对象的render返回给客户端一个响应结果\n&nbsp;&nbsp;//&nbsp;这个响应结果是由动态页面&nbsp;views/index.jade&nbsp;生成的。\n&nbsp;&nbsp;res.render(&#39;index&#39;,&nbsp;{&nbsp;title:&nbsp;&#39;Express&#39;&nbsp;});\n});\n\nmodule.exports&nbsp;=&nbsp;router;</pre><h4 id=\"views-index-jade-\">views/index.jade 动态模版</h4><pre>extends&nbsp;layout\n\nblock&nbsp;content\n&nbsp;&nbsp;h1=&nbsp;title\n&nbsp;&nbsp;p&nbsp;Welcome&nbsp;to&nbsp;#{title}</pre><p>你可能一头雾水，那也无所谓，它最终还是会生成如下的结果，并返回给请求者（浏览器）：</p><pre>&lt;!DOCTYPE&nbsp;html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Express&lt;/title&gt;\n&lt;link&nbsp;rel=&quot;stylesheet&quot;&nbsp;href=&quot;/stylesheets/style.css&quot;&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&nbsp;&nbsp;&lt;h1&gt;Express&lt;/h1&gt;\n&nbsp;&nbsp;&lt;p&gt;Welcome&nbsp;to&nbsp;Express&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre><p>如果我们这样修改，<code>res.render(“index”,{title:”Express”})</code> 的title参数和动态页面的关系，如果我们 这样写 <code>res.render(“index”,{title:”Hello”,body:”Node.js”})</code> &nbsp;，然后界面修改成</p><pre>extends&nbsp;layout\n\nblock&nbsp;content\n&nbsp;&nbsp;h1=&nbsp;title\n&nbsp;&nbsp;p&nbsp;Welcome&nbsp;to&nbsp;#{title+body}</pre><p>运行结果如何？你可以运行一下。</p><p>本节内容不多，主要是对express给我们生成的这个demo进行注释说明，从而对express有个初步了解。</p>','[{\"type\":\"contents\",\"content\":\"编写第一个Express应用\\n生成应用程序目录\\n之前已介绍这里不再提。\\n程序目录介绍\\napp.js  主程序\\nnode_modules   依赖模块包\\npublic   静态网目录\\nviews   动态页目录\\nbin   启动程序\\npackage.json   npm命令需要的描述信息\\nroutes    路由器处理器目录\\n\\n启动\\n运行 npm start 启动程序，为什么能启动呢？你可以打开package.\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"node ./bin/www\\\"\\n  }\\n其实是运行的 node ./bin/www this\\nbin/www 启动程序\\n那么我们就知道了，启动程序是 bin/www，下面是对这个程序的注释说明。\\nvar debug = require(\'debug\')(\'myapp\');\\n\\n// 加载主程序\\nvar app = require(\'../app\');\\n\\n// 如果不指定服务器监听端口号默认就是 3000\\napp.set(\'port\', process.env.PORT || 3000);\\n\\n//  启动程序，开始监听客户端请求。\\nvar server = app.listen(app.get(\'port\'), function() {\\n  debug(\'Express server listening on port \' + server.address().port);\\n});\\n那么我们可以通过下面的命令指定一个端口号\\n$ PORT=8080 npm start\\n这时候，浏览器通过 localhost:8080 能访问到页面。\\napp.js 主程序\\n下面对主程序关键代码进行注释说明。\\n// 创建应用程序\\nvar app = express();\\n\\n// 设置动态页目录\\napp.set(\'views\', path.join(__dirname, \'views\'));\\n\\n// 设置动态页模版引擎\\napp.set(\'view engine\', \'jade\');\\n\\n// 中间件加载，这里不多说，之后章节会详细介绍\\napp.use(favicon());\\napp.use(logger(\'dev\'));\\napp.use(bodyParser.json());\\napp.use(bodyParser.urlencoded());\\napp.use(cookieParser());\\n\\n// 指定静态页目录\\napp.use(express.static(path.join(__dirname, \'public\')));\\n\\n// 加载路由处理器\\napp.use(\'/\', routes);\\napp.use(\'/users\', users);\\n\\n// 如果有任何错误都会设置成 404错误\\napp.use(function(req, res, next) {\\n    var err = new Error(\'Not Found\');\\n    err.status = 404;\\n    next(err);\\n});\\n\\n// 如果环境设置成 开发模式，那么会打印出详细的错误信息\\nif (app.get(\'env\') === \'development\') {\\n    app.use(function(err, req, res, next) {\\n        res.status(err.status || 500);\\n        res.render(\'error\', {\\n            message: err.message,\\n            error: err\\n        });\\n    });\\n}\\n\\n// 生产模式下，不会泄漏error\\napp.use(function(err, req, res, next) {\\n    res.status(err.status || 500);\\n    res.render(\'error\', {\\n        message: err.message,\\n        error: {}  // 不会泄漏error\\n    });\\n});\\n我们可以在public 目录下创建一个 test.html 文件，内容任意，然后通过 localhost:3000/test.html 即可访问到。\\n路由\\nroutes 目录下是路由处理器。\\n下面对  routes/index.js  做注释说明。\\nvar express = require(\'express\');\\n\\n// 创建一个路由器\\nvar router = express.Router();\\n\\n// 为路由器添加路由处理器，也就是为 `/` 请求路由加入处理器\\n// 当有人访问时会执行这个函数。\\n// req 是请求对象，res是响应对象。\\nrouter.get(\'/\', function(req, res) {\\n\\n  // 调用响应对象的render返回给客户端一个响应结果\\n  // 这个响应结果是由动态页面 views/index.jade 生成的。\\n  res.render(\'index\', { title: \'Express\' });\\n});\\n\\nmodule.exports = router;\\nviews/index.jade 动态模版\\nextends layout\\n\\nblock content\\n  h1= title\\n  p Welcome to #{title}\\n你可能一头雾水，那也无所谓，它最终还是会生成如下的结果，并返回给请求者（浏览器）：\\n&lt;!DOCTYPE html&gt;\\n&lt;html&gt;\\n&lt;head&gt;\\n&lt;title&gt;Express&lt;/title&gt;\\n&lt;link rel=\\\"stylesheet\\\" href=\\\"/stylesheets/style.css\\\"&gt;\\n&lt;/head&gt;\\n&lt;body&gt;\\n  &lt;h1&gt;Express&lt;/h1&gt;\\n  &lt;p&gt;Welcome to Express&lt;/p&gt;\\n&lt;/body&gt;\\n&lt;/html&gt;\\n如果我们这样修改，res.render(“index”,{title:”Express”}) 的title参数和动态页面的关系，如果我们 这样写 res.render(“index”,{title:”Hello”,body:”Node.js”})  ，然后界面修改成\\nextends layout\\n\\nblock content\\n  h1= title\\n  p Welcome to #{title+body}\\n运行结果如何？你可以运行一下。\\n本节内容不多，主要是对express给我们生成的这个demo进行注释说明，从而对express有个初步了解。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445057774000.jpg','2015-10-17 04:57:49','2020-08-20 15:44:22'),(282,'Express 4.8.x—​mongoose的增删改','​mongoose的增删改','2','1','','mongoose','2',NULL,'','上一节，得到了 Blog 这个模型，你可以理解为一个类，下面我们对它进行增删改操作。','1','','','0:01',762,'2','0',NULL,0,'0',223951,'<h3>mongoose的增删改</h3><p>上一节，得到了 Blog 这个模型，你可以理解为一个类，下面我们对它进行增删改操作。</p><h4 id=\"save\">save</h4><pre>var&nbsp;blog&nbsp;=&nbsp;new&nbsp;Blog({&nbsp;title:”my&nbsp;name&nbsp;is&nbsp;leo”&nbsp;&nbsp;…&nbsp;…&nbsp;});\nblog.save(function(err){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……\n})</pre><p>很简单！没什么要多说的。</p><h4 id=\"update\">update</h4><pre>Blog.update({&nbsp;_id:&nbsp;id&nbsp;},&nbsp;{&nbsp;$set:&nbsp;{&nbsp;title:&nbsp;“my&nbsp;name&nbsp;is&nbsp;brighthas”&nbsp;}},&nbsp;function(err,blog){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……\n});</pre><p>这个例子中，修改了id对应的Blog实例的 title 属性，回调函数中，blog是修改后的。</p><h4 id=\"remove\">remove</h4><pre>blog.remove(function(err,blog){\n&nbsp;&nbsp;&nbsp;&nbsp;…&nbsp;…&nbsp;\n})</pre><p>不多说，根据这些代码即可了解 mongoose 的增删改 功能，非常简单。</p>','[{\"type\":\"contents\",\"content\":\"mongoose的增删改\\n上一节，得到了 Blog 这个模型，你可以理解为一个类，下面我们对它进行增删改操作。\\nsave\\nvar blog = new Blog({ title:”my name is leo”  … … });\\nblog.save(function(err){\\n      ……\\n})\\n很简单！没什么要多说的。\\nupdate\\nBlog.update({ _id: id }, { $set: { title: “my name is brighthas” }}, function(err,blog){\\n       ……\\n});\\n这个例子中，修改了id对应的Blog实例的 title 属性，回调函数中，blog是修改后的。\\nremove\\nblog.remove(function(err,blog){\\n    … … \\n})\\n不多说，根据这些代码即可了解 mongoose 的增删改 功能，非常简单。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445060057000.jpg','2015-10-17 05:35:16','2020-08-20 15:44:22'),(283,'bootstrap 3.3 模态框垂直居中问题','bootstrap 模态框垂直居中问题','1','1','','bootstrap','2',NULL,'','Bootstrap 是最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目。为所有开发者、所有应用场景而设计.Bootstrap 让前端开发更快速、简单。所有开发者都能快速上手、所有设备都可以适配、所有项目都适用。','1','','','0:01',762,'2','0',NULL,0,'0',226149,'<p>&nbsp;<span style=\"font-size: 16px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\"> &nbsp;Bootstrap 是最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目。为所有开发者、所有应用场景而设计.Bootstrap 让前端开发更快速、简单。所有开发者都能快速上手、所有设备都可以适配、所有项目都适用。</span></p><p><span style=\"font-size: 16px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">&nbsp; &nbsp;用过Bootstrap的童鞋有时候都会遇到一个问题，关于模态窗口，总是从上面slide下来，位置并不居中，在网上找了一些方式，例如弹出窗口后修改css，可以实现，还可以通过修改原生bootstrap.js 文件来调整下拉模态窗口的位置，下面介绍一种简单移动的方式，让模态窗口在屏幕上居中显示：</span><br/></p><pre class=\"brush:js;toolbar:false\">/*&nbsp;center&nbsp;modal&nbsp;*/\nfunction&nbsp;centerModals(){\n&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;.modal&#39;).each(function(i){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;$clone&nbsp;=&nbsp;$(this).clone().css(&#39;display&#39;,&nbsp;&#39;block&#39;).appendTo(&#39;body&#39;);&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;top&nbsp;=&nbsp;Math.round(($clone.height()&nbsp;-&nbsp;$clone.find(&#39;.modal-content&#39;).height())&nbsp;/&nbsp;2);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top&nbsp;=&nbsp;top&nbsp;&gt;&nbsp;0&nbsp;?&nbsp;top&nbsp;:&nbsp;0;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$clone.remove();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(this).find(&#39;.modal-content&#39;).css(&quot;margin-top&quot;,&nbsp;top);\n&nbsp;&nbsp;&nbsp;&nbsp;});\n}\n$(&#39;.modal&#39;).on(&#39;show.bs.modal&#39;,&nbsp;centerModals);\n$(window).on(&#39;resize&#39;,&nbsp;centerModals);</pre><p><br/></p>','[{\"type\":\"contents\",\"content\":\"   Bootstrap 是最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目。为所有开发者、所有应用场景而设计.Bootstrap 让前端开发更快速、简单。所有开发者都能快速上手、所有设备都可以适配、所有项目都适用。\\n   用过Bootstrap的童鞋有时候都会遇到一个问题，关于模态窗口，总是从上面slide下来，位置并不居中，在网上找了一些方式，例如弹出窗口后修改css，可以实现，还可以通过修改原生bootstrap.js 文件来调整下拉模态窗口的位置，下面介绍一种简单移动的方式，让模态窗口在屏幕上居中显示：\\n/* center modal */\\nfunction centerModals(){\\n    $(\'.modal\').each(function(i){\\n        var $clone = $(this).clone().css(\'display\', \'block\').appendTo(\'body\');    var top = Math.round(($clone.height() - $clone.find(\'.modal-content\').height()) / 2);\\n        top = top &gt; 0 ? top : 0;\\n        $clone.remove();\\n        $(this).find(\'.modal-content\').css(\\\"margin-top\\\", top);\\n    });\\n}\\n$(\'.modal\').on(\'show.bs.modal\', centerModals);\\n$(window).on(\'resize\', centerModals);\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1435730972000.jpg','2015-07-02 03:36:33','2020-08-20 15:44:27'),(284,'Node.js API实例讲解——Buffer的读取方法','Buffer的读取方法','2','1','','nodeJs教程,前端开发','2',NULL,'','参看上一节“Buffer的写入数据”,本节的概念与上节相同。同时写方法和读方法是一一对应的。下面简单举例说明Buffer的读取操作。','1','','','0:01',762,'2','0',NULL,0,'0',223291,'<h3>Buffer的读取方法</h3><p><br/></p><p>参看上一节“Buffer的写入数据”,本节的概念与上节相同。同时写方法和读方法是一一对应的。下面简单举例说明Buffer的读取操作。</p><h3>buf.readUInt8(offset, [noAssert])</h3><pre class=\"code\">return&nbsp;返回读取到的Number。\noffset&nbsp;参数，读取的起始位置，不可省略。\nnoAssert[可选]参数，\n默认false当超出buf的范围时会抛出异常，\n设置true超出buf范围不会抛出异常，读取范围内的byte，丢弃超出的部分。</pre><p>例</p><pre class=\"code\">var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer(8);\nbuf.fill(0);\nbuf.writeUInt8(12,0);\nconsole.log(buf.readUInt8(0));&nbsp;//&nbsp;12\nbuf.writeUInt16LE(12,0);\nconsole.log(buf.readUInt16LE(0));&nbsp;//&nbsp;12\nbuf.writeUInt16BE(12,0);\nconsole.log(buf.readUInt16BE(0));&nbsp;//&nbsp;12\nbuf.writeUInt32LE(12,0);\nconsole.log(buf.readUInt32LE(0));&nbsp;//&nbsp;12\nbuf.writeUInt32BE(12,0);\nconsole.log(buf.readUInt32BE(0));&nbsp;//&nbsp;12</pre><h3>buf.copy(targetBuffer, [targetStart], [sourceStart], [sourceEnd])</h3><p>可以通过copy方法读取一个buffer的数据拷贝到另一个buffer对象内。</p><p>targetBuffer参数表示拷贝到的目标buffer。</p><p>targetStart[可选]表示拷贝targetBuffer的起始位置，默认 0 。</p><p>sourceStart[可选]表示原buffer拷贝的起始位置，默认 0 。</p><p>sourceEnd[可选] 表示原buffer拷贝的结束位置，默认buf.length 。</p><p>例1</p><pre class=\"code\">&nbsp;var&nbsp;sourceBuf&nbsp;=&nbsp;new&nbsp;Buffer(&quot;世界你好&quot;);\n&nbsp;var&nbsp;targetBuf&nbsp;=&nbsp;new&nbsp;Buffer(6);\n&nbsp;sourceBuf.copy(targetBuf,0,3,9);\n&nbsp;console.log(targetBuf.toString());&nbsp;&nbsp;//&nbsp;打印&nbsp;&quot;界你&quot;</pre><p>详细说明</p><pre class=\"code\">&nbsp;字符串&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;世&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;界&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;你&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;好\n&nbsp;bytes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e4&nbsp;b8&nbsp;96&nbsp;&nbsp;&nbsp;e7&nbsp;95&nbsp;8c&nbsp;&nbsp;&nbsp;e4&nbsp;bd&nbsp;a0&nbsp;&nbsp;&nbsp;e5&nbsp;a5&nbsp;bdgodgoogoglook&nbsp;sourceBuf.copy(targetBuf,0,3,9);\n&nbsp;e7&nbsp;95&nbsp;8c&nbsp;e4&nbsp;bd&nbsp;a0&nbsp;&nbsp;六个字节是最终被拷贝的bytes</pre><p>例2,不带参数</p><pre class=\"code\">&nbsp;\n&nbsp;var&nbsp;sourceBuf&nbsp;=&nbsp;new&nbsp;Buffer(&quot;世界你好&quot;);\n&nbsp;var&nbsp;targetBuf&nbsp;=&nbsp;new&nbsp;Buffer(6);\n&nbsp;var&nbsp;targetBuf2&nbsp;=&nbsp;new&nbsp;Buffer(9);\n&nbsp;sourceBuf.copy(targetBuf);\n&nbsp;sourceBuf.copy(targetBuf2);\n&nbsp;console.log(targetBuf.toString());&nbsp;&nbsp;//&nbsp;打印&nbsp;&quot;世界&quot;&nbsp;\n&nbsp;console.log(targetBuf2.toString());&nbsp;&nbsp;//&nbsp;打印&nbsp;&quot;世界你&quot;</pre><p><br/></p>','[{\"type\":\"contents\",\"content\":\"Buffer的读取方法\\n\\n参看上一节“Buffer的写入数据”,本节的概念与上节相同。同时写方法和读方法是一一对应的。下面简单举例说明Buffer的读取操作。\\nbuf.readUInt8(offset, [noAssert])\\nreturn 返回读取到的Number。\\noffset 参数，读取的起始位置，不可省略。\\nnoAssert[可选]参数，\\n默认false当超出buf的范围时会抛出异常，\\n设置true超出buf范围不会抛出异常，读取范围内的byte，丢弃超出的部分。\\n例\\nvar buf = new Buffer(8);\\nbuf.fill(0);\\nbuf.writeUInt8(12,0);\\nconsole.log(buf.readUInt8(0)); // 12\\nbuf.writeUInt16LE(12,0);\\nconsole.log(buf.readUInt16LE(0)); // 12\\nbuf.writeUInt16BE(12,0);\\nconsole.log(buf.readUInt16BE(0)); // 12\\nbuf.writeUInt32LE(12,0);\\nconsole.log(buf.readUInt32LE(0)); // 12\\nbuf.writeUInt32BE(12,0);\\nconsole.log(buf.readUInt32BE(0)); // 12\\nbuf.copy(targetBuffer, [targetStart], [sourceStart], [sourceEnd])\\n可以通过copy方法读取一个buffer的数据拷贝到另一个buffer对象内。\\ntargetBuffer参数表示拷贝到的目标buffer。\\ntargetStart[可选]表示拷贝targetBuffer的起始位置，默认 0 。\\nsourceStart[可选]表示原buffer拷贝的起始位置，默认 0 。\\nsourceEnd[可选] 表示原buffer拷贝的结束位置，默认buf.length 。\\n例1\\n var sourceBuf = new Buffer(\\\"世界你好\\\");\\n var targetBuf = new Buffer(6);\\n sourceBuf.copy(targetBuf,0,3,9);\\n console.log(targetBuf.toString());  // 打印 \\\"界你\\\"\\n详细说明\\n 字符串       世         界         你         好\\n bytes     e4 b8 96   e7 95 8c   e4 bd a0   e5 a5 bdgodgoogoglook sourceBuf.copy(targetBuf,0,3,9);\\n e7 95 8c e4 bd a0  六个字节是最终被拷贝的bytes\\n例2,不带参数\\n \\n var sourceBuf = new Buffer(\\\"世界你好\\\");\\n var targetBuf = new Buffer(6);\\n var targetBuf2 = new Buffer(9);\\n sourceBuf.copy(targetBuf);\\n sourceBuf.copy(targetBuf2);\\n console.log(targetBuf.toString());  // 打印 \\\"世界\\\" \\n console.log(targetBuf2.toString());  // 打印 \\\"世界你\\\"\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444890133000.jpg','2015-08-01 13:06:21','2020-08-20 15:44:26'),(285,'第五天——范式路由之泛式规则','范式路由之泛式规则','2','1','','范式路由','2',NULL,'','路由的泛式规则很灵活。在这里，我们列出几个使用的路由泛式功能。今天要实现如下两个泛式路由。','1','','','0:01',762,'2','0',NULL,0,'0',223030,'<h3>泛式规则</h3><p>路由的泛式规则很灵活。在这里，我们列出几个使用的路由泛式功能。今天要实现如下两个泛式路由。</p><ul class=\" list-paddingleft-2\"><li><p><code>/doc/:id</code> &nbsp; 符合这个泛式的url可以是 &nbsp;/doc/id0001。</p></li><li><p><code>/doc/title/*</code> &nbsp; 符合这个泛式的url可以是 &nbsp;/doc/title/abcd 或 /doc/title。</p></li></ul><p>（小胖一脸茫然的问：要实现这个好像不容易吧）</p><p>不难，找到突破口就会很容易。当有个请求的url符合某个泛式路由时，就会执行对应的处理器。那内部如何判断url符合路由泛式规则呢？答案是把泛式规则转换正则表达式，然后加以判断即可。</p><p>（小胖说：哦，我有些明白了！）</p><p>既然找到突破口，下一步就要编写一些代码。</p><pre>//&nbsp;把后缀的请求参数去掉\nfunction&nbsp;pathRegexp(path)\n&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;=&nbsp;path.replace(/\\?(.*)$/,&quot;&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;path;\n}\n\n//&nbsp;运行测试\npathRegexp((&quot;/article/name?id=001&quot;)&nbsp;&nbsp;//&nbsp;打印结果&nbsp;/article/name</pre><p>这一步的作用是去掉请求参数，因为路由判断的是路径，而不应掺杂请求参数，稍后会讲解如何获得请求参数。</p><p>下一步，我们要想办法用正则表达式替换掉所有路径中<code>:xxx</code> 和 <code>*</code> 这种形式的字符串。代码如下：</p><pre>function&nbsp;pathRegexp&nbsp;(path){\n&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;=&nbsp;path.replace(/\\?(.*)$/,&quot;&quot;)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;这一步是把所有&nbsp;*&nbsp;替换成正则表达式(.*)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.replace(/((\\*{1}(?=\\/))|(\\*{1}(?=$)))/g,&quot;(.*)&quot;)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;这一步是把所有&nbsp;:xxx&nbsp;替换成正则表达式(.*)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.replace(/(:(.*?(?=\\/)))|(:(.*?(?=$)))/g,&quot;(.*)&quot;)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;这一步是把所有&nbsp;/&nbsp;路径&nbsp;变为匹配正则表达式的&nbsp;\\/&nbsp;的形式\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.replace(/\\//g,&quot;\\\\\\/&quot;)\n\n&nbsp;&nbsp;&nbsp;&nbsp;//这一步，通过生成正则表达式&nbsp;&nbsp;，前后的&nbsp;^&nbsp;和&nbsp;&amp;&nbsp;顾名思义，要严格匹配整个路径。&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;RegExp(&quot;^&quot;+path+&quot;$&quot;);\n}\n\n//&nbsp;测试代码如下：\nvar&nbsp;path_regexp&nbsp;=&nbsp;pathRegexp(&quot;/article/:id/*/:name&quot;);\nconsole.log(path_regexp.test(&quot;/article/324234/dsd/ccc&quot;));&nbsp;//&nbsp;true</pre><p>看起来很复杂，讲透了就容易了。得到path_regexp正则对象的目的，是通过它验证客户端发来的url是否符合这个正则表达式。本节开发了一个 pathRegexp路由路径转正则表达式的工具，但并没有把泛式路由加入到系统中，还需要对stuwebfk框架的相关代码进行修改。</p><p>下节将分析如何加入泛式路由功能，并找到思路和切入点。</p>','[{\"type\":\"contents\",\"content\":\"泛式规则\\n路由的泛式规则很灵活。在这里，我们列出几个使用的路由泛式功能。今天要实现如下两个泛式路由。\\n/doc/:id   符合这个泛式的url可以是  /doc/id0001。\\n/doc/title/*   符合这个泛式的url可以是  /doc/title/abcd 或 /doc/title。\\n\\n（小胖一脸茫然的问：要实现这个好像不容易吧）\\n不难，找到突破口就会很容易。当有个请求的url符合某个泛式路由时，就会执行对应的处理器。那内部如何判断url符合路由泛式规则呢？答案是把泛式规则转换正则表达式，然后加以判断即可。\\n（小胖说：哦，我有些明白了！）\\n既然找到突破口，下一步就要编写一些代码。\\n// 把后缀的请求参数去掉\\nfunction pathRegexp(path)\\n    path = path.replace(/\\\\?(.*)$/,\\\"\\\");\\n    return path;\\n}\\n\\n// 运行测试\\npathRegexp((\\\"/article/name?id=001\\\")  // 打印结果 /article/name\\n这一步的作用是去掉请求参数，因为路由判断的是路径，而不应掺杂请求参数，稍后会讲解如何获得请求参数。\\n下一步，我们要想办法用正则表达式替换掉所有路径中:xxx 和 * 这种形式的字符串。代码如下：\\nfunction pathRegexp (path){\\n    path = path.replace(/\\\\?(.*)$/,\\\"\\\")\\n\\n                // 这一步是把所有 * 替换成正则表达式(.*)\\n               .replace(/((\\\\*{1}(?=\\\\/))|(\\\\*{1}(?=$)))/g,\\\"(.*)\\\")\\n\\n               // 这一步是把所有 :xxx 替换成正则表达式(.*)\\n               .replace(/(:(.*?(?=\\\\/)))|(:(.*?(?=$)))/g,\\\"(.*)\\\")\\n\\n               // 这一步是把所有 / 路径 变为匹配正则表达式的 \\\\/ 的形式\\n               .replace(/\\\\//g,\\\"\\\\\\\\\\\\/\\\")\\n\\n    //这一步，通过生成正则表达式  ，前后的 ^ 和 &amp; 顾名思义，要严格匹配整个路径。  \\n    return new RegExp(\\\"^\\\"+path+\\\"$\\\");\\n}\\n\\n// 测试代码如下：\\nvar path_regexp = pathRegexp(\\\"/article/:id/*/:name\\\");\\nconsole.log(path_regexp.test(\\\"/article/324234/dsd/ccc\\\")); // true\\n看起来很复杂，讲透了就容易了。得到path_regexp正则对象的目的，是通过它验证客户端发来的url是否符合这个正则表达式。本节开发了一个 pathRegexp路由路径转正则表达式的工具，但并没有把泛式路由加入到系统中，还需要对stuwebfk框架的相关代码进行修改。\\n下节将分析如何加入泛式路由功能，并找到思路和切入点。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444894726000.jpg','2015-09-26 14:18:33','2020-08-20 15:44:24'),(286,'NodeJS独立开发web框架——静态服务器开发(1)','静态服务器开发','2','1','','静态服务器','2',NULL,'','HTTP服务器是node.js提供的一个模块的功能，该模块的稳定指标是Stability: 3 - Stable，是很稳定的模块API，可放心使用。','1','','','0:01',762,'2','0',NULL,0,'0',223462,'<h3>启动http服务器</h3><p>HTTP服务器是node.js提供的一个模块的功能，该模块的稳定指标是Stability: 3 - Stable，是很稳定的模块API，可放心使用。</p><p>点击 <a href=\"http://nodejs.org/api/http.html\">这里</a> 打开http模块文档，可以查看详细的API说明。</p><p>通过<code>var http = require(&quot;http&quot;)</code>的方式可以得到http模块对象，通过<code>http.createServer([requestListener])</code>方法可创建一个 <code>http.Server</code> 的服务器对象实例。</p><p>接下来，在stuwebfk目录下，建立一个example/day01文件夹，里面建立一个名为httpServer.js的文件。</p><pre>var&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);&nbsp;&nbsp;&nbsp;//&nbsp;获得http模块对象\nvar&nbsp;server&nbsp;=&nbsp;http.createServer();&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;创建一个http.Server对象实例</pre><p>接下来要监听server的request事件，也就是当有客户端访问服务器时，内部就会创建一个request对象，当require请求对象创建后会触发该事件。</p><pre>server.on(&quot;request&quot;,handle);</pre><p>handle是个事件处理函数，该函数会接收到两个对象，request请求对象和response响应对象，request对象是http.IncomingMessage类型，request是个只读流，而response是 http.ServerResponse 类型，是个可写流。</p><pre>function&nbsp;handle(request,response){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.write(&quot;Hello&nbsp;world&quot;);&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;向浏览器端写入数据\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end();&nbsp;&nbsp;&nbsp;//&nbsp;结束响应\n}</pre><p>接下来，要让服务器监听一个端口。</p><pre>server.listen(3000)&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;让服务器监听3000端口</pre><p>到此为止，可以让服务器启动了，启动方法是cd进入experiment目录，node httpServer 命令启动服务器。</p><pre>&gt;&nbsp;node&nbsp;httpServer</pre><p>接下来，用浏览器打开 <a href=\"http://localhost:3000\">http://localhost:3000</a></p><p>会显示出：</p><p>Hello world</p><hr/><p>光是能打印字符串还是不行的，还要能显示html页面，下面修改一下程序的handle函数，把html标签返回到浏览器端。</p><pre>function&nbsp;handle(request,response){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.write(&quot;&lt;b&gt;Hello&nbsp;world&lt;/b&gt;&quot;);&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;加入html标签\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end();&nbsp;&nbsp;&nbsp;//&nbsp;结束响应\n}</pre><p>Hello world</p><hr/><p>下一节，我们将创建一个独立的html页面，有请求时，会把html页面的数据返回浏览器端。</p>','[{\"type\":\"contents\",\"content\":\"启动http服务器\\nHTTP服务器是node.js提供的一个模块的功能，该模块的稳定指标是Stability: 3 - Stable，是很稳定的模块API，可放心使用。\\n点击 这里 打开http模块文档，可以查看详细的API说明。\\n通过var http = require(\\\"http\\\")的方式可以得到http模块对象，通过http.createServer([requestListener])方法可创建一个 http.Server 的服务器对象实例。\\n接下来，在stuwebfk目录下，建立一个example/day01文件夹，里面建立一个名为httpServer.js的文件。\\nvar http = require(\\\"http\\\");   // 获得http模块对象\\nvar server = http.createServer();    // 创建一个http.Server对象实例\\n接下来要监听server的request事件，也就是当有客户端访问服务器时，内部就会创建一个request对象，当require请求对象创建后会触发该事件。\\nserver.on(\\\"request\\\",handle);\\nhandle是个事件处理函数，该函数会接收到两个对象，request请求对象和response响应对象，request对象是http.IncomingMessage类型，request是个只读流，而response是 http.ServerResponse 类型，是个可写流。\\nfunction handle(request,response){\\n     response.write(\\\"Hello world\\\");   //  向浏览器端写入数据\\n     response.end();   // 结束响应\\n}\\n接下来，要让服务器监听一个端口。\\nserver.listen(3000)    // 让服务器监听3000端口\\n到此为止，可以让服务器启动了，启动方法是cd进入experiment目录，node httpServer 命令启动服务器。\\n&gt; node httpServer\\n接下来，用浏览器打开 http://localhost:3000\\n会显示出：\\nHello world\\n光是能打印字符串还是不行的，还要能显示html页面，下面修改一下程序的handle函数，把html标签返回到浏览器端。\\nfunction handle(request,response){\\n     response.write(\\\"&lt;b&gt;Hello world&lt;/b&gt;\\\");   //  加入html标签\\n     response.end();   // 结束响应\\n}\\nHello world\\n下一节，我们将创建一个独立的html页面，有请求时，会把html页面的数据返回浏览器端。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444892540000.jpg','2015-09-02 14:32:55','2020-08-20 15:44:25'),(287,'jquery 对 Json 的各种遍历','jquery 对 Json 的各种遍历','1','1','','jquery,json','2',NULL,'','经常会遇到用jquery语法处理json数据，下面列出来一些基础的jquery处理json数据的方法，供大家参考','1','','','0:01',762,'2','0',NULL,0,'0',224359,'<p>经常会遇到用jquery语法处理json数据，下面列出来一些基础的jquery处理json数据的方法，供大家参考</p><p><br/></p><p>1、grep<br/></p><pre class=\"brush:js;toolbar:false\">&lt;script&nbsp;type=&#39;text/javascript&#39;&nbsp;src=&quot;/jquery.js&quot;&gt;&lt;/script&gt;\n&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;\n$().ready(\nfunction(){\nvar&nbsp;array&nbsp;=&nbsp;[1,2,3,4,5,6,7,8,9];\nvar&nbsp;filterarray&nbsp;=&nbsp;$.grep(array,function(value){\nreturn&nbsp;value&nbsp;&gt;&nbsp;5;//筛选出大于5的\n});\nfor(var&nbsp;i=0;i&lt;filterarray.length;i++){\nalert(filterarray[i]);\n}\nfor&nbsp;(key&nbsp;in&nbsp;filterarray){\nalert(filterarray[key]);\n}\n}\n);\n&lt;/script&gt;</pre><p>2、each<br/></p><pre class=\"brush:js;toolbar:false\">&lt;script&nbsp;type=&#39;text/javascript&#39;&nbsp;src=&quot;/jquery.js&quot;&gt;&lt;/script&gt;\n&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;\n$().ready(\nfunction(){\nvar&nbsp;anObject&nbsp;=&nbsp;{one:1,two:2,three:3};//对json数组each\n$.each(anObject,function(name,value)&nbsp;{\nalert(name);\nalert(value);\n});\nvar&nbsp;anArray&nbsp;=&nbsp;[&#39;one&#39;,&#39;two&#39;,&#39;three&#39;];\n$.each(anArray,function(n,value){\nalert(n);\nalert(value);\n}\n);\n}\n);\n&lt;/script&gt;</pre><p><br/></p><p>3、inArray<br/></p><pre class=\"brush:js;toolbar:false\">&lt;script&nbsp;type=&#39;text/javascript&#39;&nbsp;src=&quot;/jquery.js&quot;&gt;&lt;/script&gt;\n&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;\n$().ready(\nfunction(){\nvar&nbsp;anArray&nbsp;=&nbsp;[&#39;one&#39;,&#39;two&#39;,&#39;three&#39;];\nvar&nbsp;index&nbsp;=&nbsp;$.inArray(&#39;two&#39;,anArray);\nalert(index);//返回该值在数组中的键值，返回1\nalert(anArray[index]);//value&nbsp;is&nbsp;two\n}\n);\n&lt;/script&gt;</pre><p><br/></p><p>4、 map<br/></p><pre class=\"brush:js;toolbar:false\">&lt;script&nbsp;type=&#39;text/javascript&#39;&nbsp;src=&quot;/jquery.js&quot;&gt;&lt;/script&gt;\n&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;\n$().ready(\nfunction(){\nvar&nbsp;strings&nbsp;=&nbsp;[&#39;0&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;S&#39;,&#39;6&#39;];\nvar&nbsp;values&nbsp;=&nbsp;$.map(strings,function(value){\nvar&nbsp;result&nbsp;=&nbsp;new&nbsp;Number(value);\nreturn&nbsp;isNaN(result)&nbsp;?&nbsp;null:result;//isNaN:is&nbsp;Not&nbsp;a&nbsp;Number的缩写\n}\n);\nfor&nbsp;(key&nbsp;in&nbsp;values)&nbsp;{\nalert(values[key]);\n}\n}\n);\n&lt;/script&gt;</pre><p><br/></p><p>5、遍历json对象</p><pre class=\"brush:js;toolbar:false\">&lt;script&gt;\nvar&nbsp;json&nbsp;=&nbsp;[{dd:&#39;SB&#39;,AA:&#39;东东&#39;,re1:123},{cccc:&#39;dd&#39;,lk:&#39;1qw&#39;}];\nfor(var&nbsp;i=0,l=json.length;i&lt;l;i++){\nfor(var&nbsp;key&nbsp;in&nbsp;json[i]){\nalert(key+&#39;:&#39;+json[i][key]);\n}\n}\n&lt;/script&gt;</pre><p><br/></p><pre class=\"brush:js;toolbar:false\">有如下&nbsp;json对象：\nvar&nbsp;obj&nbsp;={”name”:”冯娟”,”password”:”123456″,”department”:”技术部”,”sex”:”&nbsp;女”,”old”:30};\n遍历方法：\nfor(var&nbsp;p&nbsp;in&nbsp;obj){\nstr&nbsp;=&nbsp;str+obj[p]+’,&#39;;\nreturn&nbsp;str;\n}</pre><p><br/></p>','[{\"type\":\"contents\",\"content\":\"经常会遇到用jquery语法处理json数据，下面列出来一些基础的jquery处理json数据的方法，供大家参考\\n\\n1、grep\\n&lt;script type=\'text/javascript\' src=\\\"/jquery.js\\\"&gt;&lt;/script&gt;\\n&lt;script type=\\\"text/javascript\\\"&gt;\\n$().ready(\\nfunction(){\\nvar array = [1,2,3,4,5,6,7,8,9];\\nvar filterarray = $.grep(array,function(value){\\nreturn value &gt; 5;//筛选出大于5的\\n});\\nfor(var i=0;i&lt;filterarray.length;i++){\\nalert(filterarray[i]);\\n}\\nfor (key in filterarray){\\nalert(filterarray[key]);\\n}\\n}\\n);\\n&lt;/script&gt;\\n2、each\\n&lt;script type=\'text/javascript\' src=\\\"/jquery.js\\\"&gt;&lt;/script&gt;\\n&lt;script type=\\\"text/javascript\\\"&gt;\\n$().ready(\\nfunction(){\\nvar anObject = {one:1,two:2,three:3};//对json数组each\\n$.each(anObject,function(name,value) {\\nalert(name);\\nalert(value);\\n});\\nvar anArray = [\'one\',\'two\',\'three\'];\\n$.each(anArray,function(n,value){\\nalert(n);\\nalert(value);\\n}\\n);\\n}\\n);\\n&lt;/script&gt;\\n\\n3、inArray\\n&lt;script type=\'text/javascript\' src=\\\"/jquery.js\\\"&gt;&lt;/script&gt;\\n&lt;script type=\\\"text/javascript\\\"&gt;\\n$().ready(\\nfunction(){\\nvar anArray = [\'one\',\'two\',\'three\'];\\nvar index = $.inArray(\'two\',anArray);\\nalert(index);//返回该值在数组中的键值，返回1\\nalert(anArray[index]);//value is two\\n}\\n);\\n&lt;/script&gt;\\n\\n4、 map\\n&lt;script type=\'text/javascript\' src=\\\"/jquery.js\\\"&gt;&lt;/script&gt;\\n&lt;script type=\\\"text/javascript\\\"&gt;\\n$().ready(\\nfunction(){\\nvar strings = [\'0\',\'1\',\'2\',\'3\',\'4\',\'S\',\'6\'];\\nvar values = $.map(strings,function(value){\\nvar result = new Number(value);\\nreturn isNaN(result) ? null:result;//isNaN:is Not a Number的缩写\\n}\\n);\\nfor (key in values) {\\nalert(values[key]);\\n}\\n}\\n);\\n&lt;/script&gt;\\n\\n5、遍历json对象\\n&lt;script&gt;\\nvar json = [{dd:\'SB\',AA:\'东东\',re1:123},{cccc:\'dd\',lk:\'1qw\'}];\\nfor(var i=0,l=json.length;i&lt;l;i++){\\nfor(var key in json[i]){\\nalert(key+\':\'+json[i][key]);\\n}\\n}\\n&lt;/script&gt;\\n\\n有如下 json对象：\\nvar obj ={”name”:”冯娟”,”password”:”123456″,”department”:”技术部”,”sex”:” 女”,”old”:30};\\n遍历方法：\\nfor(var p in obj){\\nstr = str+obj[p]+’,\';\\nreturn str;\\n}\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1435739297000.jpg','2015-07-02 03:34:49','2020-08-20 15:44:27'),(288,'Node.js API实例讲解——FS文件系统概述','FS文件系统概述','2','1','','fs,nodejs','2',NULL,'','文件系统，通俗的理解是对文件和文件夹的操作。\n文件系统内部读取与写入部分都实现了Readable和Writable（参看“流”的一章）\n文件的操作的方法分为同步和异步，同步方法有sync字样。','1','','','0:01',762,'2','0',NULL,0,'0',223024,'<h3>FS文件系统概述</h3><p>文件系统，通俗的理解是对文件和文件夹的操作。</p><p>文件系统内部读取与写入部分都实现了Readable和Writable（参看“流”的一章）</p><p>文件的操作的方法分为同步和异步，同步方法有sync字样。</p><p>本章会详细讲解，但有几个部分不会讲，原因是这部分API不是很好用，也几乎不会用到，还有就是它们并不是跨平台的，每个平台的参数和可用程度都不尽相同。比如fs.chmod（更改权限）、fs.symlink和fs.chown（更改所有者），不会在本书讲解，有兴趣的可以研究一下。</p><p>文件和文件夹的概念都明白，所以会先做例子，通过实际代码讲解，多实践一下就可以熟悉使用了，这一章节看似简单，同时也非常重要，希望读者多写代码。</p><p>很多时候，我们追求一种别具一格，更重要的是基础练习。篮球巨星乔丹说过：成功者注重基础练习。基础好“奇迹”就会出现。</p><p>有几个概念温故一下。</p><h5 id=\"-fd-\">文件描述符-fd：</h5><p>内核（kernel）利用文件描述符（file descriptor）来访问文件。文件描述符是非负整数。打开现存文件或新建文件时，内核会返回一个文件描述符。读写文件也需要使用文件描述符来指定待读写的文件。</p><h5 id=\"-link\">文件链接-link</h5><p>文件链接的是在文件之间创建链接。这种操作实际上是给系统中已有的某个文件指定另外一个可用于访问它的名称。对于这个新的文件名，我们可以为之指定不同的访问权限，以控制对信息的共享和安全性的问题。</p>','[{\"type\":\"contents\",\"content\":\"FS文件系统概述\\n文件系统，通俗的理解是对文件和文件夹的操作。\\n文件系统内部读取与写入部分都实现了Readable和Writable（参看“流”的一章）\\n文件的操作的方法分为同步和异步，同步方法有sync字样。\\n本章会详细讲解，但有几个部分不会讲，原因是这部分API不是很好用，也几乎不会用到，还有就是它们并不是跨平台的，每个平台的参数和可用程度都不尽相同。比如fs.chmod（更改权限）、fs.symlink和fs.chown（更改所有者），不会在本书讲解，有兴趣的可以研究一下。\\n文件和文件夹的概念都明白，所以会先做例子，通过实际代码讲解，多实践一下就可以熟悉使用了，这一章节看似简单，同时也非常重要，希望读者多写代码。\\n很多时候，我们追求一种别具一格，更重要的是基础练习。篮球巨星乔丹说过：成功者注重基础练习。基础好“奇迹”就会出现。\\n有几个概念温故一下。\\n文件描述符-fd：\\n内核（kernel）利用文件描述符（file descriptor）来访问文件。文件描述符是非负整数。打开现存文件或新建文件时，内核会返回一个文件描述符。读写文件也需要使用文件描述符来指定待读写的文件。\\n文件链接-link\\n文件链接的是在文件之间创建链接。这种操作实际上是给系统中已有的某个文件指定另外一个可用于访问它的名称。对于这个新的文件名，我们可以为之指定不同的访问权限，以控制对信息的共享和安全性的问题。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444890350000.jpg','2015-08-09 13:27:38','2020-08-20 15:44:26'),(289,'Node.js API实例讲解——response响应对象','response响应对象','2','1','','nodejs,response响应对象','2',NULL,'','之所以叫服务器端响应对象是区别于客户端响应对象的，因为客户端的响应对象res是个IncomingMessage对象，也就是只读对象','1','','','0:01',762,'2','0',NULL,0,'0',240952,'<h3>response响应对象</h3><p>之所以叫服务器端响应对象是区别于客户端响应对象的，因为客户端的响应对象res是个IncomingMessage对象，也就是只读对象，而InomingMessage是stream.Readable子类，而服务器端响应对象res是http.ServerResponse对象，是可写对象，而ServerResponse是stream.Writable子类。<span class=\"invade-word\">sex</span></p><p>看代码所示：</p><pre class=\"code\">var&nbsp;server&nbsp;=&nbsp;http.createServer();\nserver.on(&quot;request&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;服务器端res是ServerResponse对象\n})</pre><pre class=\"code\">var&nbsp;req&nbsp;=&nbsp;http.request({host:&quot;www.google.com&quot;})\nreq.on(&quot;response&quot;,function(res){\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;客户端res是IncomingMessage对象\n})</pre><p>它只定义了close事件，这个事件的产生是当客户端非正常关闭所产生的，res.end 不会造成close事件。看下面例子：</p><pre class=\"code\">//&nbsp;服务器\nvar&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\nvar&nbsp;server&nbsp;=&nbsp;http.createServer();\nserver.on(&quot;request&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;res.on(&quot;close&quot;,function(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;close&quot;)\n&nbsp;&nbsp;&nbsp;&nbsp;})\n})\nserver.listen(8080)</pre><p>运行服务器，通过浏览器访问localhost:8080 ，由于没有res.end() 代码，所以浏览器始终处于等待数据状态，这时关闭浏览器，服务器终端就有打印出close。</p><h4 id=\"response-writehead-statuscode-reasonphrase-headers-\">response.writeHead(statusCode, [reasonPhrase], [headers])</h4><p>这个方法是用来写响应头部信息的，这个应该在发送body主体之前调用，前面章节介绍过 statusCode是状态码，也可通过response.statusCode = 404 设置， 比如404是告诉客户端没有找到资源。状态码可以搜索会找到详细信息说明，这里不进行详细介绍，1xx的代码代表请求已被接受，需要继续处理。2xx这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。3xx 重定向。4xx 请求错误。5xx表示服务器错误。</p><p>resonPhrase[可选]参数，这个是个字符串，用于简单说明的。比如：“服务器因为维护暂时无法正常访问....”</p><p>headers[可选]参数，这个是个Object对象，用于设置响应头信息的，前面章节有详细介绍。也可通过response.setHeader(name, value)方式进行设置。</p><p>下面做个例子，加以巩固。</p><pre class=\"code\">//&nbsp;服务器\nvar&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\nvar&nbsp;server&nbsp;=&nbsp;http.createServer();\nserver.on(&quot;request&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;body&nbsp;=&nbsp;new&nbsp;Buffer(&quot;你好啊&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;res.writeHead(200,&quot;成功！&quot;,{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Content-Length&quot;:body.length,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Content-Type&quot;:&quot;text/plain&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;res.write(body,&quot;utf8&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;res.end();\n})\nserver.listen(8080)</pre><h4 id=\"response-settimeout-msecs-callback-\">response.setTimeout(msecs, callback)</h4><p>参看 server.setTimeout部分，这个监听器如果被触发 server设置的监听器，这是很有意思的一点。</p><pre class=\"code\">//&nbsp;服务器\nvar&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\nvar&nbsp;server&nbsp;=&nbsp;http.createServer();\nserver.on(&quot;request&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;这里不&nbsp;res.end()&nbsp;,&nbsp;模拟超时。\n&nbsp;&nbsp;&nbsp;&nbsp;res.setTimeout(3000,function(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;res&nbsp;timeout&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;});\n\n})\nserver.setTimeout(5000,function(){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;server&nbsp;timeout&quot;);\n})\nserver.listen(8080)</pre><p>运行服务器，然后浏览器访问，由于没有调用 res.end() 从而模拟socket超时现象，程序设置 res 3秒超时，server 5秒超时，但运行时会发现终端打印出 “res timeout”后瞬间打印出“res timeout”。</p><h4 id=\"response-headerssent\">response.headersSent</h4><p>这个是只读属性，表示响应头是否被发送出去了 ， true/false。 看例子：</p><pre class=\"code\">//&nbsp;服务器\nvar&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\nvar&nbsp;server&nbsp;=&nbsp;http.createServer();\nserver.on(&quot;request&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(res.headersSent);&nbsp;//&nbsp;false\n&nbsp;&nbsp;&nbsp;&nbsp;res.write(&quot;hello&quot;)\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(res.headersSent);&nbsp;//&nbsp;true\n&nbsp;&nbsp;&nbsp;&nbsp;res.end();\n})\nserver.listen(8080)</pre><p>看这个例子会发现，调用write方法时，会先把头部信息发送出去。</p><h4 id=\"response-sentdate\">response.sentDate</h4><p>这个属性默认是 true，表示发送头部时会把发送响应时间信息加入到头部信息中，了解一下即可，就让它保持默认吧。</p><h4 id=\"response-setheader-name-value-response-setheader-name-response-removeheader-name-\">response.setHeader(name, value) / response.setHeader(name) / response.removeHeader(name)</h4><p>设置头部,获取和删除头部信息的，这个不同于 response.writeHead方法，这两个方法并没有真的把头部信息发送出去，发送头部信息只能通过调用 response.writeHead或response.write才会发送出去。看例子：</p><pre class=\"code\">//&nbsp;服务器\nvar&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\nvar&nbsp;server&nbsp;=&nbsp;http.createServer();\nserver.on(&quot;request&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;body&nbsp;=&nbsp;new&nbsp;Buffer(&quot;hello&nbsp;world&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;res.setHeader(&quot;Content-Length&quot;,body.length);\n&nbsp;&nbsp;&nbsp;&nbsp;res.setHeader(&quot;Content-Type&quot;,&quot;text/plain&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(res.headersSent)&nbsp;//&nbsp;false\n&nbsp;&nbsp;&nbsp;&nbsp;res.write(body);\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(res.headersSent)&nbsp;//&nbsp;true\n&nbsp;&nbsp;&nbsp;&nbsp;res.end();\n})\nserver.listen(8080)</pre><p>通过这个例子会发现setHeader并不是真的把头部信息发送出去。</p><h4 id=\"response-write-chunk-encoding-\">response.write(chunk, [encoding])</h4><p>这个和前几章讲解的socket.write和stream.write方法很类似，尤其是和request.write使用方法一样。这里要强调的一点是当调用这个方法时，内部会检查 response.headersSent，也就是判断是否头部信息已经发送出去了，如果没发送就会先发送头部信息，然后再发送chunk数据块。由于前面看过很多write的使用方式，这里就不举例了。</p><h4 id=\"response-end-data-encoding-\">response.end([data], [encoding])</h4><p>这个方法和 request.end 一致，可直接参看“http客户端”一节。</p><h4 id=\"-\">【小结】</h4><p><span class=\"invade-word\">yellow</span>本节介绍了服务器的响应对象，这个对象可以理解为服务器端的socket的可写部分。主要分清 IncommingMessage对象是发送来的只读信息，ServerResponse对象是负责服务器端往客户端发送信息，ClientRequest对象其实相当于浏览器，是负责往服务器端发送信息的。</p>','[{\"type\":\"contents\",\"content\":\"response响应对象\\n之所以叫服务器端响应对象是区别于客户端响应对象的，因为客户端的响应对象res是个IncomingMessage对象，也就是只读对象，而InomingMessage是stream.Readable子类，而服务器端响应对象res是http.ServerResponse对象，是可写对象，而ServerResponse是stream.Writable子类。sex\\n看代码所示：\\nvar server = http.createServer();\\nserver.on(\\\"request\\\",function(req,res){\\n    // 服务器端res是ServerResponse对象\\n})\\nvar req = http.request({host:\\\"www.google.com\\\"})\\nreq.on(\\\"response\\\",function(res){\\n    // 客户端res是IncomingMessage对象\\n})\\n它只定义了close事件，这个事件的产生是当客户端非正常关闭所产生的，res.end 不会造成close事件。看下面例子：\\n// 服务器\\nvar http = require(\\\"http\\\");\\nvar server = http.createServer();\\nserver.on(\\\"request\\\",function(req,res){\\n    res.on(\\\"close\\\",function(){\\n        console.log(\\\"close\\\")\\n    })\\n})\\nserver.listen(8080)\\n运行服务器，通过浏览器访问localhost:8080 ，由于没有res.end() 代码，所以浏览器始终处于等待数据状态，这时关闭浏览器，服务器终端就有打印出close。\\nresponse.writeHead(statusCode, [reasonPhrase], [headers])\\n这个方法是用来写响应头部信息的，这个应该在发送body主体之前调用，前面章节介绍过 statusCode是状态码，也可通过response.statusCode = 404 设置， 比如404是告诉客户端没有找到资源。状态码可以搜索会找到详细信息说明，这里不进行详细介绍，1xx的代码代表请求已被接受，需要继续处理。2xx这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。3xx 重定向。4xx 请求错误。5xx表示服务器错误。\\nresonPhrase[可选]参数，这个是个字符串，用于简单说明的。比如：“服务器因为维护暂时无法正常访问....”\\nheaders[可选]参数，这个是个Object对象，用于设置响应头信息的，前面章节有详细介绍。也可通过response.setHeader(name, value)方式进行设置。\\n下面做个例子，加以巩固。\\n// 服务器\\nvar http = require(\\\"http\\\");\\nvar server = http.createServer();\\nserver.on(\\\"request\\\",function(req,res){\\n    var body = new Buffer(\\\"你好啊\\\");\\n    res.writeHead(200,\\\"成功！\\\",{\\n        \\\"Content-Length\\\":body.length,\\n        \\\"Content-Type\\\":\\\"text/plain\\\"\\n    });\\n    res.write(body,\\\"utf8\\\");\\n    res.end();\\n})\\nserver.listen(8080)\\nresponse.setTimeout(msecs, callback)\\n参看 server.setTimeout部分，这个监听器如果被触发 server设置的监听器，这是很有意思的一点。\\n// 服务器\\nvar http = require(\\\"http\\\");\\nvar server = http.createServer();\\nserver.on(\\\"request\\\",function(req,res){\\n    // 这里不 res.end() , 模拟超时。\\n    res.setTimeout(3000,function(){\\n        console.log(\\\"res timeout\\\");\\n    });\\n\\n})\\nserver.setTimeout(5000,function(){\\n    console.log(\\\"server timeout\\\");\\n})\\nserver.listen(8080)\\n运行服务器，然后浏览器访问，由于没有调用 res.end() 从而模拟socket超时现象，程序设置 res 3秒超时，server 5秒超时，但运行时会发现终端打印出 “res timeout”后瞬间打印出“res timeout”。\\nresponse.headersSent\\n这个是只读属性，表示响应头是否被发送出去了 ， true/false。 看例子：\\n// 服务器\\nvar http = require(\\\"http\\\");\\nvar server = http.createServer();\\nserver.on(\\\"request\\\",function(req,res){\\n    console.log(res.headersSent); // false\\n    res.write(\\\"hello\\\")\\n    console.log(res.headersSent); // true\\n    res.end();\\n})\\nserver.listen(8080)\\n看这个例子会发现，调用write方法时，会先把头部信息发送出去。\\nresponse.sentDate\\n这个属性默认是 true，表示发送头部时会把发送响应时间信息加入到头部信息中，了解一下即可，就让它保持默认吧。\\nresponse.setHeader(name, value) / response.setHeader(name) / response.removeHeader(name)\\n设置头部,获取和删除头部信息的，这个不同于 response.writeHead方法，这两个方法并没有真的把头部信息发送出去，发送头部信息只能通过调用 response.writeHead或response.write才会发送出去。看例子：\\n// 服务器\\nvar http = require(\\\"http\\\");\\nvar server = http.createServer();\\nserver.on(\\\"request\\\",function(req,res){\\n    var body = new Buffer(\\\"hello world\\\");\\n    res.setHeader(\\\"Content-Length\\\",body.length);\\n    res.setHeader(\\\"Content-Type\\\",\\\"text/plain\\\");\\n    console.log(res.headersSent) // false\\n    res.write(body);\\n    console.log(res.headersSent) // true\\n    res.end();\\n})\\nserver.listen(8080)\\n通过这个例子会发现setHeader并不是真的把头部信息发送出去。\\nresponse.write(chunk, [encoding])\\n这个和前几章讲解的socket.write和stream.write方法很类似，尤其是和request.write使用方法一样。这里要强调的一点是当调用这个方法时，内部会检查 response.headersSent，也就是判断是否头部信息已经发送出去了，如果没发送就会先发送头部信息，然后再发送chunk数据块。由于前面看过很多write的使用方式，这里就不举例了。\\nresponse.end([data], [encoding])\\n这个方法和 request.end 一致，可直接参看“http客户端”一节。\\n【小结】\\nyellow本节介绍了服务器的响应对象，这个对象可以理解为服务器端的socket的可写部分。主要分清 IncommingMessage对象是发送来的只读信息，ServerResponse对象是负责服务器端往客户端发送信息，ClientRequest对象其实相当于浏览器，是负责往服务器端发送信息的。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444889141000.jpg','2015-08-09 14:12:10','2020-08-20 15:44:25'),(290,'[DoraCMS消息系统] socket.io 集成到express4通过路由访问io','socket.io 集成到express4通过路由访问io','1','1','','socket.io','2',NULL,'','socket.io网上的文档很多，原理也很简单，因为DoraCMS是基于Nodejs+express4的，下面简要说一下 socket.io 是如何整合到express4实现消息传递的，这里介绍改动最小的方法','1','','','0:01',762,'2','0',NULL,1,'0',223503,'<p>最近在研究消息推送，试了好几种方法：</p><p>1、eventsource js支持，但是貌似IE是不支持的，不想搞特殊化，果断排除</p><p>2、<a href=\"http://faye.jcoglan.com/\" target=\"_blank\" title=\"faye\">faye</a>&nbsp;基于node可以实现消息推送，方法很简单，我也在本地做了个小例子成功了，杯具的是不知道如何集成到express，总是收不到消息。</p><p>3、socket.io 最后选择了这个，实现了从服务端发消息到客户端的目的。</p><p><br/></p><p>socket.io网上的文档很多，原理也很简单，因为DoraCMS是基于Nodejs+express4的，下面简要说一下&nbsp;socket.io 是如何整合到express4实现消息传递的，这里介绍改动最小的方法：</p><p><br/></p><p>1、安装socket.io</p><pre class=\"brush:js;toolbar:false\">npm&nbsp;install&nbsp;socket.io&nbsp;--save</pre><p>2、app.js最上面引入<br/></p><pre class=\"brush:js;toolbar:false\">var&nbsp;io&nbsp;=&nbsp;require(&#39;socket.io&#39;)();</pre><p>3、app.js最下面加上事件监听</p><pre class=\"brush:js;toolbar:false\">//事件监听\napp.io&nbsp;=&nbsp;io;\nio.on(&#39;connection&#39;,&nbsp;function&nbsp;(socket)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;socket.emit(&#39;news&#39;,&nbsp;{&nbsp;hello:&nbsp;&#39;world&#39;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;socket.on(&#39;notifyNum&#39;,&nbsp;function&nbsp;(data)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(data.msg_count);\n&nbsp;&nbsp;&nbsp;&nbsp;});\n});</pre><p>4、修改 /bin/www，最后面加上代码</p><pre class=\"brush:js;toolbar:false\">var&nbsp;io&nbsp;=&nbsp;app.io;\nio.attach(&nbsp;server&nbsp;);</pre><p>这里就有个问题了，我想在用户执行完某些操作后发送消息给前端，说白了就是，我想在route里操作io，怎么办？<br/></p><p>5、app.js中修改路由引入，例如DoraCMS后台的路由：</p><pre class=\"brush:js;toolbar:false\">var&nbsp;admin&nbsp;=&nbsp;require(&#39;./routes/admin&#39;)(io);</pre><p>6、/route下找到admin.js，修改一下路由写法<br/></p><pre class=\"brush:js;toolbar:false\">var&nbsp;express&nbsp;=&nbsp;require(&#39;express&#39;);\nvar&nbsp;router&nbsp;=&nbsp;express.Router();\n\nvar&nbsp;returnAdminRouter&nbsp;=&nbsp;function(io)&nbsp;{\n\n&nbsp;&nbsp;&nbsp;&nbsp;//管理员登录页面\n&nbsp;&nbsp;&nbsp;&nbsp;router.get(&#39;/getEvent&#39;,&nbsp;function(req,&nbsp;res,&nbsp;next)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;io.sockets.emit(&#39;notifyNum&#39;,&nbsp;{msg_count:&nbsp;&#39;100&#39;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end(&#39;success&#39;});\n&nbsp;&nbsp;&nbsp;&nbsp;});\n\n&nbsp;&nbsp;&nbsp;&nbsp;.....\n		\n\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;router;\n};\n\n\n\nmodule.exports&nbsp;=&nbsp;returnAdminRouter;</pre><p>8、客户端代码</p><pre class=\"brush:js;toolbar:false\">&lt;script&nbsp;src=&quot;/socket.io/socket.io.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;$(function(){\n//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;初始化事件监听\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;socket&nbsp;=&nbsp;io.connect(&#39;http://127.0.0.1:81/&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;socket.on(&#39;notifyNum&#39;,&nbsp;function&nbsp;(data)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(data.msg_count);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;})\n&lt;/script&gt;</pre><p>这样，前端请求 <a href=\"http://127.0.0.1:81/admin/getEvent\" _src=\"http://127.0.0.1:81/admin/getEvent\">http://127.0.0.1:81/admin/getEvent</a>&nbsp;进入路由，执行相关操作后发送消息，客户端收到 noifyNum消息后将数据输出。实现了消息数量实时推送的效果：<br/></p><p><br/></p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_5_21_506_1015.png\" title=\"\" alt=\"io.png\"/></p><p><br/></p><p>DoraCMS消息推送模块将在后一个版本更新，敬请期待 <a href=\"https://github.com/doramart/DoraCMS\" target=\"_blank\" title=\"DoraCMS源码\">DoraCMS源码</a>&nbsp;</p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"最近在研究消息推送，试了好几种方法：\\n1、eventsource js支持，但是貌似IE是不支持的，不想搞特殊化，果断排除\\n2、faye 基于node可以实现消息推送，方法很简单，我也在本地做了个小例子成功了，杯具的是不知道如何集成到express，总是收不到消息。\\n3、socket.io 最后选择了这个，实现了从服务端发消息到客户端的目的。\\n\\nsocket.io网上的文档很多，原理也很简单，因为DoraCMS是基于Nodejs+express4的，下面简要说一下 socket.io 是如何整合到express4实现消息传递的，这里介绍改动最小的方法：\\n\\n1、安装socket.io\\nnpm install socket.io --save\\n2、app.js最上面引入\\nvar io = require(\'socket.io\')();\\n3、app.js最下面加上事件监听\\n//事件监听\\napp.io = io;\\nio.on(\'connection\', function (socket) {\\n    socket.emit(\'news\', { hello: \'world\' });\\n    socket.on(\'notifyNum\', function (data) {\\n        console.log(data.msg_count);\\n    });\\n});\\n4、修改 /bin/www，最后面加上代码\\nvar io = app.io;\\nio.attach( server );\\n这里就有个问题了，我想在用户执行完某些操作后发送消息给前端，说白了就是，我想在route里操作io，怎么办？\\n5、app.js中修改路由引入，例如DoraCMS后台的路由：\\nvar admin = require(\'./routes/admin\')(io);\\n6、/route下找到admin.js，修改一下路由写法\\nvar express = require(\'express\');\\nvar router = express.Router();\\n\\nvar returnAdminRouter = function(io) {\\n\\n    //管理员登录页面\\n    router.get(\'/getEvent\', function(req, res, next) {\\n        io.sockets.emit(\'notifyNum\', {msg_count: \'100\'});\\n        res.end(\'success\'});\\n    });\\n\\n    .....\\n\\t\\t\\n\\n    return router;\\n};\\n\\n\\n\\nmodule.exports = returnAdminRouter;\\n8、客户端代码\\n&lt;script src=\\\"/socket.io/socket.io.js\\\"&gt;&lt;/script&gt;\\n&lt;script&gt;\\n    $(function(){\\n//        初始化事件监听\\n        var socket = io.connect(\'http://127.0.0.1:81/\');\\n        socket.on(\'notifyNum\', function (data) {\\n            console.log(data.msg_count);\\n            \\n        });\\n    })\\n&lt;/script&gt;\\n这样，前端请求 http://127.0.0.1:81/admin/getEvent 进入路由，执行相关操作后发送消息，客户端收到 noifyNum消息后将数据输出。实现了消息数量实时推送的效果：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_5_21_506_1015.png\"},{\"type\":\"contents\",\"content\":\"\\n\\nDoraCMS消息推送模块将在后一个版本更新，敬请期待 DoraCMS源码 \\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1448005751000.jpg','2015-11-20 08:11:52','2020-08-20 15:44:14'),(291,'一台服务器2站点多域名绑定-Nginx反向代理Nodejs','Nginx反向代理Nodejs','1','1','','nodejs,Nginx','2',NULL,'','最近需要在服务器上搭建两个站点，需求如下：1、2个独立站点2、2个独立域名3、共用mongodb\n在网上查了下资料，发现Nginx可以很好的解决问题，于是尝试了一下，终于成功了...','1','','','0:01',762,'2','0',NULL,0,'0',224446,'<p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_7_8_20_56_31_974_1001.jpg\" title=\"\" alt=\"20122915454.jpg\"/></p><p><span style=\"font-size: 16px;\">最近需要在服务器上搭建两个站点，需求如下：</span></p><p><span style=\"font-size: 16px;\">1、2个独立站点</span></p><p><span style=\"font-size: 16px;\">2、2个独立域名</span></p><p><span style=\"font-size: 16px;\">3、共用mongodb</span></p><p><span style=\"font-size: 16px;\">在网上查了下资料，发现Nginx可以很好的解决问题，于是尝试了一下，终于成功了，非常简单。具体步骤如下。</span></p><p><br/></p><p><span style=\"font-size: 16px;\">由于我是nodejs的程序，所以两个站点(a.com,b.com)设置了不同的端口号，express框架可以在 www 文件中设置：</span></p><pre class=\"brush:js;toolbar:false\"><span style=\"font-size: 16px;\">/**<br/>&nbsp;*&nbsp;Get&nbsp;port&nbsp;from&nbsp;environment&nbsp;and&nbsp;store&nbsp;in&nbsp;Express.<br/>&nbsp;*/<br/><br/>var&nbsp;port&nbsp;=&nbsp;normalizePort(process.env.PORT&nbsp;||&nbsp;&#39;8080&#39;);<br/>app.set(&#39;port&#39;,&nbsp;port);<br/><br/>/**<br/>&nbsp;*&nbsp;Create&nbsp;HTTP&nbsp;server.<br/>&nbsp;*/<br/></span></pre><p><span style=\"font-size: 16px;\">我设置的两个站点端口号分别为 8080 和 3000<br/></span></p><p><br/></p><p><span style=\"font-size: 16px;\">下载 </span><a href=\"http://nginx.org/en/download.html\" target=\"_blank\" style=\"font-size: 16px; text-decoration: underline;\"><span style=\"font-size: 16px;\">Nginx</span></a><span style=\"font-size: 16px;\">，解压后得到如下文件</span></p><p><br/></p><p><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_7_8_20_49_13_919_1000.png\" title=\"\" alt=\"QQ截图20150708204701.png\"/></p><p><br/></p><p><span style=\"font-size: 16px;\">接下来打开conf 文件夹，在里面新建文件夹&nbsp;vhosts ，并分别建立两个配置文件 :</span></p><p><br/></p><p><span style=\"font-size: 16px;\">a.com.conf,b.com.conf, 配置文件中加入代码：</span></p><pre class=\"brush:js;toolbar:false\"><span style=\"font-size: 16px;\">server&nbsp;{<br/>&nbsp;&nbsp;listen&nbsp;80;<br/>&nbsp;&nbsp;server_name&nbsp;a.com;<br/>&nbsp;&nbsp;location&nbsp;/&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;X-Real-IP&nbsp;$remote_addr;<br/>&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;X-Forwarded-For&nbsp;$proxy_add_x_forwarded_for;<br/>&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;Host&nbsp;&nbsp;$http_host;<br/>&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;X-Nginx-Proxy&nbsp;true;<br/>&nbsp;&nbsp;&nbsp;&nbsp;proxy_set_header&nbsp;Connection&nbsp;&quot;&quot;;<br/>&nbsp;&nbsp;&nbsp;&nbsp;proxy_pass&nbsp;http://127.0.0.1:8080;<br/>&nbsp;&nbsp;}<br/>}<br/></span></pre><p><span style=\"font-size: 16px;\">根据您的需要修改对应的值，</span></p><p><br/><span style=\"font-size: 16px;\">server_name 代表您需要绑定的域名</span></p><p><span style=\"font-size: 16px;\">proxy_pass 代表服务器上运行程序的地址（带端口号）</span></p><p><span style=\"font-size: 16px;\">listen 代表 nginx 监听端口，默认80</span></p><p><br/></p><p><span style=\"font-size: 16px;\">配置好之后，别忘记下面一步，在 conf 文件夹下找到&nbsp;nginx.conf 文件 在httpp配置项中加入配置：</span></p><pre class=\"brush:js;toolbar:false\"><span style=\"font-size: 16px;\">include 	 &nbsp;vhosts/*.conf; <br/></span></pre><p><span style=\"font-size: 16px;\">配置完之后执行：nginx.exe，大功告成！</span></p>','[{\"type\":\"contents\",\"content\":\"\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_7_8_20_56_31_974_1001.jpg\"},{\"type\":\"contents\",\"content\":\"\\n最近需要在服务器上搭建两个站点，需求如下：\\n1、2个独立站点\\n2、2个独立域名\\n3、共用mongodb\\n在网上查了下资料，发现Nginx可以很好的解决问题，于是尝试了一下，终于成功了，非常简单。具体步骤如下。\\n\\n由于我是nodejs的程序，所以两个站点(a.com,b.com)设置了不同的端口号，express框架可以在 www 文件中设置：\\n/**\\n * Get port from environment and store in Express.\\n */\\n\\nvar port = normalizePort(process.env.PORT || \'8080\');\\napp.set(\'port\', port);\\n\\n/**\\n * Create HTTP server.\\n */\\n\\n我设置的两个站点端口号分别为 8080 和 3000\\n\\n\\n下载 Nginx，解压后得到如下文件\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_7_8_20_49_13_919_1000.png\"},{\"type\":\"contents\",\"content\":\"\\n\\n接下来打开conf 文件夹，在里面新建文件夹 vhosts ，并分别建立两个配置文件 :\\n\\na.com.conf,b.com.conf, 配置文件中加入代码：\\nserver {\\n  listen 80;\\n  server_name a.com;\\n  location / {\\n    proxy_set_header X-Real-IP $remote_addr;\\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n    proxy_set_header Host  $http_host;\\n    proxy_set_header X-Nginx-Proxy true;\\n    proxy_set_header Connection \\\"\\\";\\n    proxy_pass http://127.0.0.1:8080;\\n  }\\n}\\n\\n根据您的需要修改对应的值，\\n\\nserver_name 代表您需要绑定的域名\\nproxy_pass 代表服务器上运行程序的地址（带端口号）\\nlisten 代表 nginx 监听端口，默认80\\n\\n配置好之后，别忘记下面一步，在 conf 文件夹下找到 nginx.conf 文件 在httpp配置项中加入配置：\\ninclude \\t  vhosts/*.conf; \\n\\n配置完之后执行：nginx.exe，大功告成！\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1436359272000.jpg','2015-07-08 12:57:18','2020-08-20 15:44:27'),(292,'ECMAScript入门指南','ECMAScript入门指南','2','1','','ECMAScript','2',NULL,'','ECMAScript入门指南,写的很详细，转载过来免得大家再到处找','1','','','0:01',762,'2','0',NULL,0,'0',223626,'<p>本文系转载，原文地址：&nbsp;<a href=\"http://es6.ruanyifeng.com/\" _src=\"http://es6.ruanyifeng.com/\">http://es6.ruanyifeng.com/</a> </p><p><br/></p><h2 class=\"ECMAScript和JavaScript的关系\" id=\"h2-ECMAScript和JavaScript的关系\">ECMAScript和JavaScript的关系</h2><p>很多初学者感到困惑：ECMAScript和JavaScript到底是什么关系？</p><p>简单说，ECMAScript是JavaScript语言的国际标准，JavaScript是ECMAScript的实现。</p><p>要讲清楚这个问题，需要回顾历史。1996年11月，JavaScript的创造者Netscape公司，决定将JavaScript提交给国际标\n准化组织ECMA，希望这种语言能够成为国际标准。次年，ECMA发布262号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将\n这种语言称为ECMAScript。这个版本就是ECMAScript 1.0版。</p><p>之所以不叫JavaScript，有两个原因。一是商标，Java是Sun公司的商标，根据授权协议，只有Netscape公司可以合法地使用\nJavaScript这个名字，且JavaScript本身也已经被Netscape公司注册为商标。二是想体现这门语言的制定者是ECMA，不是\nNetscape，这样有利于保证这门语言的开放性和中立性。因此，ECMAScript和JavaScript的关系是，前者是后者的规格，后者是前者\n的一种实现。在日常场合，这两个词是可以互换的。</p><p><br/></p><p>更多可以查看&nbsp;<a href=\"http://es6.ruanyifeng.com/\" _src=\"http://es6.ruanyifeng.com/\" style=\"white-space: normal;\">http://es6.ruanyifeng.com/</a></p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"本文系转载，原文地址： http://es6.ruanyifeng.com/ \\n\\nECMAScript和JavaScript的关系\\n很多初学者感到困惑：ECMAScript和JavaScript到底是什么关系？\\n简单说，ECMAScript是JavaScript语言的国际标准，JavaScript是ECMAScript的实现。\\n要讲清楚这个问题，需要回顾历史。1996年11月，JavaScript的创造者Netscape公司，决定将JavaScript提交给国际标准化组织ECMA，希望这种语言能够成为国际标准。次年，ECMA发布262号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为ECMAScript。这个版本就是ECMAScript 1.0版。\\n之所以不叫JavaScript，有两个原因。一是商标，Java是Sun公司的商标，根据授权协议，只有Netscape公司可以合法地使用JavaScript这个名字，且JavaScript本身也已经被Netscape公司注册为商标。二是想体现这门语言的制定者是ECMA，不是Netscape，这样有利于保证这门语言的开放性和中立性。因此，ECMAScript和JavaScript的关系是，前者是后者的规格，后者是前者的一种实现。在日常场合，这两个词是可以互换的。\\n\\n更多可以查看 http://es6.ruanyifeng.com/\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444894323000.jpg','2015-09-25 07:35:43','2020-08-20 15:44:24'),(293,'DoraCMS 插件化探索（一）','DoraCMS 插件化探索（一）',NULL,'1','','DoraCMS,插件,single-spa','2',NULL,'','DoraCMS 从今年年初的时候开始有插件化构想，为什么会有这种想法？其实就目前发布的DoraCMS 2.1.3 来讲，对比之前的版本有很多优化，最重要的一点是建立了比较清晰的代码结构','1','https://cdn.html-js.cn/cms/upload/ueditor/image/20191017/1571242508798920070.png,https://cdn.html-js.cn/cms/upload/ueditor/image/20191017/1571242559930668929.png,https://cdn.html-js.cn/cms/upload/ueditor/image/20191017/1571242635303246827.png','','0:01',762,'2','0',NULL,NULL,'0',168169,'<p>&nbsp;&nbsp;&nbsp;&nbsp;DoraCMS 从今年年初的时候开始有插件化构想，为什么会有这种想法？其实就目前发布的DoraCMS 2.1.3 来讲，对比之前的版本有很多优化，最重要的一点<br/></p><p>是建立了比较清晰的代码结构，后台管理基于vue的spa模式，服务端 MVC 架构也非常明显，对比2.1.2 版本服务端抽离出了server 层，让数据操作更加便捷，避免混乱的各种查询。这是 2.1.3 的目录结构：</p><p><br/></p><p>├─build <span style=\"color: #008000;\">// webpack 相关配置文件</span></p><p>│</p><p>├─client <span style=\"color: #008000;\">// 客户端文件(前台/后台)</span></p><p>│ &nbsp;│</p><p>│ &nbsp;├─index &nbsp; &nbsp; &nbsp;<span style=\"color: #008000;\">// 前台组件</span></p><p>│ &nbsp;│</p><p>│ &nbsp;├─manage &nbsp; &nbsp; <span style=\"color: #008000;\">// 后台组件</span></p><p>│ &nbsp;│</p><p>│ &nbsp;└─template &nbsp; <span style=\"color: #008000;\">// 初始模版</span></p><p>│</p><p>├─databak <span style=\"color: #008000;\">// 默认数据备份目录</span></p><p>│</p><p>│</p><p>├─logs <span style=\"color: #008000;\">// 日志目录</span></p><p>│</p><p>├─<span style=\"color: #0000ff;\">public</span> &nbsp;<span style=\"color: #008000;\">// 静态文件目录</span></p><p>│ &nbsp;│</p><p>│ &nbsp;├─admin <span style=\"color: #008000;\">// 后台vue编译后的文件目录</span></p><p>│ &nbsp;│</p><p>│ &nbsp;├─apidoc <span style=\"color: #008000;\">// api文档目录</span></p><p>│ &nbsp;│</p><p>│ &nbsp;├─plugins <span style=\"color: #008000;\">// 前台依赖的相关组件</span></p><p>│ &nbsp;│</p><p>│ &nbsp;├─themes <span style=\"color: #008000;\">// 皮肤目录</span></p><p>│ &nbsp;│</p><p>│ &nbsp;├─ueditor <span style=\"color: #008000;\">// ueditor插件目录</span></p><p>│ &nbsp;│</p><p>│ &nbsp;├─upload <span style=\"color: #008000;\">// 文件上传目录</span></p><p>│ &nbsp;│</p><p>│ &nbsp;└─vendor <span style=\"color: #008000;\">// 后台静态dll目录</span></p><p>│</p><p>│</p><p>├─server &nbsp; &nbsp;<span style=\"color: #008000;\">// 服务端目录</span></p><p>│ &nbsp;│</p><p>│ &nbsp;├─bootstrap &nbsp; <span style=\"color: #008000;\">// 前台渲染相关</span></p><p>│ &nbsp;│</p><p>│ &nbsp;├─configs &nbsp; <span style=\"color: #008000;\">// 系统配置</span></p><p>│ &nbsp;│</p><p>│ &nbsp;├─locales &nbsp; <span style=\"color: #008000;\">// 国际化</span></p><p>│ &nbsp;│</p><p>│ &nbsp;├─middleware &nbsp; <span style=\"color: #008000;\">// 中间件</span></p><p>│ &nbsp;│</p><p>│ &nbsp;│</p><p>│ &nbsp;├─lib &nbsp; &nbsp;<span style=\"color: #008000;\">// 核心层</span></p><p>│ &nbsp;│ &nbsp;├─contorller &nbsp; <span style=\"color: #008000;\">// 控制器</span></p><p>│ &nbsp;│ &nbsp;│</p><p>│ &nbsp;│ &nbsp;├─model &nbsp; <span style=\"color: #008000;\">// 数据模型</span></p><p>│ &nbsp;│ &nbsp;│</p><p>│ &nbsp;│ &nbsp;├─service &nbsp; <span style=\"color: #008000;\">// 数据库操作</span></p><p>│ &nbsp;│ &nbsp;│</p><p>│ &nbsp;│ &nbsp;└─utils</p><p>│ &nbsp;│ &nbsp; &nbsp; ├─cache <span style=\"color: #008000;\">// redis缓存</span></p><p>│ &nbsp;│ &nbsp; &nbsp; │</p><p>│ &nbsp;│ &nbsp; &nbsp; ├─memoryCache <span style=\"color: #008000;\">// 内存缓存</span></p><p>│ &nbsp;│ &nbsp; &nbsp; │</p><p>│ &nbsp;│ &nbsp; &nbsp; ├─authPower.js <span style=\"color: #008000;\">// 资源鉴权</span></p><p>│ &nbsp;│ &nbsp; &nbsp; │</p><p>│ &nbsp;│ &nbsp; &nbsp; ├─authSession.js <span style=\"color: #008000;\">// session 鉴权</span></p><p>│ &nbsp;│ &nbsp; &nbsp; │</p><p>│ &nbsp;│ &nbsp; &nbsp; ├─authToken.js <span style=\"color: #008000;\">// token鉴权</span></p><p>│ &nbsp;│ &nbsp; &nbsp; │</p><p>│ &nbsp;│ &nbsp; &nbsp; ├─mime.js <span style=\"color: #008000;\">// 文件类型</span></p><p>│ &nbsp;│ &nbsp; &nbsp; │</p><p>│ &nbsp;│ &nbsp; &nbsp; ├─siteFunc.js <span style=\"color: #008000;\">// 公共方法</span></p><p>│ &nbsp;│ &nbsp; &nbsp; │</p><p>│ &nbsp;│ &nbsp; &nbsp; └─validatorUtil.js <span style=\"color: #008000;\">// 信息校验</span></p><p>│ &nbsp;│</p><p>│ &nbsp;│</p><p>│ &nbsp;└─routers &nbsp; <span style=\"color: #008000;\">// 路由</span></p><p>│</p><p>│</p><p>│</p><p>└─views &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style=\"color: #008000;\">// 前台模板</span></p><p>│</p><p>├─dorawhite &nbsp; <span style=\"color: #008000;\">// 主题目录</span></p><p>│</p><p>├─admin.html &nbsp; &nbsp;<span style=\"color: #008000;\">// 后台管理模板</span></p><p>│</p><p>└─adminUserLogin.html &nbsp; &nbsp;<span style=\"color: #008000;\">// 后台登录模板</span></p><p><br/></p><p>先从基于vue后台管理说起，后台管理的界面以及逻辑在 /client/manage 下，每个模块非常清晰：</p><p style=\"text-align:center\"><img src=\"https://cdn.html-js.cn/cms/upload/ueditor/image/20191017/1571242508798920070.png\" title=\"1571242508798920070.png\" alt=\"1571242508798920070.png\" width=\"150\" height=\"215\"/></p><p>熟悉 DoraCMS 的童鞋都知道，开发完成后，执行</p><pre class=\"brush:html;toolbar:false\">npm&nbsp;run&nbsp;build</pre><p>就可以将我们开发的vue工程编译为浏览器可以识别的es5，发布到生产。非常方便，但是在开发过程中，我渐渐发现一些问题：</p><p>1、开发了很多模块后，编译速度非常慢。</p><p>2、有时候只改了一个vue文件，也需要重新编译，非常浪费资源</p><p>3、有些功能模块我现在不想用了，怎样友好的剥离掉？</p><p><br/></p><p>这些是我们在实际开发场景下经常遇到的问题，于是通过google，我了解到了前端微服务，至今为止，我认为微服务将成为今后大型应用必不可少要考虑的架构。</p><p>什么是“微服务”，说通俗一点，我认为的微服务就是模块拆分，相互隔离解耦，互不影响，按需加载等；那么基于 DoraCMS 2.1.3 目前的架构，如何来做微服务呢？通过大量的调研和实践，我找到了一个比较合适的方案 ： <a href=\"https://single-spa.js.org/\" target=\"_blank\" title=\"single-spa\">single-spa&nbsp;</a>, 我做了如下尝试：</p><p><br/></p><p>1、把每个模块独立出来，每个模块作为一个标准的小app抽离（基于 vue-cli）</p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/ueditor/image/20191017/1571242559930668929.png\" title=\"1571242559930668929.png\" alt=\"1571242559930668929.png\" width=\"220\" height=\"516\"/></p><p><br/></p><p>2、通过 single-spa 提供的方法将每个模块串联起来，类似下面这样（DoraCMS 的实现相同）&nbsp;</p><pre class=\"brush:html;toolbar:false\">&lt;!DOCTYPE&nbsp;html&gt;\n&lt;html&gt;\n&nbsp;&nbsp;&lt;head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;utf-8&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;http-equiv=&quot;X-UA-Compatible&quot;&nbsp;content=&quot;IE=edge&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Coexisting&nbsp;Vue&nbsp;Microfrontends&lt;/title&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;name=&quot;viewport&quot;&nbsp;content=&quot;width=device-width,&nbsp;initial-scale=1&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;name=&quot;importmap-type&quot;&nbsp;content=&quot;systemjs-importmap&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;type=&quot;systemjs-importmap&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;imports&quot;:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;navbar&quot;:&nbsp;&quot;http://localhost:8080/app.js&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;app1&quot;:&nbsp;&quot;http://localhost:8081/app.js&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;app2&quot;:&nbsp;&quot;http://localhost:8082/app.js&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;single-spa&quot;:&nbsp;&quot;https://cdnjs.cloudflare.com/ajax/libs/single-spa/4.3.7/system/single-spa.min.js&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;vue&quot;:&nbsp;&quot;https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;vue-router&quot;:&nbsp;&quot;https://cdn.jsdelivr.net/npm/vue-router@3.0.7/dist/vue-router.min.js&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/script&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;link&nbsp;rel=&quot;preload&quot;&nbsp;href=&quot;https://cdnjs.cloudflare.com/ajax/libs/single-spa/4.3.7/system/single-spa.min.js&quot;&nbsp;as=&quot;script&quot;&nbsp;crossorigin=&quot;anonymous&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;link&nbsp;rel=&quot;preload&quot;&nbsp;href=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js&quot;&nbsp;as=&quot;script&quot;&nbsp;crossorigin=&quot;anonymous&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;src=&quot;https://unpkg.com/import-map-overrides@1.7.2/dist/import-map-overrides.js&quot;&gt;&lt;/script&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;src=&quot;https://cdnjs.cloudflare.com/ajax/libs/systemjs/6.1.1/system.min.js&quot;&gt;&lt;/script&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;src=&quot;https://cdnjs.cloudflare.com/ajax/libs/systemjs/6.1.1/extras/amd.min.js&quot;&gt;&lt;/script&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;src=&quot;https://cdnjs.cloudflare.com/ajax/libs/systemjs/6.1.1/extras/named-exports.js&quot;&gt;&lt;/script&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;src=&quot;https://cdnjs.cloudflare.com/ajax/libs/systemjs/6.1.1/extras/named-register.min.js&quot;&gt;&lt;/script&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;src=&quot;https://cdnjs.cloudflare.com/ajax/libs/systemjs/6.1.1/extras/use-default.min.js&quot;&gt;&lt;/script&gt;\n&nbsp;&nbsp;&lt;/head&gt;\n&nbsp;&nbsp;&lt;body&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Promise.all([System.import(&#39;single-spa&#39;),&nbsp;System.import(&#39;vue&#39;),&nbsp;System.import(&#39;vue-router&#39;)]).then(function&nbsp;(modules)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;singleSpa&nbsp;=&nbsp;modules[0];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;Vue&nbsp;=&nbsp;modules[1];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;VueRouter&nbsp;=&nbsp;modules[2];\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vue.use(VueRouter)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;singleSpa.registerApplication(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;navbar&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;()&nbsp;=&gt;&nbsp;System.import(&#39;navbar&#39;),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;=&gt;&nbsp;true\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;singleSpa.registerApplication(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;app1&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;()&nbsp;=&gt;&nbsp;System.import(&#39;app1&#39;),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;=&gt;&nbsp;location.pathname.startsWith(&#39;/app1&#39;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;singleSpa.registerApplication(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;app2&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;()&nbsp;=&gt;&nbsp;System.import(&#39;app2&#39;),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location&nbsp;=&gt;&nbsp;location.pathname.startsWith(&#39;/app2&#39;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;singleSpa.start();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})()\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/script&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;See&nbsp;https://github.com/joeldenning/import-map-overrides#user-interface&nbsp;&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;import-map-overrides-full&nbsp;show-when-local-storage=&quot;overrides-ui&quot;&gt;&lt;/import-map-overrides-full&gt;\n&nbsp;&nbsp;&lt;/body&gt;\n&lt;/html&gt;</pre><p><br/></p><p>3、处理权限、路由等细节</p><p><br/></p><p>经过架构变更之后，可以达到这样的效果：</p><p>1、每个模块相互独立了，编译出的js彼此分开。</p><p>2、按需编译，改哪个模块，编译哪个模块，借助jenkins，更新模块到服务器非常方便：</p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/ueditor/image/20191017/1571242635303246827.png\" title=\"1571242635303246827.png\" alt=\"1571242635303246827.png\" width=\"350\" height=\"481\"/></p><p>3、再也不用担心模块过多引起的编译速度过慢了，添加哪个编译哪个<br/></p><p>4、后台的所有模块跟服务端基本没有关系了，独立开发，于是即使多个人同时开发后台管理模块，也相互不影响。&nbsp;</p><p><br/></p><p><span style=\"color: rgb(192, 0, 0); text-decoration: underline;\">PS: single-spa 微服务架构已经应用到 DoraCMS 2.1.4 版本，有兴趣的童鞋在后面发布后可以clone下来试试。</span></p>','[{\"type\":\"contents\",\"content\":\"    DoraCMS 从今年年初的时候开始有插件化构想，为什么会有这种想法？其实就目前发布的DoraCMS 2.1.3 来讲，对比之前的版本有很多优化，最重要的一点\\n是建立了比较清晰的代码结构，后台管理基于vue的spa模式，服务端 MVC 架构也非常明显，对比2.1.2 版本服务端抽离出了server 层，让数据操作更加便捷，避免混乱的各种查询。这是 2.1.3 的目录结构：\\n\\n├─build // webpack 相关配置文件\\n│\\n├─client // 客户端文件(前台/后台)\\n│  │\\n│  ├─index      // 前台组件\\n│  │\\n│  ├─manage     // 后台组件\\n│  │\\n│  └─template   // 初始模版\\n│\\n├─databak // 默认数据备份目录\\n│\\n│\\n├─logs // 日志目录\\n│\\n├─public  // 静态文件目录\\n│  │\\n│  ├─admin // 后台vue编译后的文件目录\\n│  │\\n│  ├─apidoc // api文档目录\\n│  │\\n│  ├─plugins // 前台依赖的相关组件\\n│  │\\n│  ├─themes // 皮肤目录\\n│  │\\n│  ├─ueditor // ueditor插件目录\\n│  │\\n│  ├─upload // 文件上传目录\\n│  │\\n│  └─vendor // 后台静态dll目录\\n│\\n│\\n├─server    // 服务端目录\\n│  │\\n│  ├─bootstrap   // 前台渲染相关\\n│  │\\n│  ├─configs   // 系统配置\\n│  │\\n│  ├─locales   // 国际化\\n│  │\\n│  ├─middleware   // 中间件\\n│  │\\n│  │\\n│  ├─lib    // 核心层\\n│  │  ├─contorller   // 控制器\\n│  │  │\\n│  │  ├─model   // 数据模型\\n│  │  │\\n│  │  ├─service   // 数据库操作\\n│  │  │\\n│  │  └─utils\\n│  │     ├─cache // redis缓存\\n│  │     │\\n│  │     ├─memoryCache // 内存缓存\\n│  │     │\\n│  │     ├─authPower.js // 资源鉴权\\n│  │     │\\n│  │     ├─authSession.js // session 鉴权\\n│  │     │\\n│  │     ├─authToken.js // token鉴权\\n│  │     │\\n│  │     ├─mime.js // 文件类型\\n│  │     │\\n│  │     ├─siteFunc.js // 公共方法\\n│  │     │\\n│  │     └─validatorUtil.js // 信息校验\\n│  │\\n│  │\\n│  └─routers   // 路由\\n│\\n│\\n│\\n└─views          // 前台模板\\n│\\n├─dorawhite   // 主题目录\\n│\\n├─admin.html    // 后台管理模板\\n│\\n└─adminUserLogin.html    // 后台登录模板\\n\\n先从基于vue后台管理说起，后台管理的界面以及逻辑在 /client/manage 下，每个模块非常清晰：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/ueditor/image/20191017/1571242508798920070.png\"},{\"type\":\"contents\",\"content\":\"\\n熟悉 DoraCMS 的童鞋都知道，开发完成后，执行\\nnpm run build\\n就可以将我们开发的vue工程编译为浏览器可以识别的es5，发布到生产。非常方便，但是在开发过程中，我渐渐发现一些问题：\\n1、开发了很多模块后，编译速度非常慢。\\n2、有时候只改了一个vue文件，也需要重新编译，非常浪费资源\\n3、有些功能模块我现在不想用了，怎样友好的剥离掉？\\n\\n这些是我们在实际开发场景下经常遇到的问题，于是通过google，我了解到了前端微服务，至今为止，我认为微服务将成为今后大型应用必不可少要考虑的架构。\\n什么是“微服务”，说通俗一点，我认为的微服务就是模块拆分，相互隔离解耦，互不影响，按需加载等；那么基于 DoraCMS 2.1.3 目前的架构，如何来做微服务呢？通过大量的调研和实践，我找到了一个比较合适的方案 ： single-spa , 我做了如下尝试：\\n\\n1、把每个模块独立出来，每个模块作为一个标准的小app抽离（基于 vue-cli）\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/ueditor/image/20191017/1571242559930668929.png\"},{\"type\":\"contents\",\"content\":\"\\n\\n2、通过 single-spa 提供的方法将每个模块串联起来，类似下面这样（DoraCMS 的实现相同） \\n&lt;!DOCTYPE html&gt;\\n&lt;html&gt;\\n  &lt;head&gt;\\n    &lt;meta charset=\\\"utf-8\\\"&gt;\\n    &lt;meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\"&gt;\\n    &lt;title&gt;Coexisting Vue Microfrontends&lt;/title&gt;\\n    &lt;meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\"&gt;\\n    &lt;meta name=\\\"importmap-type\\\" content=\\\"systemjs-importmap\\\"&gt;\\n    &lt;script type=\\\"systemjs-importmap\\\"&gt;\\n      {\\n        \\\"imports\\\": {\\n          \\\"navbar\\\": \\\"http://localhost:8080/app.js\\\",\\n          \\\"app1\\\": \\\"http://localhost:8081/app.js\\\",\\n          \\\"app2\\\": \\\"http://localhost:8082/app.js\\\",\\n          \\\"single-spa\\\": \\\"https://cdnjs.cloudflare.com/ajax/libs/single-spa/4.3.7/system/single-spa.min.js\\\",\\n          \\\"vue\\\": \\\"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js\\\",\\n          \\\"vue-router\\\": \\\"https://cdn.jsdelivr.net/npm/vue-router@3.0.7/dist/vue-router.min.js\\\"\\n        }\\n      }\\n    &lt;/script&gt;\\n    &lt;link rel=\\\"preload\\\" href=\\\"https://cdnjs.cloudflare.com/ajax/libs/single-spa/4.3.7/system/single-spa.min.js\\\" as=\\\"script\\\" crossorigin=\\\"anonymous\\\" /&gt;\\n    &lt;link rel=\\\"preload\\\" href=\\\"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js\\\" as=\\\"script\\\" crossorigin=\\\"anonymous\\\" /&gt;\\n    &lt;script src=\\\"https://unpkg.com/import-map-overrides@1.7.2/dist/import-map-overrides.js\\\"&gt;&lt;/script&gt;\\n    &lt;script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/6.1.1/system.min.js\\\"&gt;&lt;/script&gt;\\n    &lt;script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/6.1.1/extras/amd.min.js\\\"&gt;&lt;/script&gt;\\n    &lt;script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/6.1.1/extras/named-exports.js\\\"&gt;&lt;/script&gt;\\n    &lt;script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/6.1.1/extras/named-register.min.js\\\"&gt;&lt;/script&gt;\\n    &lt;script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/6.1.1/extras/use-default.min.js\\\"&gt;&lt;/script&gt;\\n  &lt;/head&gt;\\n  &lt;body&gt;\\n    &lt;script&gt;\\n      (function() {\\n        Promise.all([System.import(\'single-spa\'), System.import(\'vue\'), System.import(\'vue-router\')]).then(function (modules) {\\n          var singleSpa = modules[0];\\n          var Vue = modules[1];\\n          var VueRouter = modules[2];\\n\\n          Vue.use(VueRouter)\\n\\n          singleSpa.registerApplication(\\n            \'navbar\',\\n            () =&gt; System.import(\'navbar\'),\\n            location =&gt; true\\n          );\\n\\n          singleSpa.registerApplication(\\n            \'app1\',\\n            () =&gt; System.import(\'app1\'),\\n            location =&gt; location.pathname.startsWith(\'/app1\')\\n          )\\n\\n          singleSpa.registerApplication(\\n            \'app2\',\\n            () =&gt; System.import(\'app2\'),\\n            location =&gt; location.pathname.startsWith(\'/app2\')\\n          )\\n\\n          singleSpa.start();\\n        })\\n      })()\\n    &lt;/script&gt;\\n    &lt;!-- See https://github.com/joeldenning/import-map-overrides#user-interface  --&gt;\\n    &lt;import-map-overrides-full show-when-local-storage=\\\"overrides-ui\\\"&gt;&lt;/import-map-overrides-full&gt;\\n  &lt;/body&gt;\\n&lt;/html&gt;\\n\\n3、处理权限、路由等细节\\n\\n经过架构变更之后，可以达到这样的效果：\\n1、每个模块相互独立了，编译出的js彼此分开。\\n2、按需编译，改哪个模块，编译哪个模块，借助jenkins，更新模块到服务器非常方便：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/ueditor/image/20191017/1571242635303246827.png\"},{\"type\":\"contents\",\"content\":\"\\n3、再也不用担心模块过多引起的编译速度过慢了，添加哪个编译哪个\\n4、后台的所有模块跟服务端基本没有关系了，独立开发，于是即使多个人同时开发后台管理模块，也相互不影响。 \\n\\nPS: single-spa 微服务架构已经应用到 DoraCMS 2.1.4 版本，有兴趣的童鞋在后面发布后可以clone下来试试。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/1571243055075.jpeg','2019-10-16 16:25:17','2020-11-08 04:25:34'),(294,'DoraCMS 2.1.4 关于 \'指定用户\' 功能的优化说明','DoraCMS 2.1.4 关于 \'指定用户\' 功能的优化说明',NULL,'1','','DoraCMS,eggjs','2',NULL,'','近期针对后台管理新增文档中的“指定用户”功能做了优化，细心的同学可以看到在新增文档的页面，有“指定用户” 的选项，这里有些歧义','1','https://cdn.html-js.cn/cms/upload/images/20200203/1580717504336521357.png,https://cdn.html-js.cn/cms/upload/images/20200203/1580717642882507100.png,http://www.html-js.cn/static/upload/images/20200203/1580717484574950218.png','','0:01',762,'2','0','',0,'0',91678,'<p>&nbsp; &nbsp;近期针对后台管理新增文档中的“指定用户”功能做了优化，细心的同学可以看到在新增文档的页面，有“指定用户” 的选项，这里有些歧义。“指定用户”，其实本意是为当前文章指定一个作者，以前DoraCMS在设计的时候，管理员是可以默认为作者的，但是在后面的复杂开发中，发现管理员的属性和普通用户的属性是需要隔开的，在前台作者的展示和某些数据的统计上，会让业务变得复杂。于是在这里，我们约定，前台的文章统一由正常注册的用户发布，于是，在后台管理中，我们可以指定一个注册用户为作者，这个用户，管理员也可以事先注册好。但是每次新增文章，都要留意这个地方很显然有点麻烦，我在这边做了点优化，你需要按照以下方式去升级就可以了：</p><p><br/></p><p>1、更新 github 或 gitee 上代码，合并到自己的代码上</p><p>2、删除代码根目录下的 node_modules 文件夹，重新执行 npm install 安装</p><p>3、npm run dev 启动项目</p><p>4、进入后台管理 -&gt; 资源管理&nbsp; 在文档管理下，添加一个资源 “绑定编辑”</p><pre class=\"brush:js;toolbar:false\">content/updateContentEditor</pre><p style=\"text-align:center\"><img src=\"https://cdn.html-js.cn/cms/upload/images/20200203/1580717504336521357.png\" title=\"\" alt=\"\" width=\"700\" height=\"425\"/></p><p>5、进入角色管理中，对 绑定编辑 进行授权（勾选）</p><p style=\"text-align:center\"><img src=\"https://cdn.html-js.cn/cms/upload/images/20200203/1580717642882507100.png\" title=\"\" alt=\"\" width=\"700\" height=\"496\"/></p><p>6、进入文档管理，点击左上角的“绑定编辑”，进去绑定一个注册用户</p><p style=\"text-align:center\"><img src=\"http://www.html-js.cn/static/upload/images/20200203/1580717484574950218.png\" title=\"\" alt=\"\" width=\"700\" height=\"403\"/></p><p>7、添加文档</p><p><br/></p><p><span style=\"color: rgb(255, 0, 0);\"><strong>PS： 绑定编辑后，以后该管理员添加的文档都会以该编辑人为作者发布</strong></span></p>','[{\"type\":\"contents\",\"content\":\"   近期针对后台管理新增文档中的“指定用户”功能做了优化，细心的同学可以看到在新增文档的页面，有“指定用户” 的选项，这里有些歧义。“指定用户”，其实本意是为当前文章指定一个作者，以前DoraCMS在设计的时候，管理员是可以默认为作者的，但是在后面的复杂开发中，发现管理员的属性和普通用户的属性是需要隔开的，在前台作者的展示和某些数据的统计上，会让业务变得复杂。于是在这里，我们约定，前台的文章统一由正常注册的用户发布，于是，在后台管理中，我们可以指定一个注册用户为作者，这个用户，管理员也可以事先注册好。但是每次新增文章，都要留意这个地方很显然有点麻烦，我在这边做了点优化，你需要按照以下方式去升级就可以了：\\n\\n1、更新 github 或 gitee 上代码，合并到自己的代码上\\n2、删除代码根目录下的 node_modules 文件夹，重新执行 npm install 安装\\n3、npm run dev 启动项目\\n4、进入后台管理 -&gt; 资源管理  在文档管理下，添加一个资源 “绑定编辑”\\ncontent/updateContentEditor\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/20200203/1580717504336521357.png\"},{\"type\":\"contents\",\"content\":\"\\n5、进入角色管理中，对 绑定编辑 进行授权（勾选）\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/20200203/1580717642882507100.png\"},{\"type\":\"contents\",\"content\":\"\\n6、进入文档管理，点击左上角的“绑定编辑”，进去绑定一个注册用户\\n\"},{\"type\":\"image\",\"content\":\"http://www.html-js.cn/static/upload/images/20200203/1580717484574950218.png\"},{\"type\":\"contents\",\"content\":\"\\n7、添加文档\\n\\nPS： 绑定编辑后，以后该管理员添加的文档都会以该编辑人为作者发布\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20160413171705.png','2020-02-03 08:15:19','2020-11-08 04:25:29'),(295,' Nodejs cms内容管理框架 DoraCMS v2.1.0 版本更新','DoraCMS v2.1.0 版本更新','1','1','','','2',NULL,'','DoraCMS 距离上个版本更新有快半年了，时间过的很快，也比较忙，一直没有时间打理，断断续续的更新了一些bug和把自己的想法加入到系统中，总体方向让DoraCMS更加易用，更符合生产标准 ','1','','','0:01',762,'2','0',NULL,1,'0',231374,'<p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/images/ueditor/1002121291446226944.jpg\" title=\"\" alt=\"jason-leung-479251-unsplash (1).jpg\"/></p><p><br/></p><p>DoraCMS 距离上个版本更新有快半年了，时间过的很快，也比较忙，一直没有时间打理，</p><p>断断续续的更新了一些bug和把自己的想法加入到系统中，总体方向让DoraCMS更加易用，</p><p>更符合生产标准，二次开发更便捷，本次更新具体内容如下</p><p><br/></p><p>版本更新细节：</p><p>1、前台使用nunjucks重写(因为模板字符串渲染是最快的)</p><p>2、添加了doracms前台后台对国际化的支持（目前支持中文、英文、日文）</p><p>3、添加了对缓存超时时间配置支持</p><p>4、由于前台使用了nunjucks作为模板引擎，doracms从2.1以后支持换肤功能</p><p>5、前台支持IE7,8浏览器</p><p>6、针对部分提交内容进行xxs处理，提高系统安全性</p><p>7、修复删除后台消息的bug</p><p>8、修复删除系统管理员的bug</p><p>9、优化了文件目录（setting.js,config等）</p><p>10、修复了功能相关的一些bug</p><p><br/></p><p>本次优化总结：</p><p>1、改造后的架构有能力支持到IE8, 之前的架构无法实现</p><p>2、首页访问速度提升2-3倍</p><p>3、内页打开速度进一步提升</p><p>4、内存占用小，对服务器要求低&nbsp;</p><p>5、支持模板</p><p><br/></p><p><span style=\"color: rgb(255, 0, 0);\">PS: 2.1版本改动比较大，首次部署参考这篇文章：</span><a href=\"https://www.html-js.cn/details/ry4-B-hkf.html\" target=\"_blank\" title=\"DoraCMS部署教程\" style=\"color: rgb(255, 0, 0); text-decoration: underline;\"><span style=\"color: rgb(255, 0, 0);\">DoraCMS部署教程</span></a><span style=\"color: rgb(255, 0, 0);\"> 如果需要用到之前的数据库，后面有空的话我再写一下方法，着急的话给我邮件: admin#html-js.cn&nbsp;</span></p><p><br/></p><p><span style=\"background-color: rgb(255, 255, 255); color: rgb(0, 112, 192);\"><strong>使用2.1以下的版本，数据库需要执行如下操作：</strong></span></p><p>1、在mongodb bin目录下执行 ./mongo 更新 contents 数据表：</p><p style=\"text-align: center;\"><img width=\"600\" src=\"https://cdn.html-js.cn/cms/upload/images/ueditor/1002373133090557952.png\" title=\"WX20180601-101448@2x.png\" alt=\"WX20180601-101448@2x.png\" height=\"123\"/></p><pre class=\"brush:js;toolbar:false\">var&nbsp;contents&nbsp;=&nbsp;db.getCollection(&#39;contents&#39;).find({});\ncontents.forEach(function(data){\nvar&nbsp;targetId&nbsp;=&nbsp;data._id;\ndb.getCollection(&#39;contents&#39;).findOneAndUpdate({_id:targetId},{$set:{type:&#39;1&#39;}})\n})</pre><p><br/></p><p>2、执行脚本导入两个表（模板主表和模板单元表）</p><p style=\"line-height: 16px;\"><img src=\"/ueditor/dialogs/attachment/fileTypeImages/icon_rar.gif\"/><a style=\"font-size:12px; color:#0066cc;\" href=\"https://cdn.html-js.cn/cms/upload/file/ueditor/1002364250624233472.zip\" title=\"temptable.zip\">temptable.zip</a></p><pre class=\"brush:js;toolbar:false\">mongoimport&nbsp;-h&nbsp;127.0.0.1&nbsp;--port&nbsp;27017&nbsp;-d&nbsp;doracms2&nbsp;-c&nbsp;contenttemplates&nbsp;--file&nbsp;/Users/xiaoshen746/temptable/contenttemplates.json\nmongoimport&nbsp;-h&nbsp;127.0.0.1&nbsp;--port&nbsp;27017&nbsp;-d&nbsp;doracms2&nbsp;-c&nbsp;templateitems&nbsp;--file&nbsp;/Users/xiaoshen746/temptable/templateitems.json</pre><p>表中路径根据实际情况处理</p>','[{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/ueditor/1002121291446226944.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\nDoraCMS 距离上个版本更新有快半年了，时间过的很快，也比较忙，一直没有时间打理，\\n断断续续的更新了一些bug和把自己的想法加入到系统中，总体方向让DoraCMS更加易用，\\n更符合生产标准，二次开发更便捷，本次更新具体内容如下\\n\\n版本更新细节：\\n1、前台使用nunjucks重写(因为模板字符串渲染是最快的)\\n2、添加了doracms前台后台对国际化的支持（目前支持中文、英文、日文）\\n3、添加了对缓存超时时间配置支持\\n4、由于前台使用了nunjucks作为模板引擎，doracms从2.1以后支持换肤功能\\n5、前台支持IE7,8浏览器\\n6、针对部分提交内容进行xxs处理，提高系统安全性\\n7、修复删除后台消息的bug\\n8、修复删除系统管理员的bug\\n9、优化了文件目录（setting.js,config等）\\n10、修复了功能相关的一些bug\\n\\n本次优化总结：\\n1、改造后的架构有能力支持到IE8, 之前的架构无法实现\\n2、首页访问速度提升2-3倍\\n3、内页打开速度进一步提升\\n4、内存占用小，对服务器要求低 \\n5、支持模板\\n\\nPS: 2.1版本改动比较大，首次部署参考这篇文章：DoraCMS部署教程 如果需要用到之前的数据库，后面有空的话我再写一下方法，着急的话给我邮件: admin#html-js.cn \\n\\n使用2.1以下的版本，数据库需要执行如下操作：\\n1、在mongodb bin目录下执行 ./mongo 更新 contents 数据表：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/ueditor/1002373133090557952.png\"},{\"type\":\"contents\",\"content\":\"\\nvar contents = db.getCollection(\'contents\').find({});\\ncontents.forEach(function(data){\\nvar targetId = data._id;\\ndb.getCollection(\'contents\').findOneAndUpdate({_id:targetId},{$set:{type:\'1\'}})\\n})\\n\\n2、执行脚本导入两个表（模板主表和模板单元表）\\n\"},{\"type\":\"image\",\"content\":\"/ueditor/dialogs/attachment/fileTypeImages/icon_rar.gif\"},{\"type\":\"contents\",\"content\":\"temptable.zip\\nmongoimport -h 127.0.0.1 --port 27017 -d doracms2 -c contenttemplates --file /Users/xiaoshen746/temptable/contenttemplates.json\\nmongoimport -h 127.0.0.1 --port 27017 -d doracms2 -c templateitems --file /Users/xiaoshen746/temptable/templateitems.json\\n表中路径根据实际情况处理\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/img20180531170126.jpg','2018-05-31 09:04:17','2020-10-25 14:40:05'),(296,'DoraCMS v2.0.5 发布','DoraCMS v2.0.5 发布','1','1','','','2',NULL,'','DoraCMS 之前的版本是缺少用户发布文章这个功能的，之前不愿意加，主要是因为还没准备好做成类似论坛的模式，而只是简单的内容发布系统。','1','','','0:01',762,'2','0',NULL,0,'0',234528,'<p>DoraCMS 之前的版本是缺少用户发布文章这个功能的，之前不愿意加，主要是因为还没准备好做成类似论坛的模式，而只是简单的内容发布系统。考虑到前台会员发布信息的需求比较多，这次版本更新加上了，希望可以给各位建站带来便利。</p><p><strong>本次版本发布主要更新点：</strong></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal;\">1、用户中心添加文章功能，注册用户可以发布文章了，支持markdown语法</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal;\">2、优化webpack打包流程，压缩lodash，拆分element-ui</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal;\">3、服务端异常处理</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal;\">4、用户留言xss处理</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal;\">5、修复文章点击量不准确的问题</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal;\">6、修复在开发环境下，后台切换登录超级管理员和测试管理员，左侧菜单没有变化的问题</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal;\">7、首页添加了用户留言模块，以及推荐模块</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal;\">8、优化相关样式和界面布局</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal;\">9、修复了其它bug</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal;\"><strong>更新方法：&nbsp;</strong></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal;\">1、checkout 最新 2.0.5 代码</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal;\">2、删除 node_modules,重新安装依赖包</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal;\">3、启动数据库，执行cnpm run dev</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal;\">你可以到github上获取到最新版本的代码： <a href=\"https://github.com/doramart/DoraCMS\" target=\"_blank\" title=\"DoraCMS\">DoraCMS</a></p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"DoraCMS 之前的版本是缺少用户发布文章这个功能的，之前不愿意加，主要是因为还没准备好做成类似论坛的模式，而只是简单的内容发布系统。考虑到前台会员发布信息的需求比较多，这次版本更新加上了，希望可以给各位建站带来便利。\\n本次版本发布主要更新点：\\n1、用户中心添加文章功能，注册用户可以发布文章了，支持markdown语法\\n2、优化webpack打包流程，压缩lodash，拆分element-ui\\n3、服务端异常处理\\n4、用户留言xss处理\\n5、修复文章点击量不准确的问题\\n6、修复在开发环境下，后台切换登录超级管理员和测试管理员，左侧菜单没有变化的问题\\n7、首页添加了用户留言模块，以及推荐模块\\n8、优化相关样式和界面布局\\n9、修复了其它bug\\n更新方法： \\n1、checkout 最新 2.0.5 代码\\n2、删除 node_modules,重新安装依赖包\\n3、启动数据库，执行cnpm run dev\\n你可以到github上获取到最新版本的代码： DoraCMS\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/img20180108211904.png','2018-01-08 12:50:25','2020-10-05 01:47:02'),(297,'关于利用input file 移动端上传的问题处理','关于利用input file 移动端上传的问题处理','1','1','','','2',NULL,'','近期处理了一个html5在移动端上传问题，通过input file组件可以实现点击调用移动端系统拍照和上传功能，基于React写法如下','1','','','0:01',762,'2','0',NULL,1,'0',232609,'<p>近期处理了一个html5在移动端上传问题，通过input file组件可以实现点击调用移动端系统拍照和上传功能，基于React写法如下&nbsp;</p><pre class=\"brush:js;toolbar:false\">&lt;input&nbsp;onChange={this.props.uploadFile}&nbsp;type=&quot;file&quot;&nbsp;accept=&quot;image/*&quot;&nbsp;{...capture}/&gt;</pre><p><br/></p><p>解释：capture 的取值如果为 camera 则直接调用摄像头拍照，拍照或者选择相册完成后触发 uploadFile 方法读取图像数据做进一步操作。uploadFile 方法如下：&nbsp;</p><pre>//&nbsp;获取本地图像\nuploadFile(e,&nbsp;type)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;e.stopPropagation();\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;_this&nbsp;=&nbsp;this;\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;file&nbsp;=&nbsp;e.target.files[0];\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;过滤非图片格式\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(file&nbsp;&amp;&amp;&nbsp;!/image\\/\\w+/.test(file.type))&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pageConfig.alert(&quot;文件必须为图片！&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;reader&nbsp;=&nbsp;new&nbsp;FileReader();\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;filesize&nbsp;=&nbsp;Math.round(file.size&nbsp;/&nbsp;1024);\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;mId&nbsp;=&nbsp;this.props.imgState.target;\n&nbsp;&nbsp;&nbsp;&nbsp;reader.onload&nbsp;=&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;url&nbsp;=&nbsp;reader.result;&nbsp;//&nbsp;压缩图片&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_compass(url,&nbsp;filesize);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;reader.readAsDataURL(file);&nbsp;&nbsp;//&nbsp;将文件转为base64\n\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;_compass(res,&nbsp;filesize)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;max&nbsp;=&nbsp;100;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(filesize&nbsp;&gt;&nbsp;max)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;如果图片大于100K，则需要压缩；\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;img&nbsp;=&nbsp;new&nbsp;Image();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;maxW&nbsp;=&nbsp;window.screen.availWidth&nbsp;*&nbsp;window.devicePixelRatio&nbsp;/&nbsp;2&nbsp;//&nbsp;设备宽度\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;img.onload&nbsp;=&nbsp;()&nbsp;=&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;canvas&nbsp;=&nbsp;document.createElement(&#39;canvas&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;ctx&nbsp;=&nbsp;canvas.getContext(&#39;2d&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(img.width&nbsp;&gt;&nbsp;maxW)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;img.height&nbsp;*=&nbsp;maxW&nbsp;/&nbsp;img.width;&nbsp;&nbsp;//&nbsp;同比例缩小\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;img.width&nbsp;=&nbsp;maxW;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas.width&nbsp;=&nbsp;img.width;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas.height&nbsp;=&nbsp;img.height;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect(0,&nbsp;0,&nbsp;ctx.width,&nbsp;ctx.height);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.drawImage(img,&nbsp;0,&nbsp;0,&nbsp;img.width,&nbsp;img.height);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;dataUrl&nbsp;=&nbsp;canvas.toDataURL(&#39;image/jpeg&#39;,&nbsp;.95);&nbsp;//压缩质量\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;开始上传照片\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;that.startUploadPhoto(type,&nbsp;mId,&nbsp;dataUrl);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;img.src&nbsp;=&nbsp;res;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;开始上传\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;that.startUploadPhoto(type,&nbsp;mId,&nbsp;res);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre><p>问题比较好处理，我们可根据 web 的 FileReader api来获取图片文件的base64位数据，结合 canvas 绘图对base64位数据进行压缩操作后上传到服务器。</p><p>然而在测试过程中发现，在ios上如果是竖拍，显示出来却是横着的，也就是ios的Safari把照片自动旋转了。这个怎么处理呢，把获得的图像转过来就好了。这里用到一个辅助的库：<a href=\"http://code.ciaoca.com/javascript/exif-js/\" target=\"_blank\" title=\"exif.js\">exif.js</a>, exif 能够获取到图片的元数据，当然也包含了图片的方向信息（Orientation），我们可以根据这个信息对图片做转动处理，新增一个转动图像的方法，把代码优化一下：</p><pre>uploadFile(e,&nbsp;type)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;e.stopPropagation();\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;_this&nbsp;=&nbsp;this;\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;file&nbsp;=&nbsp;e.target.files[0];\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;过滤非图片格式\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(file&nbsp;&amp;&amp;&nbsp;!/image\\/\\w+/.test(file.type))&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;pageConfig.alert(&quot;文件必须为图片！&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;reader&nbsp;=&nbsp;new&nbsp;FileReader();\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;filesize&nbsp;=&nbsp;Math.round(file.size&nbsp;/&nbsp;1024);\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;mId&nbsp;=&nbsp;this.props.imgState.target;\n&nbsp;&nbsp;&nbsp;&nbsp;reader.onload&nbsp;=&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;url&nbsp;=&nbsp;reader.result;\n&nbsp;&nbsp;&nbsp;&nbsp;canvasDataURL(url,&nbsp;filesize)\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;reader.readAsDataURL(file);&nbsp;&nbsp;//&nbsp;将文件转为base64\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;//获取上传图片的Orientation并旋转\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;canvasDataURL(path)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;img&nbsp;=&nbsp;new&nbsp;Image();\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;canvas&nbsp;=&nbsp;document.createElement(&quot;canvas&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;myBase64Img&nbsp;=&nbsp;&#39;&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;img.onload&nbsp;=&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;EXIF.getData(this,&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;imgOrientation&nbsp;=&nbsp;EXIF.getTag(this,&nbsp;&#39;Orientation&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;//如果方向角不为1，都需要进行旋转\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;----Orientation-----&#39;,&nbsp;imgOrientation);\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(imgOrientation&nbsp;!=&nbsp;&quot;&quot;&nbsp;&amp;&amp;&nbsp;imgOrientation&nbsp;!=&nbsp;1&nbsp;&amp;&amp;&nbsp;imgOrientation)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;switch&nbsp;(imgOrientation)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;6:&nbsp;//需要顺时针（向左）90度旋转\n&nbsp;&nbsp;&nbsp;&nbsp;myBase64Img&nbsp;=&nbsp;rotateImg(this,&nbsp;&#39;left&#39;,&nbsp;canvas);\n&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;8:&nbsp;//需要逆时针（向右）90度旋转&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;myBase64Img&nbsp;=&nbsp;rotateImg(this,&nbsp;&#39;right&#39;,&nbsp;canvas);\n&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;3:&nbsp;//需要180度旋转&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;myBase64Img&nbsp;=&nbsp;rotateImg(this,&nbsp;&#39;right&#39;,&nbsp;canvas);&nbsp;//转两次&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;myBase64Img&nbsp;=&nbsp;rotateImg(this,&nbsp;&#39;right&#39;,&nbsp;canvas);\n&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;myBase64Img&nbsp;=&nbsp;rotateImg(this,&nbsp;&#39;none&#39;,&nbsp;canvas);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;开始上传照片\n&nbsp;&nbsp;&nbsp;&nbsp;_this.startUploadPhoto(type,&nbsp;mId,&nbsp;myBase64Img);\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;_this.props.actions.queryImgState({&nbsp;front:&nbsp;myBase64Img&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;img.src&nbsp;=&nbsp;path;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;rotateImg(img,&nbsp;direction,&nbsp;canvas)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;//最小与最大旋转方向，图片旋转4次后回到原方向&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;min_step&nbsp;=&nbsp;0;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;max_step&nbsp;=&nbsp;3;\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(img&nbsp;==&nbsp;null)&nbsp;return;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;图片原始尺寸\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;originWidth&nbsp;=&nbsp;img.width;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;originHeight&nbsp;=&nbsp;img.height;\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;最大尺寸限制，可通过国设置宽高来实现图片压缩程度\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;maxWidth&nbsp;=&nbsp;800,\n&nbsp;&nbsp;&nbsp;&nbsp;maxHeight&nbsp;=&nbsp;800;\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;目标尺寸\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;targetWidth&nbsp;=&nbsp;originWidth,\n&nbsp;&nbsp;&nbsp;&nbsp;targetHeight&nbsp;=&nbsp;originHeight;\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;图片尺寸超过400x400的限制\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(originWidth&nbsp;&gt;&nbsp;maxWidth&nbsp;||&nbsp;originHeight&nbsp;&gt;&nbsp;maxHeight)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(originWidth&nbsp;/&nbsp;originHeight&nbsp;&gt;&nbsp;maxWidth&nbsp;/&nbsp;maxHeight)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;更宽，按照宽度限定尺寸\n&nbsp;&nbsp;&nbsp;&nbsp;targetWidth&nbsp;=&nbsp;maxWidth;\n&nbsp;&nbsp;&nbsp;&nbsp;targetHeight&nbsp;=&nbsp;Math.round(maxWidth&nbsp;*&nbsp;(originHeight&nbsp;/&nbsp;originWidth));\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;targetHeight&nbsp;=&nbsp;maxHeight;\n&nbsp;&nbsp;&nbsp;&nbsp;targetWidth&nbsp;=&nbsp;Math.round(maxHeight&nbsp;*&nbsp;(originWidth&nbsp;/&nbsp;originHeight));\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;height&nbsp;=&nbsp;targetHeight;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;width&nbsp;=&nbsp;targetWidth;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;step&nbsp;=&nbsp;2;\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(step&nbsp;==&nbsp;null)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;step&nbsp;=&nbsp;min_step;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(direction&nbsp;==&nbsp;&#39;right&#39;)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;step++;\n&nbsp;&nbsp;&nbsp;&nbsp;//旋转到原位置，即超过最大值&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;step&nbsp;&gt;&nbsp;max_step&nbsp;&amp;&amp;&nbsp;(step&nbsp;=&nbsp;min_step);\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if&nbsp;(direction&nbsp;==&nbsp;&#39;none&#39;)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;step&nbsp;=&nbsp;10;\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;step--;\n&nbsp;&nbsp;&nbsp;&nbsp;step&nbsp;&lt;&nbsp;min_step&nbsp;&amp;&amp;&nbsp;(step&nbsp;=&nbsp;max_step);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;//旋转角度以弧度值为参数&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;degree&nbsp;=&nbsp;step&nbsp;*&nbsp;90&nbsp;*&nbsp;Math.PI&nbsp;/&nbsp;180;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;ctx&nbsp;=&nbsp;canvas.getContext(&#39;2d&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect(0,&nbsp;0,&nbsp;targetWidth,&nbsp;targetHeight);\n&nbsp;&nbsp;&nbsp;&nbsp;switch&nbsp;(step)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;0:\n&nbsp;&nbsp;&nbsp;&nbsp;canvas.width&nbsp;=&nbsp;width;\n&nbsp;&nbsp;&nbsp;&nbsp;canvas.height&nbsp;=&nbsp;height;\n&nbsp;&nbsp;&nbsp;&nbsp;ctx.drawImage(img,&nbsp;0,&nbsp;0,&nbsp;targetWidth,&nbsp;targetHeight);\n&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;1:\n&nbsp;&nbsp;&nbsp;&nbsp;canvas.width&nbsp;=&nbsp;height;\n&nbsp;&nbsp;&nbsp;&nbsp;canvas.height&nbsp;=&nbsp;width;\n&nbsp;&nbsp;&nbsp;&nbsp;ctx.rotate(degree);\n&nbsp;&nbsp;&nbsp;&nbsp;ctx.drawImage(img,&nbsp;0,&nbsp;-height,&nbsp;targetWidth,&nbsp;targetHeight);\n&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;2:\n&nbsp;&nbsp;&nbsp;&nbsp;canvas.width&nbsp;=&nbsp;width;\n&nbsp;&nbsp;&nbsp;&nbsp;canvas.height&nbsp;=&nbsp;height;\n&nbsp;&nbsp;&nbsp;&nbsp;ctx.rotate(degree);\n&nbsp;&nbsp;&nbsp;&nbsp;ctx.drawImage(img,&nbsp;-width,&nbsp;-height,&nbsp;targetWidth,&nbsp;targetHeight);\n&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;3:\n&nbsp;&nbsp;&nbsp;&nbsp;canvas.width&nbsp;=&nbsp;height;\n&nbsp;&nbsp;&nbsp;&nbsp;canvas.height&nbsp;=&nbsp;width;\n&nbsp;&nbsp;&nbsp;&nbsp;ctx.rotate(degree);\n&nbsp;&nbsp;&nbsp;&nbsp;ctx.drawImage(img,&nbsp;-width,&nbsp;0,&nbsp;targetWidth,&nbsp;targetHeight);\n&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;10:&nbsp;//&nbsp;不旋转\n&nbsp;&nbsp;&nbsp;&nbsp;canvas.width&nbsp;=&nbsp;width;\n&nbsp;&nbsp;&nbsp;&nbsp;canvas.height&nbsp;=&nbsp;height;\n&nbsp;&nbsp;&nbsp;&nbsp;ctx.drawImage(img,&nbsp;0,&nbsp;0,&nbsp;targetWidth,&nbsp;targetHeight);\n&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;dat&nbsp;=&nbsp;canvas.toDataURL(&quot;image/jpeg&quot;,&nbsp;0.8);\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;dat;\n&nbsp;&nbsp;&nbsp;&nbsp;};\n\n}</pre><p><br/></p>','[{\"type\":\"contents\",\"content\":\"近期处理了一个html5在移动端上传问题，通过input file组件可以实现点击调用移动端系统拍照和上传功能，基于React写法如下 \\n&lt;input onChange={this.props.uploadFile} type=\\\"file\\\" accept=\\\"image/*\\\" {...capture}/&gt;\\n\\n解释：capture 的取值如果为 camera 则直接调用摄像头拍照，拍照或者选择相册完成后触发 uploadFile 方法读取图像数据做进一步操作。uploadFile 方法如下： \\n// 获取本地图像\\nuploadFile(e, type) {\\n    e.stopPropagation();\\n    let _this = this;\\n    let file = e.target.files[0];\\n    \\n    // 过滤非图片格式\\n    if (file &amp;&amp; !/image\\\\/\\\\w+/.test(file.type)) {\\n        pageConfig.alert(\\\"文件必须为图片！\\\");\\n        return false;\\n    }\\n    \\n    let reader = new FileReader();\\n    let filesize = Math.round(file.size / 1024);\\n    let mId = this.props.imgState.target;\\n    reader.onload = function () {\\n        let url = reader.result; // 压缩图片            \\n        _compass(url, filesize);\\n    }\\n    reader.readAsDataURL(file);  // 将文件转为base64\\n\\n    function _compass(res, filesize) {\\n            let max = 100;\\n            if (filesize &gt; max) {\\n                // 如果图片大于100K，则需要压缩；\\n                let img = new Image();\\n                let maxW = window.screen.availWidth * window.devicePixelRatio / 2 // 设备宽度\\n                img.onload = () =&gt; {\\n                    let canvas = document.createElement(\'canvas\');\\n                    let ctx = canvas.getContext(\'2d\');\\n                    if (img.width &gt; maxW) {\\n                        img.height *= maxW / img.width;  // 同比例缩小\\n                        img.width = maxW;\\n                    }\\n\\n                    canvas.width = img.width;\\n                    canvas.height = img.height;\\n                    ctx.clearRect(0, 0, ctx.width, ctx.height);\\n                    ctx.drawImage(img, 0, 0, img.width, img.height);\\n                    let dataUrl = canvas.toDataURL(\'image/jpeg\', .95); //压缩质量\\n\\n                    // 开始上传照片\\n                    that.startUploadPhoto(type, mId, dataUrl);\\n                }\\n                img.src = res;\\n            } else {\\n                // 开始上传\\n                that.startUploadPhoto(type, mId, res);\\n            }\\n        }\\n}\\n问题比较好处理，我们可根据 web 的 FileReader api来获取图片文件的base64位数据，结合 canvas 绘图对base64位数据进行压缩操作后上传到服务器。\\n然而在测试过程中发现，在ios上如果是竖拍，显示出来却是横着的，也就是ios的Safari把照片自动旋转了。这个怎么处理呢，把获得的图像转过来就好了。这里用到一个辅助的库：exif.js, exif 能够获取到图片的元数据，当然也包含了图片的方向信息（Orientation），我们可以根据这个信息对图片做转动处理，新增一个转动图像的方法，把代码优化一下：\\nuploadFile(e, type) {\\n    e.stopPropagation();\\n    let _this = this;\\n    let file = e.target.files[0];\\n    \\n    // 过滤非图片格式\\n    if (file &amp;&amp; !/image\\\\/\\\\w+/.test(file.type)) {\\n    pageConfig.alert(\\\"文件必须为图片！\\\");\\n    return false;\\n    }\\n    \\n    let reader = new FileReader();\\n    let filesize = Math.round(file.size / 1024);\\n    let mId = this.props.imgState.target;\\n    reader.onload = function () {\\n    let url = reader.result;\\n    canvasDataURL(url, filesize)\\n    }\\n    reader.readAsDataURL(file);  // 将文件转为base64\\n    \\n    \\n    //获取上传图片的Orientation并旋转\\n    function canvasDataURL(path) {\\n    var img = new Image();\\n    var canvas = document.createElement(\\\"canvas\\\");\\n    let myBase64Img = \'\';\\n    img.onload = function () {\\n    EXIF.getData(this, function () {\\n    let imgOrientation = EXIF.getTag(this, \'Orientation\');\\n    //如果方向角不为1，都需要进行旋转\\n    console.log(\'----Orientation-----\', imgOrientation);\\n    if (imgOrientation != \\\"\\\" &amp;&amp; imgOrientation != 1 &amp;&amp; imgOrientation) {\\n    switch (imgOrientation) {\\n    case 6: //需要顺时针（向左）90度旋转\\n    myBase64Img = rotateImg(this, \'left\', canvas);\\n    break;\\n    case 8: //需要逆时针（向右）90度旋转  \\n    myBase64Img = rotateImg(this, \'right\', canvas);\\n    break;\\n    case 3: //需要180度旋转  \\n    myBase64Img = rotateImg(this, \'right\', canvas); //转两次  \\n    myBase64Img = rotateImg(this, \'right\', canvas);\\n    break;\\n    }\\n    } else {\\n    myBase64Img = rotateImg(this, \'none\', canvas);\\n    }\\n    \\n    // 开始上传照片\\n    _this.startUploadPhoto(type, mId, myBase64Img);\\n    // _this.props.actions.queryImgState({ front: myBase64Img });\\n    });\\n    }\\n    img.src = path;\\n    }\\n    \\n    function rotateImg(img, direction, canvas) {\\n    //最小与最大旋转方向，图片旋转4次后回到原方向    \\n    var min_step = 0;\\n    var max_step = 3;\\n    if (img == null) return;\\n    \\n    // 图片原始尺寸\\n    var originWidth = img.width;\\n    var originHeight = img.height;\\n    // 最大尺寸限制，可通过国设置宽高来实现图片压缩程度\\n    var maxWidth = 800,\\n    maxHeight = 800;\\n    // 目标尺寸\\n    var targetWidth = originWidth,\\n    targetHeight = originHeight;\\n    // 图片尺寸超过400x400的限制\\n    if (originWidth &gt; maxWidth || originHeight &gt; maxHeight) {\\n    if (originWidth / originHeight &gt; maxWidth / maxHeight) {\\n    // 更宽，按照宽度限定尺寸\\n    targetWidth = maxWidth;\\n    targetHeight = Math.round(maxWidth * (originHeight / originWidth));\\n    } else {\\n    targetHeight = maxHeight;\\n    targetWidth = Math.round(maxHeight * (originWidth / originHeight));\\n    }\\n    }\\n    \\n    var height = targetHeight;\\n    var width = targetWidth;\\n    var step = 2;\\n    if (step == null) {\\n    step = min_step;\\n    }\\n    if (direction == \'right\') {\\n    step++;\\n    //旋转到原位置，即超过最大值    \\n    step &gt; max_step &amp;&amp; (step = min_step);\\n    } else if (direction == \'none\') {\\n    step = 10;\\n    } else {\\n    step--;\\n    step &lt; min_step &amp;&amp; (step = max_step);\\n    }\\n    //旋转角度以弧度值为参数    \\n    var degree = step * 90 * Math.PI / 180;\\n    var ctx = canvas.getContext(\'2d\');\\n    ctx.clearRect(0, 0, targetWidth, targetHeight);\\n    switch (step) {\\n    case 0:\\n    canvas.width = width;\\n    canvas.height = height;\\n    ctx.drawImage(img, 0, 0, targetWidth, targetHeight);\\n    break;\\n    case 1:\\n    canvas.width = height;\\n    canvas.height = width;\\n    ctx.rotate(degree);\\n    ctx.drawImage(img, 0, -height, targetWidth, targetHeight);\\n    break;\\n    case 2:\\n    canvas.width = width;\\n    canvas.height = height;\\n    ctx.rotate(degree);\\n    ctx.drawImage(img, -width, -height, targetWidth, targetHeight);\\n    break;\\n    case 3:\\n    canvas.width = height;\\n    canvas.height = width;\\n    ctx.rotate(degree);\\n    ctx.drawImage(img, -width, 0, targetWidth, targetHeight);\\n    break;\\n    case 10: // 不旋转\\n    canvas.width = width;\\n    canvas.height = height;\\n    ctx.drawImage(img, 0, 0, targetWidth, targetHeight);\\n    break;\\n    }\\n    \\n    let dat = canvas.toDataURL(\\\"image/jpeg\\\", 0.8);\\n    return dat;\\n    };\\n\\n}\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/img20180816143038.jpeg','2018-08-16 06:31:04','2020-10-17 15:33:07'),(298,'DoraCMS 2.0.3 版本更新','DoraCMS 2.0.3 版本更新','1','1','','','2',NULL,'','近期DoraCMS版本更新到v2.0.3,主要修复问题如下 1、上传缩略图支持七牛云存储 (setttings.js 中修改 )','1','','','0:01',762,'2','0',NULL,0,'0',226578,'<p class=\"p1\"><span class=\"s1\">1</span>、上传缩略图支持七牛云存储<span class=\"s1\"> </span>(<span class=\"s1\">setttings.js </span>中修改<span class=\"s1\"> </span>)<span class=\"s1\"> </span><span style=\"color: rgb(255, 0, 0);\">[重要]</span></p><p style=\"text-align:center\"><span style=\"color: rgb(255, 0, 0);\"><img src=\"https://cdn.html-js.cn/ueditor/images/935478567922438144.png\" title=\"七牛配置上传.png\" alt=\"七牛配置上传.png\" width=\"430\" height=\"133\"/></span></p><p class=\"p1\"><span class=\"s1\">2</span>、取消在后台首页显示用户敏感信息，提高安全性<span class=\"s1\"> </span><span style=\"color: rgb(255, 0, 0);\">[重要]</span></p><p class=\"p2\"><span class=\"s2\">3、管理员登录md5加密 (<a href=\"https://github.com/doramart/DoraCMS/pull/87\"><span class=\"s4\">https://github.com/doramart/DoraCMS/pull/87</span></a>) </span><span style=\"color: rgb(255, 0, 0);\">[重要]</span></p><p class=\"p2\"><span class=\"s2\">4</span><span class=\"s3\">、修复描述信息不是必填项，但是也验证了（<a href=\"https://github.com/doramart/DoraCMS/issues/91\"><span class=\"s4\">https://github.com/doramart/DoraCMS/issues/91</span></a>）</span></p><p class=\"p1\"><span class=\"s1\">5</span>、站点地图域名可配置(以后台系统配置中站点域名为准)</p><p class=\"p3\">6<span class=\"s5\">、统一端口号配置(</span>settings.js <span class=\"s5\">中配置</span>serverPort<span class=\"s5\">的值)</span></p><p class=\"p1\"><span class=\"s1\">7</span>、修复管理员在留言管理中<span class=\"s1\"> </span>对某个会员<span class=\"s1\"> </span>回复信息，<span class=\"s1\"> </span>然后再给自己（<span class=\"s1\">doramart</span>）回复信息后，进入系统主页</p><p class=\"p2\"><span class=\"s3\">浏览器报错的问题（<a href=\"https://github.com/doramart/DoraCMS/issues/93\"><span class=\"s4\">https://github.com/doramart/DoraCMS/issues/93</span></a>）<span style=\"color: rgb(255, 0, 0);\">[重要]</span></span></p><p class=\"p2\"><span class=\"s2\">8</span><span class=\"s3\">、修复修改管理员信息没有改手机号却提示手机号格式不正确的问题（<a href=\"https://github.com/doramart/DoraCMS/pull/92\"><span class=\"s4\">https://github.com/doramart/DoraCMS/pull/92</span></a>）</span></p><p class=\"p1\"><span class=\"s1\">9</span>、前台后台添加<span class=\"s1\">404</span>页面<span class=\"s1\"><span class=\"Apple-converted-space\">&nbsp;</span></span></p><p class=\"p1\"><span class=\"s1\">10</span>、后台没有权限的菜单不显示<span class=\"s1\"> </span><span style=\"color: rgb(255, 0, 0);\">[重要]</span></p><p class=\"p1\"><span class=\"s1\">11</span>、修复了一些样式问题</p><p class=\"p4\"><br/></p><p class=\"p1\"><span style=\"color: rgb(255, 0, 0);\">PS: 关于七牛云存储需要注意，在七牛管理控制台创建存储空间时，必须选择华东区，这个跟历史版本sdk bug有关。&nbsp;</span></p>','[{\"type\":\"contents\",\"content\":\"1、上传缩略图支持七牛云存储 (setttings.js 中修改 ) [重要]\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/ueditor/images/935478567922438144.png\"},{\"type\":\"contents\",\"content\":\"\\n2、取消在后台首页显示用户敏感信息，提高安全性 [重要]\\n3、管理员登录md5加密 (https://github.com/doramart/DoraCMS/pull/87) [重要]\\n4、修复描述信息不是必填项，但是也验证了（https://github.com/doramart/DoraCMS/issues/91）\\n5、站点地图域名可配置(以后台系统配置中站点域名为准)\\n6、统一端口号配置(settings.js 中配置serverPort的值)\\n7、修复管理员在留言管理中 对某个会员 回复信息， 然后再给自己（doramart）回复信息后，进入系统主页\\n浏览器报错的问题（https://github.com/doramart/DoraCMS/issues/93）[重要]\\n8、修复修改管理员信息没有改手机号却提示手机号格式不正确的问题（https://github.com/doramart/DoraCMS/pull/92）\\n9、前台后台添加404页面 \\n10、后台没有权限的菜单不显示 [重要]\\n11、修复了一些样式问题\\n\\nPS: 关于七牛云存储需要注意，在七牛管理控制台创建存储空间时，必须选择华东区，这个跟历史版本sdk bug有关。 \\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/img20171129134549.jpeg','2017-11-28 11:59:46','2020-08-20 15:44:04'),(299,'移动端调试神器（eruda）','移动端调试神器（eruda）','1','1','','','2',NULL,'','推荐一款在手机端的h5调试工具（虽然已经用了好久了），功能实用，妈妈再也不用担心我一直在代码中加 console.log 了。','1','','','0:01',762,'2','0',NULL,0,'0',228123,'<p class=\"p1\">推荐一款在手机端的<span class=\"s1\">h5</span>调试工具（虽然已经用了好久了），功能实用，妈妈再也不用担心我一直在代码中加<span class=\"s1\"> console.log </span>了。这次的主角是<span class=\"s1\"> eruda，</span>老司机忽略，没用过的可以看看。界面是这样的，点击设置按钮就能呼出来了。其主要功能包括：捕获<span class=\"s1\"> console </span>日志、检查元素状态、显示性能指标、捕获<span class=\"s1\">XHR</span>请求、显示本地存储和<span class=\"s1\"> Cookie </span>信息、浏览器特性检测等等。</p><p class=\"p2\"><br/></p><p class=\"p1\"><span class=\"s1\">1</span>、<span class=\"s1\">console</span>。<span class=\"s1\"> </span>我们可以在控制台打印需要的变量</p><p class=\"p1\" style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/ueditor/images/936145198898089984.png\" title=\"界面.png\" alt=\"界面.png\" width=\"300\" height=\"531\"/></p><p class=\"p1\"><span class=\"s1\">2</span>、<span class=\"s1\">elements</span>,<span class=\"s1\"> </span>可以通过手指图标选中<span class=\"s1\">dom</span>元素，查看元素样式等信息</p><p class=\"p1\" style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/ueditor/images/936145452850614272.png\" title=\"elements.png\" alt=\"elements.png\" width=\"300\" height=\"535\"/></p><p class=\"p1\"><span class=\"s1\">3</span>、<span class=\"s1\">network</span>,<span class=\"s1\"> </span>非常有用的功能，可以查看页面<span class=\"s1\">ajax</span>请求入参和返回结果，再也不用抓包了，也可以查看<span class=\"s1\">dom</span>的响应时间</p><p class=\"p1\" style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/ueditor/images/936146834458546176.png\" title=\"network.png\" alt=\"network.png\" width=\"300\" height=\"538\"/></p><p class=\"p3\">4<span class=\"s2\">、</span>resource<span class=\"s2\">，</span> <span class=\"s2\">可以查看浏览器的</span>localStorage <span class=\"s2\">和</span> sessionStorage <span class=\"s2\">以及</span> cookie <span class=\"s2\">并可以手动删除</span></p><p class=\"p3\" style=\"text-align: center;\"><span class=\"s2\"><img src=\"https://cdn.html-js.cn/ueditor/images/936146931548295168.png\" title=\"resources.png\" alt=\"resources.png\" width=\"300\" height=\"533\"/></span></p><p class=\"p1\"><span class=\"s1\">5</span>、<span class=\"s1\">source </span>，<span class=\"s1\"> </span>可以查看当前页面加载的<span class=\"s1\">dom</span>资源</p><p class=\"p1\" style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/ueditor/images/936147086980812800.png\" title=\"sources.png\" alt=\"sources.png\" width=\"300\" height=\"534\"/></p><p class=\"p3\">6<span class=\"s2\">、</span>info<span class=\"s2\">，查看</span> webview <span class=\"s2\">的基本信息，包括</span> user agent <span class=\"s2\">和</span> <span class=\"s2\">屏幕尺寸等</span></p><p class=\"p3\" style=\"text-align: center;\"><span class=\"s2\"><img src=\"https://cdn.html-js.cn/ueditor/images/936147176235601920.png\" title=\"info.png\" alt=\"info.png\" width=\"300\" height=\"532\"/></span></p><p class=\"p1\"><span class=\"s1\">7</span>、<span class=\"s1\">snippets </span>可以进行页面手动刷新，设置边框，查询文本等操作，非常方便</p><p class=\"p2\" style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/ueditor/images/936147263410016256.png\" title=\"snippets.png\" alt=\"snippets.png\" width=\"300\" height=\"531\"/></p><p class=\"p2\"><br/></p><p class=\"p4\"><span class=\"s3\">demo: <a href=\"http://eruda.liriliri.io/\"><span class=\"s4\">http://eruda.liriliri.io/</span></a></span></p><p class=\"p4\"><span class=\"s5\">开源地址：<a href=\"https://github.com/liriliri/eruda\"><span class=\"s6\">https://github.com/liriliri/eruda</span></a></span></p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"推荐一款在手机端的h5调试工具（虽然已经用了好久了），功能实用，妈妈再也不用担心我一直在代码中加 console.log 了。这次的主角是 eruda，老司机忽略，没用过的可以看看。界面是这样的，点击设置按钮就能呼出来了。其主要功能包括：捕获 console 日志、检查元素状态、显示性能指标、捕获XHR请求、显示本地存储和 Cookie 信息、浏览器特性检测等等。\\n\\n1、console。 我们可以在控制台打印需要的变量\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/ueditor/images/936145198898089984.png\"},{\"type\":\"contents\",\"content\":\"\\n2、elements, 可以通过手指图标选中dom元素，查看元素样式等信息\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/ueditor/images/936145452850614272.png\"},{\"type\":\"contents\",\"content\":\"\\n3、network, 非常有用的功能，可以查看页面ajax请求入参和返回结果，再也不用抓包了，也可以查看dom的响应时间\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/ueditor/images/936146834458546176.png\"},{\"type\":\"contents\",\"content\":\"\\n4、resource， 可以查看浏览器的localStorage 和 sessionStorage 以及 cookie 并可以手动删除\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/ueditor/images/936146931548295168.png\"},{\"type\":\"contents\",\"content\":\"\\n5、source ， 可以查看当前页面加载的dom资源\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/ueditor/images/936147086980812800.png\"},{\"type\":\"contents\",\"content\":\"\\n6、info，查看 webview 的基本信息，包括 user agent 和 屏幕尺寸等\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/ueditor/images/936147176235601920.png\"},{\"type\":\"contents\",\"content\":\"\\n7、snippets 可以进行页面手动刷新，设置边框，查询文本等操作，非常方便\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/ueditor/images/936147263410016256.png\"},{\"type\":\"contents\",\"content\":\"\\n\\ndemo: http://eruda.liriliri.io/\\n开源地址：https://github.com/liriliri/eruda\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/img20171130160852.png','2017-11-30 08:18:35','2020-08-20 15:44:04'),(300,'DoraCMS运行求助','DoraCMS运行求助','3','1','','','2',NULL,'','Windows和mac都报这种错','1','','','0:01',762,'2','0',NULL,0,'0',226871,'<p><span>依赖都装了，Redis也启动了，改装的都装了</span></p><p><span><br /></span></p><p><span>&gt; doracms@2.1.0 dev /Users/nirongxu/Documents/workspace/DoraCMS</span></p><p><span>&gt; concurrently &quot;npm run devNodeServer&quot; &quot;gulp&quot;</span></p><p><span></span><br /></p><p><span>[0]</span><span><span>&nbsp;</span></span></p><p><span>[0]</span><span> &gt; doracms@2.1.0 devNodeServer /Users/nirongxu/Documents/workspace/DoraCMS</span></p><p><span>[0]</span><span> &gt; cross-env NODE_ENV=development MICRO_CACHE=true node ./server</span></p><p><span>[0]</span><span><span>&nbsp;</span></span></p><p><span>[1]</span><span> [01:06:51] Using gulpfile </span><span>~/Documents/workspace/DoraCMS/gulpfile.js</span></p><p><span>[1]</span><span> [01:06:51] Starting &#39;</span><span>default1</span><span>&#39;...</span></p><p><span>[1]</span><span> [01:06:51] Finished &#39;</span><span>default1</span><span>&#39; after </span><span>9.31 ms</span></p><p><span>[1]</span><span> [01:06:51] Starting &#39;</span><span>default2</span><span>&#39;...</span></p><p><span>[1]</span><span> [01:06:51] Finished &#39;</span><span>default2</span><span>&#39; after </span><span>1.47 ms</span></p><p><span>[1]</span><span> [01:06:51] Starting &#39;</span><span>default</span><span>&#39;...</span></p><p><span>[1]</span><span> [01:06:51] Finished &#39;</span><span>default</span><span>&#39; after </span><span>987 μs</span></p><p><span>[0]</span><span> Redis状态开关： false</span></p><p><span>[0]</span><span> server started at localhost:8080</span></p><p><span>[0]</span><span> connect mongodb success</span></p><p><span>[0]</span><span> babel-preset-env: `DEBUG` option</span></p><p><span>[0]</span><span><span>&nbsp;</span></span></p><p><span>[0]</span><span> Using targets:</span></p><p><span>[0]</span><span> {</span></p><p><span>[0]</span><span> <span>&nbsp; </span>&quot;chrome&quot;: &quot;52&quot;</span></p><p><span>[0]</span><span> }</span></p><p><span>[0]</span><span><span>&nbsp;</span></span></p><p><span>[0]</span><span> Modules transform: false</span></p><p><span>[0]</span><span><span>&nbsp;</span></span></p><p><span>[0]</span><span> Using plugins:</span></p><p><span>[0]</span><span> <span>&nbsp; </span>transform-async-to-generator {&quot;chrome&quot;:&quot;52&quot;}</span></p><p><span>[0]</span><span> <span>&nbsp; </span>syntax-trailing-function-commas {&quot;chrome&quot;:&quot;52&quot;}</span></p><p><span>[0]</span><span><span>&nbsp;</span></span><span> DONE<span>&nbsp;</span></span><span> </span><span>Compiled successfully in 14678ms</span><span>01:07:07</span></p><p><span>[0]</span><span><span>&nbsp;</span></span></p><p><span>[0]</span><span> webpack built 5b10ffee1bffd4f9267c in 14678ms</span></p><p><span>[0]</span><span> events.js:183</span></p><p><span>[0]</span><span> <span>&nbsp; &nbsp; &nbsp; </span>throw er; // Unhandled &#39;error&#39; event</span></p><p><span>[0]</span><span> <span>&nbsp; &nbsp; &nbsp; </span>^</span></p><p><span>[0]</span><span><span>&nbsp;</span></span></p><p><span>[0]</span><span> Error: Redis connection to 10.0.0.1:6379 failed - connect ETIMEDOUT 10.0.0.1:6379</span></p><p><span>[0]</span><span> <span>&nbsp; &nbsp; </span>at Object._errnoException (util.js:1022:11)</span></p><p><span>[0]</span><span> <span>&nbsp; &nbsp; </span>at _exceptionWithHostPort (util.js:1044:20)</span></p><p><span>[0]</span><span> <span>&nbsp; &nbsp; </span>at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1198:14)</span></p><p><span>[0]</span><span> npm ERR! code ELIFECYCLE</span></p><p><span>[0]</span><span> npm ERR! errno 1</span></p><p><span>[0]</span><span> npm ERR! doracms@2.1.0 devNodeServer: `cross-env NODE_ENV=development MICRO_CACHE=true node ./server`</span></p><p><span>[0]</span><span> npm ERR! Exit status 1</span></p><p><span>[0]</span><span> npm ERR!<span>&nbsp;</span></span></p><p><span>[0]</span><span> npm ERR! Failed at the doracms@2.1.0 devNodeServer script.</span></p><p><span>[0]</span><span> npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span></p><p><span>[0]</span><span><span>&nbsp;</span></span></p><p><span>[0]</span><span> npm ERR! A complete log of this run can be found in:</span></p><p><span>[0]</span><span> npm ERR! <span>&nbsp; &nbsp; </span>/Users/nirongxu/.npm/_logs/2018-08-09T17_08_08_274Z-debug.log</span></p><p><span>[0]</span><span> </span><span>npm run devNodeServer exited with code 1</span></p><p><span></span><br /></p><p><br /></p>','[{\"type\":\"contents\",\"content\":\"依赖都装了，Redis也启动了，改装的都装了\\n\\n&gt; doracms@2.1.0 dev /Users/nirongxu/Documents/workspace/DoraCMS\\n&gt; concurrently \\\"npm run devNodeServer\\\" \\\"gulp\\\"\\n\\n[0] \\n[0] &gt; doracms@2.1.0 devNodeServer /Users/nirongxu/Documents/workspace/DoraCMS\\n[0] &gt; cross-env NODE_ENV=development MICRO_CACHE=true node ./server\\n[0] \\n[1] [01:06:51] Using gulpfile ~/Documents/workspace/DoraCMS/gulpfile.js\\n[1] [01:06:51] Starting \'default1\'...\\n[1] [01:06:51] Finished \'default1\' after 9.31 ms\\n[1] [01:06:51] Starting \'default2\'...\\n[1] [01:06:51] Finished \'default2\' after 1.47 ms\\n[1] [01:06:51] Starting \'default\'...\\n[1] [01:06:51] Finished \'default\' after 987 μs\\n[0] Redis状态开关： false\\n[0] server started at localhost:8080\\n[0] connect mongodb success\\n[0] babel-preset-env: `DEBUG` option\\n[0] \\n[0] Using targets:\\n[0] {\\n[0]   \\\"chrome\\\": \\\"52\\\"\\n[0] }\\n[0] \\n[0] Modules transform: false\\n[0] \\n[0] Using plugins:\\n[0]   transform-async-to-generator {\\\"chrome\\\":\\\"52\\\"}\\n[0]   syntax-trailing-function-commas {\\\"chrome\\\":\\\"52\\\"}\\n[0]  DONE  Compiled successfully in 14678ms01:07:07\\n[0] \\n[0] webpack built 5b10ffee1bffd4f9267c in 14678ms\\n[0] events.js:183\\n[0]       throw er; // Unhandled \'error\' event\\n[0]       ^\\n[0] \\n[0] Error: Redis connection to 10.0.0.1:6379 failed - connect ETIMEDOUT 10.0.0.1:6379\\n[0]     at Object._errnoException (util.js:1022:11)\\n[0]     at _exceptionWithHostPort (util.js:1044:20)\\n[0]     at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1198:14)\\n[0] npm ERR! code ELIFECYCLE\\n[0] npm ERR! errno 1\\n[0] npm ERR! doracms@2.1.0 devNodeServer: `cross-env NODE_ENV=development MICRO_CACHE=true node ./server`\\n[0] npm ERR! Exit status 1\\n[0] npm ERR! \\n[0] npm ERR! Failed at the doracms@2.1.0 devNodeServer script.\\n[0] npm ERR! This is probably not a problem with npm. There is likely additional logging output above.\\n[0] \\n[0] npm ERR! A complete log of this run can be found in:\\n[0] npm ERR!     /Users/nirongxu/.npm/_logs/2018-08-09T17_08_08_274Z-debug.log\\n[0] npm run devNodeServer exited with code 1\\n\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/img20180810012313.png','2018-08-09 17:24:12','2020-08-20 15:44:02'),(301,' Nodejs cms内容管理框架 DoraCMS v2.0.1 版本更新',' Nodejs cms内容管理框架 DoraCMS v2.0.0 版本更新','1','1','','','2',NULL,'','近期在开发过程中，用户提出了一些issue，很多地方提的非常好，在这里修复了一部分，主要变更如下：1、注册用户登出后，仍然可以访问用户中心的问题','1','','','0:01',762,'2','0',NULL,0,'0',224344,'<p>近期在开发过程中，用户提出了一些issue，很多地方提的非常好，在这里修复了一部分，主要变更如下：</p><p><br/></p><p><span style=\"color: rgb(0, 112, 192);\">更新信息：</span></p><p>1、注册用户登出后，仍然可以访问用户中心的问题</p><p>2、添加了管理员登录验证码</p><p>3、修复了类别管理enable字段设置无效的问题</p><p>4、处理用户发布或回复留言邮件通知不到的问题</p><p>5、修复后台管理留言管理模块管理员回复用户，或者用户回复管理员，有些用户名无法显示的问题</p><p>6、修复了开发环境下，报mongodb错误的问题</p><p>7、增加了一种橱窗广告展示类型</p><p>8、修复了在开发环境下，添加文章由于缓存不显示的问题</p><p>9、添加了转载标识</p><p>10、修复了类别切换时会先显示老数据，闪一下后显示新数据的问题</p><p><br/></p><p><span style=\"color: rgb(0, 112, 192);\">更新方法：</span></p><p>1、checkout 最新 2.0.1 代码</p><p>2、删除 node_modules,重新安装依赖包</p><p>3、启动数据库，执行npm run dev</p><p><br/></p><p>源码下载(github)：<a href=\"https://github.com/doramart/DoraCMS\" target=\"_blank\" title=\"DoraCMS\">DoraCMS</a></p>','[{\"type\":\"contents\",\"content\":\"近期在开发过程中，用户提出了一些issue，很多地方提的非常好，在这里修复了一部分，主要变更如下：\\n\\n更新信息：\\n1、注册用户登出后，仍然可以访问用户中心的问题\\n2、添加了管理员登录验证码\\n3、修复了类别管理enable字段设置无效的问题\\n4、处理用户发布或回复留言邮件通知不到的问题\\n5、修复后台管理留言管理模块管理员回复用户，或者用户回复管理员，有些用户名无法显示的问题\\n6、修复了开发环境下，报mongodb错误的问题\\n7、增加了一种橱窗广告展示类型\\n8、修复了在开发环境下，添加文章由于缓存不显示的问题\\n9、添加了转载标识\\n10、修复了类别切换时会先显示老数据，闪一下后显示新数据的问题\\n\\n更新方法：\\n1、checkout 最新 2.0.1 代码\\n2、删除 node_modules,重新安装依赖包\\n3、启动数据库，执行npm run dev\\n\\n源码下载(github)：DoraCMS\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/img20171106221529.jpg','2017-11-06 14:16:18','2020-08-20 15:44:05'),(302,'DoraCMS 可以做的更多吗？','DoraCMS 可以做的更多吗？','1','1','','','2',NULL,'','一直有一些想法，想让doracms做的更多，也不停的在尝试。基于vue 的前端ssr + 后端spa模式给开发带来了很大便捷，DoraCMS2.0 其实主要是针对前端开发者的，对于小白或者后端开发者','1','','','0:01',762,'2','0',NULL,1,'0',230868,'<p>&nbsp; 一直有一些想法，想让doracms做的更多，也不停的在尝试。基于vue 的前端ssr + 后端spa模式给开发带来了很大便捷，DoraCMS2.0 其实主要是针对前端开发者的，对于小白或者后端开发者，还是相对有难度的，需要基本的前端知识和nodejs基础技能。针对前端开发者是比较便捷的，可以任性的使用vue编写基础功能，也可以使用sass写样式，前后端自动热部署，基于element-ui让开发变得更快。</p><p>&nbsp; 但是不知不觉，我也发现许多问题，vue ssr 专门针对页面seo出现的技术方案，并不特别适合大数据量内容的站点，原因我不说，大家可以自己想想，前端使用了vue后，开发变得方便了，页面结构非常清晰，模块化开发，爽歪歪。殊不知，vue天生是不支持IE9以下的，强迫症的我不得不一直思考：</p><p>1、DoraCMS 能支持 IE7,8 + 现代浏览器？</p><p>2、DoraCMS 支持换肤吗？</p><p>3、能跟好的适应搜索引擎吗？</p><p>4、能支持小白用户吗？</p><p>5、能打开更快吗？</p><p>6、能支持多语言吗</p><p>7、内存占用能更小吗</p><p>。。。</p><p><br/></p><p>基于此，doracms 在近一段时间尝试做了部分改造，目的很明确，就是为了解决上面的一些问题，有代码洁癖的我也不是很习惯vue ssr 带来的复杂的网页源代码，以及前端厚重的element-ui ，doracms想做的更多，下一个版本会有很多惊喜，敬请期待！<img src=\"http://img.baidu.com/hi/jx2/j_0057.gif\"/></p>','[{\"type\":\"contents\",\"content\":\"  一直有一些想法，想让doracms做的更多，也不停的在尝试。基于vue 的前端ssr + 后端spa模式给开发带来了很大便捷，DoraCMS2.0 其实主要是针对前端开发者的，对于小白或者后端开发者，还是相对有难度的，需要基本的前端知识和nodejs基础技能。针对前端开发者是比较便捷的，可以任性的使用vue编写基础功能，也可以使用sass写样式，前后端自动热部署，基于element-ui让开发变得更快。\\n  但是不知不觉，我也发现许多问题，vue ssr 专门针对页面seo出现的技术方案，并不特别适合大数据量内容的站点，原因我不说，大家可以自己想想，前端使用了vue后，开发变得方便了，页面结构非常清晰，模块化开发，爽歪歪。殊不知，vue天生是不支持IE9以下的，强迫症的我不得不一直思考：\\n1、DoraCMS 能支持 IE7,8 + 现代浏览器？\\n2、DoraCMS 支持换肤吗？\\n3、能跟好的适应搜索引擎吗？\\n4、能支持小白用户吗？\\n5、能打开更快吗？\\n6、能支持多语言吗\\n7、内存占用能更小吗\\n。。。\\n\\n基于此，doracms 在近一段时间尝试做了部分改造，目的很明确，就是为了解决上面的一些问题，有代码洁癖的我也不是很习惯vue ssr 带来的复杂的网页源代码，以及前端厚重的element-ui ，doracms想做的更多，下一个版本会有很多惊喜，敬请期待！\"},{\"type\":\"image\",\"content\":\"http://img.baidu.com/hi/jx2/j_0057.gif\"},{\"type\":\"contents\",\"content\":\"\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/img20180415212519.jpeg','2018-04-15 13:38:26','2020-10-17 15:34:52'),(303,'javascript 数据类型学习笔记','javascript 数据类型学习笔记','1','1','','','2',NULL,'','近期准备对js的基础知识进行回顾，首先了解了一下js的数据类型，在此总结一下','1','','','0:01',762,'2','0',NULL,1,'0',223603,'<p>&nbsp; 近期准备对js的基础知识进行回顾，首先了解了一下js的数据类型，在此总结一下：</p><p><br/></p><p><strong>一、标识符</strong></p><p>标识符有自己的特性：</p><p>1、是具有特定含义的词<br/></p><p>2、区分大小写</p><p>3、首字母可以是 _ A-Z a-z $ 之后还可以是数字</p><p>4、不可以使用关键字</p><p><br/></p><p>js有一下几类标识符：</p><p>① var a = 12;</p><p>这是最简单的变量声明，而且我们还能这样写，不算错：</p><pre>var&nbsp;你&nbsp;=&nbsp;12;</pre><p>自己可以试一下：</p><p><img src=\"https://cdn.html-js.cn/cms/upload/images/ueditor/1055733834898870272.png\" title=\"WX20181026-161201@2x.png\" alt=\"WX20181026-161201@2x.png\" width=\"300\" height=\"125\"/></p><p>很明显打印出来是没有问题的，只不过我们很少这样用，也不推荐使用。</p><p><br/></p><p>但是这样写就错了，首字母不能为数字：</p><pre>var&nbsp;9a&nbsp;=&nbsp;&#39;abc&#39;;</pre><p><br/></p><p>② 形参，我们可以定义一个方法，函数里有形参name ,age 也是标识符。</p><pre>function&nbsp;test(name,age){\n\n}</pre><p>③ 类名<br/></p><pre>class&nbsp;User{\n\n}</pre><p>User 是作为类名的标识符<br/></p><p>④ 对象中的属性名<br/></p><pre>var&nbsp;obj&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;&#39;dora&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;age:&nbsp;18\n}</pre><p>对象 obj 中的属性name ,age 也是标识符。<br/></p><p>PS: 在我们定义标识符的时候需要严格根据规则来，不符合规则的标识符运行会有问题。</p><p><br/></p><p><strong>二、变量</strong></p><p>变量是对底层数据的引用，下面介绍三种：</p><p>① let ，引用可变，块级作用域， 只能在块类被访问到</p><p>② const&nbsp; ，引用不可变</p><p>我们可以通过const申明一个变量：</p><pre>const&nbsp;testme&nbsp;=&nbsp;&#39;doramart&#39;\ntestme&nbsp;=&nbsp;&#39;doramart1&#39;&nbsp;&nbsp;//&nbsp;这样会报错</pre><p>这个都知道，但是这样呢？</p><pre>const&nbsp;testme&nbsp;=&nbsp;{a:&#39;123&#39;,b:&#39;456&#39;}\ntestme.b&nbsp;=&nbsp;&#39;789&#39;;\nconsole.log(testme);&nbsp;//&nbsp;打印&nbsp;{a:&#39;123&#39;,b:&#39;789&#39;}</pre><p>即 通过 const 申明对象，对象里面的属性是可以改变的。</p><p>③ var 函数级，可进行作用域提升，但是js执行是有顺序的，所以即使提升，但是可能不是正常的值。</p><p><br/></p><p><strong>三、数据类型</strong></p><p>数据有以下几种类型</p><pre>number,&nbsp;//&nbsp;数字，包括整型和浮点型数字\nstring,&nbsp;//&nbsp;字符串行，比较常用\nboolean,&nbsp;//&nbsp;布尔型&nbsp;true/false\nobject,&nbsp;//&nbsp;对象类型&nbsp;可以执行的数据\nnull,&nbsp;&nbsp;//&nbsp;可以理解为未赋值的对象\nundefined&nbsp;//&nbsp;可以理解为未赋值的变量</pre><p>着重对null 和 undefined 说明：<br/></p><pre>var&nbsp;obj&nbsp;=&nbsp;null;&nbsp;//&nbsp;申明一个暂时没有赋值的对象\nobj&nbsp;=&nbsp;{age:&nbsp;20}</pre><pre>var&nbsp;testme;&nbsp;//&nbsp;这个变量暂时没有赋值\nconsole.log(testme);&nbsp;//&nbsp;打印&nbsp;undefined</pre><p>同时，我们可以通过typeof 的方式获取到数据的类型：</p><pre>&gt;&nbsp;typeof&nbsp;&quot;testme&quot;\n&#39;string&#39;\n&gt;&nbsp;typeof&nbsp;15\n&#39;number&#39;\n&gt;&nbsp;typeof&nbsp;false\n&#39;boolean&#39;\n&gt;&nbsp;typeof&nbsp;undefined\n&#39;undefined&#39;\n&gt;&nbsp;typeof&nbsp;{name:&#39;leo&#39;}\n&#39;object&#39;\n&gt;&nbsp;typeof&nbsp;null\n&#39;object&#39;\n&gt;&nbsp;typeof&nbsp;function(){}\n&#39;function&#39;</pre><p>类型是可以转换的，我们举个小栗子：</p><p>① undefined 转 boolean</p><pre>var&nbsp;m;\nif&nbsp;(m)&nbsp;{\nconsole.log(m,&nbsp;&#39;--true--&#39;)\n}&nbsp;else&nbsp;{\nconsole.log(m,&nbsp;&#39;--false--&#39;)\n}\n\n//&nbsp;输出：undefined&nbsp;&#39;--false--&#39;</pre><p>我们把 undefined类型的m 通过（）的形式转成 boolean 类型。</p><p><br/></p><p>② string 转 number<br/></p><p>我们可以通过构造器将 string 转 number:</p><pre>console.log(Number(&#39;123&#39;))&nbsp;&nbsp;//&nbsp;打印&nbsp;123\nconsole.log(new&nbsp;Number(&#39;123&#39;).valueOf())&nbsp;&nbsp;//&nbsp;打印&nbsp;123\nconsole.log(typeof&nbsp;Number(&#39;123&#39;))&nbsp;&nbsp;//&nbsp;打印&nbsp;&nbsp;number</pre><p>还可以这样：</p><pre>console.log(parseInt(&#39;33333&#39;),&nbsp;parseFloat(&#39;33333&#39;));&nbsp;//&nbsp;33333,33333\n\nconsole.log(Number(&quot;&quot;),&nbsp;parseInt(&quot;&quot;));&nbsp;//&nbsp;0,NaN\n\nconsole.log(Number(false),&nbsp;parseInt(false));&nbsp;//&nbsp;0,NaN\n\nconsole.log(Number(null),&nbsp;parseInt(null));&nbsp;//&nbsp;0,NaN\n\nconsole.log(Number(undefined),&nbsp;parseInt(undefined));&nbsp;//&nbsp;0,NaN</pre><p>从上面可以看出 pareInt 或 parseFloat 只能对数字类型的字符串进行处理，其它情况不行。</p><p><br/></p><p>③ number 转 string (隐式转换)</p><pre>console.log(typeof&nbsp;(&#39;&#39;&nbsp;+&nbsp;12345));&nbsp;//&nbsp;string\nconsole.log(&#39;12&#39;&nbsp;+&nbsp;12345);&nbsp;//&nbsp;1212345</pre><p><br/></p><p>三、数据基础类型和对象类型。</p><p>数据的基础类型前面已经介绍了，表示的是纯粹的数据，而对象类型是object，是具备属性和方法的：</p><pre>console.log();</pre><p>console 为对象，具备 log 的方法。看下面这个：</p><pre>var&nbsp;o&nbsp;=&nbsp;new&nbsp;Number(12);&nbsp;//&nbsp;有类型的对象，&nbsp;Number\nconsole.log(o&nbsp;===&nbsp;12)&nbsp;&nbsp;//&nbsp;类型不相等\nconsole.log(o&nbsp;==&nbsp;12)&nbsp;//&nbsp;值相等</pre><p>可以看到===的情况下，两者是不相等的，因为两者类型不同，一个是纯数据类型，另一个是对象。<br/></p>','[{\"type\":\"contents\",\"content\":\"  近期准备对js的基础知识进行回顾，首先了解了一下js的数据类型，在此总结一下：\\n\\n一、标识符\\n标识符有自己的特性：\\n1、是具有特定含义的词\\n2、区分大小写\\n3、首字母可以是 _ A-Z a-z $ 之后还可以是数字\\n4、不可以使用关键字\\n\\njs有一下几类标识符：\\n① var a = 12;\\n这是最简单的变量声明，而且我们还能这样写，不算错：\\nvar 你 = 12;\\n自己可以试一下：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/ueditor/1055733834898870272.png\"},{\"type\":\"contents\",\"content\":\"\\n很明显打印出来是没有问题的，只不过我们很少这样用，也不推荐使用。\\n\\n但是这样写就错了，首字母不能为数字：\\nvar 9a = \'abc\';\\n\\n② 形参，我们可以定义一个方法，函数里有形参name ,age 也是标识符。\\nfunction test(name,age){\\n\\n}\\n③ 类名\\nclass User{\\n\\n}\\nUser 是作为类名的标识符\\n④ 对象中的属性名\\nvar obj = {\\n    name: \'dora\',\\n    age: 18\\n}\\n对象 obj 中的属性name ,age 也是标识符。\\nPS: 在我们定义标识符的时候需要严格根据规则来，不符合规则的标识符运行会有问题。\\n\\n二、变量\\n变量是对底层数据的引用，下面介绍三种：\\n① let ，引用可变，块级作用域， 只能在块类被访问到\\n② const  ，引用不可变\\n我们可以通过const申明一个变量：\\nconst testme = \'doramart\'\\ntestme = \'doramart1\'  // 这样会报错\\n这个都知道，但是这样呢？\\nconst testme = {a:\'123\',b:\'456\'}\\ntestme.b = \'789\';\\nconsole.log(testme); // 打印 {a:\'123\',b:\'789\'}\\n即 通过 const 申明对象，对象里面的属性是可以改变的。\\n③ var 函数级，可进行作用域提升，但是js执行是有顺序的，所以即使提升，但是可能不是正常的值。\\n\\n三、数据类型\\n数据有以下几种类型\\nnumber, // 数字，包括整型和浮点型数字\\nstring, // 字符串行，比较常用\\nboolean, // 布尔型 true/false\\nobject, // 对象类型 可以执行的数据\\nnull,  // 可以理解为未赋值的对象\\nundefined // 可以理解为未赋值的变量\\n着重对null 和 undefined 说明：\\nvar obj = null; // 申明一个暂时没有赋值的对象\\nobj = {age: 20}\\nvar testme; // 这个变量暂时没有赋值\\nconsole.log(testme); // 打印 undefined\\n同时，我们可以通过typeof 的方式获取到数据的类型：\\n&gt; typeof \\\"testme\\\"\\n\'string\'\\n&gt; typeof 15\\n\'number\'\\n&gt; typeof false\\n\'boolean\'\\n&gt; typeof undefined\\n\'undefined\'\\n&gt; typeof {name:\'leo\'}\\n\'object\'\\n&gt; typeof null\\n\'object\'\\n&gt; typeof function(){}\\n\'function\'\\n类型是可以转换的，我们举个小栗子：\\n① undefined 转 boolean\\nvar m;\\nif (m) {\\nconsole.log(m, \'--true--\')\\n} else {\\nconsole.log(m, \'--false--\')\\n}\\n\\n// 输出：undefined \'--false--\'\\n我们把 undefined类型的m 通过（）的形式转成 boolean 类型。\\n\\n② string 转 number\\n我们可以通过构造器将 string 转 number:\\nconsole.log(Number(\'123\'))  // 打印 123\\nconsole.log(new Number(\'123\').valueOf())  // 打印 123\\nconsole.log(typeof Number(\'123\'))  // 打印  number\\n还可以这样：\\nconsole.log(parseInt(\'33333\'), parseFloat(\'33333\')); // 33333,33333\\n\\nconsole.log(Number(\\\"\\\"), parseInt(\\\"\\\")); // 0,NaN\\n\\nconsole.log(Number(false), parseInt(false)); // 0,NaN\\n\\nconsole.log(Number(null), parseInt(null)); // 0,NaN\\n\\nconsole.log(Number(undefined), parseInt(undefined)); // 0,NaN\\n从上面可以看出 pareInt 或 parseFloat 只能对数字类型的字符串进行处理，其它情况不行。\\n\\n③ number 转 string (隐式转换)\\nconsole.log(typeof (\'\' + 12345)); // string\\nconsole.log(\'12\' + 12345); // 1212345\\n\\n三、数据基础类型和对象类型。\\n数据的基础类型前面已经介绍了，表示的是纯粹的数据，而对象类型是object，是具备属性和方法的：\\nconsole.log();\\nconsole 为对象，具备 log 的方法。看下面这个：\\nvar o = new Number(12); // 有类型的对象， Number\\nconsole.log(o === 12)  // 类型不相等\\nconsole.log(o == 12) // 值相等\\n可以看到===的情况下，两者是不相等的，因为两者类型不同，一个是纯数据类型，另一个是对象。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/img20181026172105.jpeg','2018-10-26 09:21:17','2020-10-31 14:16:52'),(304,'DoraCMS2.0 权限系统简单介绍','DoraCMS2.0 权限系统简单介绍','1','1','','','2',NULL,'','DoraCMS2.0 针对后台权限管理做了重新设计，较v1.0版本有了比较大的改动，主要表现在更为灵活的配置，cms1.0在后台每添加一个模块','1','','','0:01',762,'2','0',NULL,0,'0',223888,'<p>DoraCMS2.0 针对后台权限管理做了重新设计，较v1.0版本有了比较大的改动，主要表现在更为灵活的配置，cms1.0在后台每添加一个模块，都需要改动相关的几个js以及配置文件等，非常不灵活，doracms2.0中重点解决了这个问题，右侧菜单是动态显示了，即会根据配置去展示，配置步骤如下：</p><p><br/></p><p>1、<span style=\"color: rgb(79, 129, 189);\"><strong>配置资源。</strong></span>cms2.0中加入了资源的概念，何为资源，所有需要访问的路由或者接口都是资源，在后台管理中，权限是非常重要的，细化到每个页面，每个请求，所以通过资源粒度化，可以更好的对权限进行控制，资源管理界面是这样的：</p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/images/ueditor/900305075417780224.jpg\" title=\"QQ截图20170823181928.jpg\" alt=\"QQ截图20170823181928.jpg\" width=\"600\" height=\"316\"/></p><p><br/></p><p>通过资源管理，配置所有路由和接口信息，同时也可以控制菜单的显示和隐藏，甚至可以配置大类菜单的icon图标：</p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/images/ueditor/900305513454112768.jpg\" title=\"\" alt=\"QQ截图20170823181947.jpg\"/></p><p><br/></p><p>资源类型分为以下两种：</p><p>① 基础菜单，即路由</p><p>② 操作或功能，即接口请求</p><p><br/></p><p>2、<strong><span style=\"color: rgb(79, 129, 189);\">配置角色信息。</span></strong>我们可以把管理员细分为不同类别，分别给予不同权限，例如，我们可以配置超级管理员和测试管理员：</p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/images/ueditor/900306243367866368.jpg\" title=\"\" alt=\"QQ截图20170823182049.jpg\"/></p><p><br/></p><p>同时赋予该角色权限：</p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/images/ueditor/900307689786183680.jpg\" title=\"\" alt=\"QQ截图20170823182113.jpg\"/></p><p><br/></p><p>3、<strong><span style=\"color: rgb(79, 129, 189);\">添加系统管理员，并分配角色</span></strong>。我们可以添加系统管理员并分配到指定角色，并设置是否生效，从而使指定角色管理员拥有指定的权限。</p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/images/ueditor/900307847169052672.jpg\" title=\"\" alt=\"QQ截图20170823182218.jpg\"/></p><p><br/></p><p>这里，我添加了一个测试用户的角色，有兴趣的童鞋可以试一下：</p><p><br/></p><p>后台登录地址：&nbsp;<a href=\"https://www.html-js.cn/manage\">https://www.html-js.cn/manage</a> </p><p>测试账号/密码： doracms/123456&nbsp;</p><p><br/></p><p><span style=\"color: rgb(192, 0, 0); text-decoration: underline;\">PS： 后台还不完善，可能隐藏很多bug，真诚希望大家能提出宝贵意见，一起改进。</span></p>','[{\"type\":\"contents\",\"content\":\"DoraCMS2.0 针对后台权限管理做了重新设计，较v1.0版本有了比较大的改动，主要表现在更为灵活的配置，cms1.0在后台每添加一个模块，都需要改动相关的几个js以及配置文件等，非常不灵活，doracms2.0中重点解决了这个问题，右侧菜单是动态显示了，即会根据配置去展示，配置步骤如下：\\n\\n1、配置资源。cms2.0中加入了资源的概念，何为资源，所有需要访问的路由或者接口都是资源，在后台管理中，权限是非常重要的，细化到每个页面，每个请求，所以通过资源粒度化，可以更好的对权限进行控制，资源管理界面是这样的：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/ueditor/900305075417780224.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n通过资源管理，配置所有路由和接口信息，同时也可以控制菜单的显示和隐藏，甚至可以配置大类菜单的icon图标：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/ueditor/900305513454112768.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n资源类型分为以下两种：\\n① 基础菜单，即路由\\n② 操作或功能，即接口请求\\n\\n2、配置角色信息。我们可以把管理员细分为不同类别，分别给予不同权限，例如，我们可以配置超级管理员和测试管理员：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/ueditor/900306243367866368.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n同时赋予该角色权限：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/ueditor/900307689786183680.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n3、添加系统管理员，并分配角色。我们可以添加系统管理员并分配到指定角色，并设置是否生效，从而使指定角色管理员拥有指定的权限。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/ueditor/900307847169052672.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n这里，我添加了一个测试用户的角色，有兴趣的童鞋可以试一下：\\n\\n后台登录地址： https://www.html-js.cn/manage \\n测试账号/密码： doracms/123456 \\n\\nPS： 后台还不完善，可能隐藏很多bug，真诚希望大家能提出宝贵意见，一起改进。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/img20170823182636.jpg','2017-08-23 10:40:25','2020-08-20 15:44:06'),(305,'前端静态文件缓存优化采坑记录','前端静态文件缓存优化采坑记录','1','1','','','2',NULL,'','前端静态文件缓存，大家已经耳熟能详，近期对项目进行优化又去详细看了下相关资料，在此整理。','1','','','0:01',762,'2','0',NULL,1,'0',232073,'<p class=\"p1\">前端静态文件缓存，大家已经耳熟能详，近期对项目进行优化又去详细看了下相关资料，在此整理。<br/></p><p class=\"p2\"><br/></p><p class=\"p3\"><strong><span style=\"color: rgb(255, 0, 0);\">1、PWA</span></strong><span class=\"s1\">，目前比较火的</span> PWA <span class=\"s1\">方案</span> :Progressive Web Apps <span class=\"s1\">是</span> Google <span class=\"s1\">提出的用前沿的</span> Web <span class=\"s1\">技术为网页提供</span> App <span class=\"s1\">般使用体验的一系列方案。</span></p><p class=\"p3\"><span class=\"s1\">一个</span> PWA <span class=\"s1\">应用首先是一个网页,</span> <span class=\"s1\">可以通过</span> Web <span class=\"s1\">技术编写出一个网页应用</span>. <span class=\"s1\">随后添加上</span> App Manifest <span class=\"s1\">和</span> Service Worker <span class=\"s1\">来实现</span> PWA <span class=\"s1\">的安装和离线等功能。</span></p><p class=\"p3\"><span class=\"s1\">关于什么是service work 和 关于它的生命周期，注册卸载以及跟服务端客户端交互的相关内容在此就不详细介绍了。这里主要介绍如何给</span>web app <span class=\"s1\">加上</span> service worker <span class=\"s1\">支持，网上资料已经比较多了，我尝试的是使用</span>webpack <span class=\"s1\">的一个插件</span> offline-plugin<span class=\"s1\">(<a href=\"https://github.com/NekR/offline-plugin\"><span class=\"s2\">https://github.com/NekR/offline-plugin</span></a>)</span> <span class=\"s1\">使用比较方便，</span>api<span class=\"s1\">比较齐全，可以自动生成</span>manifest<span class=\"s1\">文件。在</span>webpack<span class=\"s1\">端配置：</span></p><pre class=\"brush:html;toolbar:false\">new&nbsp;OfflinePlugin({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;safeToUseOptionalCaches:&nbsp;true,\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;caches:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;main:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;main.js&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;main.css&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;index.html&#39;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;],\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;additional:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;*.woff&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;*.woff2&#39;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;],\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;optional:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;:rest:&#39;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ServiceWorker:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;events:&nbsp;true\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AppCache:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;events:&nbsp;true\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;})</pre><p class=\"p1\">在入口<span class=\"s3\">js</span>中添加</p><pre class=\"brush:html;toolbar:false\">require(&#39;offline-plugin/runtime&#39;).install();</pre><p class=\"p4\"><strong>ES6/Babel/TypeScript</strong></p><pre class=\"brush:html;toolbar:false\">import&nbsp;*&nbsp;as&nbsp;OfflinePluginRuntime&nbsp;from&nbsp;&#39;offline-plugin/runtime&#39;;\nOfflinePluginRuntime.install();</pre><p class=\"p1\">之后用<span class=\"s3\">webpack </span>构建就可以了。</p><p class=\"p2\"><br/></p><p class=\"p3\"><span class=\"s1\">从</span> network <span class=\"s1\">中可以看到，再次请求的静态资源请求的是</span>service worker:</p><p style=\"text-align:center\"><img src=\"https://cdn.html-js.cn/cms/upload/images/ueditor/920951942811881472.jpg\" title=\"service worker1.jpg\" alt=\"service worker1.jpg\" width=\"500\" height=\"230\"/></p><p class=\"p2\"><br/></p><p class=\"p1\">值得注意的是，感觉<span class=\"s3\">service worker </span>并不太适合多页面应用，何为多页面，即请求先走的服务端，通过服务端直接渲染的页面，<span class=\"s3\">service worker </span>效果不明显，它比较适合单页面应用，比如<span class=\"s3\">vuejs </span>或者<span class=\"s3\"> react </span>类<span class=\"s3\"> spa</span>类型的应用，另外，<span class=\"s3\">service worker </span>虽然被<span class=\"s3\">google</span>和前端爱好者所推崇，然而，兼容性还不是那么理想，<span class=\"s3\">ios </span>目前是不支持的。</p><p class=\"p2\" style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/images/ueditor/920952541699772416.png\" title=\"service worker2.png\" alt=\"service worker2.png\" width=\"500\" height=\"160\"/></p><p class=\"p1\"><span class=\"s3\"><br/></span></p><p class=\"p1\"><strong><span style=\"color: rgb(255, 0, 0);\">2、尝试用独立的manifest 。</span></strong>虽然官方目前不是很推荐用<span class=\"s3\">manifest</span>，而且也停止了<span class=\"s3\">manifest</span>的更新，但是目前绝大多数的现代浏览器都是支持的，也是比较成熟的缓存方案，在<span class=\"s3\">w3</span>上面对它的优点做了简单介绍：</p><ul class=\"ul1 list-paddingleft-2\"><li><p><span class=\"s4\"></span>离线浏览<span class=\"s3\"> - </span>用户可在应用离线时使用它们</p></li><li><p><span class=\"s4\"></span>速度<span class=\"s3\"> - </span>已缓存资源加载得更快</p></li><li><p><span class=\"s4\"></span>减少服务器负载<span class=\"s3\"> - </span>浏览器将只从服务器下载更新过或更改过的资源。</p><p><br/></p></li></ul><p class=\"p1\">于是开始尝试，<span class=\"s3\">manifest</span>的<span class=\"s3\">webpack</span>插件也比较多，试用了几个，感觉都很不爽，不能满足业务需求，比如我想：</p><p class=\"p1\"><span class=\"s3\">1</span>、开发环境，<span class=\"s3\">uat</span>环境，生产环境<span class=\"s3\"> manifest </span>各不相同，特别是生产是<span class=\"s3\">cdn</span></p><p class=\"p1\"><span class=\"s3\">2</span>、我还需要额外添加一些其他静态资源</p><p class=\"p2\"><br/></p><p class=\"p3\"><span class=\"s1\">没有合适的就自己写一个(</span>MakeManifest.js<span class=\"s1\">)：</span></p><pre class=\"brush:html;toolbar:false\">/**\n&nbsp;*&nbsp;manifest生成\n&nbsp;*&nbsp;根据环境变量生成manifest文件做静态文件预缓存\n&nbsp;*\n&nbsp;*&nbsp;参数:&nbsp;options&nbsp;=&nbsp;{\n&nbsp;*&nbsp;&nbsp;path:&nbsp;&#39;./build/assets/manifest.appcache&#39;&nbsp;//生成静态资源缓存文件\n&nbsp;*&nbsp;}\n&nbsp;*\n&nbsp;*&nbsp;@param&nbsp;options\n&nbsp;*&nbsp;@constructor\n&nbsp;*/\nvar&nbsp;fs&nbsp;=&nbsp;require(&#39;fs&#39;),NODE_ENV&nbsp;=&nbsp;process.env.NODE_ENV;\nvar&nbsp;pkg&nbsp;=&nbsp;require(&#39;../package.json&#39;);\nfunction&nbsp;MakeManifest(output,&nbsp;options)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;this.output&nbsp;=&nbsp;output\n&nbsp;&nbsp;&nbsp;&nbsp;this.options&nbsp;=&nbsp;options\n}\n\nfunction&nbsp;getExtraSource()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;sourceArr&nbsp;=&nbsp;[];\n&nbsp;&nbsp;&nbsp;&nbsp;sourceArr.push(&#39;https://m.163.com/static/common/js/NativeAPI.js&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;sourceArr.push(&#39;https://m.163.com/omm/mobile/sdk/product/1.0.0/js/product.js&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;sourceArr.push(&#39;https://m.163.com/omm/mobile/sdk/product/1.0.0/css/style.css&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;a/b&nbsp;Test资源文件\n&nbsp;&nbsp;&nbsp;&nbsp;sourceArr.push(&#39;https://sdk.appadhoc.com/ab.plus.js&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;sourceArr;\n}\nfunction&nbsp;getNowFormatDate()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;date&nbsp;=&nbsp;new&nbsp;Date();\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;seperator1&nbsp;=&nbsp;&quot;-&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;seperator2&nbsp;=&nbsp;&quot;:&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;month&nbsp;=&nbsp;date.getMonth()&nbsp;+&nbsp;1;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;strDate&nbsp;=&nbsp;date.getDate();\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(month&nbsp;&gt;=&nbsp;1&nbsp;&amp;&amp;&nbsp;month&nbsp;&lt;=&nbsp;9)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;month&nbsp;=&nbsp;&quot;0&quot;&nbsp;+&nbsp;month;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(strDate&nbsp;&gt;=&nbsp;0&nbsp;&amp;&amp;&nbsp;strDate&nbsp;&lt;=&nbsp;9)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strDate&nbsp;=&nbsp;&quot;0&quot;&nbsp;+&nbsp;strDate;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;currentdate&nbsp;=&nbsp;date.getFullYear()&nbsp;+&nbsp;seperator1&nbsp;+&nbsp;month&nbsp;+&nbsp;seperator1&nbsp;+&nbsp;strDate\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;&quot;&nbsp;&quot;&nbsp;+&nbsp;date.getHours()&nbsp;+&nbsp;seperator2&nbsp;+&nbsp;date.getMinutes()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;seperator2&nbsp;+&nbsp;date.getSeconds();\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;currentdate;\n}&nbsp;&nbsp;&nbsp;&nbsp;\n\nMakeManifest.prototype.apply&nbsp;=&nbsp;function&nbsp;(compiler)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;baseOutPath&nbsp;=&nbsp;this.output;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;outPutManiFile&nbsp;=&nbsp;this.output&nbsp;+&nbsp;&#39;/manifest.appcache&#39;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;outPutManiHtmlFile&nbsp;=&nbsp;this.output&nbsp;+&nbsp;&#39;/manifest.html&#39;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;options&nbsp;=&nbsp;this.options\n\n&nbsp;&nbsp;&nbsp;&nbsp;compiler.plugin(&#39;emit&#39;,&nbsp;function&nbsp;(compilation,&nbsp;done)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;results&nbsp;=&nbsp;compilation.getStats().toJson(options),&nbsp;cateFile&nbsp;=&nbsp;[];\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;results.chunks.length;&nbsp;i++)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;chunk&nbsp;=&nbsp;results.chunks[i];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chunk.files.forEach(function&nbsp;(item)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!/\\.map$/.test(item))&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;firstPath&nbsp;=&nbsp;NODE_ENV&nbsp;==&nbsp;&#39;production&#39;&nbsp;?&nbsp;&#39;https://cdn.m.163.com/oas/static/assets/&#39;&nbsp;:&nbsp;&#39;/oas/static/assets/&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cateFile.push(firstPath&nbsp;+&nbsp;item);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;this);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;newFiles&nbsp;=&nbsp;cateFile.concat(getExtraSource());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;currentDate&nbsp;=&nbsp;getNowFormatDate();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;TAG&nbsp;=&nbsp;&#39;#ver:&#39;&nbsp;+&nbsp;currentDate&nbsp;+&nbsp;&#39;&nbsp;&#39;&nbsp;+&nbsp;pkg.version;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;FALLBACK&nbsp;=&nbsp;&#39;&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;NETWORK&nbsp;=&nbsp;&#39;NETWORK:\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;CONTENT&nbsp;=&nbsp;&#39;&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;maniText&nbsp;=&nbsp;(&#39;\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CACHE&nbsp;MANIFEST\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;&nbsp;+&nbsp;TAG&nbsp;+&nbsp;&#39;\\r\\n\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CACHE:\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;&nbsp;+&nbsp;newFiles.join(&#39;\\r\\n&#39;)&nbsp;+&nbsp;&#39;\\r\\n\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;&nbsp;+&nbsp;NETWORK&nbsp;+&nbsp;&#39;\\r\\n\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;&nbsp;+&nbsp;FALLBACK&nbsp;+&nbsp;&#39;\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&#39;).trim().replace(/^&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/gm,&nbsp;&#39;&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;maniHtml&nbsp;=&nbsp;(&#39;\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!doctype&nbsp;html&gt;\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;html&nbsp;manifest=&quot;manifest.appcache&quot;&gt;&#39;&nbsp;+&nbsp;(CONTENT&nbsp;||&nbsp;&#39;&#39;)&nbsp;+&nbsp;&#39;&lt;/html&gt;\\n&nbsp;&nbsp;&nbsp;&nbsp;&#39;).trim().replace(/^&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/gm,&nbsp;&#39;&#39;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fs.exists(baseOutPath,&nbsp;function&nbsp;(exists)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(exists)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addCacheFile(maniText,&nbsp;maniHtml);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fs.mkdir(baseOutPath,&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addCacheFile(maniText,&nbsp;maniHtml);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;done();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;addCacheFile(maniText,&nbsp;maniHtml)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fs.writeFileSync(outPutManiFile,&nbsp;maniText);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fs.writeFileSync(outPutManiHtmlFile,&nbsp;maniHtml);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;});\n}\n\nmodule.exports&nbsp;=&nbsp;MakeManifest;</pre><p class=\"p2\"><br/></p><p class=\"p3\"><span class=\"s1\">在</span> webpack.config.js <span class=\"s1\">中添加：</span></p><pre class=\"brush:html;toolbar:false\">var&nbsp;&nbsp;&nbsp;plugins&nbsp;=&nbsp;require(&#39;./plugins&#39;),\nnew&nbsp;plugins.MakeManifest(&#39;./build/assets&#39;,&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exclude:&nbsp;[/node_modules[\\\\\\/]react/],\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hash:&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assets:&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chunks:&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chunkModules:&nbsp;true\n})</pre><p class=\"p1\">通过<span class=\"s3\">webpack </span>构建后可以看到静态文件目录生成两个文件：</p><p class=\"p2\" style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/images/ueditor/921177144346939392.png\" title=\"manifest1.png\" alt=\"manifest1.png\" width=\"360\" height=\"160\"/></p><p class=\"p1\">之后，我们可以通过后台打开<span class=\"s3\">iframe</span>的方式在第一个页面加载时打开这个静态页面：</p><pre class=\"brush:html;toolbar:false\">export&nbsp;function&nbsp;openUrlByIframe(url)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Promise(function&nbsp;(resolve,&nbsp;reject)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;rdm&nbsp;=&nbsp;Math.random().toString().substr(2);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;newIframe&nbsp;=&nbsp;document.createElement(&#39;iframe&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newIframe.id&nbsp;=&nbsp;&quot;openUrl&quot;&nbsp;+&nbsp;rdm;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newIframe.src&nbsp;=&nbsp;url;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;style&nbsp;=&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;margin&quot;:&nbsp;0,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;padding&quot;:&nbsp;0,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;border&quot;:&nbsp;&quot;none&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;height&quot;:&nbsp;&quot;0px&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;width&quot;:&nbsp;&quot;0px&quot;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;position&quot;:&nbsp;&quot;absolute&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(let&nbsp;key&nbsp;in&nbsp;style)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newIframe.style[key]&nbsp;=&nbsp;style[key];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;body&nbsp;=&nbsp;document.getElementsByTagName(&#39;body&#39;)[0];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(newIframe.attachEvent)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newIframe.attachEvent(&quot;onload&quot;,&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;预加载完成&#39;,&nbsp;url);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newIframe.onload&nbsp;=&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;预加载完成&#39;,&nbsp;url);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body.insertBefore(newIframe,&nbsp;body.firstChild);\n&nbsp;&nbsp;&nbsp;&nbsp;})\n}\n\nasync&nbsp;storeStaticSource()&nbsp;{\n&nbsp;&nbsp;&nbsp;…\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;sessionPage&nbsp;=&nbsp;&#39;/oas/static/assets/manifest.html&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;native.openUrlByIframe(sessionPage);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localStorage.setItem(&#39;hadSessionStatic&#39;,&nbsp;&#39;1&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.info(&#39;静态文件缓存完成！&#39;);\n&nbsp;&nbsp;&nbsp;…\n},</pre><p class=\"p1\">调用：</p><pre class=\"brush:html;toolbar:false\">storeStaticSource()</pre><p class=\"p1\"><br/></p><p class=\"p1\">使用缓存后对比：</p><p class=\"p1\"><strong>不使用缓存：</strong></p><p class=\"p1\">① 弱网条件下（slow 3G）</p><p class=\"p1\" style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/images/ueditor/921184462274957312.png\" title=\"弱网1.png\" alt=\"弱网1.png\" width=\"600\" height=\"356\"/></p><p class=\"p1\"><span style=\"color: rgb(0, 112, 192);\">现象：页面打开正常，静态文件加载缓慢。</span></p><p class=\"p1\">② 离线条件下&nbsp;&nbsp;</p><p class=\"p1\" style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/images/ueditor/921185445650501632.png\" title=\"离线1.png\" alt=\"离线1.png\" width=\"600\" height=\"280\"/></p><p class=\"p1\"><span style=\"color: rgb(0, 112, 192);\">现象：页面样式异常，静态文件加载异常。</span></p><p class=\"p1\"><strong><span class=\"s3\">加入缓存后：</span></strong></p><p class=\"p1\"><span class=\"s3\">① 离线情况下<br/></span></p><p class=\"p1\" style=\"text-align: center;\"><span class=\"s3\"><img src=\"https://cdn.html-js.cn/cms/upload/images/ueditor/921186107553615872.png\" title=\"被缓存2.png\" alt=\"被缓存2.png\" width=\"600\" height=\"400\"/></span></p><p class=\"p1\"><span style=\"color: rgb(0, 112, 192);\">现象：打开页面后，被缓存的静态资源从disk cache中请求，页面显示正常，打开速度很快</span></p><p class=\"p1\"><span class=\"s3\">manifest </span>方式也是有坑的，它有一些缺陷：</p><ul class=\"ul1 list-paddingleft-2\"><li><p><span class=\"s4\"></span>更新的资源，需要二次刷新才会被页面采用</p></li><li><p><span class=\"s4\"></span>不支持增量更新，只有<span class=\"s3\">manifest</span>发生变化，所有资源全部重新下载一次</p></li><li><p><span class=\"s4\"></span>缺乏足够容错机制，当清单中任意资源文件出现加载异常，都会导致整个<span class=\"s3\">manifest</span>策略运行异常</p></li></ul><p class=\"p1\">不过对于目前的项目来讲，这些问题不大，可以考虑使用。</p><p class=\"p2\"><br/></p><p class=\"p1\"><strong><span style=\"color: rgb(255, 0, 0);\">3、使用iframe预加载页面。</span></strong>通过预加载网页的形式，我们可以在第一个页面加载完成时，预加载可能需要跳转的页面，预加载的方式和上面类似，可以通过一个隐藏的<span class=\"s3\">iframe</span>来实现，这样，不仅可以提高打开速度，也可以缓存静态资源到<span class=\"s3\">disk cache </span>中，后面静态文件不用再请求服务器。</p><p class=\"p1\"><span style=\"color: rgb(0, 112, 192);\">PS: 缓存的作用主要是让网页有更快的响应速度，增强体验，减少服务器响应时间，减少负载，缓存静态资源的方法很多，主要还是根据实际的场景来选择适合项目的方案来满足需求。关于浏览器的缓存机制，我在百度里扒了张图，介绍的比较详细了：</span></p><p class=\"p1\"><span style=\"color: rgb(0, 176, 240);\"><br/></span></p><p class=\"p1\"><span style=\"color: rgb(0, 176, 240);\"></span></p><ul style=\"margin-left: 30px; padding: 0px; word-break: break-all; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>浏览器第一次请求流程图：</p></li></ul><p class=\"p1\"><span style=\"color: rgb(0, 176, 240);\"></span><br/></p><p class=\"p1\" style=\"text-align: center;\"><span style=\"color: rgb(0, 176, 240);\"><img src=\"https://cdn.html-js.cn/cms/upload/images/ueditor/921009743961657344.png\" title=\"\" alt=\"http缓存.png\"/></span></p><p class=\"p1\"><span style=\"color: rgb(0, 176, 240);\"><br/></span></p><ul style=\"margin-left: 30px; padding: 0px; word-break: break-all; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>浏览器再次请求时：</p></li></ul><p class=\"p2\" style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/images/ueditor/921010019217051648.png\" title=\"\" alt=\"http缓存1.png\"/></p><p class=\"p2\"><br/></p><p class=\"p2\">在测试缓存过程中，我发现有两种缓存 from disk cache , from memory cache 。顾名思义：磁盘缓存，内存缓存。这有什么区别呢，什么时候存内存，什么时候存磁盘缓存呢？</p><p style=\"margin-top: 0px; margin-bottom: 0.72em; color: rgb(38, 38, 38); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; font-size: 15px; white-space: pre-wrap; background-color: rgb(255, 255, 255);\"><span style=\"font-weight: 700;\">200 from disk cache</span></p><p style=\"margin-top: 0px; margin-bottom: 0.72em; color: rgb(38, 38, 38); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; font-size: 15px; white-space: pre-wrap; background-color: rgb(255, 255, 255);\">不访问服务器，直接读缓存，从磁盘中读取缓存，当kill进程时，数据还是存在。</p><p style=\"margin-top: 0px; margin-bottom: 0.72em; color: rgb(38, 38, 38); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; font-size: 15px; white-space: pre-wrap; background-color: rgb(255, 255, 255);\">这种方式也只能缓存派生资源</p><p style=\"margin-top: 0px; margin-bottom: 0.72em; color: rgb(38, 38, 38); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; font-size: 15px; white-space: pre-wrap; background-color: rgb(255, 255, 255);\"><span style=\"font-weight: 700;\">304 Not Modified </span></p><p style=\"margin-top: 0px; margin-bottom: 0.72em; color: rgb(38, 38, 38); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; font-size: 15px; white-space: pre-wrap; background-color: rgb(255, 255, 255);\">访问服务器，发现数据没有</p><p style=\"margin-top: 0px; margin-bottom: 0.72em; color: rgb(38, 38, 38); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; font-size: 15px; white-space: pre-wrap; background-color: rgb(255, 255, 255);\">更新，服务器返回此状态码。然后从缓存中读取数据。</p><p class=\"p2\"><strong><span style=\"color: rgb(38, 38, 38); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; font-size: 15px; white-space: pre-wrap; background-color: rgb(255, 255, 255);\">对于memory cache的使用，浏览器主要是去存储一些当前获取到的资源，<span style=\"color: rgb(38, 38, 38); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; font-size: 15px; white-space: pre-wrap; background-color: rgb(255, 255, 255);\">对于dist的缓存，浏览器启动的时候就会创建一个curl打头的对象，然后创建一个文件夹，读取本地缓存文件放进去。</span></span></strong></p>','[{\"type\":\"contents\",\"content\":\"前端静态文件缓存，大家已经耳熟能详，近期对项目进行优化又去详细看了下相关资料，在此整理。\\n\\n1、PWA，目前比较火的 PWA 方案 :Progressive Web Apps 是 Google 提出的用前沿的 Web 技术为网页提供 App 般使用体验的一系列方案。\\n一个 PWA 应用首先是一个网页, 可以通过 Web 技术编写出一个网页应用. 随后添加上 App Manifest 和 Service Worker 来实现 PWA 的安装和离线等功能。\\n关于什么是service work 和 关于它的生命周期，注册卸载以及跟服务端客户端交互的相关内容在此就不详细介绍了。这里主要介绍如何给web app 加上 service worker 支持，网上资料已经比较多了，我尝试的是使用webpack 的一个插件 offline-plugin(https://github.com/NekR/offline-plugin) 使用比较方便，api比较齐全，可以自动生成manifest文件。在webpack端配置：\\nnew OfflinePlugin({\\n      safeToUseOptionalCaches: true,\\n\\n      caches: {\\n        main: [\\n          \'main.js\',\\n          \'main.css\',\\n          \'index.html\'\\n        ],\\n        additional: [\\n          \'*.woff\',\\n          \'*.woff2\'\\n        ],\\n        optional: [\\n          \':rest:\'\\n        ]\\n      },\\n\\n      ServiceWorker: {\\n        events: true\\n      },\\n      AppCache: {\\n        events: true\\n      }\\n    })\\n在入口js中添加\\nrequire(\'offline-plugin/runtime\').install();\\nES6/Babel/TypeScript\\nimport * as OfflinePluginRuntime from \'offline-plugin/runtime\';\\nOfflinePluginRuntime.install();\\n之后用webpack 构建就可以了。\\n\\n从 network 中可以看到，再次请求的静态资源请求的是service worker:\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/ueditor/920951942811881472.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n值得注意的是，感觉service worker 并不太适合多页面应用，何为多页面，即请求先走的服务端，通过服务端直接渲染的页面，service worker 效果不明显，它比较适合单页面应用，比如vuejs 或者 react 类 spa类型的应用，另外，service worker 虽然被google和前端爱好者所推崇，然而，兼容性还不是那么理想，ios 目前是不支持的。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/ueditor/920952541699772416.png\"},{\"type\":\"contents\",\"content\":\"\\n\\n\\n2、尝试用独立的manifest 。虽然官方目前不是很推荐用manifest，而且也停止了manifest的更新，但是目前绝大多数的现代浏览器都是支持的，也是比较成熟的缓存方案，在w3上面对它的优点做了简单介绍：\\n离线浏览 - 用户可在应用离线时使用它们\\n速度 - 已缓存资源加载得更快\\n减少服务器负载 - 浏览器将只从服务器下载更新过或更改过的资源。\\n\\n\\n于是开始尝试，manifest的webpack插件也比较多，试用了几个，感觉都很不爽，不能满足业务需求，比如我想：\\n1、开发环境，uat环境，生产环境 manifest 各不相同，特别是生产是cdn\\n2、我还需要额外添加一些其他静态资源\\n\\n没有合适的就自己写一个(MakeManifest.js)：\\n/**\\n * manifest生成\\n * 根据环境变量生成manifest文件做静态文件预缓存\\n *\\n * 参数: options = {\\n *  path: \'./build/assets/manifest.appcache\' //生成静态资源缓存文件\\n * }\\n *\\n * @param options\\n * @constructor\\n */\\nvar fs = require(\'fs\'),NODE_ENV = process.env.NODE_ENV;\\nvar pkg = require(\'../package.json\');\\nfunction MakeManifest(output, options) {\\n    this.output = output\\n    this.options = options\\n}\\n\\nfunction getExtraSource() {\\n    var sourceArr = [];\\n    sourceArr.push(\'https://m.163.com/static/common/js/NativeAPI.js\');\\n    sourceArr.push(\'https://m.163.com/omm/mobile/sdk/product/1.0.0/js/product.js\');\\n    sourceArr.push(\'https://m.163.com/omm/mobile/sdk/product/1.0.0/css/style.css\');\\n    // a/b Test资源文件\\n    sourceArr.push(\'https://sdk.appadhoc.com/ab.plus.js\');\\n    return sourceArr;\\n}\\nfunction getNowFormatDate() {\\n    var date = new Date();\\n    var seperator1 = \\\"-\\\";\\n    var seperator2 = \\\":\\\";\\n    var month = date.getMonth() + 1;\\n    var strDate = date.getDate();\\n    if (month &gt;= 1 &amp;&amp; month &lt;= 9) {\\n        month = \\\"0\\\" + month;\\n    }\\n    if (strDate &gt;= 0 &amp;&amp; strDate &lt;= 9) {\\n        strDate = \\\"0\\\" + strDate;\\n    }\\n    var currentdate = date.getFullYear() + seperator1 + month + seperator1 + strDate\\n        + \\\" \\\" + date.getHours() + seperator2 + date.getMinutes()\\n        + seperator2 + date.getSeconds();\\n    return currentdate;\\n}    \\n\\nMakeManifest.prototype.apply = function (compiler) {\\n    var baseOutPath = this.output;\\n    var outPutManiFile = this.output + \'/manifest.appcache\'\\n    var outPutManiHtmlFile = this.output + \'/manifest.html\'\\n    var options = this.options\\n\\n    compiler.plugin(\'emit\', function (compilation, done) {\\n        var results = compilation.getStats().toJson(options), cateFile = [];\\n\\n        for (var i = 0; i &lt; results.chunks.length; i++) {\\n            var chunk = results.chunks[i];\\n            chunk.files.forEach(function (item) {\\n                if (!/\\\\.map$/.test(item)) {\\n                    var firstPath = NODE_ENV == \'production\' ? \'https://cdn.m.163.com/oas/static/assets/\' : \'/oas/static/assets/\';\\n                    cateFile.push(firstPath + item);\\n                }\\n            }, this);\\n        }\\n        var newFiles = cateFile.concat(getExtraSource());\\n        var currentDate = getNowFormatDate();\\n        var TAG = \'#ver:\' + currentDate + \' \' + pkg.version;\\n        var FALLBACK = \'\';\\n        var NETWORK = \'NETWORK:\\\\r\\\\n      *\';\\n        var CONTENT = \'\';\\n        var maniText = (\'\\\\r\\\\n      CACHE MANIFEST\\\\r\\\\n      \' + TAG + \'\\\\r\\\\n\\\\r\\\\n      CACHE:\\\\r\\\\n      \' + newFiles.join(\'\\\\r\\\\n\') + \'\\\\r\\\\n\\\\r\\\\n      \' + NETWORK + \'\\\\r\\\\n\\\\r\\\\n      \' + FALLBACK + \'\\\\r\\\\n    \').trim().replace(/^      */gm, \'\');\\n        var maniHtml = (\'\\\\n      &lt;!doctype html&gt;\\\\n      &lt;html manifest=\\\"manifest.appcache\\\"&gt;\' + (CONTENT || \'\') + \'&lt;/html&gt;\\\\n    \').trim().replace(/^      */gm, \'\');\\n\\n        fs.exists(baseOutPath, function (exists) {\\n            if (exists) {\\n                addCacheFile(maniText, maniHtml);\\n            }\\n            else {\\n                   \\n                fs.mkdir(baseOutPath, function () {\\n                    addCacheFile(maniText, maniHtml);\\n                });\\n            }\\n            done();\\n        });\\n\\n        function addCacheFile(maniText, maniHtml) {\\n            fs.writeFileSync(outPutManiFile, maniText);\\n            fs.writeFileSync(outPutManiHtmlFile, maniHtml);\\n        }\\n\\n    });\\n}\\n\\nmodule.exports = MakeManifest;\\n\\n在 webpack.config.js 中添加：\\nvar   plugins = require(\'./plugins\'),\\nnew plugins.MakeManifest(\'./build/assets\', {\\n            exclude: [/node_modules[\\\\\\\\\\\\/]react/],\\n            hash: true,\\n            assets: true,\\n            chunks: true,\\n            chunkModules: true\\n})\\n通过webpack 构建后可以看到静态文件目录生成两个文件：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/ueditor/921177144346939392.png\"},{\"type\":\"contents\",\"content\":\"\\n之后，我们可以通过后台打开iframe的方式在第一个页面加载时打开这个静态页面：\\nexport function openUrlByIframe(url) {\\n    return new Promise(function (resolve, reject) {\\n        let rdm = Math.random().toString().substr(2);\\n        let newIframe = document.createElement(\'iframe\');\\n        newIframe.id = \\\"openUrl\\\" + rdm;\\n        newIframe.src = url;\\n        let style = {\\n            \\\"margin\\\": 0,\\n            \\\"padding\\\": 0,\\n            \\\"border\\\": \\\"none\\\",\\n            \\\"height\\\": \\\"0px\\\",\\n            \\\"width\\\": \\\"0px\\\",\\n            \\\"position\\\": \\\"absolute\\\"\\n        };\\n        for (let key in style) {\\n            newIframe.style[key] = style[key];\\n        }\\n                let body = document.getElementsByTagName(\'body\')[0];\\n        if (newIframe.attachEvent) {\\n            newIframe.attachEvent(\\\"onload\\\", function () {\\n                console.log(\'预加载完成\', url);\\n                resolve();\\n            });\\n        } else {\\n            newIframe.onload = function () {\\n                console.log(\'预加载完成\', url);\\n                resolve();\\n            };\\n        }\\n        body.insertBefore(newIframe, body.firstChild);\\n    })\\n}\\n\\nasync storeStaticSource() {\\n   …\\n      let sessionPage = \'/oas/static/assets/manifest.html\';\\n      await native.openUrlByIframe(sessionPage);\\n      localStorage.setItem(\'hadSessionStatic\', \'1\');\\n      console.info(\'静态文件缓存完成！\');\\n   …\\n},\\n调用：\\nstoreStaticSource()\\n\\n使用缓存后对比：\\n不使用缓存：\\n① 弱网条件下（slow 3G）\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/ueditor/921184462274957312.png\"},{\"type\":\"contents\",\"content\":\"\\n现象：页面打开正常，静态文件加载缓慢。\\n② 离线条件下  \\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/ueditor/921185445650501632.png\"},{\"type\":\"contents\",\"content\":\"\\n现象：页面样式异常，静态文件加载异常。\\n加入缓存后：\\n① 离线情况下\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/ueditor/921186107553615872.png\"},{\"type\":\"contents\",\"content\":\"\\n现象：打开页面后，被缓存的静态资源从disk cache中请求，页面显示正常，打开速度很快\\nmanifest 方式也是有坑的，它有一些缺陷：\\n更新的资源，需要二次刷新才会被页面采用\\n不支持增量更新，只有manifest发生变化，所有资源全部重新下载一次\\n缺乏足够容错机制，当清单中任意资源文件出现加载异常，都会导致整个manifest策略运行异常\\n\\n不过对于目前的项目来讲，这些问题不大，可以考虑使用。\\n\\n3、使用iframe预加载页面。通过预加载网页的形式，我们可以在第一个页面加载完成时，预加载可能需要跳转的页面，预加载的方式和上面类似，可以通过一个隐藏的iframe来实现，这样，不仅可以提高打开速度，也可以缓存静态资源到disk cache 中，后面静态文件不用再请求服务器。\\nPS: 缓存的作用主要是让网页有更快的响应速度，增强体验，减少服务器响应时间，减少负载，缓存静态资源的方法很多，主要还是根据实际的场景来选择适合项目的方案来满足需求。关于浏览器的缓存机制，我在百度里扒了张图，介绍的比较详细了：\\n\\n\\n\\n浏览器第一次请求流程图：\\n\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/ueditor/921009743961657344.png\"},{\"type\":\"contents\",\"content\":\"\\n\\n\\n浏览器再次请求时：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/ueditor/921010019217051648.png\"},{\"type\":\"contents\",\"content\":\"\\n\\n在测试缓存过程中，我发现有两种缓存 from disk cache , from memory cache 。顾名思义：磁盘缓存，内存缓存。这有什么区别呢，什么时候存内存，什么时候存磁盘缓存呢？\\n200 from disk cache\\n不访问服务器，直接读缓存，从磁盘中读取缓存，当kill进程时，数据还是存在。\\n这种方式也只能缓存派生资源\\n304 Not Modified \\n访问服务器，发现数据没有\\n更新，服务器返回此状态码。然后从缓存中读取数据。\\n对于memory cache的使用，浏览器主要是去存储一些当前获取到的资源，对于dist的缓存，浏览器启动的时候就会创建一个curl打头的对象，然后创建一个文件夹，读取本地缓存文件放进去。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/img20171019175535.png','2017-10-19 10:03:53','2020-10-04 14:08:11'),(306,'DoraCMS2.0 即将发布','DoraCMS2.0 即将发布','1','1','','','2',NULL,'','经过一段时间的折腾，doracms2.0 即将手工，自己挖了很多坑，也填了很多坑，不过总体而言还是值得的。','1','','','0:01',762,'2','0',NULL,1,'0',232978,'<p>经过一段时间的折腾，doracms2.0 即将收工，自己挖了很多坑，也填了很多坑，不过总体而言还是值得的。&nbsp;</p><p>DoraCMS 使用的技术栈：</p><p>1、vue + vuex + vue-router 全家桶</p><p>2、webpack 2</p><p>3、nodejs 8.0 + express 4</p><p>4、mongodb 3+</p><p><br/></p><p>相比较doracms 1.1 而言，2.0版本有如下改进：</p><p>1、使用vue重写前台后台，页面开发统一模块化</p><p>2、前端 vue ssr 后台 spa 模式</p><p>3、使用webpack作为工具，同时打包前台后台静态文件</p><p>4、支持sass</p><p>5、使用 es6/es7 语法</p><p>6、重新整理了服务端代码逻辑，开发思路更清晰了</p><p>7、根据童鞋们平时反馈的问题，把能处理的都处理了</p><p><br/></p><p>还有很多改进，等待去发现。</p><p><br/></p><p><span style=\"color: rgb(0, 112, 192);\">PS: doracms2.0 还有很多细节需要慢慢完善，整体架构基本成型，由于参考了很多优秀的开源框架和项目，doracms2.0 依旧开源，计划一个月以后发布正式版，敬请关注！</span></p>','[{\"type\":\"contents\",\"content\":\"经过一段时间的折腾，doracms2.0 即将收工，自己挖了很多坑，也填了很多坑，不过总体而言还是值得的。 \\nDoraCMS 使用的技术栈：\\n1、vue + vuex + vue-router 全家桶\\n2、webpack 2\\n3、nodejs 8.0 + express 4\\n4、mongodb 3+\\n\\n相比较doracms 1.1 而言，2.0版本有如下改进：\\n1、使用vue重写前台后台，页面开发统一模块化\\n2、前端 vue ssr 后台 spa 模式\\n3、使用webpack作为工具，同时打包前台后台静态文件\\n4、支持sass\\n5、使用 es6/es7 语法\\n6、重新整理了服务端代码逻辑，开发思路更清晰了\\n7、根据童鞋们平时反馈的问题，把能处理的都处理了\\n\\n还有很多改进，等待去发现。\\n\\nPS: doracms2.0 还有很多细节需要慢慢完善，整体架构基本成型，由于参考了很多优秀的开源框架和项目，doracms2.0 依旧开源，计划一个月以后发布正式版，敬请关注！\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/img20170714121818.jpg','2017-06-28 14:09:56','2020-08-20 15:44:06'),(307,'NodeJS独立开发web框架——构思实现与发布(3)','中间件顺序性演示','2','1','','中间件','2',NULL,'','首先，我们在example目录下建立一个名为show_middle文件夹，用于开发演示插件。目录结构是 stuwebfk/example/show_middle','1','','','0:01',762,'2','0',NULL,0,'0',223846,'<h3>中间件顺序性演示</h3><p>首先，我们在example目录下建立一个名为show_middle文件夹，用于开发演示插件。目录结构是 <code>stuwebfk/example/show_middle</code>，那么在<code>show_middle</code>目录下的程序就可通过<code>require(&quot;../..&quot;)</code> 访问到 <code>stuwebfk/index.js</code> 程序。可参阅附录的模块一章的介绍。之后几天做的演示例子的文件夹，都在<code>stuwebfk/example</code>目录下创建。</p><p><code>run.js</code> 是启动文件</p><pre>var&nbsp;App&nbsp;=&nbsp;require(&quot;../..&quot;).App,\n&nbsp;&nbsp;&nbsp;&nbsp;app&nbsp;=&nbsp;new&nbsp;App(),\n&nbsp;&nbsp;&nbsp;&nbsp;middle01&nbsp;=&nbsp;require(&quot;./middle01&quot;),\n&nbsp;&nbsp;&nbsp;&nbsp;middle02&nbsp;=&nbsp;require(&quot;./middle02&quot;);\n\napp.use(middle01);\napp.use(middle02);\n\napp.listen(process.env.PORT);&nbsp;&nbsp;//&nbsp;可自己设定端口号，比如3000。</pre><p><code>middle01.js</code> 是中间件</p><pre>module.exports&nbsp;=&nbsp;function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;my&nbsp;name&nbsp;is&nbsp;middle01\\n&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;next();\n}</pre><p><code>middle02.js</code> 是中间件</p><pre>module.exports&nbsp;=&nbsp;function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;my&nbsp;name&nbsp;is&nbsp;middle02\\n&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;next();\n}</pre><p>通过 <code>node run</code> 运行，然后通过浏览器访问服务器。</p><p>打印出：</p><pre>my&nbsp;name&nbsp;is&nbsp;middle01\nmy&nbsp;name&nbsp;is&nbsp;middle02</pre><p>插件设计的很傻，可以说没有水准，但能说明插件的顺序执行。<span class=\"invade-word\"></span></p>','[{\"type\":\"contents\",\"content\":\"中间件顺序性演示\\n首先，我们在example目录下建立一个名为show_middle文件夹，用于开发演示插件。目录结构是 stuwebfk/example/show_middle，那么在show_middle目录下的程序就可通过require(\\\"../..\\\") 访问到 stuwebfk/index.js 程序。可参阅附录的模块一章的介绍。之后几天做的演示例子的文件夹，都在stuwebfk/example目录下创建。\\nrun.js 是启动文件\\nvar App = require(\\\"../..\\\").App,\\n    app = new App(),\\n    middle01 = require(\\\"./middle01\\\"),\\n    middle02 = require(\\\"./middle02\\\");\\n\\napp.use(middle01);\\napp.use(middle02);\\n\\napp.listen(process.env.PORT);  // 可自己设定端口号，比如3000。\\nmiddle01.js 是中间件\\nmodule.exports = function(req,res,next){\\n    console.log(\\\"my name is middle01\\\\n\\\");\\n    next();\\n}\\nmiddle02.js 是中间件\\nmodule.exports = function(req,res,next){\\n    console.log(\\\"my name is middle02\\\\n\\\");\\n    next();\\n}\\n通过 node run 运行，然后通过浏览器访问服务器。\\n打印出：\\nmy name is middle01\\nmy name is middle02\\n插件设计的很傻，可以说没有水准，但能说明插件的顺序执行。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444892617000.jpg','2015-09-07 11:28:03','2020-08-20 15:44:25'),(308,'Express 4.8.x—Response  响应对象','Response  响应对象','2','1','','Response','2',NULL,'','由于API很简单，以下内容基本上是Express官网API的中文翻译，特殊的地方会做解释说明。','1','','','0:01',762,'2','0',NULL,0,'0',226794,'<h3>Response &nbsp;响应对象</h3><p>由于API很简单，以下内容基本上是Express官网API的中文翻译，特殊的地方会做解释说明。</p><h4 id=\"res-status-code-\">res.status(code)</h4><p>设置http响应码，比如 res.status(404)</p><h4 id=\"res-set-field-value-\">res.set(field, [value])</h4><p>设置响应头信息。\n有两种写法：</p><pre>res.set(&#39;Content-Type&#39;,&nbsp;&#39;text/plain&#39;);</pre><p>和json写法：</p><pre>res.set({\n&nbsp;&nbsp;&#39;Content-Type&#39;:&nbsp;&#39;text/plain&#39;,\n&nbsp;&nbsp;&#39;Content-Length&#39;:&nbsp;&#39;123&#39;,\n&nbsp;&nbsp;&#39;ETag&#39;:&nbsp;&#39;12345&#39;\n})</pre><p>它的别名是 ｀res.header(field, [value])｀</p><h4 id=\"res-get-field-\">res.get(field)</h4><p>得到响应头信息</p><h4 id=\"res-cookie-name-value-options-\">res.cookie(name, value, [options])</h4><p>设置cookie name 值为value, 接受字符串参数或者JSON对象。 path 属性默认为 &quot;/&quot;.\nres.cookie(&#39;name&#39;, &#39;tobi&#39;, { domain: &#39;.example.com&#39;, path: &#39;/admin&#39;, secure: true });\nres.cookie(&#39;rememberme&#39;, &#39;1&#39;, { expires: new Date(Date.now() + 900000), httpOnly: true });</p><p>maxAge 属性是一个便利的设置&quot;expires&quot;,它是一个从当前时间算起的毫秒。 下面的代码和上一个例子中的第二行是同样的作用。</p><pre>res.cookie(&#39;rememberme&#39;,&nbsp;&#39;1&#39;,&nbsp;{&nbsp;maxAge:&nbsp;900000,&nbsp;httpOnly:&nbsp;true&nbsp;})</pre><p>可以传一个序列化的JSON对象作为参数， 它会自动被bodyParser() 中间件解析。</p><pre>res.cookie(&#39;cart&#39;,&nbsp;{&nbsp;items:&nbsp;[1,2,3]&nbsp;});\nres.cookie(&#39;cart&#39;,&nbsp;{&nbsp;items:&nbsp;[1,2,3]&nbsp;},&nbsp;{&nbsp;maxAge:&nbsp;900000&nbsp;});</pre><p>这个方法也支持签名的cookies。 只需要简单的传递signed 参数。 res.cookie()会使用通过 express.cookieParser(secret) 传入的secret来签名这个值</p><pre>res.cookie(&#39;name&#39;,&nbsp;&#39;tobi&#39;,&nbsp;{&nbsp;signed:&nbsp;true&nbsp;});</pre><h4 id=\"res-clearcookie\">res.clearCookie</h4><p>把name的cookie清除. path参数默认为 &quot;/&quot;.\nres.cookie(&#39;name&#39;, &#39;tobi&#39;, { path: &#39;/admin&#39; });\nres.clearCookie(&#39;name&#39;, { path: &#39;/admin&#39; });</p><h4 id=\"res-redirect-status-url-\">res.redirect([status], url)</h4><p>使用可选的状态码跳转到url 状态码status默认为302 &quot;Found&quot;.</p><pre>res.redirect(&#39;/foo/bar&#39;);\nres.redirect(&#39;http://example.com&#39;);\nres.redirect(301,&nbsp;&#39;http://example.com&#39;);\nres.redirect(&#39;../login&#39;);</pre><p>Express支持几种跳转，第一种便是使用一个完整的URI跳转到一个完全不同的网站。</p><pre>res.redirect(&#39;http://google.com&#39;);</pre><p>第二种是相对根域路径跳转，比如你现在在 <a href=\"http://example.com/admin/post/new\">http://example.com/admin/post/new</a>, 下面的代码跳转到 /admin 将会把你带到<a href=\"http://example.com/admin\">http://example.com/admin</a>:</p><pre>res.redirect(&#39;/admin&#39;);</pre><p>这是一种相对于应用程序挂载点的跳转。 比如把一个blog程序挂在 /blog, 事实上它无法知道它被挂载，所以当你使用跳转 /admin/post/new 时，将跳到<a href=\"http://example.com/admin/post/new\">http://example.com/admin/post/new</a>, 下面的代码，会把你带到<a href=\"http://example.com/blog/admin/post/new\">http://example.com/blog/admin/post/new</a></p><pre>res.redirect(&#39;admin/post/new&#39;);</pre><p><span class=\"invade-word\">googog</span>路径名.跳转同样也是支持的。 比如你在<a href=\"http://example.com/admin/post/new\">http://example.com/admin/post/new</a>, 下面的跳转会把你带到 http//example.com/admin/post:</p><pre>res.redirect(&#39;..&#39;);</pre><p>最后也是最特别的跳转是 back 跳转, 它会把你带回Referer（也有可能是Referrer）的地址 当Referer丢失的时候默认为 /</p><pre>res.redirect(&#39;back&#39;);</pre><h4 id=\"res-location\">res.location</h4><p>设置location 请求头.</p><pre>res.location(&#39;/foo/bar&#39;);\nres.location(&#39;foo/bar&#39;);\nres.location(&#39;http://example.com&#39;);\nres.location(&#39;../login&#39;);\nres.location(&#39;back&#39;);</pre><p>可以使用与 res.redirect()里相同的urls。\n举个例子，如果你的程序根地址是/blog, 下面的代码会把 location 请求头设置为/blog/admin:</p><pre>res.location(&#39;admin&#39;)</pre><h4 id=\"res-charset\">res.charset</h4><p>设置字符集。默认为&quot;utf-8&quot;。</p><pre>res.charset&nbsp;=&nbsp;&#39;value&#39;;\nres.send(&#39;some&nbsp;html&#39;);\n//&nbsp;=&gt;&nbsp;Content-Type:&nbsp;text/html;&nbsp;charset=value</pre><h4 id=\"res-send-body-status-body-\">res.send([body|status], [body])</h4><p>发送一个响应。</p><pre>res.send(new&nbsp;Buffer(&#39;whoop&#39;));\nres.send({&nbsp;some:&nbsp;&#39;json&#39;&nbsp;});\nres.send(&#39;some&nbsp;html&#39;);\nres.send(404,&nbsp;&#39;Sorry,&nbsp;we&nbsp;cannot&nbsp;find&nbsp;that!&#39;);\nres.send(500,&nbsp;{&nbsp;error:&nbsp;&#39;something&nbsp;blew&nbsp;up&#39;&nbsp;});\nres.send(200);</pre><p>这个方法在输出non-streaming响应的时候自动完成了大量有用的任务 ，比如在它前面没有定义Content-Length, 它会自动设置; 比如加一些自动的 HEAD; 比如对HTTP缓存的支持 .\n当参数为一个 Buffer时 Content-Type 会被设置为 &quot;application/octet-stream&quot; 除非它之前有像下面的代码：</p><pre>res.set(&#39;Content-Type&#39;,&nbsp;&#39;text/html&#39;);\nres.send(new&nbsp;Buffer(&#39;some&nbsp;html&#39;));</pre><p>当参数为一个String时 Content-Type 默认设置为&quot;text/html&quot;:</p><pre>res.send(&#39;some&nbsp;html&#39;);</pre><p>当参数为 Array 或者 Object 时 Express 会返回一个 JSON :</p><pre>res.send({&nbsp;user:&nbsp;&#39;tobi&#39;&nbsp;})\nres.send([1,2,3])</pre><p>最后一条当一个Number 作为参数， 并且没有上面提到的任何一条在响应体里， Express会帮你设置一个响应体，比如200 会返回字符&quot;OK&quot;, 404会返回&quot;Not Found&quot;等等.</p><pre>res.send(200)\nres.send(204)\nres.send(500)</pre><h4 id=\"res-json-status-body-body-\">res.json([status|body], [body])</h4><p>返回一个 JSON 响应。 当res.send() 的参数是一个对象或者数组的时候， 会调用这个方法。 当然它也在复杂的空值(null, undefined, etc)JSON转换的时候很有用， 因为规范上这些对象不是合法的JSON。</p><pre>res.json(null)\nres.json({&nbsp;user:&nbsp;&#39;tobi&#39;&nbsp;})\nres.json(500,&nbsp;{&nbsp;error:&nbsp;&#39;message&#39;&nbsp;})</pre><h4 id=\"res-jsonp-status-body-body-\">res.jsonp([status|body], [body])</h4><p>返回一个支持JSONP的JSON响应。 Send a JSON response with JSONP support. 这个方法同样使用了res.json(), 只是加了一个可以自定义的 JSONP 回调支持。</p><pre>res.jsonp(null)\n//&nbsp;=&gt;&nbsp;null\n\nres.jsonp({&nbsp;user:&nbsp;&#39;tobi&#39;&nbsp;})\n//&nbsp;=&gt;&nbsp;{&nbsp;&quot;user&quot;:&nbsp;&quot;tobi&quot;&nbsp;}\n\nres.jsonp(500,&nbsp;{&nbsp;error:&nbsp;&#39;message&#39;&nbsp;})\n//&nbsp;=&gt;&nbsp;{&nbsp;&quot;error&quot;:&nbsp;&quot;message&quot;&nbsp;}</pre><p>默认情况下JSONP 回调的函数名就是callback。 你可以通过jsonp callback name来修改这个值。 下面是一些使用JSONP的例子。</p><pre>//&nbsp;?callback=foo\nres.jsonp({&nbsp;user:&nbsp;&#39;tobi&#39;&nbsp;})\n//&nbsp;=&gt;&nbsp;foo({&nbsp;&quot;user&quot;:&nbsp;&quot;tobi&quot;&nbsp;})\n\napp.set(&#39;jsonp&nbsp;callback&nbsp;name&#39;,&nbsp;&#39;cb&#39;);\n\n//&nbsp;?cb=foo\nres.jsonp(500,&nbsp;{&nbsp;error:&nbsp;&#39;message&#39;&nbsp;})\n//&nbsp;=&gt;&nbsp;foo({&nbsp;&quot;error&quot;:&nbsp;&quot;message&quot;&nbsp;})</pre><h4 id=\"res-type-type-\">res.type(type)</h4><p>设置响应内容类型，也就是响应头的Content-Type值，而这个方法无需我们写全，即可被成功设置，意思是res.type(“json”)，等价于 res.type(&#39;application/json&#39;)。</p><pre>res.type(&#39;.html&#39;);\nres.type(&#39;html&#39;);\nres.type(&#39;json&#39;);\nres.type(&#39;application/json&#39;);\nres.type(&#39;png&#39;);</pre><p>它是res.contentType(type)方法的别名。</p><h4 id=\"res-format-object-\">res.format(object)</h4><p>设置特定请求头的响应。 这个方法使用 req.accepted， 这是一个通过质量值作为优先级顺序的数组， 第一个回调会被执行。 当没有匹配时，服务器返回一个 406 &quot;Not Acceptable&quot;, 或者执行default 回调\nContent-Type 在callback 被选中执行的时候会被设置好, 如果你想改变它，可以在callback内使用res.set()或者 res.type() 等\n下面的例子展示了在请求头设置为&quot;application/json&quot; 或者 &quot;<em>/json&quot;的时候 会返回{ &quot;message&quot;: &quot;hey&quot; } 如果设置的是&quot;</em>/*&quot; 那么所有的返回都将是&quot;hey&quot;</p><pre>res.format({\n&nbsp;&nbsp;&#39;text/plain&#39;:&nbsp;function(){\n&nbsp;&nbsp;&nbsp;&nbsp;res.send(&#39;hey&#39;);\n&nbsp;&nbsp;},\n\n&nbsp;&nbsp;&#39;text/html&#39;:&nbsp;function(){\n&nbsp;&nbsp;&nbsp;&nbsp;res.send(&#39;hey&#39;);\n&nbsp;&nbsp;},\n\n&nbsp;&nbsp;&#39;application/json&#39;:&nbsp;function(){\n&nbsp;&nbsp;&nbsp;&nbsp;res.send({&nbsp;message:&nbsp;&#39;hey&#39;&nbsp;});\n&nbsp;&nbsp;}\n});</pre><p>除了使用标准的MIME 类型，你也可以使用扩展名来映射这些类型，下面是一个不太完整的实现：</p><pre>res.format({\n&nbsp;&nbsp;text:&nbsp;function(){\n&nbsp;&nbsp;&nbsp;&nbsp;res.send(&#39;hey&#39;);\n&nbsp;&nbsp;},\n\n&nbsp;&nbsp;html:&nbsp;function(){\n&nbsp;&nbsp;&nbsp;&nbsp;res.send(&#39;hey&#39;);\n&nbsp;&nbsp;},\n\n&nbsp;&nbsp;json:&nbsp;function(){\n&nbsp;&nbsp;&nbsp;&nbsp;res.send({&nbsp;message:&nbsp;&#39;hey&#39;&nbsp;});\n&nbsp;&nbsp;}\n});</pre><h4 id=\"res-attachment-filename-\">res.attachment([filename])</h4><p>设置响应头的Content-Disposition 字段值为 &quot;attachment&quot;. 如果有filename 参数，Content-Type 将会依据文件扩展名通过res.type()自动设置, 并且Content-Disposition的&quot;filename=&quot;参数将会被设置</p><pre>res.attachment();\n//&nbsp;Content-Disposition:&nbsp;attachment\n\nres.attachment(&#39;path/to/logo.png&#39;);\n//&nbsp;Content-Disposition:&nbsp;attachment;&nbsp;filename=&quot;logo.png&quot;\n//&nbsp;Content-Type:&nbsp;image/png</pre><h4 id=\"res-sendfile-path-options-fn-\">res.sendfile(path, [options], [fn]])</h4><p>path所传输附件的路径。\n它会根据文件的扩展名自动设置响应头里的Content-Type字段。 回调函数fn(err)在传输完成或者发生错误时会被调用执行。\nOptions:</p><ul class=\" list-paddingleft-2\"><li><p>maxAge 毫秒，默认为0</p></li><li><p>root 文件相对的路径\n这个方法可以非常良好的支持有缩略图的文件服务。</p><pre>app.get(&#39;/user/:uid/photos/:file&#39;,&nbsp;function(req,&nbsp;res){\nvar&nbsp;uid&nbsp;=&nbsp;req.params.uid\n&nbsp;&nbsp;,&nbsp;file&nbsp;=&nbsp;req.params.file;\n\nreq.user.mayViewFilesFrom(uid,&nbsp;function(yes){\n&nbsp;&nbsp;if&nbsp;(yes)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;res.sendfile(&#39;/uploads/&#39;&nbsp;+&nbsp;uid&nbsp;+&nbsp;&#39;/&#39;&nbsp;+&nbsp;file);\n&nbsp;&nbsp;}&nbsp;else&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;res.send(403,&nbsp;&#39;Sorry!&nbsp;you&nbsp;cant&nbsp;see&nbsp;that.&#39;);\n&nbsp;&nbsp;}\n});\n});</pre><h4 id=\"res-download-path-filename-fn-\">res.download(path, [filename], [fn])</h4><p>path所需传输附件的路径， 通常情况下浏览器会弹出一个下载文件的窗口。 浏览器弹出框里的文件名和响应头里的Disposition &quot;filename=&quot; 参数是一致的, 你也可以通过传入filename来自由设置。\n当在传输的过程中发生一个错误时，可选的回调函数fn会被调用执行。 这个方法使用res.sendfile()传输文件。</p><pre>res.download(&#39;/report-12345.pdf&#39;);</pre><p><span class=\"invade-word\">sex</span>```</p></li></ul><p>res.download(&#39;/report-12345.pdf&#39;, &#39;report.pdf&#39;);</p><pre>```\n\nres.download(&#39;/report-12345.pdf&#39;,&nbsp;&#39;report.pdf&#39;,&nbsp;function(err){\n&nbsp;&nbsp;if&nbsp;(err)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;处理错误，请牢记可能只有部分内容被传输，所以\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;检查一下res.headerSent\n&nbsp;&nbsp;}&nbsp;else&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;减少下载的积分值之类的\n&nbsp;&nbsp;}\n});</pre><h4 id=\"res-links-links-\">res.links(links)</h4><p>合并给定的links, 并且设置给响应头里的&quot;Link&quot; 字段.</p><pre>res.links({\n&nbsp;&nbsp;next:&nbsp;&#39;http://api.example.com/users?page=2&#39;,\n&nbsp;&nbsp;last:&nbsp;&#39;http://api.example.com/users?page=5&#39;\n});</pre><p>转换后:</p><pre>Link:&nbsp;&lt;http://api.example.com/users?page=2&gt;;&nbsp;rel=&quot;next&quot;,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;http://api.example.com/users?page=5&gt;;&nbsp;rel=&quot;last&quot;</pre><h4 id=\"res-locals\">res.locals</h4><p>在某一次请求范围下的响应体的本地变量，只对此次请求期间的views可见。 另外这个API其实和 app.locals是一样的.\n这个对象在放置请求级信息时非常有用，比如放置请求的路径名，验证过的用户，用户设置等等</p><pre>app.use(function(req,&nbsp;res,&nbsp;next){\n&nbsp;&nbsp;res.locals.user&nbsp;=&nbsp;req.user;\n&nbsp;&nbsp;res.locals.authenticated&nbsp;=&nbsp;!&nbsp;req.user.anonymous;\n&nbsp;&nbsp;next();\n});</pre><h4 id=\"res-render-view-locals-callback-\">res.render(view, [locals], callback)</h4><p>渲染view, 同时向callback 传入渲染后的字符串。 callback如果不传的话，直接会把渲染后的字符串输出至请求方， 如果不需要再对渲染后的模板作操作，就不用传callback。 当有错误发生时next(err)会被执行. 如果提供了callback参数，可能发生的错误和渲染的字符串都会被当作参数传入, 并且没有默认响应。</p><pre>res.render(&#39;index&#39;,&nbsp;function(err,&nbsp;html){\n&nbsp;&nbsp;//&nbsp;...\n});\n\nres.render(&#39;user&#39;,&nbsp;{&nbsp;name:&nbsp;&#39;Tobi&#39;&nbsp;},&nbsp;function(err,&nbsp;html){\n&nbsp;&nbsp;//&nbsp;...\n});</pre>','[{\"type\":\"contents\",\"content\":\"Response  响应对象\\n由于API很简单，以下内容基本上是Express官网API的中文翻译，特殊的地方会做解释说明。\\nres.status(code)\\n设置http响应码，比如 res.status(404)\\nres.set(field, [value])\\n设置响应头信息。有两种写法：\\nres.set(\'Content-Type\', \'text/plain\');\\n和json写法：\\nres.set({\\n  \'Content-Type\': \'text/plain\',\\n  \'Content-Length\': \'123\',\\n  \'ETag\': \'12345\'\\n})\\n它的别名是 ｀res.header(field, [value])｀\\nres.get(field)\\n得到响应头信息\\nres.cookie(name, value, [options])\\n设置cookie name 值为value, 接受字符串参数或者JSON对象。 path 属性默认为 \\\"/\\\".res.cookie(\'name\', \'tobi\', { domain: \'.example.com\', path: \'/admin\', secure: true });res.cookie(\'rememberme\', \'1\', { expires: new Date(Date.now() + 900000), httpOnly: true });\\nmaxAge 属性是一个便利的设置\\\"expires\\\",它是一个从当前时间算起的毫秒。 下面的代码和上一个例子中的第二行是同样的作用。\\nres.cookie(\'rememberme\', \'1\', { maxAge: 900000, httpOnly: true })\\n可以传一个序列化的JSON对象作为参数， 它会自动被bodyParser() 中间件解析。\\nres.cookie(\'cart\', { items: [1,2,3] });\\nres.cookie(\'cart\', { items: [1,2,3] }, { maxAge: 900000 });\\n这个方法也支持签名的cookies。 只需要简单的传递signed 参数。 res.cookie()会使用通过 express.cookieParser(secret) 传入的secret来签名这个值\\nres.cookie(\'name\', \'tobi\', { signed: true });\\nres.clearCookie\\n把name的cookie清除. path参数默认为 \\\"/\\\".res.cookie(\'name\', \'tobi\', { path: \'/admin\' });res.clearCookie(\'name\', { path: \'/admin\' });\\nres.redirect([status], url)\\n使用可选的状态码跳转到url 状态码status默认为302 \\\"Found\\\".\\nres.redirect(\'/foo/bar\');\\nres.redirect(\'http://example.com\');\\nres.redirect(301, \'http://example.com\');\\nres.redirect(\'../login\');\\nExpress支持几种跳转，第一种便是使用一个完整的URI跳转到一个完全不同的网站。\\nres.redirect(\'http://google.com\');\\n第二种是相对根域路径跳转，比如你现在在 http://example.com/admin/post/new, 下面的代码跳转到 /admin 将会把你带到http://example.com/admin:\\nres.redirect(\'/admin\');\\n这是一种相对于应用程序挂载点的跳转。 比如把一个blog程序挂在 /blog, 事实上它无法知道它被挂载，所以当你使用跳转 /admin/post/new 时，将跳到http://example.com/admin/post/new, 下面的代码，会把你带到http://example.com/blog/admin/post/new\\nres.redirect(\'admin/post/new\');\\ngoogog路径名.跳转同样也是支持的。 比如你在http://example.com/admin/post/new, 下面的跳转会把你带到 http//example.com/admin/post:\\nres.redirect(\'..\');\\n最后也是最特别的跳转是 back 跳转, 它会把你带回Referer（也有可能是Referrer）的地址 当Referer丢失的时候默认为 /\\nres.redirect(\'back\');\\nres.location\\n设置location 请求头.\\nres.location(\'/foo/bar\');\\nres.location(\'foo/bar\');\\nres.location(\'http://example.com\');\\nres.location(\'../login\');\\nres.location(\'back\');\\n可以使用与 res.redirect()里相同的urls。举个例子，如果你的程序根地址是/blog, 下面的代码会把 location 请求头设置为/blog/admin:\\nres.location(\'admin\')\\nres.charset\\n设置字符集。默认为\\\"utf-8\\\"。\\nres.charset = \'value\';\\nres.send(\'some html\');\\n// =&gt; Content-Type: text/html; charset=value\\nres.send([body|status], [body])\\n发送一个响应。\\nres.send(new Buffer(\'whoop\'));\\nres.send({ some: \'json\' });\\nres.send(\'some html\');\\nres.send(404, \'Sorry, we cannot find that!\');\\nres.send(500, { error: \'something blew up\' });\\nres.send(200);\\n这个方法在输出non-streaming响应的时候自动完成了大量有用的任务 ，比如在它前面没有定义Content-Length, 它会自动设置; 比如加一些自动的 HEAD; 比如对HTTP缓存的支持 .当参数为一个 Buffer时 Content-Type 会被设置为 \\\"application/octet-stream\\\" 除非它之前有像下面的代码：\\nres.set(\'Content-Type\', \'text/html\');\\nres.send(new Buffer(\'some html\'));\\n当参数为一个String时 Content-Type 默认设置为\\\"text/html\\\":\\nres.send(\'some html\');\\n当参数为 Array 或者 Object 时 Express 会返回一个 JSON :\\nres.send({ user: \'tobi\' })\\nres.send([1,2,3])\\n最后一条当一个Number 作为参数， 并且没有上面提到的任何一条在响应体里， Express会帮你设置一个响应体，比如200 会返回字符\\\"OK\\\", 404会返回\\\"Not Found\\\"等等.\\nres.send(200)\\nres.send(204)\\nres.send(500)\\nres.json([status|body], [body])\\n返回一个 JSON 响应。 当res.send() 的参数是一个对象或者数组的时候， 会调用这个方法。 当然它也在复杂的空值(null, undefined, etc)JSON转换的时候很有用， 因为规范上这些对象不是合法的JSON。\\nres.json(null)\\nres.json({ user: \'tobi\' })\\nres.json(500, { error: \'message\' })\\nres.jsonp([status|body], [body])\\n返回一个支持JSONP的JSON响应。 Send a JSON response with JSONP support. 这个方法同样使用了res.json(), 只是加了一个可以自定义的 JSONP 回调支持。\\nres.jsonp(null)\\n// =&gt; null\\n\\nres.jsonp({ user: \'tobi\' })\\n// =&gt; { \\\"user\\\": \\\"tobi\\\" }\\n\\nres.jsonp(500, { error: \'message\' })\\n// =&gt; { \\\"error\\\": \\\"message\\\" }\\n默认情况下JSONP 回调的函数名就是callback。 你可以通过jsonp callback name来修改这个值。 下面是一些使用JSONP的例子。\\n// ?callback=foo\\nres.jsonp({ user: \'tobi\' })\\n// =&gt; foo({ \\\"user\\\": \\\"tobi\\\" })\\n\\napp.set(\'jsonp callback name\', \'cb\');\\n\\n// ?cb=foo\\nres.jsonp(500, { error: \'message\' })\\n// =&gt; foo({ \\\"error\\\": \\\"message\\\" })\\nres.type(type)\\n设置响应内容类型，也就是响应头的Content-Type值，而这个方法无需我们写全，即可被成功设置，意思是res.type(“json”)，等价于 res.type(\'application/json\')。\\nres.type(\'.html\');\\nres.type(\'html\');\\nres.type(\'json\');\\nres.type(\'application/json\');\\nres.type(\'png\');\\n它是res.contentType(type)方法的别名。\\nres.format(object)\\n设置特定请求头的响应。 这个方法使用 req.accepted， 这是一个通过质量值作为优先级顺序的数组， 第一个回调会被执行。 当没有匹配时，服务器返回一个 406 \\\"Not Acceptable\\\", 或者执行default 回调Content-Type 在callback 被选中执行的时候会被设置好, 如果你想改变它，可以在callback内使用res.set()或者 res.type() 等下面的例子展示了在请求头设置为\\\"application/json\\\" 或者 \\\"/json\\\"的时候 会返回{ \\\"message\\\": \\\"hey\\\" } 如果设置的是\\\"/*\\\" 那么所有的返回都将是\\\"hey\\\"\\nres.format({\\n  \'text/plain\': function(){\\n    res.send(\'hey\');\\n  },\\n\\n  \'text/html\': function(){\\n    res.send(\'hey\');\\n  },\\n\\n  \'application/json\': function(){\\n    res.send({ message: \'hey\' });\\n  }\\n});\\n除了使用标准的MIME 类型，你也可以使用扩展名来映射这些类型，下面是一个不太完整的实现：\\nres.format({\\n  text: function(){\\n    res.send(\'hey\');\\n  },\\n\\n  html: function(){\\n    res.send(\'hey\');\\n  },\\n\\n  json: function(){\\n    res.send({ message: \'hey\' });\\n  }\\n});\\nres.attachment([filename])\\n设置响应头的Content-Disposition 字段值为 \\\"attachment\\\". 如果有filename 参数，Content-Type 将会依据文件扩展名通过res.type()自动设置, 并且Content-Disposition的\\\"filename=\\\"参数将会被设置\\nres.attachment();\\n// Content-Disposition: attachment\\n\\nres.attachment(\'path/to/logo.png\');\\n// Content-Disposition: attachment; filename=\\\"logo.png\\\"\\n// Content-Type: image/png\\nres.sendfile(path, [options], [fn]])\\npath所传输附件的路径。它会根据文件的扩展名自动设置响应头里的Content-Type字段。 回调函数fn(err)在传输完成或者发生错误时会被调用执行。Options:\\nmaxAge 毫秒，默认为0\\nroot 文件相对的路径这个方法可以非常良好的支持有缩略图的文件服务。\\napp.get(\'/user/:uid/photos/:file\', function(req, res){\\nvar uid = req.params.uid\\n  , file = req.params.file;\\n\\nreq.user.mayViewFilesFrom(uid, function(yes){\\n  if (yes) {\\n    res.sendfile(\'/uploads/\' + uid + \'/\' + file);\\n  } else {\\n    res.send(403, \'Sorry! you cant see that.\');\\n  }\\n});\\n});\\nres.download(path, [filename], [fn])\\npath所需传输附件的路径， 通常情况下浏览器会弹出一个下载文件的窗口。 浏览器弹出框里的文件名和响应头里的Disposition \\\"filename=\\\" 参数是一致的, 你也可以通过传入filename来自由设置。当在传输的过程中发生一个错误时，可选的回调函数fn会被调用执行。 这个方法使用res.sendfile()传输文件。\\nres.download(\'/report-12345.pdf\');\\nsex```\\n\\nres.download(\'/report-12345.pdf\', \'report.pdf\');\\n```\\n\\nres.download(\'/report-12345.pdf\', \'report.pdf\', function(err){\\n  if (err) {\\n    // 处理错误，请牢记可能只有部分内容被传输，所以\\n    // 检查一下res.headerSent\\n  } else {\\n    // 减少下载的积分值之类的\\n  }\\n});\\nres.links(links)\\n合并给定的links, 并且设置给响应头里的\\\"Link\\\" 字段.\\nres.links({\\n  next: \'http://api.example.com/users?page=2\',\\n  last: \'http://api.example.com/users?page=5\'\\n});\\n转换后:\\nLink: &lt;http://api.example.com/users?page=2&gt;; rel=\\\"next\\\", \\n      &lt;http://api.example.com/users?page=5&gt;; rel=\\\"last\\\"\\nres.locals\\n在某一次请求范围下的响应体的本地变量，只对此次请求期间的views可见。 另外这个API其实和 app.locals是一样的.这个对象在放置请求级信息时非常有用，比如放置请求的路径名，验证过的用户，用户设置等等\\napp.use(function(req, res, next){\\n  res.locals.user = req.user;\\n  res.locals.authenticated = ! req.user.anonymous;\\n  next();\\n});\\nres.render(view, [locals], callback)\\n渲染view, 同时向callback 传入渲染后的字符串。 callback如果不传的话，直接会把渲染后的字符串输出至请求方， 如果不需要再对渲染后的模板作操作，就不用传callback。 当有错误发生时next(err)会被执行. 如果提供了callback参数，可能发生的错误和渲染的字符串都会被当作参数传入, 并且没有默认响应。\\nres.render(\'index\', function(err, html){\\n  // ...\\n});\\n\\nres.render(\'user\', { name: \'Tobi\' }, function(err, html){\\n  // ...\\n});\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445058822000.jpg','2015-10-17 05:17:37','2020-08-20 15:44:22'),(309,'第9天response 响应渲染 —download插件开发','download插件开发','2','1','','download插件','2',NULL,'','下载插件的作用是让客户接收响应时，不是把内容显示在网页上，而是下载到本地。这个插件知道原理后，其实很简单，通过设置response信息头就可做到。','1','','','0:01',762,'2','0',NULL,0,'0',223123,'<h3>download插件开发</h3><p>下载插件的作用是让客户接收响应时，不是把内容显示在网页上，而是下载到本地。这个插件知道原理后，其实很简单，通过设置response信息头就可做到。这个插件，我们设置了响应信息头中3个属性，<code>Content-disposition</code>下载的附件文件名称、 <code>Content-Type</code> 下载文件的类型 、 <code>Content-Length</code> 下载文件的大小，设置好这些之后，基本的下载功能就完成了。下面是详细的插件源代码。</p><p><code>lib/download.js</code> 源代码</p><pre>module.exports&nbsp;=&nbsp;function(req,res,next){\n\n&nbsp;&nbsp;&nbsp;&nbsp;res.download&nbsp;=&nbsp;function(fileName,buf){\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;判断buf是否是Buffer对象\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(Buffer.isBuffer(buf)){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.writeHead(200,&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;设置下载文件名称\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;Content-disposition&#39;:&nbsp;&#39;attachment;&nbsp;filename=&#39;&nbsp;+&nbsp;fileName,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;保证是二进制类型，这样浏览器可用下载方式\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;Content-Type&#39;:&nbsp;&#39;application/octet-stream&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;设置buf大小\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;Content-Length&#39;:&nbsp;buf.length\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.write(buf);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;next();\n\n}</pre><p><code>index.js</code>文件加入以下代码：</p><pre>exports.download&nbsp;=&nbsp;require(&quot;./lib/download&quot;);</pre><p>到此为止，download中间件就开发完毕了，下面做一个实例，看看使用效果。</p><pre>var&nbsp;fk&nbsp;=&nbsp;require(&quot;../..&quot;)\n&nbsp;&nbsp;&nbsp;,App&nbsp;=&nbsp;fk.App\n&nbsp;&nbsp;&nbsp;,download&nbsp;=&nbsp;fk.download\n&nbsp;&nbsp;&nbsp;,app&nbsp;=&nbsp;new&nbsp;App;\n&nbsp;&nbsp;&nbsp;//&nbsp;加载download插件\n&nbsp;&nbsp;&nbsp;app.use(fk.download);\n\n&nbsp;&nbsp;&nbsp;app.get(&quot;/down&quot;,function(req,res){\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer(&quot;nihao&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.download(&quot;my.o&quot;,buf);\n\n&nbsp;&nbsp;&nbsp;})\n&nbsp;&nbsp;&nbsp;app.listen(3000)</pre><p>视频演示</p><hr/><p><embed width=\"480\" height=\"400\" align=\"middle\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" quality=\"high\" allowfullscreen=\"true\" src=\"http://static.video.qq.com/TPout.swf?vid=e0116yj96z0\"/></p><hr/>','[{\"type\":\"contents\",\"content\":\"download插件开发\\n下载插件的作用是让客户接收响应时，不是把内容显示在网页上，而是下载到本地。这个插件知道原理后，其实很简单，通过设置response信息头就可做到。这个插件，我们设置了响应信息头中3个属性，Content-disposition下载的附件文件名称、 Content-Type 下载文件的类型 、 Content-Length 下载文件的大小，设置好这些之后，基本的下载功能就完成了。下面是详细的插件源代码。\\nlib/download.js 源代码\\nmodule.exports = function(req,res,next){\\n\\n    res.download = function(fileName,buf){\\n\\n        // 判断buf是否是Buffer对象\\n        if(Buffer.isBuffer(buf)){\\n            res.writeHead(200, {\\n                // 设置下载文件名称\\n                \'Content-disposition\': \'attachment; filename=\' + fileName,\\n                // 保证是二进制类型，这样浏览器可用下载方式\\n                \'Content-Type\': \'application/octet-stream\',\\n                // 设置buf大小\\n                \'Content-Length\': buf.length\\n            });\\n            res.write(buf);\\n            res.end();\\n        }else{\\n            res.end();\\n        }\\n\\n    }\\n\\n    next();\\n\\n}\\nindex.js文件加入以下代码：\\nexports.download = require(\\\"./lib/download\\\");\\n到此为止，download中间件就开发完毕了，下面做一个实例，看看使用效果。\\nvar fk = require(\\\"../..\\\")\\n   ,App = fk.App\\n   ,download = fk.download\\n   ,app = new App;\\n   // 加载download插件\\n   app.use(fk.download);\\n\\n   app.get(\\\"/down\\\",function(req,res){\\n\\n        var buf = new Buffer(\\\"nihao\\\");\\n        res.download(\\\"my.o\\\",buf);\\n\\n   })\\n   app.listen(3000)\\n视频演示\\n&lt;embed width=\\\"480\\\" height=\\\"400\\\" align=\\\"middle\\\" type=\\\"application/x-shockwave-flash\\\" allowscriptaccess=\\\"always\\\" quality=\\\"high\\\" allowfullscreen=\\\"true\\\" src=\\\"http://static.video.qq.com/TPout.swf?vid=e0116yj96z0\\\"&gt;\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445235828000.jpg','2015-10-19 06:24:36','2020-08-20 15:44:18'),(310,'Node.js API实例讲解——EventEmitter','EventEmitter','2','1','','EventEmitter','2',NULL,'','当继承EventEmitter，成为其子类就具备了emit激发事件方法和addListener添加监听器的方法。','1','','','0:01',762,'2','0',NULL,0,'0',223760,'<h3>EventEmitter</h3><p>当继承EventEmitter，成为其子类就具备了emit激发事件方法和addListener添加监听器的方法。在node.js核心库中很多类都继承自EventEmitter，例如前面章节介绍的stream和socket等操作，有类似于 on(&quot;...&quot;,function(){}) 的写法。</p><p>下面做一个实例：</p><pre class=\"code\">var&nbsp;EventEmitter&nbsp;=&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;require(&quot;events&quot;).EventEmitter,\n&nbsp;&nbsp;&nbsp;&nbsp;inherits&nbsp;=&nbsp;require(&quot;util&quot;).inherits;\n\n//&nbsp;定义一个EventEmitter子类\nfunction&nbsp;User(name){\n&nbsp;&nbsp;&nbsp;EventEmitter.call(this);\n&nbsp;&nbsp;&nbsp;this._name&nbsp;=&nbsp;name;\n}\n\ninherits(User,EventEmitter);\n\nUser.prototype.changeName&nbsp;=&nbsp;function(name){\n&nbsp;&nbsp;&nbsp;&nbsp;this._name&nbsp;=&nbsp;name;\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;激发change&nbsp;name事件\n&nbsp;&nbsp;&nbsp;&nbsp;this.emit(&quot;change&nbsp;name&quot;,name);\n}\n\n//&nbsp;创建一个User对象\nvar&nbsp;me&nbsp;=&nbsp;new&nbsp;User(&quot;leo&quot;);\nme.on(&quot;change&nbsp;name&quot;,function(newName){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;名字被改成成&nbsp;---&gt;&nbsp;&quot;&nbsp;+&nbsp;newName);\n});\n\nme.changeName(&quot;brighthas&quot;);</pre><p>User类继承了EventEmitter，changeName被调用后，通过emit激发change name事件。后面创建一个User对象me，通过me.on方法添加一个change name事件的监听器，后面调用me.changeName方法后，激发了change name事件，从而调用了监听器，打印出：</p><pre class=\"code\">名字被改成成&nbsp;---&gt;&nbsp;brighthas</pre><p>下面详细分析一下EventEmitter对象所具备的方法。</p><h5 id=\"-\">添加监听器</h5><p>emitter.addListener(event, listener) 和 emitter.on(event, listener) 方法写法不同而已，都是向emitter对象添加监听器，event是事件名称，listener是监听器函数。</p><p><span class=\"invade-word\">googog</span>emitter.once(event, listener) 和 emitter.on 用法一致，区别是添加的监听器只监听一次，如果第二次发生同样事件，事件监听器将不会被执行。</p><pre class=\"code\">emitter.on(&quot;event&nbsp;name&quot;,function(arg0,arg1&nbsp;...){\n&nbsp;&nbsp;&nbsp;...\n})</pre><p>监听器参数取决于emit激发事件时的赋值，emitter.emit(&quot;event name&quot;,111,222,234)，那么监听器的实参arguments的值是 [111,222,333]。</p><h5 id=\"-\">激发事件</h5><p>通过emitter.emit方法激发事件。emitter.emit(event, [arg1], [arg2], [...])</p><h5 id=\"-\">删除事件监听器</h5><p>通过emitter.removeListener(event, listener)方法，可以删除event事件的listener监听器，看如下代码。</p><pre class=\"code\">var&nbsp;EventEmitter&nbsp;=&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;require(&quot;events&quot;).EventEmitter,\n&nbsp;&nbsp;&nbsp;&nbsp;inherits&nbsp;=&nbsp;require(&quot;util&quot;).inherits;\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;定义一个EventEmitter子类&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;User(name){&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;EventEmitter.call(this);&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;this._name&nbsp;=&nbsp;name;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;}\ninherits(User,EventEmitter);\nUser.prototype.changeName&nbsp;=&nbsp;function(name){&nbsp;&nbsp;&nbsp;&nbsp;\nthis._name&nbsp;=&nbsp;name;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;激发change&nbsp;name事件&nbsp;&nbsp;&nbsp;&nbsp;\nthis.emit(&quot;change&nbsp;name&quot;,name);&nbsp;\n}\n//&nbsp;创建一个User对象&nbsp;var&nbsp;me&nbsp;=&nbsp;new&nbsp;User(&quot;leo&quot;);\n//&nbsp;第一个监听器&nbsp;\nfunction&nbsp;handle1(name){&nbsp;&nbsp;&nbsp;&nbsp;\nconsole.log(&quot;handle1&nbsp;---&nbsp;&gt;&nbsp;新名字：&quot;+name);&nbsp;\n}\n//&nbsp;第二个监听器&nbsp;\nfunction&nbsp;handle2(name){&nbsp;&nbsp;&nbsp;&nbsp;\nconsole.log(&quot;handle2&nbsp;---&nbsp;&gt;&nbsp;新名字：&quot;+name);&nbsp;\n}\nme.on(&quot;change&nbsp;name&quot;,handle1);&nbsp;me.on(&quot;change&nbsp;name&quot;,handle2);\nme.changeName(&quot;brighthas&quot;);</pre><p><br/></p><p><br/></p><p>这个代码结果是：</p><pre class=\"code\">handle1&nbsp;---&nbsp;&gt;&nbsp;新名字：brighthas\nhandle2&nbsp;---&nbsp;&gt;&nbsp;新名字：brighthas</pre><p>如果把代码改一下，在 me.on(&quot;change name&quot;,handle2); 之后加上一行代码，在执行看看效果。</p><pre class=\"code\">...\nme.on(&quot;change&nbsp;name&quot;,handle1);\nme.on(&quot;change&nbsp;name&quot;,handle2);\n\n//&nbsp;新添加的代码\nme.removeListener(&quot;change&nbsp;name&quot;,handle1);\n\nme.changeName(&quot;brighthas&quot;);</pre><p>执行结果：</p><pre class=\"code\">handle2&nbsp;---&nbsp;&gt;&nbsp;新名字：brighthas</pre><p>通过me.removeListener(&quot;change name&quot;,handle1) 这行代码删除了change name 事件的handle1监听器，这样当激发change name 事件时，只有handle2监听器被执行。</p><p>emitter.removeAllListeners([event]) 如果这个方法的 event 参数没有指定那个事件，那么将会删除emitter对象内的全部事件监听器。如果指定了事件名称，那么会删除这个事件全部的监听器。</p><h5 id=\"emitter-listeners-event-\">emitter.listeners(event)</h5><p>这个方法是返回指定事件的全部监听器。</p><h5 id=\"emitter-setmaxlisteners-n-\">emitter.setMaxListeners(n)</h5><p>这个是设置针对一个事件最多能添加多少监听器，默认是10。 如果超过这个值会有警告提示，程序还是会照常运行。</p><p>以上是对象方法，下面介绍一下类方法。</p><h5 id=\"eventemitter-listenercount-emitter-event-\">EventEmitter.listenerCount(emitter, event)</h5><p>这个类方法可以得到emitter的event事件的监听器数量。</p><h5 id=\"emitter-\">emitter本身发出的事件</h5><p>newListener事件，当通过 emitter.on / emitter.once 添加监听器时会触发该事件。</p><p>removeListener 事件，当通过 emitter.removeAllListeners / emitter.removeListener 删除监听器时会触发该事件。</p><p>看下面代码：</p><pre class=\"code\">var&nbsp;EventEmitter&nbsp;=&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;require(&quot;events&quot;).EventEmitter,\n&nbsp;&nbsp;&nbsp;&nbsp;inherits&nbsp;=&nbsp;require(&quot;util&quot;).inherits;\n\n//&nbsp;定义一个EventEmitter子类\nfunction&nbsp;User(name){\n&nbsp;&nbsp;&nbsp;EventEmitter.call(this);\n&nbsp;&nbsp;&nbsp;this._name&nbsp;=&nbsp;name;\n}\n\ninherits(User,EventEmitter);\n\nUser.prototype.changeName&nbsp;=&nbsp;function(name){\n&nbsp;&nbsp;&nbsp;&nbsp;this._name&nbsp;=&nbsp;name;\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;激发change&nbsp;name事件\n&nbsp;&nbsp;&nbsp;&nbsp;this.emit(&quot;change&nbsp;name&quot;,name);\n}\n\n//&nbsp;创建一个User对象\nvar&nbsp;me&nbsp;=&nbsp;new&nbsp;User(&quot;leo&quot;);\n\n//&nbsp;第一个监听器\nfunction&nbsp;handle1(name){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;handle1&nbsp;---&nbsp;&gt;&nbsp;新名字：&quot;+name);\n}\n\n//&nbsp;第二个监听器\nfunction&nbsp;handle2(name){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;handle2&nbsp;---&nbsp;&gt;&nbsp;新名字：&quot;+name);\n}\n\n//&nbsp;添加&nbsp;newListener事件监听\nme.on(&quot;newListener&quot;,function(event,listener){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(event&nbsp;+&nbsp;&quot;事件添加了一个监听器&quot;)\n})\n\n//&nbsp;添加&nbsp;removeListener事件监听器\nme.on(&quot;removeListener&quot;,function(event,listener){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(event+&quot;事件删除了一个监听器&quot;);\n})\n\nme.on(&quot;change&nbsp;name&quot;,handle1);\nme.on(&quot;change&nbsp;name&quot;,handle2);\n//&nbsp;删除全部事件监听器\nme.removeAllListeners();\nme.changeName(&quot;brighthas&quot;);</pre><p>打印结果：</p><pre class=\"code\">removeListener事件添加了一个监听器\nchange&nbsp;name事件添加了一个监听器\nchange&nbsp;name事件添加了一个监听器\nnewListener事件删除了一个监听器\nchange&nbsp;name事件删除了一个监听器\nchange&nbsp;name事件删除了一个监听器</pre><h5 id=\"-\">【小结】</h5><p>这里要说明的是，很多人会把并发 I/O非阻塞 等概念和事件概念有混淆，至少是部分混淆，其实毫无关系。事件也不能决定是异步还是同步，这个取决于底层。</p>','[{\"type\":\"contents\",\"content\":\"EventEmitter\\n当继承EventEmitter，成为其子类就具备了emit激发事件方法和addListener添加监听器的方法。在node.js核心库中很多类都继承自EventEmitter，例如前面章节介绍的stream和socket等操作，有类似于 on(\\\"...\\\",function(){}) 的写法。\\n下面做一个实例：\\nvar EventEmitter = \\n    require(\\\"events\\\").EventEmitter,\\n    inherits = require(\\\"util\\\").inherits;\\n\\n// 定义一个EventEmitter子类\\nfunction User(name){\\n   EventEmitter.call(this);\\n   this._name = name;\\n}\\n\\ninherits(User,EventEmitter);\\n\\nUser.prototype.changeName = function(name){\\n    this._name = name;\\n    // 激发change name事件\\n    this.emit(\\\"change name\\\",name);\\n}\\n\\n// 创建一个User对象\\nvar me = new User(\\\"leo\\\");\\nme.on(\\\"change name\\\",function(newName){\\n    console.log(\\\"名字被改成成 ---&gt; \\\" + newName);\\n});\\n\\nme.changeName(\\\"brighthas\\\");\\nUser类继承了EventEmitter，changeName被调用后，通过emit激发change name事件。后面创建一个User对象me，通过me.on方法添加一个change name事件的监听器，后面调用me.changeName方法后，激发了change name事件，从而调用了监听器，打印出：\\n名字被改成成 ---&gt; brighthas\\n下面详细分析一下EventEmitter对象所具备的方法。\\n添加监听器\\nemitter.addListener(event, listener) 和 emitter.on(event, listener) 方法写法不同而已，都是向emitter对象添加监听器，event是事件名称，listener是监听器函数。\\ngoogogemitter.once(event, listener) 和 emitter.on 用法一致，区别是添加的监听器只监听一次，如果第二次发生同样事件，事件监听器将不会被执行。\\nemitter.on(\\\"event name\\\",function(arg0,arg1 ...){\\n   ...\\n})\\n监听器参数取决于emit激发事件时的赋值，emitter.emit(\\\"event name\\\",111,222,234)，那么监听器的实参arguments的值是 [111,222,333]。\\n激发事件\\n通过emitter.emit方法激发事件。emitter.emit(event, [arg1], [arg2], [...])\\n删除事件监听器\\n通过emitter.removeListener(event, listener)方法，可以删除event事件的listener监听器，看如下代码。\\nvar EventEmitter = \\n    require(\\\"events\\\").EventEmitter,\\n    inherits = require(\\\"util\\\").inherits;\\n    // 定义一个EventEmitter子类 \\n    function User(name){   \\n    EventEmitter.call(this);   \\n    this._name = name; \\n    }\\ninherits(User,EventEmitter);\\nUser.prototype.changeName = function(name){    \\nthis._name = name;    // 激发change name事件    \\nthis.emit(\\\"change name\\\",name); \\n}\\n// 创建一个User对象 var me = new User(\\\"leo\\\");\\n// 第一个监听器 \\nfunction handle1(name){    \\nconsole.log(\\\"handle1 --- &gt; 新名字：\\\"+name); \\n}\\n// 第二个监听器 \\nfunction handle2(name){    \\nconsole.log(\\\"handle2 --- &gt; 新名字：\\\"+name); \\n}\\nme.on(\\\"change name\\\",handle1); me.on(\\\"change name\\\",handle2);\\nme.changeName(\\\"brighthas\\\");\\n\\n\\n这个代码结果是：\\nhandle1 --- &gt; 新名字：brighthas\\nhandle2 --- &gt; 新名字：brighthas\\n如果把代码改一下，在 me.on(\\\"change name\\\",handle2); 之后加上一行代码，在执行看看效果。\\n...\\nme.on(\\\"change name\\\",handle1);\\nme.on(\\\"change name\\\",handle2);\\n\\n// 新添加的代码\\nme.removeListener(\\\"change name\\\",handle1);\\n\\nme.changeName(\\\"brighthas\\\");\\n执行结果：\\nhandle2 --- &gt; 新名字：brighthas\\n通过me.removeListener(\\\"change name\\\",handle1) 这行代码删除了change name 事件的handle1监听器，这样当激发change name 事件时，只有handle2监听器被执行。\\nemitter.removeAllListeners([event]) 如果这个方法的 event 参数没有指定那个事件，那么将会删除emitter对象内的全部事件监听器。如果指定了事件名称，那么会删除这个事件全部的监听器。\\nemitter.listeners(event)\\n这个方法是返回指定事件的全部监听器。\\nemitter.setMaxListeners(n)\\n这个是设置针对一个事件最多能添加多少监听器，默认是10。 如果超过这个值会有警告提示，程序还是会照常运行。\\n以上是对象方法，下面介绍一下类方法。\\nEventEmitter.listenerCount(emitter, event)\\n这个类方法可以得到emitter的event事件的监听器数量。\\nemitter本身发出的事件\\nnewListener事件，当通过 emitter.on / emitter.once 添加监听器时会触发该事件。\\nremoveListener 事件，当通过 emitter.removeAllListeners / emitter.removeListener 删除监听器时会触发该事件。\\n看下面代码：\\nvar EventEmitter = \\n    require(\\\"events\\\").EventEmitter,\\n    inherits = require(\\\"util\\\").inherits;\\n\\n// 定义一个EventEmitter子类\\nfunction User(name){\\n   EventEmitter.call(this);\\n   this._name = name;\\n}\\n\\ninherits(User,EventEmitter);\\n\\nUser.prototype.changeName = function(name){\\n    this._name = name;\\n    // 激发change name事件\\n    this.emit(\\\"change name\\\",name);\\n}\\n\\n// 创建一个User对象\\nvar me = new User(\\\"leo\\\");\\n\\n// 第一个监听器\\nfunction handle1(name){\\n    console.log(\\\"handle1 --- &gt; 新名字：\\\"+name);\\n}\\n\\n// 第二个监听器\\nfunction handle2(name){\\n    console.log(\\\"handle2 --- &gt; 新名字：\\\"+name);\\n}\\n\\n// 添加 newListener事件监听\\nme.on(\\\"newListener\\\",function(event,listener){\\n    console.log(event + \\\"事件添加了一个监听器\\\")\\n})\\n\\n// 添加 removeListener事件监听器\\nme.on(\\\"removeListener\\\",function(event,listener){\\n    console.log(event+\\\"事件删除了一个监听器\\\");\\n})\\n\\nme.on(\\\"change name\\\",handle1);\\nme.on(\\\"change name\\\",handle2);\\n// 删除全部事件监听器\\nme.removeAllListeners();\\nme.changeName(\\\"brighthas\\\");\\n打印结果：\\nremoveListener事件添加了一个监听器\\nchange name事件添加了一个监听器\\nchange name事件添加了一个监听器\\nnewListener事件删除了一个监听器\\nchange name事件删除了一个监听器\\nchange name事件删除了一个监听器\\n【小结】\\n这里要说明的是，很多人会把并发 I/O非阻塞 等概念和事件概念有混淆，至少是部分混淆，其实毫无关系。事件也不能决定是异步还是同步，这个取决于底层。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444890204000.jpg','2015-08-23 14:17:34','2020-08-20 15:44:25'),(311,'Get与Post方法请求——发布0.0.2版本','发布0.0.2版本','2','1','','版本发布','2',NULL,'','先把发布到npmjs上，然后再发布到github上，最后生成tag版本标签，再次上传tag版本标签到github。','1','','','0:01',762,'2','0',NULL,0,'0',223538,'<h3>发布0.0.2版本</h3><p>先把发布到npmjs上，然后再发布到github上，最后生成tag版本标签，再次上传tag版本标签到github。</p><hr/><h4 id=\"-npmjs\">上传到npmjs</h4><ul class=\" list-paddingleft-2\"><li><p>npm init</p></li><li><p>npm publish</p></li></ul><hr/><h4 id=\"-github\">上传到github</h4><ul class=\" list-paddingleft-2\"><li><p>git add .</p></li><li><p>git commit -am &quot;add get/post methods. &quot;</p></li><li><p>git push</p></li></ul><hr/><h4 id=\"-tag0-0-2-github\">上传tag0.0.2版本标签到github</h4><ul class=\" list-paddingleft-2\"><li><p>运行 <code>git tag -a 0.0.2 -m &quot;publish version 0.0.2&quot;</code> 这条命令创建一个版本0.0.2</p></li><li><p>然后运行 <code>git push --tags</code> &nbsp;上传版本到github。</p></li></ul><p>版本的概念很有用，可以在适当的时候把项目资源恢复到指定版本的状态。npm的版本概念可以让使用者通过 <code>npm install stuwebfk@0.0.1</code> 使用指定版本。<span class=\"invade-word\">googog</span></p><p>今天的任务就这些，我们把get和post分别让两个处理器进行处理，这是一个好的进步，不过这还不够，明天我们将会让stuwebfk具有路由功能。希望你手工自己实际操作一遍，实际的去做，才能有所收获。<span class=\"invade-word\">sex</span></p><p>明天很值得期待！</p>','[{\"type\":\"contents\",\"content\":\"发布0.0.2版本\\n先把发布到npmjs上，然后再发布到github上，最后生成tag版本标签，再次上传tag版本标签到github。\\n上传到npmjs\\nnpm init\\nnpm publish\\n\\n上传到github\\ngit add .\\ngit commit -am \\\"add get/post methods. \\\"\\ngit push\\n\\n上传tag0.0.2版本标签到github\\n运行 git tag -a 0.0.2 -m \\\"publish version 0.0.2\\\" 这条命令创建一个版本0.0.2\\n然后运行 git push --tags  上传版本到github。\\n\\n版本的概念很有用，可以在适当的时候把项目资源恢复到指定版本的状态。npm的版本概念可以让使用者通过 npm install stuwebfk@0.0.1 使用指定版本。googog\\n今天的任务就这些，我们把get和post分别让两个处理器进行处理，这是一个好的进步，不过这还不够，明天我们将会让stuwebfk具有路由功能。希望你手工自己实际操作一遍，实际的去做，才能有所收获。sex\\n明天很值得期待！\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444892266000.jpg','2015-09-20 10:47:05','2020-08-20 15:44:24'),(312,'Express 4.8.x—路由权限控制技巧','路由权限控制技巧','2','1','','路由权限','2',NULL,'','下面是个例子：路由文件 router/user.js','1','','','0:01',762,'2','0',NULL,0,'0',226372,'<h3>路由权限控制技巧</h3><p>下面是个例子：</p><p>路由文件 <code>router/user.js</code></p><pre>var&nbsp;router&nbsp;=&nbsp;require(“express”).Router();\n\nrouter.get(“/create”,function(req,res){\nres.send(“create&nbsp;user”);\n})\n\nmodule.exports&nbsp;=&nbsp;router;</pre><p>服务器文件 <code>server.js</code></p><pre>var&nbsp;app&nbsp;=&nbsp;require(“express”)();\n\n//&nbsp;加入路由\napp.use(“/user”,require(“./router/user”));\n\napp.listen(3000);</pre><p>运行服务器后，我们访问，浏览器会出现 “create user” ，如果我们要加入验证，可以修改 user.js 文件：</p><pre>var&nbsp;router&nbsp;=&nbsp;require(“express”).Router();\n\nrouter.get(“/create”,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;if(req.query.name&nbsp;===&nbsp;“leo”){\n&nbsp;&nbsp;&nbsp;res.send(“create&nbsp;user”);\n}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.send(“error!”);\n}\n})\n\nmodule.exports&nbsp;=&nbsp;router;</pre><p>这种方式好吗？答案是还可以，不过还有更好的办法，如果我们能做到逻辑和验证彻底分离那就更好了！</p><p>我们创建一个 <code>validat.js</code> 验证文件：</p><pre>var&nbsp;router&nbsp;=&nbsp;require(“express”).Router();\n\nrouter.get(“/create”,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;if(req.query.name&nbsp;===&nbsp;“leo”){\n&nbsp;&nbsp;&nbsp;next();\n}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.send(“error!”);\n}\n})\n\nmodule.exports&nbsp;=&nbsp;router;</pre><p>再修改一下 <code>server.js</code> 文件：</p><pre>var&nbsp;app&nbsp;=&nbsp;require(“express”)();\n\n//&nbsp;加入验证器\napp.use(“/user”,require(“./validat”));\n\n//&nbsp;加入路由\napp.use(“/user”,require(“./router/user”));\n\napp.listen(3000);</pre><p>当有请求访问 <code>/user/create</code> 的时候，会先走验证器，验证器如果调用 <code>next()</code> 方法，才会进入 <code>/router/user</code>的路由处理器。</p>','[{\"type\":\"contents\",\"content\":\"路由权限控制技巧\\n下面是个例子：\\n路由文件 router/user.js\\nvar router = require(“express”).Router();\\n\\nrouter.get(“/create”,function(req,res){\\nres.send(“create user”);\\n})\\n\\nmodule.exports = router;\\n服务器文件 server.js\\nvar app = require(“express”)();\\n\\n// 加入路由\\napp.use(“/user”,require(“./router/user”));\\n\\napp.listen(3000);\\n运行服务器后，我们访问，浏览器会出现 “create user” ，如果我们要加入验证，可以修改 user.js 文件：\\nvar router = require(“express”).Router();\\n\\nrouter.get(“/create”,function(req,res){\\n    if(req.query.name === “leo”){\\n   res.send(“create user”);\\n}else{\\n       res.send(“error!”);\\n}\\n})\\n\\nmodule.exports = router;\\n这种方式好吗？答案是还可以，不过还有更好的办法，如果我们能做到逻辑和验证彻底分离那就更好了！\\n我们创建一个 validat.js 验证文件：\\nvar router = require(“express”).Router();\\n\\nrouter.get(“/create”,function(req,res,next){\\n    if(req.query.name === “leo”){\\n   next();\\n}else{\\n       res.send(“error!”);\\n}\\n})\\n\\nmodule.exports = router;\\n再修改一下 server.js 文件：\\nvar app = require(“express”)();\\n\\n// 加入验证器\\napp.use(“/user”,require(“./validat”));\\n\\n// 加入路由\\napp.use(“/user”,require(“./router/user”));\\n\\napp.listen(3000);\\n当有请求访问 /user/create 的时候，会先走验证器，验证器如果调用 next() 方法，才会进入 /router/user的路由处理器。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445059120000.jpg','2015-10-17 05:19:34','2020-08-20 15:44:22'),(313,'第7天Post方法与上传','第7天 post方法与上传','2','1','','Post方法','2',NULL,'','今天是个有趣、挑战的开发日，因为我们要让stuwebfk具有，获得大数据请求参数，和上传功能。听起来很兴奋和具有挑战性，这也是开发人员的乐趣和成就感的所在。','1','','','0:01',762,'2','0',NULL,0,'0',222920,'<h3>第7天 post方法与上传</h3><p>今天是个有趣、挑战的开发日，因为我们要让stuwebfk具有，获得大数据请求参数，和上传功能。听起来很兴奋和具有挑战性，这也是开发人员的乐趣和成就感的所在。</p><p>今天要研究http的post方法请求的原理，然后通过几个测试程序进行一些深入研究，获得一些数据和经验后，就要着手开发一个post.js中间件。让框架具有req.body属性。</p><p>开发完post.js中间件之后，接下来研究接收上传数据的原理，上传必须是post方法请求，但和纯粹的post方法请求还有些差别，弄明白这些后，要扩展post.js插件，让框架具有req.files属性。</p><p>好，开始具有挑战的开发吧！</p>','[{\"type\":\"contents\",\"content\":\"第7天 post方法与上传\\n今天是个有趣、挑战的开发日，因为我们要让stuwebfk具有，获得大数据请求参数，和上传功能。听起来很兴奋和具有挑战性，这也是开发人员的乐趣和成就感的所在。\\n今天要研究http的post方法请求的原理，然后通过几个测试程序进行一些深入研究，获得一些数据和经验后，就要着手开发一个post.js中间件。让框架具有req.body属性。\\n开发完post.js中间件之后，接下来研究接收上传数据的原理，上传必须是post方法请求，但和纯粹的post方法请求还有些差别，弄明白这些后，要扩展post.js插件，让框架具有req.files属性。\\n好，开始具有挑战的开发吧！\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444981230000.jpg','2015-10-16 07:41:07','2020-08-20 15:44:23'),(314,'找工作。。。','找工作。。。','1','1','','找工作','2',NULL,'','最近失业了，失业的很狼狈，找了几天的工作。突然觉得要学的还有很多很多，在大牛面前还只是个小菜鸟。','1','','','0:01',762,'2','0',NULL,0,'0',224916,'<p style=\"text-align: center;\"><img alt=\"zf.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_25_20_15_25_231_1004.jpg\" title=\"\"/></p><p><br/></p><p>最近失业了，失业的狠狼狈，找了几天的工作。突然觉得要学的还有很多很多，在大牛面前还只是个小菜鸟。</p><p>笔试题居然没看明白题目是啥意思，确实知识面不够广啊！！</p><p>badjs ? 压根没用过啊</p><p>app 上监听js？我也只是听过，也没实操过，因为大多都是在做h5和浏览器端的js调试<br/></p><p>去迅雷也是，给了三页js编程题，翻了一遍知道这事恐怕要黄了，搞笑的是面试官居然不知道我要面试的是node全栈，又出了一个最简单的冒泡排序让我写。写完了就说“考虑下”。 是你考虑下还是让我考虑下？薪资期望都没问，我也是醉了。迅雷出来，抽了根烟，心里想，就这样吧。。。</p><p><br/></p><p>有时候觉着面试就想相亲，条件好的看不上你，条件不好的，你又纠结要不要去，其实合适的才是最好的，人家看着你顺眼，你看着也心动，这事儿就成了！<br/></p><p>DoraCMS还会继续更新，等工作稳定下来吧。我觉得还需要补充更多的营养再继续，加油吧<img src=\"http://img.baidu.com/hi/face/i_f32.gif\"/></p><p><br/></p>','[{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_25_20_15_25_231_1004.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n最近失业了，失业的狠狼狈，找了几天的工作。突然觉得要学的还有很多很多，在大牛面前还只是个小菜鸟。\\n笔试题居然没看明白题目是啥意思，确实知识面不够广啊！！\\nbadjs ? 压根没用过啊\\napp 上监听js？我也只是听过，也没实操过，因为大多都是在做h5和浏览器端的js调试\\n去迅雷也是，给了三页js编程题，翻了一遍知道这事恐怕要黄了，搞笑的是面试官居然不知道我要面试的是node全栈，又出了一个最简单的冒泡排序让我写。写完了就说“考虑下”。 是你考虑下还是让我考虑下？薪资期望都没问，我也是醉了。迅雷出来，抽了根烟，心里想，就这样吧。。。\\n\\n有时候觉着面试就想相亲，条件好的看不上你，条件不好的，你又纠结要不要去，其实合适的才是最好的，人家看着你顺眼，你看着也心动，这事儿就成了！\\nDoraCMS还会继续更新，等工作稳定下来吧。我觉得还需要补充更多的营养再继续，加油吧\"},{\"type\":\"image\",\"content\":\"http://img.baidu.com/hi/face/i_f32.gif\"},{\"type\":\"contents\",\"content\":\"\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20160125201052.jpg','2016-01-25 12:21:38','2020-08-20 15:44:11'),(315,'nodeJs基础教程系列(6)——Promise 模式的Q库','nodeJs基础教程系列(6)','1','1','','nodeJS','2',NULL,'','Promise是一种让异步代码书写起来更舒服、更可控、优雅的模式，能够让异步操作代码像同步代码那样书写并且阅读。Q库可运行中node.js环境下，它是Promise模式的实现，下面我们来介绍它。','1','','','0:01',762,'2','0',NULL,0,'0',224988,'<h3>Promise 模式的Q库</h3><p>Promise是一种让异步代码书写起来更舒服、更可控、优雅的模式，能够让异步操作代码像同步代码那样书写并且阅读。</p><p>Q库可运行中node.js环境下，它是Promise模式的实现，下面我们来介绍它。</p><p>通过 <code>npm i q</code> 安装Q库。</p><p>下面是采用回调的方式编写：</p><pre>var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\n\nfs.readdir(&quot;.&quot;,function(err,rs){\n&nbsp;&nbsp;&nbsp;&nbsp;fs.readFile(rs[0],function(err,f1){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(f1);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fs.readFile(rs[1],function(err,f2){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(f2);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fs.readFile(rs[2],function(err,f3){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(f3);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n&nbsp;&nbsp;&nbsp;&nbsp;})\n})</pre><p>这段代码的意思是，查看当前目录下有多少文件，然后逐个读取，把读取的数据打印到终端，可笑的是，你还必须要知道到底有几个文件，如果我知道有3个，就调用三次 readFile异步函数，如果1000个，那就要......&nbsp;</p><p>那么，采用Q库如何改善呢？</p><pre>//&nbsp;导入q库\nvar&nbsp;Q&nbsp;=&nbsp;require(&quot;q&quot;),fs&nbsp;=&nbsp;require(&quot;fs&quot;);\n\nQ.nfcall(fs.readdir,&nbsp;&quot;.&quot;).then(function(ns){\n\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;promises&nbsp;=&nbsp;[];\n\n&nbsp;&nbsp;&nbsp;&nbsp;ns.forEach(function(filename){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;promises.push(Q.nfcall(fs.readFile,&nbsp;filename,&quot;utf8&quot;));\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;&nbsp;Q.all(promises).then(function(results){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(results);\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n})</pre><p>通过<code>Q.nfcall</code> 方法调用异步函数，返回一个 <code>promise</code>对象，<code>promise</code>对象具有一个方法<code>then</code> ，可以得到运行结果。</p><p>这里的 <code>var promises = [];</code> 变量用于储存promise数组，把这个参数加入<code>Q.all</code>方法里，会得到一个promise对象，调用then方法会得到一个数组，这个数组就是所有 promises的运行结果。</p><p>一切都围绕<code>promise对象</code>，它有一个then方法用于返回回调函数结果，还有一个<code>fail</code> 函数，用于返回异常对象，then 和 fail 不会同时被调用，就好比一个普通函数，如果抛出异常就不会有返回值一样。</p><p>举例，修改之前代码：</p><pre>var&nbsp;Q&nbsp;=&nbsp;require(&quot;q&quot;),fs&nbsp;=&nbsp;require(&quot;fs&quot;);\n\nQ.nfcall(fs.readdir,&nbsp;&quot;no&nbsp;path&quot;)\n\n.then(function(ns){\n\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;promises&nbsp;=&nbsp;[];\n\n&nbsp;&nbsp;&nbsp;&nbsp;ns.forEach(function(filename){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;promises.push(Q.nfcall(fs.readFile,&nbsp;filename,&quot;utf8&quot;));\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;&nbsp;Q.all(promises).then(function(results){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(results);\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n})\n\n.fail(function(err){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(err);\n})</pre><p>运行结果是：</p><pre>{&nbsp;[Error:&nbsp;ENOENT,&nbsp;readdir&nbsp;&#39;no&nbsp;path&#39;]\n&nbsp;&nbsp;stack:&nbsp;&#39;Error:&nbsp;ENOENT,&nbsp;readdir&nbsp;\\&#39;no&nbsp;path\\&#39;\\n&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;Error&nbsp;(native)&#39;,\n&nbsp;&nbsp;errno:&nbsp;-2,\n&nbsp;&nbsp;code:&nbsp;&#39;ENOENT&#39;,\n&nbsp;&nbsp;path:&nbsp;&#39;no&nbsp;path&#39;&nbsp;}</pre><p>说明调用的是 fail函数，而不是then，说明 then 代表无异常情况下的返回值，fail表示抛出的异常，如果过程中有任何异常，promise.then 的函数都不会被调用，而是会调用fail，表示抛出异常。</p><p>详细API可参看 <a href=\"http://documentup.com/kriskowal/q/\">http://documentup.com/kriskowal/q/</a> &nbsp;有任何问题可在线提问。</p>','[{\"type\":\"contents\",\"content\":\"Promise 模式的Q库\\nPromise是一种让异步代码书写起来更舒服、更可控、优雅的模式，能够让异步操作代码像同步代码那样书写并且阅读。\\nQ库可运行中node.js环境下，它是Promise模式的实现，下面我们来介绍它。\\n通过 npm i q 安装Q库。\\n下面是采用回调的方式编写：\\nvar fs = require(\\\"fs\\\");\\n\\nfs.readdir(\\\".\\\",function(err,rs){\\n    fs.readFile(rs[0],function(err,f1){\\n        console.log(f1);\\n        fs.readFile(rs[1],function(err,f2){\\n            console.log(f2);\\n            fs.readFile(rs[2],function(err,f3){\\n                console.log(f3);\\n            })\\n        })\\n    })\\n})\\n这段代码的意思是，查看当前目录下有多少文件，然后逐个读取，把读取的数据打印到终端，可笑的是，你还必须要知道到底有几个文件，如果我知道有3个，就调用三次 readFile异步函数，如果1000个，那就要...... \\n那么，采用Q库如何改善呢？\\n// 导入q库\\nvar Q = require(\\\"q\\\"),fs = require(\\\"fs\\\");\\n\\nQ.nfcall(fs.readdir, \\\".\\\").then(function(ns){\\n\\n    var promises = [];\\n\\n    ns.forEach(function(filename){\\n        promises.push(Q.nfcall(fs.readFile, filename,\\\"utf8\\\"));\\n    })\\n\\n    Q.all(promises).then(function(results){\\n        console.log(results);\\n    })\\n\\n})\\n通过Q.nfcall 方法调用异步函数，返回一个 promise对象，promise对象具有一个方法then ，可以得到运行结果。\\n这里的 var promises = []; 变量用于储存promise数组，把这个参数加入Q.all方法里，会得到一个promise对象，调用then方法会得到一个数组，这个数组就是所有 promises的运行结果。\\n一切都围绕promise对象，它有一个then方法用于返回回调函数结果，还有一个fail 函数，用于返回异常对象，then 和 fail 不会同时被调用，就好比一个普通函数，如果抛出异常就不会有返回值一样。\\n举例，修改之前代码：\\nvar Q = require(\\\"q\\\"),fs = require(\\\"fs\\\");\\n\\nQ.nfcall(fs.readdir, \\\"no path\\\")\\n\\n.then(function(ns){\\n\\n    var promises = [];\\n\\n    ns.forEach(function(filename){\\n        promises.push(Q.nfcall(fs.readFile, filename,\\\"utf8\\\"));\\n    })\\n\\n    Q.all(promises).then(function(results){\\n        console.log(results);\\n    })\\n\\n})\\n\\n.fail(function(err){\\n        console.log(err);\\n})\\n运行结果是：\\n{ [Error: ENOENT, readdir \'no path\']\\n  stack: \'Error: ENOENT, readdir \\\\\'no path\\\\\'\\\\n    at Error (native)\',\\n  errno: -2,\\n  code: \'ENOENT\',\\n  path: \'no path\' }\\n说明调用的是 fail函数，而不是then，说明 then 代表无异常情况下的返回值，fail表示抛出的异常，如果过程中有任何异常，promise.then 的函数都不会被调用，而是会调用fail，表示抛出异常。\\n详细API可参看 http://documentup.com/kriskowal/q/  有任何问题可在线提问。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1436164390000.jpg','2015-07-06 06:33:16','2020-08-20 15:44:27'),(316,'新的一年，新的开始','新的一年，新的开始','1','1','','新年快乐','2',NULL,'','跨过2015迎来2016，猴子年是不是程序猿的本命年呢？','1','','','0:01',762,'2','0',NULL,0,'0',224394,'<p style=\"text-align: center;\"><img style=\"width: 500px; height: 300px;\" alt=\"\" title=\"\" src=\"https://cdn.html-js.cn/cms/upload/images/img20160214194118.jpg\" vspace=\"0\" width=\"500\" height=\"300\" border=\"0\"/></p><p>跨过2015迎来2016，猴子年是不是程序猿的本命年呢？</p><p>2015经历了很多，从公司出现危机到一个月不发工资，2个月，3个月，4个月。和同事们一直坚持到最后，大家都为着自己的梦想，说实话，很开心和一群优秀的战友一起共事，资深的程序猿其实跳槽很容易，但是不发工资坚持做的能有多少呢，至少到现在，我也不为当初的决定后悔，虽然现在一分钱都没拿到。。。</p><p>2016新的一年，我要做的，还是坚持学习。互联网技术更新迭代的太快，跟随时代的步伐才能了解更多，大牛也不是一蹴而就的，找准方向继续努力吧！</p><p>另外，祝广大的前端开发童鞋们猴年大吉，新的一年有更多收获<img src=\"http://img.baidu.com/hi/face/i_f30.gif\"/></p>','[{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/img20160214194118.jpg\"},{\"type\":\"contents\",\"content\":\"\\n跨过2015迎来2016，猴子年是不是程序猿的本命年呢？\\n2015经历了很多，从公司出现危机到一个月不发工资，2个月，3个月，4个月。和同事们一直坚持到最后，大家都为着自己的梦想，说实话，很开心和一群优秀的战友一起共事，资深的程序猿其实跳槽很容易，但是不发工资坚持做的能有多少呢，至少到现在，我也不为当初的决定后悔，虽然现在一分钱都没拿到。。。\\n2016新的一年，我要做的，还是坚持学习。互联网技术更新迭代的太快，跟随时代的步伐才能了解更多，大牛也不是一蹴而就的，找准方向继续努力吧！\\n另外，祝广大的前端开发童鞋们猴年大吉，新的一年有更多收获\"},{\"type\":\"image\",\"content\":\"http://img.baidu.com/hi/face/i_f30.gif\"},{\"type\":\"contents\",\"content\":\"\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20160214194118.jpg','2016-02-14 11:53:03','2020-08-20 15:44:11'),(317,'我错了！关于DoraCMS报诸如cannot find module ###\'ms\'类的问题','关于DoraCMS报错的问题','1','1','','依赖包报错','2',NULL,'','关于很多兄弟运行DoraCMS报诸如cannot find module ###\'ms\'类的问题，我这两天专门在看这个，装虚拟机，装各种版本node，用最新代码去运行，各种折腾，终于发现还是自己错了','1','','','0:01',762,'2','0',NULL,1,'0',223294,'<ul class=\" list-paddingleft-2\"><li><p>关于很多兄弟运行DoraCMS报诸如cannot find module \n###&#39;ms&#39;类的问题，我这两天专门在看这个，装虚拟机，装各种版本node，用最新代码去运行，各种折腾，终于发现还是自己错了，依赖包居然不全，太\n大意了，合代码的时候估计漏了而每次合功能代码也没有对比依赖包里的东西，本能的以为是没新增就没变动，好了，重新删除又重新上传了，有任何疑问，请\nissue me ,万分抱歉，耽误了大伙宝贵的时间，拿钱包重重的砸我吧！</p></li></ul><p><br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 后面会继续完善，希望遇到问题的兄弟及时反馈，我们一起解决&nbsp;</p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"关于很多兄弟运行DoraCMS报诸如cannot find module ###\'ms\'类的问题，我这两天专门在看这个，装虚拟机，装各种版本node，用最新代码去运行，各种折腾，终于发现还是自己错了，依赖包居然不全，太大意了，合代码的时候估计漏了而每次合功能代码也没有对比依赖包里的东西，本能的以为是没新增就没变动，好了，重新删除又重新上传了，有任何疑问，请issue me ,万分抱歉，耽误了大伙宝贵的时间，拿钱包重重的砸我吧！\\n\\n\\n      后面会继续完善，希望遇到问题的兄弟及时反馈，我们一起解决 \\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444894774000.jpg','2015-09-25 03:04:11','2020-08-20 15:44:24'),(318,'移动端组件——提示窗（tips）','','1','plug','','doraPlug—tips','2',NULL,'','基于Jquery响应式tip组件，适合移动端应用。主要针对用户在操作过程中的界面提示信息，出现3s后自动消失','1','','','0:01',762,'2','0',NULL,0,'0',223514,'<p style=\"white-space: normal;\">&nbsp; 基于Jquery响应式tip组件，适合移动端应用。主要针对用户在操作过程中的界面提示信息，出现3s后自动消失。</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">&nbsp; &nbsp;需要引用的文件：&nbsp;</p><pre class=\"brush:js;toolbar:false\">&lt;script&nbsp;src=&quot;js/jquery-1.10.2.min.js&quot;&gt;&lt;/script&gt;\n&lt;link&nbsp;rel=&quot;stylesheet&quot;&nbsp;href=&quot;css/dora.css&quot;/&gt;\n&lt;script&nbsp;src=&quot;js/dora.js&quot;&gt;&lt;/script&gt;</pre><p style=\"white-space: normal;\">注意：</p><p style=\"white-space: normal;\">1、jquery是基础文件</p><p style=\"white-space: normal;\">2、dora.css 是组件相关样式</p><p style=\"white-space: normal;\">3、dora.js 是组件所涉及到的js<br/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">使用方法：<br/></p><pre class=\"brush:js;toolbar:false\">$(&#39;#tipsMe&#39;).click(function(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$.tipsShow({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;overClass&nbsp;:&nbsp;&#39;tips-b&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;message&nbsp;:&nbsp;&#39;操作有误，请重试&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type&nbsp;:&nbsp;&#39;danger&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callBack&nbsp;:&nbsp;function(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(&#39;提示解除&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})</pre><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">示例：</p><pre class=\"brush:js;toolbar:false\">&lt;script&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;$(function(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;#tipsMe&#39;).click(function(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$.tipsShow({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;overClass&nbsp;:&nbsp;&#39;tips-b&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;message&nbsp;:&nbsp;&#39;操作有误，请重试&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type&nbsp;:&nbsp;&#39;danger&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callBack&nbsp;:&nbsp;function(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(&#39;提示解除&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n&nbsp;&nbsp;&nbsp;&nbsp;})\n&lt;/script&gt;\n&lt;body&gt;\n&lt;h3&gt;约定信息提示状态划分为4种：&lt;/h3&gt;\n&lt;ol&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;提示：info&lt;/li&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;成功：success&lt;/li&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;危险：danger&lt;/li&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;警告：warning&lt;/li&gt;\n&lt;/ol&gt;\n&lt;br/&gt;\n&lt;hr/&gt;\n&lt;br/&gt;\n\n&lt;button&nbsp;id=&quot;tipsMe&quot;&gt;打开tips窗口&lt;/button&gt;</pre><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">参数配置：<br/></p><table interlaced=\"enabled\" align=\"left\"><tbody><tr class=\"ue-table-interlace-color-single firstRow\"><td style=\"word-break: break-all; background-color: rgb(187, 187, 187);\" align=\"center\" valign=\"top\" width=\"238\">参数<br/></td><td style=\"word-break: break-all; background-color: rgb(187, 187, 187);\" align=\"center\" valign=\"top\" width=\"238\">说明</td><td style=\"word-break: break-all; background-color: rgb(187, 187, 187);\" align=\"center\" valign=\"top\" width=\"238\">必须</td></tr><tr class=\"ue-table-interlace-color-double\"><td style=\"word-break: break-all; background-color: rgb(204, 204, 204);\" align=\"center\" valign=\"top\" width=\"238\">message</td><td style=\"word-break: break-all; background-color: rgb(204, 204, 204);\" align=\"center\" valign=\"top\" width=\"238\">传入tip提示信息，String类型</td><td style=\"word-break: break-all; background-color: rgb(204, 204, 204);\" align=\"center\" valign=\"top\" width=\"238\">是</td></tr><tr class=\"ue-table-interlace-color-single\"><td colspan=\"1\" rowspan=\"1\" style=\"word-break: break-all; background-color: rgb(187, 187, 187);\" align=\"center\" valign=\"top\">type</td><td colspan=\"1\" rowspan=\"1\" style=\"word-break: break-all; background-color: rgb(187, 187, 187);\" align=\"center\" valign=\"top\">传入提示信息类别info,success,danger,warning</td><td colspan=\"1\" rowspan=\"1\" style=\"word-break: break-all; background-color: rgb(187, 187, 187);\" align=\"center\" valign=\"top\">是</td></tr><tr class=\"ue-table-interlace-color-double\"><td style=\"word-break: break-all; background-color: rgb(204, 204, 204);\" align=\"center\" valign=\"top\" width=\"238\">overClass</td><td style=\"word-break: break-all; background-color: rgb(204, 204, 204);\" align=\"center\" valign=\"top\" width=\"238\">重写弹框样式</td><td style=\"word-break: break-all; background-color: rgb(204, 204, 204);\" align=\"center\" valign=\"top\" width=\"238\">否</td></tr><tr class=\"ue-table-interlace-color-single\"><td colspan=\"1\" rowspan=\"1\" style=\"word-break: break-all; background-color: rgb(187, 187, 187);\" align=\"center\" valign=\"top\">callBack</td><td colspan=\"1\" rowspan=\"1\" style=\"word-break: break-all; background-color: rgb(187, 187, 187);\" align=\"center\" valign=\"top\">提示信息消失后的回调函数</td><td colspan=\"1\" rowspan=\"1\" style=\"word-break: break-all; background-color: rgb(187, 187, 187);\" align=\"center\" valign=\"top\">否</td></tr></tbody></table><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">功能方法接口：</p><p style=\"white-space: normal;\"><br/></p><table interlaced=\"enabled\"><tbody><tr class=\"ue-table-interlace-color-single firstRow\"><td style=\"word-break: break-all; background-color: rgb(187, 187, 187);\" align=\"center\" valign=\"top\" width=\"239\">方法名<br/></td><td style=\"word-break: break-all; background-color: rgb(187, 187, 187);\" align=\"center\" valign=\"top\" width=\"239\">使用示例<br/></td><td style=\"word-break: break-all; background-color: rgb(187, 187, 187);\" align=\"center\" valign=\"top\" width=\"239\">说明<br/></td></tr><tr class=\"ue-table-interlace-color-double\"><td style=\"word-break: break-all; background-color: rgb(204, 204, 204);\" align=\"center\" valign=\"top\" width=\"239\">tipsHide</td><td style=\"word-break: break-all; background-color: rgb(204, 204, 204);\" align=\"center\" valign=\"top\" width=\"239\">$.tipsHide();</td><td style=\"word-break: break-all; background-color: rgb(204, 204, 204);\" align=\"center\" valign=\"top\" width=\"239\">关闭提示<br/><br/></td></tr></tbody></table><p><br/></p>','[{\"type\":\"contents\",\"content\":\"  基于Jquery响应式tip组件，适合移动端应用。主要针对用户在操作过程中的界面提示信息，出现3s后自动消失。\\n\\n   需要引用的文件： \\n&lt;script src=\\\"js/jquery-1.10.2.min.js\\\"&gt;&lt;/script&gt;\\n&lt;link rel=\\\"stylesheet\\\" href=\\\"css/dora.css\\\"/&gt;\\n&lt;script src=\\\"js/dora.js\\\"&gt;&lt;/script&gt;\\n注意：\\n1、jquery是基础文件\\n2、dora.css 是组件相关样式\\n3、dora.js 是组件所涉及到的js\\n\\n使用方法：\\n$(\'#tipsMe\').click(function(){\\n            $.tipsShow({\\n                overClass : \'tips-b\',\\n                message : \'操作有误，请重试\',\\n                type : \'danger\',\\n                callBack : function(){\\n                    alert(\'提示解除\');\\n                }\\n            });\\n        })\\n\\n示例：\\n&lt;script&gt;\\n    $(function(){\\n        $(\'#tipsMe\').click(function(){\\n            $.tipsShow({\\n                overClass : \'tips-b\',\\n                message : \'操作有误，请重试\',\\n                type : \'danger\',\\n                callBack : function(){\\n                    alert(\'提示解除\');\\n                }\\n            });\\n        })\\n    })\\n&lt;/script&gt;\\n&lt;body&gt;\\n&lt;h3&gt;约定信息提示状态划分为4种：&lt;/h3&gt;\\n&lt;ol&gt;\\n    &lt;li&gt;提示：info&lt;/li&gt;\\n    &lt;li&gt;成功：success&lt;/li&gt;\\n    &lt;li&gt;危险：danger&lt;/li&gt;\\n    &lt;li&gt;警告：warning&lt;/li&gt;\\n&lt;/ol&gt;\\n&lt;br/&gt;\\n&lt;hr/&gt;\\n&lt;br/&gt;\\n\\n&lt;button id=\\\"tipsMe\\\"&gt;打开tips窗口&lt;/button&gt;\\n\\n参数配置：\\n参数\\n说明必须message传入tip提示信息，String类型是type传入提示信息类别info,success,danger,warning是overClass重写弹框样式否callBack提示信息消失后的回调函数否\\n\\n\\n\\n\\n\\n\\n功能方法接口：\\n\\n方法名\\n使用示例\\n说明\\ntipsHide$.tipsHide();关闭提示\\n\\n\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1447651204000.jpg','2015-11-16 05:26:31','2020-08-20 15:44:15'),(319,'关于DoraCMS 代码结构优化','关于DoraCMS 代码结构优化','1','1','','doracms,优化','2',NULL,'','DoraCMS 刚上线受到了前端开发者的关注，但是匆匆上线也让我发现了很多问题，例如调试之前需要插入数据，很不方便，随着关注增多也暴露了很多bug，而有些bug我一直在找是什么触发的，很头疼。','1','','','0:01',762,'2','0',NULL,0,'0',223138,'<p>&nbsp;DoraCMS 刚上线受到了前端开发者的关注，但是匆匆上线也让我发现了很多问题，例如调试之前需要插入数据，很不方便，随着关注增多也暴露了很多bug，而有些bug我一直在找是什么触发的，很头疼。很多冗余代码也是初始版DoraCMS一个很大问题，有朋友也跟我提到过，在某些页面有很多当前页面用不到的js，对页面优化不利。于是针对于上述发现的种种问题，我打算重新整理下代码。<br/></p><p>&nbsp;这几天主要在一下几个方面将代码整理了一下：</p><p><br/></p><p>1、基于ejs的模板引擎让灵活的模板套用成为可能，我基本上把之前原本的界面元素剥离出来了，形成了cms的基础元素：</p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_30_10_30_19_372_1000.jpg\" title=\"\" alt=\"QQ截图20150830102938.jpg\"/></p><p><br/></p><p>这里面包含了header,footer,文档列表，热门文档，标签列表，搜索框，留言板，用户注册、用户登录、左侧导航、分页等基础模块剥离出来，例如分页模块：</p><pre class=\"brush:js;toolbar:false\">&lt;!--分页模块--&gt;\n&lt;div&nbsp;class=&quot;pagenation&nbsp;text-center&quot;&nbsp;ng-controller=&quot;pagenation&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&nbsp;ng-class=&quot;{true:&#39;hide&#39;}[currentPage==1]&quot;&gt;&lt;a&nbsp;href=&quot;javascript:void(0);&quot;&nbsp;ng-click=&quot;prevPage()&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&nbsp;ng-repeat=&quot;page&nbsp;in&nbsp;pages&quot;&nbsp;ng-class=&quot;{true:&#39;active&#39;}[currentPage==page]&quot;&gt;&lt;a&nbsp;href=&quot;javascript:void(0);&quot;&nbsp;ng-click=&quot;loadPage(page)&quot;&gt;{{&nbsp;page&nbsp;}}&lt;/a&gt;&lt;/li&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&nbsp;ng-class=&quot;{true:&#39;hide&#39;}[currentPage==totalPage]&quot;&gt;&lt;a&nbsp;href=&quot;javascript:void(0);&quot;&nbsp;ng-click=&quot;nextPage()&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ul&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;doraApp.controller(&quot;pagenation&quot;,function($scope,$http)&nbsp;{\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$scope.currentPage&nbsp;=&nbsp;Number(&#39;&lt;%=pageInfo.currentPage%&gt;&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$scope.totalItems&nbsp;=&nbsp;Number(&#39;&lt;%=pageInfo.totalItems%&gt;&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$scope.limit&nbsp;=&nbsp;Number(&#39;&lt;%=pageInfo.limit%&gt;&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$scope.startNum&nbsp;=&nbsp;Number(&#39;&lt;%=pageInfo.startNum%&gt;&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$scope.totalPage&nbsp;=&nbsp;Math.ceil($scope.totalItems&nbsp;/&nbsp;$scope.limit);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$scope.pages&nbsp;=&nbsp;[];\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;localUrl&nbsp;=&nbsp;&nbsp;&quot;&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;param&nbsp;=&nbsp;&quot;&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;pageType&nbsp;=&nbsp;&#39;&lt;%=pageType%&gt;&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(pageType&nbsp;==&nbsp;&#39;index&#39;){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localUrl&nbsp;=&nbsp;&nbsp;&quot;/page&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else&nbsp;if(pageType&nbsp;==&nbsp;&#39;cate&#39;){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localUrl&nbsp;=&nbsp;&nbsp;&quot;/&lt;%=cateInfo.defaultUrl%&gt;___&lt;%=cateInfo._id%&gt;&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else&nbsp;if(pageType&nbsp;==&nbsp;&#39;search&#39;){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;param&nbsp;=&nbsp;&quot;?searchKey=&lt;%=pageInfo.searchKey%&gt;&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localUrl&nbsp;=&nbsp;&nbsp;&quot;/content/searchResult/items&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initPagination($scope,$http,localUrl,param);\n&nbsp;&nbsp;&nbsp;&nbsp;})\n&lt;/script&gt;</pre><p>&nbsp;</p><p>它将作为单独模块在任意页面灵活调用，而调用页面只用这样写就可以了：</p><pre class=\"brush:js;toolbar:false\">&lt;%&nbsp;include&nbsp;public/pagination&nbsp;%&gt;</pre><p><br/></p><p>也就是说，基础模块你可以随意组装，只要后台返回指定数据集合就可以了。另外，所有基础模块都使用了最基础的html5标签，整个结构没有过于复杂的样式代码，除去bootstrap之外，样式文件只有5k（未压缩）</p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_30_10_39_45_431_1002.jpg\" title=\"\" alt=\"QQ截图20150830103833.jpg\"/></p><p>这样做的目的是让开发更加方便，灵活。模板改变的同时，后台返回数据也做了相应的优化，只返回所需要的数据，力求响应速度最快。下面是优化后的响应速度</p><p><br/></p><p><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_30_13_26_52_327_1001.jpg\" title=\"\" alt=\"QQ截图20150830132002.jpg\"/></p><p><br/></p><p>目前只对前台部分做了优化，先放上来测测性能，接下来会对后台做进一步优化。&nbsp;</p><p><br/></p>','[{\"type\":\"contents\",\"content\":\" DoraCMS 刚上线受到了前端开发者的关注，但是匆匆上线也让我发现了很多问题，例如调试之前需要插入数据，很不方便，随着关注增多也暴露了很多bug，而有些bug我一直在找是什么触发的，很头疼。很多冗余代码也是初始版DoraCMS一个很大问题，有朋友也跟我提到过，在某些页面有很多当前页面用不到的js，对页面优化不利。于是针对于上述发现的种种问题，我打算重新整理下代码。\\n 这几天主要在一下几个方面将代码整理了一下：\\n\\n1、基于ejs的模板引擎让灵活的模板套用成为可能，我基本上把之前原本的界面元素剥离出来了，形成了cms的基础元素：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_30_10_30_19_372_1000.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n这里面包含了header,footer,文档列表，热门文档，标签列表，搜索框，留言板，用户注册、用户登录、左侧导航、分页等基础模块剥离出来，例如分页模块：\\n&lt;!--分页模块--&gt;\\n&lt;div class=\\\"pagenation text-center\\\" ng-controller=\\\"pagenation\\\"&gt;\\n    &lt;ul&gt;\\n        &lt;li ng-class=\\\"{true:\'hide\'}[currentPage==1]\\\"&gt;&lt;a href=\\\"javascript:void(0);\\\" ng-click=\\\"prevPage()\\\"&gt;上一页&lt;/a&gt;&lt;/li&gt;\\n        &lt;li ng-repeat=\\\"page in pages\\\" ng-class=\\\"{true:\'active\'}[currentPage==page]\\\"&gt;&lt;a href=\\\"javascript:void(0);\\\" ng-click=\\\"loadPage(page)\\\"&gt;{{ page }}&lt;/a&gt;&lt;/li&gt;\\n        &lt;li ng-class=\\\"{true:\'hide\'}[currentPage==totalPage]\\\"&gt;&lt;a href=\\\"javascript:void(0);\\\" ng-click=\\\"nextPage()\\\"&gt;下一页&lt;/a&gt;&lt;/li&gt;\\n    &lt;/ul&gt;\\n&lt;/div&gt;\\n\\n&lt;script&gt;\\n\\n    doraApp.controller(\\\"pagenation\\\",function($scope,$http) {\\n\\n        $scope.currentPage = Number(\'&lt;%=pageInfo.currentPage%&gt;\');\\n        $scope.totalItems = Number(\'&lt;%=pageInfo.totalItems%&gt;\');\\n        $scope.limit = Number(\'&lt;%=pageInfo.limit%&gt;\');\\n        $scope.startNum = Number(\'&lt;%=pageInfo.startNum%&gt;\');\\n        $scope.totalPage = Math.ceil($scope.totalItems / $scope.limit);\\n        $scope.pages = [];\\n\\n        var localUrl =  \\\"\\\";\\n        var param = \\\"\\\";\\n        var pageType = \'&lt;%=pageType%&gt;\';\\n        if(pageType == \'index\'){\\n            localUrl =  \\\"/page\\\";\\n        }else if(pageType == \'cate\'){\\n            localUrl =  \\\"/&lt;%=cateInfo.defaultUrl%&gt;___&lt;%=cateInfo._id%&gt;\\\";\\n        }else if(pageType == \'search\'){\\n            param = \\\"?searchKey=&lt;%=pageInfo.searchKey%&gt;\\\";\\n            localUrl =  \\\"/content/searchResult/items\\\";\\n        }\\n\\n\\n        initPagination($scope,$http,localUrl,param);\\n    })\\n&lt;/script&gt;\\n\\n它将作为单独模块在任意页面灵活调用，而调用页面只用这样写就可以了：\\n&lt;% include public/pagination %&gt;\\n\\n也就是说，基础模块你可以随意组装，只要后台返回指定数据集合就可以了。另外，所有基础模块都使用了最基础的html5标签，整个结构没有过于复杂的样式代码，除去bootstrap之外，样式文件只有5k（未压缩）\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_30_10_39_45_431_1002.jpg\"},{\"type\":\"contents\",\"content\":\"\\n这样做的目的是让开发更加方便，灵活。模板改变的同时，后台返回数据也做了相应的优化，只返回所需要的数据，力求响应速度最快。下面是优化后的响应速度\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_30_13_26_52_327_1001.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n目前只对前台部分做了优化，先放上来测测性能，接下来会对后台做进一步优化。 \\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444894121000.jpg','2015-08-30 03:12:01','2020-08-20 15:44:25'),(320,'Express 4.8.x—安装和使用','Express 4.8.x—安装和使用','2','1','','express安装','2',NULL,'','安装express命令程序可运行下面命令：如果你有终极管理员权限可以运行下面命令 npm install -g express-generator','1','','','0:01',762,'2','0',NULL,0,'0',224613,'<h3>安装和使用</h3><p>安装express命令程序</p><p>安装<code>express命令程序</code>可运行下面命令：</p><p>如果你有终极管理员权限可以运行下面命令</p><pre>$&nbsp;npm&nbsp;install&nbsp;-g&nbsp;express-generator</pre><p>如果不具备可运行</p><pre>$&nbsp;sudo&nbsp;npm&nbsp;install&nbsp;-g&nbsp;express-generator</pre><p>这里说的是安装<code>express命令程序</code>，而不是express，因为我们刚才安装的并不是express库本身，而是用于生成express应用程序的工具。</p><p>安装完成后，我们可以在终端运行</p><pre>$&nbsp;express&nbsp;-V</pre><p>查看到express当前版本，到此express安装完毕。</p><p>使用express命令</p><p>运行 <code>express -h</code> 命令可得到全部参数和其说明</p><ul class=\" list-paddingleft-2\"><li><p>-V，--version输出版本号</p></li><li><p>-e，--ejs &nbsp;添加EJS引擎的支持（默认为jade）</p></li><li><p>-H, &nbsp;--hogan 添加hogan.js引擎支持</p></li><li><p>-c，--CSS &lt;引擎名&gt; 添加样式表&lt;引擎名&gt;的支持，支持的引擎有 less 、stylus 、compass（默认为纯CSS）</p></li><li><p>-f， --force 如果有同名的项目目录，就会被覆盖。</p></li></ul><p>注意参数大小写。</p><p>这里的ejs/jade/hogan.js引擎，是指动态页模版引擎。less/stylus/compass引擎，是指css模版引擎。</p><p>动态页模版引擎，之前章节已介绍过原理，这里不多说，不同的模版无非是语法不同，最终输出的都是html页面。</p><p>模版也一样，无非最终输出的是css而已。</p>','[{\"type\":\"contents\",\"content\":\"安装和使用\\n安装express命令程序\\n安装express命令程序可运行下面命令：\\n如果你有终极管理员权限可以运行下面命令\\n$ npm install -g express-generator\\n如果不具备可运行\\n$ sudo npm install -g express-generator\\n这里说的是安装express命令程序，而不是express，因为我们刚才安装的并不是express库本身，而是用于生成express应用程序的工具。\\n安装完成后，我们可以在终端运行\\n$ express -V\\n查看到express当前版本，到此express安装完毕。\\n使用express命令\\n运行 express -h 命令可得到全部参数和其说明\\n-V，--version输出版本号\\n-e，--ejs  添加EJS引擎的支持（默认为jade）\\n-H,  --hogan 添加hogan.js引擎支持\\n-c，--CSS &lt;引擎名&gt; 添加样式表&lt;引擎名&gt;的支持，支持的引擎有 less 、stylus 、compass（默认为纯CSS）\\n-f， --force 如果有同名的项目目录，就会被覆盖。\\n\\n注意参数大小写。\\n这里的ejs/jade/hogan.js引擎，是指动态页模版引擎。less/stylus/compass引擎，是指css模版引擎。\\n动态页模版引擎，之前章节已介绍过原理，这里不多说，不同的模版无非是语法不同，最终输出的都是html页面。\\n模版也一样，无非最终输出的是css而已。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445057579000.jpg','2015-10-17 04:54:53','2020-08-20 15:44:22'),(321,'第6天 路由功能——今日开发回顾','第6天 路由功能——今日开发回顾','2','1','','路由功能','2',NULL,'','数组对象有一个forEach方法，使用起来要比for方便很多。使用它时，要给他一个回调函数，内部得到一个数组值时，就会调用该回调函数，并把值和当前值的索引传递进来。','1','','','0:01',762,'2','0',NULL,0,'0',222927,'<h3>今日开发回顾</h3><p>今天出现了几个Javascript的高级用法，本节对这些用法做一下总结。</p><h5 id=\"-foreach-\">数组 forEach 方法</h5><p>数组对象有一个forEach方法，使用起来要比for方便很多。使用它时，要给他一个回调函数，内部得到一个数组值时，就会调用该回调函数，并把值和当前值的索引传递进来。下面举例说明：</p><pre>[&quot;aaa&quot;,&quot;bbb&quot;].forEach(function(v,index){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(v+&quot;---&quot;+index);\n})\n//&nbsp;打印结果是\naaa---0\nbbb---1</pre><h5 id=\"querystring-parse-\">querystring 模块的parse方法</h5><p>该模块属于node.js的核心库，该模块通过require(&quot;querystring&quot;)可以得到，它有个parse方法，可以把name=leo&amp;age=30的形式，转换为json对象的形式{name:&quot;leo&quot;,&quot;age&quot;:&quot;30&quot;}</p><h5 id=\"-replace-\">字符串对象的 replace 方法的高级用法</h5><p>今天的开发也用到了它，在<code>pathRegexp.js</code>模块中。</p><p>字符串的replace 方法接受两个参数,第一个参数为字符串或正则表达式，第一个参数同样可以接受一个字符串，还可以是一个函数。我们主要探讨，第二个参数是函数的情况。</p><p>第二个参数为函数：</p><p>在ECMAScript3推荐使用函数方式，实现于JavaScript1.2.当replace方法执行的时候每次都会调用该函数，返回值作为替换的新值。</p><p>函数参数的规定：</p><ul class=\" list-paddingleft-2\"><li><p>第一个参数为每次匹配的全文本（$&amp;）。</p></li><li><p>中间参数为子表达式匹配字符串，个数不限.( $i (i:1-99))</p></li><li><p>倒数第二个参数为匹配文本字符串的匹配下标位置。</p></li><li><p>最后一个参数表示字符串本身。</p></li></ul><hr/><p>以上是相对高级的javascript用法，简单的做一个总结，多做demo很重要，光看理论没用。</p><p>今天的开发任务就这些，还是按照惯例，把stuwebfk发布到github和npmjs上去，版本号为0.0.5。下一节把今天最新的程序代码罗列出来。就讲这么多，明天见！</p>','[{\"type\":\"contents\",\"content\":\"今日开发回顾\\n今天出现了几个Javascript的高级用法，本节对这些用法做一下总结。\\n数组 forEach 方法\\n数组对象有一个forEach方法，使用起来要比for方便很多。使用它时，要给他一个回调函数，内部得到一个数组值时，就会调用该回调函数，并把值和当前值的索引传递进来。下面举例说明：\\n[\\\"aaa\\\",\\\"bbb\\\"].forEach(function(v,index){\\n      console.log(v+\\\"---\\\"+index);\\n})\\n// 打印结果是\\naaa---0\\nbbb---1\\nquerystring 模块的parse方法\\n该模块属于node.js的核心库，该模块通过require(\\\"querystring\\\")可以得到，它有个parse方法，可以把name=leo&amp;age=30的形式，转换为json对象的形式{name:\\\"leo\\\",\\\"age\\\":\\\"30\\\"}\\n字符串对象的 replace 方法的高级用法\\n今天的开发也用到了它，在pathRegexp.js模块中。\\n字符串的replace 方法接受两个参数,第一个参数为字符串或正则表达式，第一个参数同样可以接受一个字符串，还可以是一个函数。我们主要探讨，第二个参数是函数的情况。\\n第二个参数为函数：\\n在ECMAScript3推荐使用函数方式，实现于JavaScript1.2.当replace方法执行的时候每次都会调用该函数，返回值作为替换的新值。\\n函数参数的规定：\\n第一个参数为每次匹配的全文本（$&amp;）。\\n中间参数为子表达式匹配字符串，个数不限.( $i (i:1-99))\\n倒数第二个参数为匹配文本字符串的匹配下标位置。\\n最后一个参数表示字符串本身。\\n\\n以上是相对高级的javascript用法，简单的做一个总结，多做demo很重要，光看理论没用。\\n今天的开发任务就这些，还是按照惯例，把stuwebfk发布到github和npmjs上去，版本号为0.0.5。下一节把今天最新的程序代码罗列出来。就讲这么多，明天见！\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444980531000.jpg','2015-10-16 07:30:21','2020-08-20 15:44:23'),(322,'基于react-native qq登录窗','基于react-native qq登录窗','1','1',NULL,'react-native','2',NULL,'','react-native是facebook在 react基础上的开发出的可以用js方式开发native应用的项目，基本上沿用了reactjs的组件开发模式，使用flex布局，最近也熟悉了一下flex的布局方式，之前有接触过adoble flex，所以多flex box并不陌生','1','','','0:01',762,'2','0',NULL,0,'0',226323,'<p>react-native是facebook在 react基础上的开发出的可以用js方式开发native应用的项目，基本上沿用了reactjs的组件开发模式，使用flex布局，最近也熟悉了一下flex的布局方式，之前有接触过adoble flex，所以多flex box并不陌生，今天正好有空写了个qq登录窗口，顺便熟悉下flex布局方式。</p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_12_3_23_59_10_562_1043.png\" title=\"\" alt=\"xx.png\" width=\"374\" height=\"276\" style=\"width: 374px; height: 276px;\"/></p><p><br/></p><p>主要代码：</p><pre class=\"brush:js;toolbar:false\">/**\n&nbsp;*&nbsp;Sample&nbsp;React&nbsp;Native&nbsp;App\n&nbsp;*&nbsp;https://github.com/facebook/react-native\n&nbsp;*&nbsp;@flow\n&nbsp;*/\n\nimport&nbsp;React,&nbsp;{&nbsp;Component&nbsp;}&nbsp;from&nbsp;&#39;react&#39;;\nimport&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;AppRegistry,\n&nbsp;&nbsp;&nbsp;&nbsp;StyleSheet,\n&nbsp;&nbsp;&nbsp;&nbsp;Text,\n&nbsp;&nbsp;&nbsp;&nbsp;View,\n&nbsp;&nbsp;&nbsp;&nbsp;Image,\n&nbsp;&nbsp;&nbsp;&nbsp;TextInput\n}&nbsp;from&nbsp;&#39;react-native&#39;;\n\nimport&nbsp;Dimensions&nbsp;from&nbsp;&#39;Dimensions&#39;;\nlet&nbsp;deviceWidth&nbsp;=&nbsp;Dimensions.get(&#39;window&#39;).width;\nexport&nbsp;class&nbsp;loginView&nbsp;extends&nbsp;Component&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;render()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;View&nbsp;style={styles.container}&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Image&nbsp;source={require(&#39;./img/icon1.jpg&#39;)}&nbsp;style={styles.headerStyle}&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextInput&nbsp;style={styles.textInputStyle}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;placeholder={&#39;请输入QQ号码&#39;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearButtonMode={&#39;while-editing&#39;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextInput&nbsp;style={styles.textInputStyle}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;placeholder={&#39;请输入密码&#39;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;password={true}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearButtonMode={&#39;while-editing&#39;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;View&nbsp;style={styles.loginBtnStyle}&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Text&nbsp;style={{&nbsp;color:&nbsp;&#39;#fff&#39;&nbsp;}}&gt;登录&lt;/Text&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/View&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;View&nbsp;style={styles.serviceStyle}&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Text&nbsp;style={styles.nologin}&gt;无法登录&lt;/Text&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Text&nbsp;style={styles.forgetPwd}&gt;忘记密码&lt;/Text&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/View&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;View&nbsp;style={styles.otherLogin}&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Text&nbsp;style={{&nbsp;marginRight:&nbsp;10&nbsp;}}&gt;其它登录方式&lt;/Text&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Image&nbsp;source={require(&#39;./img/icon3.png&#39;)}&nbsp;style={styles.iconImgStyle}&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Image&nbsp;source={require(&#39;./img/icon5.png&#39;)}&nbsp;style={styles.iconImgStyle}&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Image&nbsp;source={require(&#39;./img/icon7.png&#39;)}&nbsp;style={styles.iconImgStyle}&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/View&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/View&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n\nconst&nbsp;styles&nbsp;=&nbsp;StyleSheet.create({\n&nbsp;&nbsp;&nbsp;&nbsp;container:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flex:&nbsp;1,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;侧轴对其方式\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alignItems:&nbsp;&#39;center&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;backgroundColor:&nbsp;&#39;#eeeeee&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;},\n\n&nbsp;&nbsp;&nbsp;&nbsp;textInputStyle:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;backgroundColor:&nbsp;&#39;#fff&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;marginBottom:&nbsp;1,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;40,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding:&nbsp;5,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textAlign:&nbsp;&#39;center&#39;\n&nbsp;&nbsp;&nbsp;&nbsp;},\n\n&nbsp;&nbsp;&nbsp;&nbsp;headerStyle:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;80,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;80,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;borderRadius:&nbsp;40,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;borderWidth:&nbsp;3,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;borderColor:&nbsp;&#39;white&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;marginTop:&nbsp;50,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;marginBottom:&nbsp;40\n&nbsp;&nbsp;&nbsp;&nbsp;},\n\n&nbsp;&nbsp;&nbsp;&nbsp;loginBtnStyle:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;marginTop:&nbsp;20,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;deviceWidth&nbsp;*&nbsp;0.9,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;40,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;backgroundColor:&nbsp;&#39;#4bbcf4&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;justifyContent:&nbsp;&#39;center&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alignItems:&nbsp;&#39;center&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;borderRadius:&nbsp;8\n&nbsp;&nbsp;&nbsp;&nbsp;},\n\n&nbsp;&nbsp;&nbsp;&nbsp;imgStyle:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;borderRadius:&nbsp;8\n&nbsp;&nbsp;&nbsp;&nbsp;},\n\n&nbsp;&nbsp;&nbsp;&nbsp;serviceStyle:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;marginTop:&nbsp;20,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;marginBottom:&nbsp;20,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;设置主轴方向\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flexDirection:&nbsp;&#39;row&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;主轴对其方式\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;justifyContent:&nbsp;&#39;space-between&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;deviceWidth&nbsp;*&nbsp;0.9\n&nbsp;&nbsp;&nbsp;&nbsp;},\n\n&nbsp;&nbsp;&nbsp;&nbsp;otherLogin:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flexDirection:&nbsp;&#39;row&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alignItems:&nbsp;&#39;center&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;&#39;absolute&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bottom:&nbsp;10,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;margin:&nbsp;20\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;nologin:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;&#39;#07b1ea&#39;\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;forgetPwd:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;&#39;#07b1ea&#39;\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;iconImgStyle:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;30,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;30,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;marginRight:&nbsp;10\n&nbsp;&nbsp;&nbsp;&nbsp;},\n\n\n});\n\nmodule.exports&nbsp;=&nbsp;loginView;</pre><p><br/></p><p><br/></p><p>flex布局主要需要了解的属性：（以下内容来源阮老师整理）</p><p><br/></p><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>flex-direction</p></li><li><p>flex-wrap</p></li><li><p>flex-flow</p></li><li><p>justify-content</p></li><li><p>align-items</p></li><li><p>align-content</p></li></ul><p><br/></p><p class=\"p1\"><span style=\"text-decoration: underline;\"><strong>flex-direction属性</strong></span></p><p class=\"p1\"><span class=\"s1\">flex-direction</span>属性决定主轴的方向（即项目的排列方向）。</p><pre class=\"brush:js;toolbar:false\">.box&nbsp;{\n&nbsp;&nbsp;flex-direction:&nbsp;row&nbsp;|&nbsp;row-reverse&nbsp;|&nbsp;column&nbsp;|&nbsp;column-reverse;\n}</pre><p><br/></p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_12_4_0_6_51_68_1044.png\" style=\"\"/></p><p><br/></p><p class=\"p1\">它可能有<span class=\"s1\">4</span>个值。</p><ul class=\"ul1 list-paddingleft-2\"><li><p><span class=\"s2\"></span><span class=\"s1\"><span class=\"Apple-tab-span\">	</span><span class=\"Apple-tab-span\">	</span>row</span>（默认值）：主轴为水平方向，起点在左端。</p></li><li><p><span class=\"s2\"></span><span class=\"s1\"><span class=\"Apple-tab-span\">	</span><span class=\"Apple-tab-span\">	</span>row-reverse</span>：主轴为水平方向，起点在右端。</p></li><li><p><span class=\"s2\"></span><span class=\"s1\"><span class=\"Apple-tab-span\">	</span><span class=\"Apple-tab-span\">	</span>column</span>：主轴为垂直方向，起点在上沿。</p></li><li><p><span class=\"s2\"></span><span class=\"Apple-tab-span\">	</span><span class=\"Apple-tab-span\">	</span>column-reverse<span class=\"s3\">：主轴为垂直方向，起点在下沿。</span></p></li></ul><p></p><p></p><p class=\"p1\"><span style=\"text-decoration: underline;\"><strong>flex-wrap</strong>属性</span></p><p class=\"p2\">默认情况下，项目都排在一条线（又称<span class=\"s2\">&quot;</span>轴线<span class=\"s2\">&quot;</span>）上。<span class=\"s2\">flex-wrap</span>属性定义，如果一条轴线排不下，如何换行。</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_12_4_0_6_51_72_1045.png\" style=\"\"/></p><pre class=\"brush:js;toolbar:false\">.box{\n&nbsp;&nbsp;flex-wrap:&nbsp;nowrap&nbsp;|&nbsp;wrap&nbsp;|&nbsp;wrap-reverse;\n}</pre><p><br/></p><p class=\"p1\">它可能取三个值。</p><p class=\"p2\">（<span class=\"s1\">1</span>）<span class=\"s1\">nowrap</span>（默认）：不换行。</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_12_4_0_6_52_608_1048.png\" style=\"white-space: normal;\"/></p><p><br/></p><p class=\"p1\">（<span class=\"s1\">2</span>）<span class=\"s1\">wrap</span>：换行，第一行在上方。</p><p class=\"p1\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_12_4_0_6_52_133_1046.jpg\" style=\"white-space: normal;\"/></p><p class=\"p1\"><span class=\"s1\"><br/></span></p><p class=\"p1\"><span class=\"s1\">（</span>3<span class=\"s1\">）</span>wrap-reverse<span class=\"s1\">：换行，第一行在下方。</span></p><p class=\"p1\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_12_4_0_6_53_126_1050.jpg\" style=\"white-space: normal;\"/></p><p><br/></p><p class=\"p1\"><span style=\"text-decoration: underline;\"><strong>flex-flow</strong></span></p><p class=\"p2\">flex-flow<span class=\"s1\">属性是</span>flex-direction<span class=\"s1\">属性和</span>flex-wrap<span class=\"s1\">属性的简写形式，默认值为</span>row nowrap<span class=\"s1\">。</span></p><pre class=\"brush:js;toolbar:false\">.box&nbsp;{\n&nbsp;&nbsp;flex-flow:&nbsp;&lt;flex-direction&gt;&nbsp;||&nbsp;&lt;flex-wrap&gt;;\n}</pre><p class=\"p2\"><br/></p><p class=\"p1\"><span style=\"text-decoration: underline;\"><strong>justify-content</strong>属性</span></p><p class=\"p3\"><span class=\"s3\">justify-content</span>属性定义了项目在主轴上的对齐方式。</p><pre class=\"brush:js;toolbar:false\">.box&nbsp;{\n&nbsp;&nbsp;justify-content:&nbsp;flex-start&nbsp;|&nbsp;flex-end&nbsp;|&nbsp;center&nbsp;|&nbsp;space-between&nbsp;|&nbsp;space-around;\n}</pre><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_12_4_0_6_52_412_1047.png\" style=\"\"/></p><p class=\"p1\">它可能取<span class=\"s1\">5</span>个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p><ul class=\"ul1 list-paddingleft-2\"><li><p><span class=\"s2\"></span><span class=\"Apple-tab-span\">	</span><span class=\"Apple-tab-span\">	</span>flex-start<span class=\"s3\">（默认值）：左对齐</span></p></li><li><p><span class=\"s2\"></span><span class=\"Apple-tab-span\">	</span><span class=\"Apple-tab-span\">	</span>flex-end<span class=\"s3\">：右对齐</span></p></li><li><p><span class=\"s2\"></span><span class=\"Apple-tab-span\">	</span><span class=\"Apple-tab-span\">	</span>center<span class=\"s3\">：</span> <span class=\"s3\">居中</span></p></li><li><p><span class=\"s2\"></span><span class=\"s1\"><span class=\"Apple-tab-span\">	</span><span class=\"Apple-tab-span\">	</span>space-between</span>：两端对齐，项目之间的间隔都相等。</p></li><li><p><span class=\"s2\"></span><span class=\"s1\"><span class=\"Apple-tab-span\">	</span><span class=\"Apple-tab-span\">	</span>space-around</span>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</p></li></ul><p><br/></p><p><br/></p><p></p><p class=\"p1\"><span style=\"text-decoration: underline;\"><strong>align-items</strong>属性</span></p><p class=\"p2\"><span class=\"s2\">align-items</span>属性定义项目在交叉轴上如何对齐。</p><pre class=\"brush:js;toolbar:false\">.box&nbsp;{\n&nbsp;&nbsp;align-items:&nbsp;flex-start&nbsp;|&nbsp;flex-end&nbsp;|&nbsp;center&nbsp;|&nbsp;baseline&nbsp;|&nbsp;stretch;\n}</pre><p class=\"p3\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_12_4_0_19_23_375_1052.png\" title=\"\" alt=\"bg2015071011.png\"/><br/></p><p class=\"p3\"><br/></p><p class=\"p1\"><span style=\"text-decoration: underline;\"><strong>align-content</strong>属性</span></p><p class=\"p2\"><span class=\"s2\">align-content</span>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p><pre class=\"brush:js;toolbar:false\">.box&nbsp;{\n&nbsp;&nbsp;align-content:&nbsp;flex-start&nbsp;|&nbsp;flex-end&nbsp;|&nbsp;center&nbsp;|&nbsp;space-between&nbsp;|&nbsp;space-around&nbsp;|&nbsp;stretch;\n}</pre><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_12_4_0_6_52_776_1049.png\"/><br/></p><p class=\"p1\">该属性可能取<span class=\"s1\">6</span>个值。</p><ul class=\"ul1 list-paddingleft-2\"><li><p><span class=\"s2\"></span><span class=\"Apple-tab-span\">	</span><span class=\"Apple-tab-span\">	</span>flex-start<span class=\"s3\">：与交叉轴的起点对齐。</span></p></li><li><p><span class=\"s2\"></span><span class=\"s1\"><span class=\"Apple-tab-span\">	</span><span class=\"Apple-tab-span\">	</span>flex-end</span>：与交叉轴的终点对齐。</p></li><li><p><span class=\"s2\"></span><span class=\"s1\"><span class=\"Apple-tab-span\">	</span><span class=\"Apple-tab-span\">	</span>center</span>：与交叉轴的中点对齐。</p></li><li><p><span class=\"s2\"></span><span class=\"s1\"><span class=\"Apple-tab-span\">	</span><span class=\"Apple-tab-span\">	</span>space-between</span>：与交叉轴两端对齐，轴线之间的间隔平均分布。</p></li><li><p><span class=\"s2\"></span><span class=\"s1\"><span class=\"Apple-tab-span\">	</span><span class=\"Apple-tab-span\">	</span>space-around</span>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</p></li><li><p><span class=\"s2\"></span><span class=\"s1\"><span class=\"Apple-tab-span\">	</span><span class=\"Apple-tab-span\">	</span>stretch</span>（默认值）：轴线占满整个交叉轴。</p></li></ul><p><br/></p>','[{\"type\":\"contents\",\"content\":\"react-native是facebook在 react基础上的开发出的可以用js方式开发native应用的项目，基本上沿用了reactjs的组件开发模式，使用flex布局，最近也熟悉了一下flex的布局方式，之前有接触过adoble flex，所以多flex box并不陌生，今天正好有空写了个qq登录窗口，顺便熟悉下flex布局方式。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_12_3_23_59_10_562_1043.png\"},{\"type\":\"contents\",\"content\":\"\\n\\n主要代码：\\n/**\\n * Sample React Native App\\n * https://github.com/facebook/react-native\\n * @flow\\n */\\n\\nimport React, { Component } from \'react\';\\nimport {\\n    AppRegistry,\\n    StyleSheet,\\n    Text,\\n    View,\\n    Image,\\n    TextInput\\n} from \'react-native\';\\n\\nimport Dimensions from \'Dimensions\';\\nlet deviceWidth = Dimensions.get(\'window\').width;\\nexport class loginView extends Component {\\n    render() {\\n        return (\\n            &lt;View style={styles.container}&gt;\\n                &lt;Image source={require(\'./img/icon1.jpg\')} style={styles.headerStyle} /&gt;\\n                &lt;TextInput style={styles.textInputStyle}\\n                    placeholder={\'请输入QQ号码\'}\\n                    clearButtonMode={\'while-editing\'}\\n                    /&gt;\\n                &lt;TextInput style={styles.textInputStyle}\\n                    placeholder={\'请输入密码\'}\\n                    password={true}\\n                    clearButtonMode={\'while-editing\'}\\n                    /&gt;\\n                &lt;View style={styles.loginBtnStyle}&gt;\\n                    &lt;Text style={{ color: \'#fff\' }}&gt;登录&lt;/Text&gt;\\n                &lt;/View&gt;\\n                &lt;View style={styles.serviceStyle}&gt;\\n                    &lt;Text style={styles.nologin}&gt;无法登录&lt;/Text&gt;\\n                    &lt;Text style={styles.forgetPwd}&gt;忘记密码&lt;/Text&gt;\\n                &lt;/View&gt;\\n                &lt;View style={styles.otherLogin}&gt;\\n                    &lt;Text style={{ marginRight: 10 }}&gt;其它登录方式&lt;/Text&gt;\\n                    &lt;Image source={require(\'./img/icon3.png\')} style={styles.iconImgStyle} /&gt;\\n                    &lt;Image source={require(\'./img/icon5.png\')} style={styles.iconImgStyle} /&gt;\\n                    &lt;Image source={require(\'./img/icon7.png\')} style={styles.iconImgStyle} /&gt;\\n                &lt;/View&gt;\\n            &lt;/View&gt;\\n        );\\n    }\\n}\\n\\nconst styles = StyleSheet.create({\\n    container: {\\n        flex: 1,\\n        // 侧轴对其方式\\n        alignItems: \'center\',\\n        backgroundColor: \'#eeeeee\',\\n    },\\n\\n    textInputStyle: {\\n        backgroundColor: \'#fff\',\\n        marginBottom: 1,\\n        height: 40,\\n        padding: 5,\\n        textAlign: \'center\'\\n    },\\n\\n    headerStyle: {\\n        width: 80,\\n        height: 80,\\n        borderRadius: 40,\\n        borderWidth: 3,\\n        borderColor: \'white\',\\n        marginTop: 50,\\n        marginBottom: 40\\n    },\\n\\n    loginBtnStyle: {\\n        marginTop: 20,\\n        width: deviceWidth * 0.9,\\n        height: 40,\\n        backgroundColor: \'#4bbcf4\',\\n        justifyContent: \'center\',\\n        alignItems: \'center\',\\n        borderRadius: 8\\n    },\\n\\n    imgStyle: {\\n        borderRadius: 8\\n    },\\n\\n    serviceStyle: {\\n        marginTop: 20,\\n        marginBottom: 20,\\n        // 设置主轴方向\\n        flexDirection: \'row\',\\n        // 主轴对其方式\\n        justifyContent: \'space-between\',\\n        width: deviceWidth * 0.9\\n    },\\n\\n    otherLogin: {\\n        flexDirection: \'row\',\\n        alignItems: \'center\',\\n        position: \'absolute\',\\n        bottom: 10,\\n        margin: 20\\n    },\\n    nologin: {\\n        color: \'#07b1ea\'\\n    },\\n    forgetPwd: {\\n        color: \'#07b1ea\'\\n    },\\n    iconImgStyle: {\\n        width: 30,\\n        height: 30,\\n        marginRight: 10\\n    },\\n\\n\\n});\\n\\nmodule.exports = loginView;\\n\\n\\nflex布局主要需要了解的属性：（以下内容来源阮老师整理）\\n\\nflex-direction\\nflex-wrap\\nflex-flow\\njustify-content\\nalign-items\\nalign-content\\n\\n\\nflex-direction属性\\nflex-direction属性决定主轴的方向（即项目的排列方向）。\\n.box {\\n  flex-direction: row | row-reverse | column | column-reverse;\\n}\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_12_4_0_6_51_68_1044.png\"},{\"type\":\"contents\",\"content\":\"\\n\\n它可能有4个值。\\n\\t\\trow（默认值）：主轴为水平方向，起点在左端。\\n\\t\\trow-reverse：主轴为水平方向，起点在右端。\\n\\t\\tcolumn：主轴为垂直方向，起点在上沿。\\n\\t\\tcolumn-reverse：主轴为垂直方向，起点在下沿。\\n\\n\\n\\nflex-wrap属性\\n默认情况下，项目都排在一条线（又称\\\"轴线\\\"）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_12_4_0_6_51_72_1045.png\"},{\"type\":\"contents\",\"content\":\"\\n.box{\\n  flex-wrap: nowrap | wrap | wrap-reverse;\\n}\\n\\n它可能取三个值。\\n（1）nowrap（默认）：不换行。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_12_4_0_6_52_608_1048.png\"},{\"type\":\"contents\",\"content\":\"\\n\\n（2）wrap：换行，第一行在上方。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_12_4_0_6_52_133_1046.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n\\n（3）wrap-reverse：换行，第一行在下方。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_12_4_0_6_53_126_1050.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\nflex-flow\\nflex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\\n.box {\\n  flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;\\n}\\n\\njustify-content属性\\njustify-content属性定义了项目在主轴上的对齐方式。\\n.box {\\n  justify-content: flex-start | flex-end | center | space-between | space-around;\\n}\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_12_4_0_6_52_412_1047.png\"},{\"type\":\"contents\",\"content\":\"\\n它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。\\n\\t\\tflex-start（默认值）：左对齐\\n\\t\\tflex-end：右对齐\\n\\t\\tcenter： 居中\\n\\t\\tspace-between：两端对齐，项目之间的间隔都相等。\\n\\t\\tspace-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\\n\\n\\n\\n\\nalign-items属性\\nalign-items属性定义项目在交叉轴上如何对齐。\\n.box {\\n  align-items: flex-start | flex-end | center | baseline | stretch;\\n}\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_12_4_0_19_23_375_1052.png\"},{\"type\":\"contents\",\"content\":\"\\n\\nalign-content属性\\nalign-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\\n.box {\\n  align-content: flex-start | flex-end | center | space-between | space-around | stretch;\\n}\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_12_4_0_6_52_776_1049.png\"},{\"type\":\"contents\",\"content\":\"\\n该属性可能取6个值。\\n\\t\\tflex-start：与交叉轴的起点对齐。\\n\\t\\tflex-end：与交叉轴的终点对齐。\\n\\t\\tcenter：与交叉轴的中点对齐。\\n\\t\\tspace-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\\n\\t\\tspace-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\\n\\t\\tstretch（默认值）：轴线占满整个交叉轴。\\n\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20161203235509.png','2016-12-03 16:22:16','2020-08-20 15:44:08'),(323,'NodeJS独立开发web框架——构思实现与发布(4)','版本管理与发布','2','1','','版本管理','2',NULL,'','第一天我们就介绍了github的相关信息，今天要把项目发布push到github库内，这样便于版本管理。','1','','','0:01',762,'2','0',NULL,0,'0',223261,'<h3>版本管理与发布</h3><p>第一天我们就介绍了github的相关信息，今天要把项目发布push到github库内，这样便于版本管理。</p><h4 id=\"-github-\">提交项目到github仓库</h4><p>第一步，通过终端cd进入到项目根目录，用<code>git add .</code>命令，该命令表示提交项目全部文件。</p><p>第二步，通过<code>git commit -am &quot;init&quot;</code>命令，对提交的信息加以注释。</p><p>第三步，通过<code>git push</code>命令，进行提交。</p><p>以下视频演示了整个过程：</p><p><embed type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" quality=\"high\" allowfullscreen=\"true\" src=\"http://static.video.qq.com/TPout.swf?vid=z01151bxieh\" align=\"middle\" height=\"400\" width=\"480\"/></p><hr/><h4 id=\"-npmjs\">提交项目到npmjs</h4><p>第一步，点击<a href=\"http://npmjs.org\">这里npmjs.org</a> ，进入后注册个帐号。</p><p>第二步，在终端，cd进入项目根目录，通过<code>npm adduser</code>命令添加用户信息，这一步骤只需设置一次，之后就不必了。</p><p>第三步，通过<code>npm init</code>对项目进行初始化。</p><p>第四步，通过<code>npm publish</code>发布项目到npmjs。</p><p>以下视频演示了整个过程：</p><p><embed type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" quality=\"high\" allowfullscreen=\"true\" src=\"http://static.video.qq.com/TPout.swf?vid=m0115a3nfmf\" align=\"middle\" height=\"400\" width=\"480\"/></p><hr/><p>这里要说明一下提交到npmjs和github的目的，提交到npmjs上的目的可以说是为了方便他人而存在的，npmjs本身不是项目版本管理用的。githubs主要是为了版本管理而存在的。</p><p>在之后的项目开发过程中，我们还会频繁的用到git和npm命令，会随着项目的进度需要而逐步介绍。今天关于这部分的内容就介绍这些。</p><p>这一天的开发任务告一段落，明天还是一个全新的开始，希望你坚持下去，明天见。<span class=\"invade-word\"></span></p>','[{\"type\":\"contents\",\"content\":\"版本管理与发布\\n第一天我们就介绍了github的相关信息，今天要把项目发布push到github库内，这样便于版本管理。\\n提交项目到github仓库\\n第一步，通过终端cd进入到项目根目录，用git add .命令，该命令表示提交项目全部文件。\\n第二步，通过git commit -am \\\"init\\\"命令，对提交的信息加以注释。\\n第三步，通过git push命令，进行提交。\\n以下视频演示了整个过程：\\n&lt;embed type=\\\"application/x-shockwave-flash\\\" allowscriptaccess=\\\"always\\\" quality=\\\"high\\\" allowfullscreen=\\\"true\\\" src=\\\"http://static.video.qq.com/TPout.swf?vid=z01151bxieh\\\" align=\\\"middle\\\" height=\\\"400\\\" width=\\\"480\\\"&gt;\\n提交项目到npmjs\\n第一步，点击这里npmjs.org ，进入后注册个帐号。\\n第二步，在终端，cd进入项目根目录，通过npm adduser命令添加用户信息，这一步骤只需设置一次，之后就不必了。\\n第三步，通过npm init对项目进行初始化。\\n第四步，通过npm publish发布项目到npmjs。\\n以下视频演示了整个过程：\\n&lt;embed type=\\\"application/x-shockwave-flash\\\" allowscriptaccess=\\\"always\\\" quality=\\\"high\\\" allowfullscreen=\\\"true\\\" src=\\\"http://static.video.qq.com/TPout.swf?vid=m0115a3nfmf\\\" align=\\\"middle\\\" height=\\\"400\\\" width=\\\"480\\\"&gt;\\n这里要说明一下提交到npmjs和github的目的，提交到npmjs上的目的可以说是为了方便他人而存在的，npmjs本身不是项目版本管理用的。githubs主要是为了版本管理而存在的。\\n在之后的项目开发过程中，我们还会频繁的用到git和npm命令，会随着项目的进度需要而逐步介绍。今天关于这部分的内容就介绍这些。\\n这一天的开发任务告一段落，明天还是一个全新的开始，希望你坚持下去，明天见。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444892608000.jpg','2015-09-07 11:30:25','2020-08-20 15:44:25'),(324,'纪录片《穹顶之下》全集103分钟1080P高清完整视频','纪录片《穹顶之下》全集103分钟','1','1','','柴静，环境','2',NULL,'','这段视频出来有一段时间了，柴静通过调查的方式向人们展示了人们给环境带来的伤害，雾霾给人类健康带来的危害，具有很深刻的意义，笔者顶着压力放出，让更多人人更加关注环境，关注我们赖以生存的家园','2','https://cdn.html-js.cn/cms/upload/blogpicture/2015_6_27_18_32_17_33_1001.jpg,/static/plugins/ueditor/themes/default/images/spacer.gif','','0:01',762,'2','0',NULL,NULL,'0',228315,'<p style=\"text-align: center;\">&nbsp; &nbsp;<img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_6_27_18_32_17_33_1001.jpg\" title=\"\" alt=\"0fa0b00f3c782d32.jpg\"/></p><p><span style=\"color: rgb(255, 255, 255); background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;</span></p><p><span style=\"color: rgb(255, 255, 255); background-color: rgb(84, 141, 212);\">&nbsp; &nbsp; <span style=\"color: rgb(255, 255, 255); font-size: 14px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; background-color: rgb(84, 141, 212);\">伟大的记者不需要太多评论，因为世人都知道她的伟大！</span></span></p><p><span style=\"font-size: 14px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">&nbsp; &nbsp;柴静向多家视频网站免费奉献了空气污染深度调查纪录片——《柴静雾霾调查：穹顶之下》。在纪录片中，柴静试图在纪录片中回答三个问题，“雾霾是什么？它从\n哪儿来？我们怎么办？”《穹顶之下》全片103分钟，片中柴静走访多个污染现场寻找雾霾根源，赴多国实地了解治污经验，并从国家层面和个人层面提出了行动\n方案。</span></p><p><embed type=\"application/x-shockwave-flash\" class=\"edui-faked-video\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" src=\"https://v.163.com/swf/video/NetEaseFlvPlayerV3.swf?topicid=0085&vid=VAIKICD8S&sid=V7HIQFQDL&coverpic=http://vimg3.ws.126.net/image/snapshot/2015/2/8/T/VAIKICD8T.jpg&autoplay=true\" width=\"740\" height=\"488\" wmode=\"transparent\" play=\"true\" loop=\"false\" menu=\"false\" allowscriptaccess=\"never\" allowfullscreen=\"true\"/></p><p><br/></p><p>&nbsp; <span style=\"font-size: 14px;\">环保部新部长陈吉宁今日下午表示，自己昨天晚上完整看完了柴静的关于雾霾的纪录片，今天给她发了短信打电话，向她表示感谢。陈吉宁说，柴静的纪录片从公众健康的角度唤醒公众的环保意识，值得敬佩。</span></p><p><span style=\"font-size: 14px;\">人去做什么，是因为心底有爱惜</span></p><p><span style=\"font-size: 14px;\">这是我和雾霾的私人恩怨</span></p><p><span style=\"font-size: 14px;\">我不满意，我不想等待，我也不再推诿，我要站出来做一点什么。我要做的事，就在此时，就在此刻，就在此地，就在此生。</span></p><p><span style=\"font-size: 14px;\">自离职央视后，沉寂许久的知名记者、主持人柴静昨日携个人视频新作　《穹顶之下》宣告归来，并在短时间内引起广泛关注。</span></p><p><span style=\"font-size: 14px;\">记者了解到，这部时长达103分钟55秒的视频聚焦时下热点的雾霾问题，片中，继续柴静的深度调查风格，用将近一年的时间深度解析了雾霾的生成原因\n和解决之道。她也首度透露当时辞职的原因是由于女儿在其怀孕期间就被诊断患有良性肿瘤，自己才辞职专程陪伴女儿。她表示，职业训练和母亲本能都让她觉得应\n该回答这些问题：雾霾是什么？从哪儿来？该怎么办？“以PM2.5之微小，人眼无法看到，这是一场看不见敌人的战争。”</span></p><p><span style=\"font-size: 14px;\">1　关注雾霾　出于职业训练和母亲本能</span></p><p><span style=\"font-size: 14px;\">&nbsp; &nbsp; 自去年初被曝生下女儿到去年10月证实离职央视，柴静的动向一直颇受公众关注。当时晨报就通过柴静前同事邱启明确认到，柴静在2013年底《看见》栏目停播后，便已离开央视，主要工作就是在家照顾女儿。</span></p><p><span style=\"font-size: 14px;\">不过，柴静本人此前却一直没有对这次离职作过公开回应，直到昨日《穹顶之下》播出后，她才在接受人民网采访时透露，辞职的重要原因，就是因为孩子生\n病。她在辞职后打算用相当长的一段时间陪伴她、照顾她，所以谢绝了一切工作邀请。在《穹顶之下》的开头，她也用回忆的形式，回顾了怀孕时的经历，“听到她\n（女儿）心跳的一瞬间，对她没有别的期望，健康就好，但是她被诊断为良性肿瘤，在出生之后就要接受手术。”而在做麻醉手术之前，医生曾对柴静说要做好心理\n准备，称这么小年纪做全身麻醉有可能就醒不过来了。柴静在片中称，孩子出生后，自己还来不及抱她一下，便被抱走了。当而她再见到女儿的时候，女儿还在昏迷\n中。但医生说手术很成功，只是因为女儿太胖，麻醉的时候扎了很多针眼才找到静脉。柴静感慨，“我是一个非常幸运的人，后来辞职，陪伴她照顾她，只要一家人\n在一起，平安健康就好。”</span></p><p><span style=\"font-size: 14px;\">事实上，在《穹顶之下》中，柴静完全是用一个母亲的身份切入到雾霾问题中。她表示，制作这一公益视频的一大动机，就是源于在照顾女儿的过程中，对雾\n霾的感受变得越来越强烈，整个生活都被它影响了，“加上全社会对空气污染的问题也越来越关心，职业训练和母亲本能都让我觉得应该回答这些问题：雾霾是什\n么？从哪儿来?该怎么办？所以就做了这个调查。”</span></p><p><span style=\"font-size: 14px;\">片中，柴静毫不掩饰女儿对自己拍摄这一视频的影响，“以前我从来都没有对污染感到过害怕，去哪儿我都没戴过口罩，现在有个生命抱在你怀里，她呼吸、\n她吃、她喝都要由你来负责，你才会感到害怕。”她在人民网的采访中也承认：“一个人没有当妈妈之前，这个世界只跟你有几十年的关系，到此为止，我对我的一\n生负责任就可以了。但确实有了她之后，你跟未来世界有了关联，有了责任。如果没有这样一个情感的驱动，我确实很难去用这么长时间做完这件事。”</span></p><p><span style=\"font-size: 14px;\">2　自掏百万　调查近一年追问雾霾治理</span></p><p><span style=\"font-size: 14px;\">&nbsp; &nbsp; 这一调查视频的上线，也是柴静离职后的首度公开亮相。整片除了对近一年来的雾霾状况进行了数据化的对比分析外，柴静还发挥了自己采访的特长，拜访了\n环保、石化等多个行业和领域的专家。采访中柴静表示，这部纪录片风格浓郁的调查视频，只是个人的调研，播出也全是公益性质，费时将近一年，花费则差不多一\n百万左右，都是自己投资的，主要靠自己之前出书的稿费。她还强调，这一年她都是以个人身份去拜访这些专家，包括职能部门，“没人拒绝提问，在回答时都毫无\n保留，直面问题。”</span></p><p><span style=\"font-size: 14px;\">据悉，为了完成这些难度不小的调查，柴静走访了多个污染现场寻找雾霾根源，并奔波于中国、美国、英国寻求空气污染治理的教训与经验，亲自和同伴一起\n拍摄、编辑视频。全片从“雾霾是什么？从哪儿来？该怎么办？”三个问题切入，深入浅出地向观众讲解了雾霾的危害、产生原因、治理困难以及经验教训等等，也\n解释了国内不少城市雾霾的现状，比如，我国的空气污染60%以上来自煤和油的燃烧，雾霾问题很大程度上是能源问题。我国煤炭消费量在2013年就超过了全\n世界其他国家用煤量的总和。车的增速也是历史罕见。作为世界上发展最快的发展中国家，我国不得不同时面对数量和质量要求这两大挑战，我国燃煤和燃油大概存\n在“消耗量大”、“相对低质”、“前端缺少清洁”、“末端排放缺乏控制”四大问题。《穹顶之下》尝试揭示这几大问题背后的管理与执法困境。</span></p><p><span style=\"font-size: 14px;\">柴静说，当前《大气防治法》正在修订，她已将整理的资料发给了全国人大法工委，希望能为法律修订带来一点参照。全国人大法工委方已逐字看完并附上建议返还给她，表示会在修订时考虑相关问题。正在制订国家油气体制改革方案的小组成员同样收到资料，并表示欢迎更多探讨。</span></p><p><span style=\"font-size: 14px;\">3　点击爆棚　环境问题引发不少人共鸣</span></p><p><span style=\"font-size: 14px;\">&nbsp; &nbsp; 昨日，《穹顶之下》　在各大视频网站播出之后，引起不少网民的关注。截至记者昨晚20点30分发稿时，各网络平台已累计播放超过3500万次，这个\n数字如何理解？《纸牌屋》第二季开播时，一周的点击只有2000万上下，《穹顶之下》的热度已超过了很多热门电视剧。同时，其在微信、微博等社交网络上更\n是引发“刷屏”效应。</span></p><p><span style=\"font-size: 14px;\">可以说，在环境污染这个全民休戚与共的问题上，《穹顶之下》引起了不少人的共鸣，“不要等问题出来后再去挽回。我们生活在同一片天空下，雾霾已经成\n为每个人必须应对并亟需解决的问题！远离雾霾，呼吸同一片纯净天空！”不少网友认为，成为妈妈后，柴静的力量似乎更强了，也证明了柴静这次的“复出”非常\n成功。同时，片中“说实话我不是多怕死，我是不想这么活”等“名言”也迅速成为昨日的网络热点。</span></p><p><span style=\"font-size: 14px;\">不过，对于自己未来是否会成立个人公司制作节目，柴静则予以了否认，称这次的调查纪录片，只是个人调研，播出也是公益性质，与其做事的都是自己的朋友。而她也表示，“如果将来有机会，希望仍能与他们一起，为转型中的社会做一点记录和分析的工作。”</span></p><p><span style=\"font-size: 14px;\">4　质疑之声　以女儿病情开场是否客观</span></p><p><span style=\"font-size: 14px;\">&nbsp; &nbsp; 《穹顶之下》热播之时，也有部分声音表示：柴静以自己孩子的病情作为开场来切入这个话题，是否客观？一位曾经参加柴静模拟演讲的记者昨天在《这一\n年，我所见证的“柴静与雾霾的私人恩怨”》　中叙述道，柴静的家人很支持她讲出孩子的故事，但出于新闻客观性的考量，柴静曾经很犹豫：“在柴静的片子中，\n最触动我的场景便是她的小女儿，扎着俩小辫，伏在窗前，看着雾霾笼罩的世界。临走前，柴静说，我一直在犹豫要不要放女儿的故事。这个犹豫一定会持续到片子\n录制之前。”</span></p><p><span style=\"font-size: 14px;\">昨日，当人民网记者问柴静，以母亲这个身份切入是否有顾虑？她这样回答：“我有一个很大的顾虑，就是说我有没有权力说到她？因为那是她的生命和她的\n生活，我必须要考虑说出来之后她将来可能会承受什么，这种压力最大。后来我先生说，你还是说吧，我深刻地感觉到你在有孩子，尤其她生病后，才会对空气污染\n这件事有了完全不同的态度。他说，这是你回避不了的一个基本动机。他说，如果你回避了她生病，这种态度里面其实隐含着一个问题，就是说好像生病本身是不好\n的，或者是羞耻的。不用太顾虑和紧张，要相信这个社会的基本善意。这句话对我有说服力。”</span></p><p><span style=\"font-size: 14px;\">而中山大学传播与设计学院院长张志安在微博中这样写道，“柴静对报道角色的处理：她讲故事的切入点是个体（女儿）遭遇，但整个片子是深度报道、调查报道，她既是参与者和体验者，但主要是报道者和调查者。”</span></p><p><br/></p><p><a href=\"http://www.soyep.net/wp-content/uploads/2015/05/Under-the-dome.zip\" target=\"_blank\" title=\"柴静纪录片《穹顶之下》全集103分钟1080P高清完整视频\">视频下载</a>（来自soyep.net）</p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"   \"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_6_27_18_32_17_33_1001.jpg\"},{\"type\":\"contents\",\"content\":\"\\n   \\n    伟大的记者不需要太多评论，因为世人都知道她的伟大！\\n   柴静向多家视频网站免费奉献了空气污染深度调查纪录片——《柴静雾霾调查：穹顶之下》。在纪录片中，柴静试图在纪录片中回答三个问题，“雾霾是什么？它从哪儿来？我们怎么办？”《穹顶之下》全片103分钟，片中柴静走访多个污染现场寻找雾霾根源，赴多国实地了解治污经验，并从国家层面和个人层面提出了行动方案。\\n\"},{\"type\":\"image\",\"content\":\"/static/plugins/ueditor/themes/default/images/spacer.gif\"},{\"type\":\"contents\",\"content\":\"\\n\\n  环保部新部长陈吉宁今日下午表示，自己昨天晚上完整看完了柴静的关于雾霾的纪录片，今天给她发了短信打电话，向她表示感谢。陈吉宁说，柴静的纪录片从公众健康的角度唤醒公众的环保意识，值得敬佩。\\n人去做什么，是因为心底有爱惜\\n这是我和雾霾的私人恩怨\\n我不满意，我不想等待，我也不再推诿，我要站出来做一点什么。我要做的事，就在此时，就在此刻，就在此地，就在此生。\\n自离职央视后，沉寂许久的知名记者、主持人柴静昨日携个人视频新作　《穹顶之下》宣告归来，并在短时间内引起广泛关注。\\n记者了解到，这部时长达103分钟55秒的视频聚焦时下热点的雾霾问题，片中，继续柴静的深度调查风格，用将近一年的时间深度解析了雾霾的生成原因和解决之道。她也首度透露当时辞职的原因是由于女儿在其怀孕期间就被诊断患有良性肿瘤，自己才辞职专程陪伴女儿。她表示，职业训练和母亲本能都让她觉得应该回答这些问题：雾霾是什么？从哪儿来？该怎么办？“以PM2.5之微小，人眼无法看到，这是一场看不见敌人的战争。”\\n1　关注雾霾　出于职业训练和母亲本能\\n    自去年初被曝生下女儿到去年10月证实离职央视，柴静的动向一直颇受公众关注。当时晨报就通过柴静前同事邱启明确认到，柴静在2013年底《看见》栏目停播后，便已离开央视，主要工作就是在家照顾女儿。\\n不过，柴静本人此前却一直没有对这次离职作过公开回应，直到昨日《穹顶之下》播出后，她才在接受人民网采访时透露，辞职的重要原因，就是因为孩子生病。她在辞职后打算用相当长的一段时间陪伴她、照顾她，所以谢绝了一切工作邀请。在《穹顶之下》的开头，她也用回忆的形式，回顾了怀孕时的经历，“听到她（女儿）心跳的一瞬间，对她没有别的期望，健康就好，但是她被诊断为良性肿瘤，在出生之后就要接受手术。”而在做麻醉手术之前，医生曾对柴静说要做好心理准备，称这么小年纪做全身麻醉有可能就醒不过来了。柴静在片中称，孩子出生后，自己还来不及抱她一下，便被抱走了。当而她再见到女儿的时候，女儿还在昏迷中。但医生说手术很成功，只是因为女儿太胖，麻醉的时候扎了很多针眼才找到静脉。柴静感慨，“我是一个非常幸运的人，后来辞职，陪伴她照顾她，只要一家人在一起，平安健康就好。”\\n事实上，在《穹顶之下》中，柴静完全是用一个母亲的身份切入到雾霾问题中。她表示，制作这一公益视频的一大动机，就是源于在照顾女儿的过程中，对雾霾的感受变得越来越强烈，整个生活都被它影响了，“加上全社会对空气污染的问题也越来越关心，职业训练和母亲本能都让我觉得应该回答这些问题：雾霾是什么？从哪儿来?该怎么办？所以就做了这个调查。”\\n片中，柴静毫不掩饰女儿对自己拍摄这一视频的影响，“以前我从来都没有对污染感到过害怕，去哪儿我都没戴过口罩，现在有个生命抱在你怀里，她呼吸、她吃、她喝都要由你来负责，你才会感到害怕。”她在人民网的采访中也承认：“一个人没有当妈妈之前，这个世界只跟你有几十年的关系，到此为止，我对我的一生负责任就可以了。但确实有了她之后，你跟未来世界有了关联，有了责任。如果没有这样一个情感的驱动，我确实很难去用这么长时间做完这件事。”\\n2　自掏百万　调查近一年追问雾霾治理\\n    这一调查视频的上线，也是柴静离职后的首度公开亮相。整片除了对近一年来的雾霾状况进行了数据化的对比分析外，柴静还发挥了自己采访的特长，拜访了环保、石化等多个行业和领域的专家。采访中柴静表示，这部纪录片风格浓郁的调查视频，只是个人的调研，播出也全是公益性质，费时将近一年，花费则差不多一百万左右，都是自己投资的，主要靠自己之前出书的稿费。她还强调，这一年她都是以个人身份去拜访这些专家，包括职能部门，“没人拒绝提问，在回答时都毫无保留，直面问题。”\\n据悉，为了完成这些难度不小的调查，柴静走访了多个污染现场寻找雾霾根源，并奔波于中国、美国、英国寻求空气污染治理的教训与经验，亲自和同伴一起拍摄、编辑视频。全片从“雾霾是什么？从哪儿来？该怎么办？”三个问题切入，深入浅出地向观众讲解了雾霾的危害、产生原因、治理困难以及经验教训等等，也解释了国内不少城市雾霾的现状，比如，我国的空气污染60%以上来自煤和油的燃烧，雾霾问题很大程度上是能源问题。我国煤炭消费量在2013年就超过了全世界其他国家用煤量的总和。车的增速也是历史罕见。作为世界上发展最快的发展中国家，我国不得不同时面对数量和质量要求这两大挑战，我国燃煤和燃油大概存在“消耗量大”、“相对低质”、“前端缺少清洁”、“末端排放缺乏控制”四大问题。《穹顶之下》尝试揭示这几大问题背后的管理与执法困境。\\n柴静说，当前《大气防治法》正在修订，她已将整理的资料发给了全国人大法工委，希望能为法律修订带来一点参照。全国人大法工委方已逐字看完并附上建议返还给她，表示会在修订时考虑相关问题。正在制订国家油气体制改革方案的小组成员同样收到资料，并表示欢迎更多探讨。\\n3　点击爆棚　环境问题引发不少人共鸣\\n    昨日，《穹顶之下》　在各大视频网站播出之后，引起不少网民的关注。截至记者昨晚20点30分发稿时，各网络平台已累计播放超过3500万次，这个数字如何理解？《纸牌屋》第二季开播时，一周的点击只有2000万上下，《穹顶之下》的热度已超过了很多热门电视剧。同时，其在微信、微博等社交网络上更是引发“刷屏”效应。\\n可以说，在环境污染这个全民休戚与共的问题上，《穹顶之下》引起了不少人的共鸣，“不要等问题出来后再去挽回。我们生活在同一片天空下，雾霾已经成为每个人必须应对并亟需解决的问题！远离雾霾，呼吸同一片纯净天空！”不少网友认为，成为妈妈后，柴静的力量似乎更强了，也证明了柴静这次的“复出”非常成功。同时，片中“说实话我不是多怕死，我是不想这么活”等“名言”也迅速成为昨日的网络热点。\\n不过，对于自己未来是否会成立个人公司制作节目，柴静则予以了否认，称这次的调查纪录片，只是个人调研，播出也是公益性质，与其做事的都是自己的朋友。而她也表示，“如果将来有机会，希望仍能与他们一起，为转型中的社会做一点记录和分析的工作。”\\n4　质疑之声　以女儿病情开场是否客观\\n    《穹顶之下》热播之时，也有部分声音表示：柴静以自己孩子的病情作为开场来切入这个话题，是否客观？一位曾经参加柴静模拟演讲的记者昨天在《这一年，我所见证的“柴静与雾霾的私人恩怨”》　中叙述道，柴静的家人很支持她讲出孩子的故事，但出于新闻客观性的考量，柴静曾经很犹豫：“在柴静的片子中，最触动我的场景便是她的小女儿，扎着俩小辫，伏在窗前，看着雾霾笼罩的世界。临走前，柴静说，我一直在犹豫要不要放女儿的故事。这个犹豫一定会持续到片子录制之前。”\\n昨日，当人民网记者问柴静，以母亲这个身份切入是否有顾虑？她这样回答：“我有一个很大的顾虑，就是说我有没有权力说到她？因为那是她的生命和她的生活，我必须要考虑说出来之后她将来可能会承受什么，这种压力最大。后来我先生说，你还是说吧，我深刻地感觉到你在有孩子，尤其她生病后，才会对空气污染这件事有了完全不同的态度。他说，这是你回避不了的一个基本动机。他说，如果你回避了她生病，这种态度里面其实隐含着一个问题，就是说好像生病本身是不好的，或者是羞耻的。不用太顾虑和紧张，要相信这个社会的基本善意。这句话对我有说服力。”\\n而中山大学传播与设计学院院长张志安在微博中这样写道，“柴静对报道角色的处理：她讲故事的切入点是个体（女儿）遭遇，但整个片子是深度报道、调查报道，她既是参与者和体验者，但主要是报道者和调查者。”\\n\\n视频下载（来自soyep.net）\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1435400638000.jpg','2015-07-17 02:21:04','2020-08-20 15:44:27'),(325,'移动端组件——弹出框（block）','','1','plug','','doraPlug—block','2',NULL,'','基于Jquery响应式弹出框，适合移动端应用。近期会总结一些之前做过的简单的移动端小插件，都比较简单，但是还不够完善，后面会进一步优化。','1','','','0:01',762,'2','0',NULL,0,'0',223662,'<p>&nbsp;&nbsp;基于Jquery响应式弹出框，适合移动端应用。近期会总结一些之前做过的简单的移动端小插件，都比较简单，但是还不够完善，后面会进一步优化。</p><p><br/></p><p>&nbsp; &nbsp;需要引用的文件：</p><pre class=\"brush:js;toolbar:false\">&lt;script&nbsp;src=&quot;js/jquery-1.10.2.min.js&quot;&gt;&lt;/script&gt;\n&lt;link&nbsp;rel=&quot;stylesheet&quot;&nbsp;href=&quot;css/dora.css&quot;/&gt;\n&lt;script&nbsp;src=&quot;js/dora.js&quot;&gt;&lt;/script&gt;</pre><p>注意：</p><p>1、jquery是基础文件</p><p>2、dora.css 是组件相关样式</p><p>3、dora.js 是组件所涉及到的js</p><p><br/></p><p>使用方法：<br/></p><pre class=\"brush:js;toolbar:false\">$(&#39;#blockMe&#39;).click(function(){\n		$.block({\n			message&nbsp;:&nbsp;$(&#39;#blockContent&#39;),\n			overClass&nbsp;:&nbsp;&#39;block-a&#39;\n		});\n	});</pre><p><br/></p><p>示例：</p><pre class=\"brush:js;toolbar:false\">&lt;script&gt;\n	$(function(){\n		$(&#39;#blockMe&#39;).click(function(){\n			$.block({\n				message&nbsp;:&nbsp;$(&#39;#blockContent&#39;),\n				overClass&nbsp;:&nbsp;&#39;block-a&#39;\n			});\n		});\n\n		$(&#39;#yes&#39;).click(function(){\n			alert(&#39;confirm&nbsp;ok&#39;)\n		});\n\n		$(&#39;#no&#39;).click(function(){\n			$.unblock();\n		})\n\n	})\n&lt;/script&gt;\n\n&lt;div&nbsp;id=&quot;blockContent&quot;&nbsp;class=&quot;block-content&quot;&nbsp;style=&quot;display:&nbsp;none;&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;h3&gt;弹窗标题&lt;/h3&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;自定义弹窗内容...&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;block-footer&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button&nbsp;type=&quot;button&quot;&nbsp;class=&quot;btn&nbsp;btn-default&quot;&nbsp;id=&quot;no&quot;&gt;取消&lt;/button&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button&nbsp;type=&quot;button&quot;&nbsp;class=&quot;btn&nbsp;btn-primary&quot;&nbsp;id=&quot;yes&quot;&gt;继续&lt;/button&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&lt;/div&gt;\n&lt;button&nbsp;type=&quot;button&quot;&nbsp;class=&quot;btn&nbsp;btn-default&quot;&nbsp;id=&quot;blockMe&quot;&gt;打开block窗口&lt;/button&gt;</pre><p><br/></p><p>参数配置：<br/></p><table interlaced=\"enabled\" align=\"left\"><tbody><tr class=\"ue-table-interlace-color-single firstRow\"><td style=\"word-break: break-all; background-color: rgb(187, 187, 187);\" align=\"center\" valign=\"top\" width=\"238\">参数<br/></td><td style=\"word-break: break-all; background-color: rgb(187, 187, 187);\" align=\"center\" valign=\"top\" width=\"238\">说明</td><td style=\"word-break: break-all; background-color: rgb(187, 187, 187);\" align=\"center\" valign=\"top\" width=\"238\">必须</td></tr><tr class=\"ue-table-interlace-color-double\"><td style=\"word-break: break-all; background-color: rgb(204, 204, 204);\" align=\"center\" valign=\"top\" width=\"238\">message</td><td style=\"word-break: break-all; background-color: rgb(204, 204, 204);\" align=\"center\" valign=\"top\" width=\"238\">传入弹框对象，必须是jquery对象(通过ID获取)</td><td style=\"word-break: break-all; background-color: rgb(204, 204, 204);\" align=\"center\" valign=\"top\" width=\"238\">是</td></tr><tr class=\"ue-table-interlace-color-single\"><td style=\"word-break: break-all; background-color: rgb(187, 187, 187);\" align=\"center\" valign=\"top\" width=\"238\">overClass</td><td style=\"word-break: break-all; background-color: rgb(187, 187, 187);\" align=\"center\" valign=\"top\" width=\"238\">重写弹框样式</td><td style=\"word-break: break-all; background-color: rgb(187, 187, 187);\" align=\"center\" valign=\"top\" width=\"238\">否</td></tr></tbody></table><p><br/></p><p><br/></p><p><br/></p><p><br/></p><p><br/></p><p><br/></p><p>功能方法接口：</p><p><br/></p><table interlaced=\"enabled\"><tbody><tr class=\"ue-table-interlace-color-single firstRow\"><td style=\"word-break: break-all; background-color: rgb(187, 187, 187);\" align=\"center\" valign=\"top\" width=\"239\">方法名<br/></td><td style=\"word-break: break-all; background-color: rgb(187, 187, 187);\" align=\"center\" valign=\"top\" width=\"239\">使用示例<br/></td><td style=\"word-break: break-all; background-color: rgb(187, 187, 187);\" align=\"center\" valign=\"top\" width=\"239\">说明<br/></td></tr><tr class=\"ue-table-interlace-color-double\"><td style=\"word-break: break-all; background-color: rgb(204, 204, 204);\" align=\"center\" valign=\"top\" width=\"239\">unblock</td><td style=\"word-break: break-all; background-color: rgb(204, 204, 204);\" align=\"center\" valign=\"top\" width=\"239\">$.unblock();</td><td style=\"word-break: break-all; background-color: rgb(204, 204, 204);\" align=\"center\" valign=\"top\" width=\"239\">关闭弹窗<br/></td></tr></tbody></table><p><br/></p>','[{\"type\":\"contents\",\"content\":\"  基于Jquery响应式弹出框，适合移动端应用。近期会总结一些之前做过的简单的移动端小插件，都比较简单，但是还不够完善，后面会进一步优化。\\n\\n   需要引用的文件：\\n&lt;script src=\\\"js/jquery-1.10.2.min.js\\\"&gt;&lt;/script&gt;\\n&lt;link rel=\\\"stylesheet\\\" href=\\\"css/dora.css\\\"/&gt;\\n&lt;script src=\\\"js/dora.js\\\"&gt;&lt;/script&gt;\\n注意：\\n1、jquery是基础文件\\n2、dora.css 是组件相关样式\\n3、dora.js 是组件所涉及到的js\\n\\n使用方法：\\n$(\'#blockMe\').click(function(){\\n\\t\\t$.block({\\n\\t\\t\\tmessage : $(\'#blockContent\'),\\n\\t\\t\\toverClass : \'block-a\'\\n\\t\\t});\\n\\t});\\n\\n示例：\\n&lt;script&gt;\\n\\t$(function(){\\n\\t\\t$(\'#blockMe\').click(function(){\\n\\t\\t\\t$.block({\\n\\t\\t\\t\\tmessage : $(\'#blockContent\'),\\n\\t\\t\\t\\toverClass : \'block-a\'\\n\\t\\t\\t});\\n\\t\\t});\\n\\n\\t\\t$(\'#yes\').click(function(){\\n\\t\\t\\talert(\'confirm ok\')\\n\\t\\t});\\n\\n\\t\\t$(\'#no\').click(function(){\\n\\t\\t\\t$.unblock();\\n\\t\\t})\\n\\n\\t})\\n&lt;/script&gt;\\n\\n&lt;div id=\\\"blockContent\\\" class=\\\"block-content\\\" style=\\\"display: none;\\\"&gt;\\n    &lt;h3&gt;弹窗标题&lt;/h3&gt;\\n    &lt;p&gt;自定义弹窗内容...&lt;/p&gt;\\n    &lt;div class=\\\"block-footer\\\"&gt;\\n        &lt;button type=\\\"button\\\" class=\\\"btn btn-default\\\" id=\\\"no\\\"&gt;取消&lt;/button&gt;\\n        &lt;button type=\\\"button\\\" class=\\\"btn btn-primary\\\" id=\\\"yes\\\"&gt;继续&lt;/button&gt;\\n    &lt;/div&gt;\\n&lt;/div&gt;\\n&lt;button type=\\\"button\\\" class=\\\"btn btn-default\\\" id=\\\"blockMe\\\"&gt;打开block窗口&lt;/button&gt;\\n\\n参数配置：\\n参数\\n说明必须message传入弹框对象，必须是jquery对象(通过ID获取)是overClass重写弹框样式否\\n\\n\\n\\n\\n\\n\\n功能方法接口：\\n\\n方法名\\n使用示例\\n说明\\nunblock$.unblock();关闭弹窗\\n\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445326191000.jpg','2015-10-20 07:12:52','2020-08-20 15:44:16'),(326,'React 入门实例教程','React 入门实例教程','2','1','','React','2',NULL,'','由于 React 的设计思想极其独特，属于革命性创新，性能出众，代码逻辑却非常简单。所以，越来越多的人开始关注和使用，认为它可能是将来 Web 开发的主流工具。','1','','','0:01',762,'2','0',NULL,0,'0',223576,'<p>原文地址：http://www.ruanyifeng.com/blog/2015/03/react.html</p><p><br/></p><p>现在最热门的前端框架，毫无疑问是 <a target=\"_blank\" href=\"https://facebook.github.io/react/\">React</a> 。</p><p>上周，基于 React 的 <a target=\"_blank\" href=\"http://facebook.github.io/react-native/\">React Native</a> 发布，结果一天之内，就获得了 5000 颗星，受瞩目程度可见一斑。&nbsp;</p><p>React 起源于 Facebook 的内部项目，因为该公司对市场上所有 <a target=\"_blank\" href=\"http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html\">JavaScript MVC 框架</a>，都不满意，就决定自己写一套，用来架设 <a target=\"_blank\" href=\"https://instagram.com/\">Instagram</a> 的网站。做出来以后，发现这套东西很好用，就在2013年5月<a target=\"_blank\" href=\"http://facebook.github.io/react/blog/2013/06/05/why-react.html\">开源</a>了。</p><p><img src=\"http://image.beekka.com/blog/2015/bg2015033101.png\" alt=\"\" title=\"\"/></p><p>由于 React 的设计思想极其独特，属于革命性创新，性能出众，代码逻辑却非常简单。所以，越来越多的人开始关注和使用，认为它可能是将来 Web 开发的主流工具。</p><p>这个项目本身也越滚越大，从最早的UI引擎变成了一整套前后端通吃的 Web App 解决方案。衍生的 React Native \n项目，目标更是宏伟，希望用写 Web App 的方式去写 Native App。如果能够实现，整个互联网行业都会被颠覆，因为同一组人只需要写一次\n UI ，就能同时运行在服务器、浏览器和手机（参见<a target=\"_blank\" href=\"http://www.ruanyifeng.com/blog/2015/02/future-of-dom.html\">《也许，DOM 不是答案》</a>）。</p><p><img src=\"http://image.beekka.com/blog/2015/bg2015031302.jpg\" alt=\"\" title=\"\"/></p><p>既然 React \n这么热门，看上去充满希望，当然应该好好学一下。从技术角度，可以满足好奇心，提高技术水平；从职业角度，有利于求职和晋升，有利于参与潜力大的项目。但\n是，好的 React 教程却不容易找到，这一方面因为这项技术太新，刚刚开始走红，大家都没有经验，还在摸索之中；另一方面因为 React \n本身还在不断变动，API 一直在调整，至今没发布1.0版。</p><p><a target=\"_blank\" href=\"https://github.com/ruanyf/react-demos\"><img src=\"http://image.beekka.com/blog/2015/bg2015033103.png\" alt=\"\" title=\"\"/></a></p><p>我学习 React 时，就很苦恼。有的教程讨论一些细节问题，对入门没帮助；有的教程写得不错，但比较短，无助于看清全貌。我断断续续学了几个月，看过二十几篇教程，在这个过程中，将对自己有帮助的 Demo 都收集下来，做成了一个库 <a target=\"_blank\" href=\"https://github.com/ruanyf/react-demos\">React Demos</a> 。</p><p><a target=\"_blank\" href=\"https://github.com/ruanyf/react-demos\"><img src=\"http://image.beekka.com/blog/2015/bg2015033104.png\" alt=\"\" title=\"\"/></a></p><p>下面，我就根据<a target=\"_blank\" href=\"https://github.com/ruanyf/react-demos\">这个库</a>，写一篇全面又易懂的 React 入门教程。你只需要跟着每一个 Demo 做一遍，就能初步掌握 React 。当然，前提是你必须拥有基本 JavaScript 和 DOM 知识，但是你读完就会发现，React 所要求的预备知识真的很少。</p><h2>零、安装</h2><p>React 的安装包，可以到<a target=\"_blank\" href=\"https://facebook.github.io/react/downloads.html\">官网</a>下载。不过，<a target=\"_blank\" href=\"https://github.com/ruanyf/react-demos\">React Demos</a> 已经自带 React 源码，不用另外安装，只需把这个库拷贝到你的硬盘就行了。</p><blockquote><pre class=\" language-bash\">$&nbsp;git&nbsp;clone&nbsp;git@github.com:ruanyf/react-demos.git</pre></blockquote><p>如果你没安装 git， 那就直接下载 <a target=\"_blank\" href=\"https://github.com/ruanyf/react-demos/archive/master.zip\">zip 压缩包</a>。</p><p><a target=\"_blank\" href=\"https://github.com/ruanyf/react-demos\"><img src=\"http://image.beekka.com/blog/2015/bg2015033105.png\" alt=\"\" title=\"\"/></a></p><p>下面要讲解的11个例子在各个 Demo 子目录，每个目录都有一个 index.html 文件，在浏览器打开这个文件（大多数情况下双击即可），就能立刻看到效果。</p><p>需要说明的是，React 可以在浏览器运行，也可以在服务器运行，但是本教程只涉及浏览器。一方面是为了尽量保持简单，另一方面 React 的语法是一致的，服务器的用法与浏览器差别不大。<a target=\"_blank\" href=\"https://github.com/ruanyf/react-demos/tree/master/demo11\">Demo11</a> &nbsp;是服务器首屏渲染的例子，有兴趣的朋友可以自己去看源码。</p><h2>一、HTML 模板</h2><p>使用 React 的网页源码，结构大致如下。</p><blockquote><pre class=\" language-javascript\">&lt;!DOCTYPE&nbsp;html&gt;&lt;html&gt;\n&nbsp;&nbsp;&lt;head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;\n&nbsp;&nbsp;&lt;/head&gt;\n&nbsp;&nbsp;&lt;body&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id=&quot;example&quot;&gt;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/jsx&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;**&nbsp;Our&nbsp;code&nbsp;goes&nbsp;here!&nbsp;**&nbsp;&nbsp;&nbsp;&nbsp;&lt;/script&gt;\n&nbsp;&nbsp;&lt;/body&gt;&lt;/html&gt;</pre></blockquote><p>上面代码有两个地方需要注意。首先，最后一个 script 标签的 type 属性为 text/babel 。这是因为 React 独有的 \nJSX 语法，跟 JavaScript 不兼容。凡是使用 JSX 的地方，都要加上 type=&quot;text/babel&quot; 。</p><p>其次，上面代码一共用了两个库： react.js 和 Browser.js ，它们必须首先加载。其中，Browser.js 的作用是将 JSX 语法转为 JavaScript 语法。这一步很消耗时间，实际上线的时候，应该将它放到服务器完成。</p><blockquote><pre class=\" language-bash\">$&nbsp;babel&nbsp;src&nbsp;--out-dir&nbsp;build</pre></blockquote><p>上面命令可以将 src 子目录的 js 文件进行语法转换，转码后的文件全部放在 build 子目录。</p><h2>二、React.render()</h2><p>React.render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点。</p><blockquote><pre class=\" language-javascript\">React.render(\n&nbsp;&nbsp;&lt;h1&gt;Hello,&nbsp;world!&lt;/h1&gt;,\n&nbsp;&nbsp;document.getElementById(&#39;example&#39;));</pre></blockquote><p>上面代码将一个 h1 标题，插入 example 节点（查看 <a target=\"_blank\" href=\"https://github.com/ruanyf/react-demos/blob/master/demo01/index.html\">demo01</a>），运行结果如下。</p><p><img src=\"http://image.beekka.com/blog/2015/bg2015033109.png\" alt=\"\" title=\"\"/></p><h2>三、JSX 语法</h2><p>上一节的代码， HTML 语言直接写在 JavaScript 语言之中，不加任何引号，这就是 <a target=\"_blank\" href=\"http://facebook.github.io/react/docs/displaying-data.html#jsx-syntax\">JSX 的语法</a>，它允许 HTML 与 JavaScript 的混写（查看 <a target=\"_blank\" href=\"https://github.com/ruanyf/react-demos/blob/master/demo02/index.html\">Demo02</a> ）。</p><blockquote><pre class=\" language-javascript\">var&nbsp;names&nbsp;=&nbsp;[&#39;Alice&#39;,&nbsp;&#39;Emily&#39;,&nbsp;&#39;Kate&#39;];React.render(\n&nbsp;&nbsp;&lt;div&gt;\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;names.map(function&nbsp;(name)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&lt;div&gt;Hello,&nbsp;{name}!&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;})\n&nbsp;&nbsp;}\n&nbsp;&nbsp;&lt;/div&gt;,\n&nbsp;&nbsp;document.getElementById(&#39;example&#39;));</pre></blockquote><p>上面代码体现了 JSX 的基本语法规则：遇到 HTML 标签（以 &lt; 开头），就用 HTML 规则解析；遇到代码块（以 { 开头），就用 JavaScript 规则解析。上面代码的运行结果如下。</p><p><img src=\"http://image.beekka.com/blog/2015/bg2015033106.png\" alt=\"\" title=\"\"/></p><p>JSX 允许直接在模板插入 JavaScript 变量。如果这个变量是一个数组，则会展开这个数组的所有成员（查看 <a target=\"_blank\" href=\"https://github.com/ruanyf/react-demos/blob/master/demo03/index.html\">demo03</a> ）。</p><blockquote><pre class=\" language-javascript\">var&nbsp;arr&nbsp;=&nbsp;[\n&nbsp;&nbsp;&lt;h1&gt;Hello&nbsp;world!&lt;/h1&gt;,\n&nbsp;&nbsp;&lt;h2&gt;React&nbsp;is&nbsp;awesome&lt;/h2&gt;,];React.render(\n&nbsp;&nbsp;&lt;div&gt;{arr}&lt;/div&gt;,\n&nbsp;&nbsp;document.getElementById(&#39;example&#39;));</pre></blockquote><p>上面代码的arr变量是一个数组，结果 JSX 会把它的所有成员，添加到模板，运行结果如下。</p><p><img src=\"http://image.beekka.com/blog/2015/bg2015033107.png\" alt=\"\" title=\"\"/></p><h2>四、组件</h2><p>React 允许将代码封装成组件（component），然后像插入普通 HTML 标签一样，在网页中插入这个组件。React.createClass 方法就用于生成一个组件类（查看 <a target=\"_blank\" href=\"https://github.com/ruanyf/react-demos/blob/master/demo04/index.html\">demo04</a>）。</p><blockquote><pre class=\" language-javascript\">var&nbsp;HelloMessage&nbsp;=&nbsp;React.createClass({\n&nbsp;&nbsp;render:&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&lt;h1&gt;Hello&nbsp;{this.props.name}&lt;/h1&gt;;\n&nbsp;&nbsp;}});React.render(\n&nbsp;&nbsp;&lt;HelloMessage&nbsp;name=&quot;John&quot;&nbsp;/&gt;,\n&nbsp;&nbsp;document.getElementById(&#39;example&#39;));</pre></blockquote><p>上面代码中，变量 HelloMessage 就是一个组件类。模板插入 &lt;HelloMessage /&gt; 时，会自动生成 \nHelloMessage 的一个实例（下文的&quot;组件&quot;都指组件类的实例）。所有组件类都必须有自己的 render 方法，用于输出组件。</p><p>组件的用法与原生的 HTML 标签完全一致，可以任意加入属性，比如 &lt;HelloMessage &nbsp;name=&quot;John&quot; /&gt;\n ，就是 HelloMessage 组件加入一个 name 属性，值为 John。组件的属性可以在组件类的 this.props \n对象上获取，比如 name 属性就可以通过 this.props.name 读取。上面代码的运行结果如下。</p><p><img src=\"http://image.beekka.com/blog/2015/bg2015033108.png\" alt=\"\" title=\"\"/></p><p>添加组件属性，有一个地方需要注意，就是 class 属性需要写成 className ，for 属性需要写成 htmlFor ，这是因为 class 和 for 是 JavaScript 的保留字。</p><h2>五、this.props.children</h2><p>this.props 对象的属性与组件的属性一一对应，但是有一个例外，就是 this.props.children 属性。它表示组件的所有子节点（查看 <a target=\"_blank\" href=\"https://github.com/ruanyf/react-demos/blob/master/demo05/index.html\">demo05</a>）。</p><blockquote><pre class=\" language-javascript\">var&nbsp;NotesList&nbsp;=&nbsp;React.createClass({\n&nbsp;&nbsp;render:&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ol&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.props.children.map(function&nbsp;(child)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&lt;li&gt;{child}&lt;/li&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ol&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;);\n&nbsp;&nbsp;}});React.render(\n&nbsp;&nbsp;&lt;NotesList&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;span&gt;hello&lt;/span&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;span&gt;world&lt;/span&gt;\n&nbsp;&nbsp;&lt;/NotesList&gt;,\n&nbsp;&nbsp;document.body);</pre></blockquote><p>上面代码的 NoteList 组件有两个 span 子节点，它们都可以通过 this.props.children 读取，运行结果如下。</p><p><img src=\"http://image.beekka.com/blog/2015/bg2015033110.png\" alt=\"\" title=\"\"/></p><p>这里需要注意，只有当子节点多余1个时，this.props.children 才是一个数组，否则是不能用 map 方法的， 会报错。</p><h2>六、PropTypes</h2><p>组件的属性可以接受任意值，字符串、对象、函数等等都可以。有时，我们需要一种机制，验证别人使用组件时，提供的参数是否符合要求。</p><p>组件类的PropTypes属性，就是用来验证组件实例的属性是否符合要求（查看 <a target=\"_blank\" href=\"https://github.com/ruanyf/react-demos/blob/master/demo06/index.html\">demo06</a>）。</p><blockquote><pre class=\" language-javascript\">var&nbsp;MyTitle&nbsp;=&nbsp;React.createClass({\n&nbsp;&nbsp;propTypes:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;title:&nbsp;React.PropTypes.string.isRequired,\n&nbsp;&nbsp;},\n\n&nbsp;&nbsp;render:&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&lt;h1&gt;&nbsp;{this.props.title}&nbsp;&lt;/h1&gt;;\n&nbsp;&nbsp;&nbsp;}});</pre></blockquote><p>上面的Mytitle组件有一个title属性。PropTypes 告诉 React，这个 title 属性是必须的，而且它的值必须是字符串。现在，我们设置 title 属性的值是一个数值。</p><blockquote><pre class=\" language-javascript\">var&nbsp;data&nbsp;=&nbsp;123;React.render(\n&nbsp;&nbsp;&lt;MyTitle&nbsp;title={data}&nbsp;/&gt;,\n&nbsp;&nbsp;document.body);</pre></blockquote><p>这样一来，title属性就通不过验证了。控制台会显示一行错误信息。</p><blockquote><pre class=\" language-bash\">Warning:&nbsp;Failed&nbsp;propType:&nbsp;Invalid&nbsp;prop&nbsp;`title`&nbsp;of&nbsp;type&nbsp;`number`&nbsp;supplied&nbsp;to&nbsp;`MyTitle`,&nbsp;expected&nbsp;`string`.</pre></blockquote><p>更多的PropTypes设置，可以查看<a target=\"_blank\" href=\"http://facebook.github.io/react/docs/reusable-components.html\">官方文档</a>。</p><p>此外，getDefaultProps 方法可以用来设置组件属性的默认值。</p><blockquote><pre class=\" language-javascript\">var&nbsp;MyTitle&nbsp;=&nbsp;React.createClass({\n&nbsp;&nbsp;getDefaultProps&nbsp;:&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title&nbsp;:&nbsp;&#39;Hello&nbsp;World&#39;\n&nbsp;&nbsp;&nbsp;&nbsp;};\n&nbsp;&nbsp;},\n\n&nbsp;&nbsp;render:&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&lt;h1&gt;&nbsp;{this.props.title}&nbsp;&lt;/h1&gt;;\n&nbsp;&nbsp;&nbsp;}});React.render(\n&nbsp;&nbsp;&lt;MyTitle&nbsp;/&gt;,\n&nbsp;&nbsp;document.body);</pre></blockquote><p>上面代码会输出&quot;Hello World&quot;。</p><h2>七、React.findDOMNode()</h2><p>组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual \nDOM）。只有当它插入文档以后，才会变成真实的 DOM 。根据 React 的设计，所有的 DOM 变动，都先在虚拟 DOM \n上发生，然后再将实际发生变动的部分，反映在真实 DOM上，这种算法叫做 <a target=\"_blank\" href=\"http://calendar.perfplanet.com/2013/diff/\">DOM diff</a> ，它可以极大提高网页的性能表现。</p><p>但是，有时需要从组件获取真实 DOM 的节点，这时就要用到 React.findDOMNode 方法（查看 <a target=\"_blank\" href=\"https://github.com/ruanyf/react-demos/blob/master/demo07/index.html\">demo07</a> ）。</p><blockquote><pre class=\" language-javascript\">var&nbsp;MyComponent&nbsp;=&nbsp;React.createClass({\n&nbsp;&nbsp;handleClick:&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;React.findDOMNode(this.refs.myTextInput).focus();\n&nbsp;&nbsp;},\n&nbsp;&nbsp;render:&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;ref=&quot;myTextInput&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;button&quot;&nbsp;value=&quot;Focus&nbsp;the&nbsp;text&nbsp;input&quot;&nbsp;onClick={this.handleClick}&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;);\n&nbsp;&nbsp;}});React.render(\n&nbsp;&nbsp;&lt;MyComponent&nbsp;/&gt;,\n&nbsp;&nbsp;document.getElementById(&#39;example&#39;));</pre></blockquote><p>上面代码中，组件 MyComponent 的子节点有一个文本输入框，用于获取用户的输入。这时就必须获取真实的 DOM 节点，虚拟 DOM \n是拿不到用户输入的。为了做到这一点，文本输入框必须有一个 ref 属性，然后 this.refs.[refName] 就指向这个虚拟 DOM \n的子节点，最后通过 React.findDOMNode 方法获取真实 DOM 的节点。</p><p>需要注意的是，由于 React.findDOMNode 方法获取的是真实 DOM ，所以必须等到虚拟 DOM \n插入文档以后，才能使用这个方法，否则会返回 null 。上面代码中，通过为组件指定 Click 事件的回调函数，确保了只有等到真实 DOM 发生\n Click 事件之后，才会调用 React.findDOMNode 方法。</p><p>React 组件支持很多事件，除了 Click 事件以外，还有 KeyDown 、Copy、Scroll 等，完整的事件清单请查看<a target=\"_blank\" href=\"http://facebook.github.io/react/docs/events.html#supported-events\">官方文档</a>。</p><h2>八、this.state</h2><p>组件免不了要与用户互动，React 的一大创新，就是将组件看成是一个状态机，一开始有一个初始状态，然后用户互动，导致状态变化，从而触发重新渲染 UI （查看 <a target=\"_blank\" href=\"https://github.com/ruanyf/react-demos/blob/master/demo08/index.html\">demo08</a> ）。</p><blockquote><pre class=\" language-javascript\">var&nbsp;LikeButton&nbsp;=&nbsp;React.createClass({\n&nbsp;&nbsp;getInitialState:&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{liked:&nbsp;false};\n&nbsp;&nbsp;},\n&nbsp;&nbsp;handleClick:&nbsp;function(event)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;this.setState({liked:&nbsp;!this.state.liked});\n&nbsp;&nbsp;},\n&nbsp;&nbsp;render:&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;text&nbsp;=&nbsp;this.state.liked&nbsp;?&nbsp;&#39;like&#39;&nbsp;:&nbsp;&#39;haven\\&#39;t&nbsp;liked&#39;;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&nbsp;onClick={this.handleClick}&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;You&nbsp;{text}&nbsp;this.&nbsp;Click&nbsp;to&nbsp;toggle.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;);\n&nbsp;&nbsp;}});React.render(\n&nbsp;&nbsp;&lt;LikeButton&nbsp;/&gt;,\n&nbsp;&nbsp;document.getElementById(&#39;example&#39;));</pre></blockquote><p>上面代码是一个 LikeButton 组件，它的 getInitialState 方法用于定义初始状态，也就是一个对象，这个对象可以通过 \nthis.state 属性读取。当用户点击组件，导致状态变化，this.setState 方法就修改状态值，每次修改以后，自动调用 \nthis.render 方法，再次渲染组件。</p><p>由于 this.props 和 this.state 都用于描述组件的特性，可能会产生混淆。一个简单的区分方法是，this.props 表示那些一旦定义，就不再改变的特性，而 this.state 是会随着用户互动而产生变化的特性。</p><h2>九、表单</h2><p>用户在表单填入的内容，属于用户跟组件的互动，所以不能用 this.props 读取（查看 <a target=\"_blank\" href=\"https://github.com/ruanyf/react-demos/blob/master/demo09/index.html\">demo9</a> ）。</p><blockquote><pre class=\" language-javascript\">var&nbsp;Input&nbsp;=&nbsp;React.createClass({\n&nbsp;&nbsp;getInitialState:&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{value:&nbsp;&#39;Hello!&#39;};\n&nbsp;&nbsp;},\n&nbsp;&nbsp;handleChange:&nbsp;function(event)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;this.setState({value:&nbsp;event.target.value});\n&nbsp;&nbsp;},\n&nbsp;&nbsp;render:&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;value&nbsp;=&nbsp;this.state.value;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;value={value}&nbsp;onChange={this.handleChange}&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;{value}&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;);\n&nbsp;&nbsp;}});React.render(&lt;Input/&gt;,&nbsp;document.body);</pre></blockquote><p>上面代码中，文本输入框的值，不能用 this.props.value 读取，而要定义一个 onChange 事件的回调函数，通过 \nevent.target.value 读取用户输入的值。textarea 元素、select元素、radio元素都属于这种情况，更多介绍请参考<a target=\"_blank\" href=\"http://facebook.github.io/react/docs/forms.html\">官方文档</a>。</p><h2>十、组件的生命周期</h2><p>组件的<a target=\"_blank\" href=\"https://facebook.github.io/react/docs/working-with-the-browser.html#component-lifecycle\">生命周期</a>分成三个状态：</p><ul class=\" list-paddingleft-2\"><li><p>Mounting：已插入真实 DOM</p></li><li><p>Updating：正在被重新渲染</p></li><li><p>Unmounting：已移出真实 DOM</p></li></ul><p>React 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数。</p><ul class=\" list-paddingleft-2\"><li><p>componentWillMount()</p></li><li><p>componentDidMount()</p></li><li><p>componentWillUpdate(object nextProps, object nextState)</p></li><li><p>componentDidUpdate(object prevProps, object prevState)</p></li><li><p>componentWillUnmount()</p></li></ul><p>此外，React 还提供两种特殊状态的处理函数。</p><ul class=\" list-paddingleft-2\"><li><p>componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用</p></li><li><p>shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用</p></li></ul><p>这些方法的详细说明，可以参考<a target=\"_blank\" href=\"http://facebook.github.io/react/docs/component-specs.html#lifecycle-methods\">官方文档</a>。下面是一个例子（查看 <a target=\"_blank\" href=\"https://github.com/ruanyf/react-demos/blob/master/demo10/index.html\">demo10</a> ）。</p><blockquote><pre class=\" language-javascript\">var&nbsp;Hello&nbsp;=&nbsp;React.createClass({\n&nbsp;&nbsp;getInitialState:&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opacity:&nbsp;1.0\n&nbsp;&nbsp;&nbsp;&nbsp;};\n&nbsp;&nbsp;},\n\n&nbsp;&nbsp;componentDidMount:&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;this.timer&nbsp;=&nbsp;setInterval(function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;opacity&nbsp;=&nbsp;this.state.opacity;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opacity&nbsp;-=&nbsp;.05;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(opacity&nbsp;&lt;&nbsp;0.1)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opacity&nbsp;=&nbsp;1.0;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.setState({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opacity:&nbsp;opacity&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;}.bind(this),&nbsp;100);\n&nbsp;&nbsp;},\n\n&nbsp;&nbsp;render:&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;style={{opacity:&nbsp;this.state.opacity}}&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hello&nbsp;{this.props.name}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;);\n&nbsp;&nbsp;}});React.render(\n&nbsp;&nbsp;&lt;Hello&nbsp;name=&quot;world&quot;/&gt;,\n&nbsp;&nbsp;document.body);</pre></blockquote><p>上面代码在hello组件加载以后，通过 componentDidMount 方法设置一个定时器，每隔100毫秒，就重新设置组件的透明度，从而引发重新渲染。</p><p>另外，组件的style属性的设置方式也值得注意，不能写成</p><blockquote><pre class=\" language-javascript\">style=&quot;opacity:{this.state.opacity};&quot;</pre></blockquote><p>而要写成</p><blockquote><pre class=\" language-javascript\">style={{opacity:&nbsp;this.state.opacity}}</pre></blockquote><p>这是因为 <a target=\"_blank\" href=\"https://facebook.github.io/react/tips/inline-styles.html\">React 组件样式</a>是一个对象，所以第一重大括号表示这是 JavaScript 语法，第二重大括号表示样式对象。</p><h2>十一、Ajax</h2><p>组件的数据来源，通常是通过 Ajax 请求从服务器获取，可以使用 componentDidMount 方法设置 Ajax 请求，等到请求成功，再用 this.setState 方法重新渲染 UI （查看 <a target=\"_blank\" href=\"https://github.com/ruanyf/react-demos/blob/master/demo11/index.html\">demo11</a> ）。</p><blockquote><pre class=\" language-javascript\">var&nbsp;UserGist&nbsp;=&nbsp;React.createClass({\n&nbsp;&nbsp;getInitialState:&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;username:&nbsp;&#39;&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastGistUrl:&nbsp;&#39;&#39;\n&nbsp;&nbsp;&nbsp;&nbsp;};\n&nbsp;&nbsp;},\n\n&nbsp;&nbsp;componentDidMount:&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;$.get(this.props.source,&nbsp;function(result)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;lastGist&nbsp;=&nbsp;result[0];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(this.isMounted())&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.setState({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;username:&nbsp;lastGist.owner.login,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastGistUrl:&nbsp;lastGist.html_url&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}.bind(this));\n&nbsp;&nbsp;},\n\n&nbsp;&nbsp;render:&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{this.state.username}&#39;s&nbsp;last&nbsp;gist&nbsp;is&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a&nbsp;href={this.state.lastGistUrl}&gt;here&lt;/a&gt;.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;);\n&nbsp;&nbsp;}});React.render(\n&nbsp;&nbsp;&lt;UserGist&nbsp;source=&quot;https://api.github.com/users/octocat/gists&quot;&nbsp;/&gt;,\n&nbsp;&nbsp;document.body);</pre></blockquote><p>上面代码使用 jQuery 完成 Ajax 请求，这是为了便于说明。React 没有任何依赖，完全可以使用其他库。</p><h2>十二、参考链接</h2><ol start=\"1\" class=\" list-paddingleft-2\"><li><p><a target=\"_blank\" href=\"http://facebook.github.io/react\">React&#39;s official site</a></p></li><li><p><a target=\"_blank\" href=\"https://github.com/facebook/react/tree/master/examples\">React&#39;s official examples</a></p></li><li><p><a target=\"_blank\" href=\"http://facebook.github.io/react/docs/glossary.html\">React (Virtual) DOM Terminology</a>, by Sebastian Markbåge</p></li><li><p><a target=\"_blank\" href=\"http://www.jackcallister.com/2015/01/05/the-react-quick-start-guide.html\">The React Quick Start Guide</a>, by Jack Callister</p></li><li><p><a target=\"_blank\" href=\"https://scotch.io/tutorials/learning-react-getting-started-and-concepts\">Learning React.js: Getting Started and Concepts</a>, by Ken Wheeler</p></li><li><p><a target=\"_blank\" href=\"http://ryanclark.me/getting-started-with-react/\">Getting started with React</a>, by Ryan Clark</p></li><li><p><a target=\"_blank\" href=\"https://zapier.com/engineering/react-js-tutorial-guide-gotchas/\">React JS Tutorial and Guide to the Gotchas</a>, by Justin Deal</p></li><li><p><a target=\"_blank\" href=\"https://github.com/BinaryMuse/react-primer\">React Primer</a>, by Binary Muse</p></li><li><p><a target=\"_blank\" href=\"http://blog.zigomir.com/react.js/jquery/2015/01/11/jquery-versus-react-thinking.html\">jQuery versus React.js thinking</a>, by zigomir</p></li></ol><p>（完）</p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"原文地址：http://www.ruanyifeng.com/blog/2015/03/react.html\\n\\n现在最热门的前端框架，毫无疑问是 React 。\\n上周，基于 React 的 React Native 发布，结果一天之内，就获得了 5000 颗星，受瞩目程度可见一斑。 \\nReact 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设 Instagram 的网站。做出来以后，发现这套东西很好用，就在2013年5月开源了。\\n\"},{\"type\":\"image\",\"content\":\"http://image.beekka.com/blog/2015/bg2015033101.png\"},{\"type\":\"contents\",\"content\":\"\\n由于 React 的设计思想极其独特，属于革命性创新，性能出众，代码逻辑却非常简单。所以，越来越多的人开始关注和使用，认为它可能是将来 Web 开发的主流工具。\\n这个项目本身也越滚越大，从最早的UI引擎变成了一整套前后端通吃的 Web App 解决方案。衍生的 React Native 项目，目标更是宏伟，希望用写 Web App 的方式去写 Native App。如果能够实现，整个互联网行业都会被颠覆，因为同一组人只需要写一次 UI ，就能同时运行在服务器、浏览器和手机（参见《也许，DOM 不是答案》）。\\n\"},{\"type\":\"image\",\"content\":\"http://image.beekka.com/blog/2015/bg2015031302.jpg\"},{\"type\":\"contents\",\"content\":\"\\n既然 React 这么热门，看上去充满希望，当然应该好好学一下。从技术角度，可以满足好奇心，提高技术水平；从职业角度，有利于求职和晋升，有利于参与潜力大的项目。但是，好的 React 教程却不容易找到，这一方面因为这项技术太新，刚刚开始走红，大家都没有经验，还在摸索之中；另一方面因为 React 本身还在不断变动，API 一直在调整，至今没发布1.0版。\\n\"},{\"type\":\"image\",\"content\":\"http://image.beekka.com/blog/2015/bg2015033103.png\"},{\"type\":\"contents\",\"content\":\"\\n我学习 React 时，就很苦恼。有的教程讨论一些细节问题，对入门没帮助；有的教程写得不错，但比较短，无助于看清全貌。我断断续续学了几个月，看过二十几篇教程，在这个过程中，将对自己有帮助的 Demo 都收集下来，做成了一个库 React Demos 。\\n\"},{\"type\":\"image\",\"content\":\"http://image.beekka.com/blog/2015/bg2015033104.png\"},{\"type\":\"contents\",\"content\":\"\\n下面，我就根据这个库，写一篇全面又易懂的 React 入门教程。你只需要跟着每一个 Demo 做一遍，就能初步掌握 React 。当然，前提是你必须拥有基本 JavaScript 和 DOM 知识，但是你读完就会发现，React 所要求的预备知识真的很少。\\n零、安装\\nReact 的安装包，可以到官网下载。不过，React Demos 已经自带 React 源码，不用另外安装，只需把这个库拷贝到你的硬盘就行了。\\n$ git clone git@github.com:ruanyf/react-demos.git\\n\\n如果你没安装 git， 那就直接下载 zip 压缩包。\\n\"},{\"type\":\"image\",\"content\":\"http://image.beekka.com/blog/2015/bg2015033105.png\"},{\"type\":\"contents\",\"content\":\"\\n下面要讲解的11个例子在各个 Demo 子目录，每个目录都有一个 index.html 文件，在浏览器打开这个文件（大多数情况下双击即可），就能立刻看到效果。\\n需要说明的是，React 可以在浏览器运行，也可以在服务器运行，但是本教程只涉及浏览器。一方面是为了尽量保持简单，另一方面 React 的语法是一致的，服务器的用法与浏览器差别不大。Demo11  是服务器首屏渲染的例子，有兴趣的朋友可以自己去看源码。\\n一、HTML 模板\\n使用 React 的网页源码，结构大致如下。\\n&lt;!DOCTYPE html&gt;&lt;html&gt;\\n  &lt;head&gt;\\n    &lt;script src=\\\"../build/react.js\\\"&gt;&lt;/script&gt;\\n    &lt;script src=\\\"../build/browser.min.js\\\"&gt;&lt;/script&gt;\\n  &lt;/head&gt;\\n  &lt;body&gt;\\n    &lt;div id=\\\"example\\\"&gt;&lt;/div&gt;\\n    &lt;script type=\\\"text/jsx\\\"&gt;\\n      // ** Our code goes here! **    &lt;/script&gt;\\n  &lt;/body&gt;&lt;/html&gt;\\n\\n上面代码有两个地方需要注意。首先，最后一个 script 标签的 type 属性为 text/babel 。这是因为 React 独有的 JSX 语法，跟 JavaScript 不兼容。凡是使用 JSX 的地方，都要加上 type=\\\"text/babel\\\" 。\\n其次，上面代码一共用了两个库： react.js 和 Browser.js ，它们必须首先加载。其中，Browser.js 的作用是将 JSX 语法转为 JavaScript 语法。这一步很消耗时间，实际上线的时候，应该将它放到服务器完成。\\n$ babel src --out-dir build\\n\\n上面命令可以将 src 子目录的 js 文件进行语法转换，转码后的文件全部放在 build 子目录。\\n二、React.render()\\nReact.render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点。\\nReact.render(\\n  &lt;h1&gt;Hello, world!&lt;/h1&gt;,\\n  document.getElementById(\'example\'));\\n\\n上面代码将一个 h1 标题，插入 example 节点（查看 demo01），运行结果如下。\\n\"},{\"type\":\"image\",\"content\":\"http://image.beekka.com/blog/2015/bg2015033109.png\"},{\"type\":\"contents\",\"content\":\"\\n三、JSX 语法\\n上一节的代码， HTML 语言直接写在 JavaScript 语言之中，不加任何引号，这就是 JSX 的语法，它允许 HTML 与 JavaScript 的混写（查看 Demo02 ）。\\nvar names = [\'Alice\', \'Emily\', \'Kate\'];React.render(\\n  &lt;div&gt;\\n  {\\n    names.map(function (name) {\\n      return &lt;div&gt;Hello, {name}!&lt;/div&gt;\\n    })\\n  }\\n  &lt;/div&gt;,\\n  document.getElementById(\'example\'));\\n\\n上面代码体现了 JSX 的基本语法规则：遇到 HTML 标签（以 &lt; 开头），就用 HTML 规则解析；遇到代码块（以 { 开头），就用 JavaScript 规则解析。上面代码的运行结果如下。\\n\"},{\"type\":\"image\",\"content\":\"http://image.beekka.com/blog/2015/bg2015033106.png\"},{\"type\":\"contents\",\"content\":\"\\nJSX 允许直接在模板插入 JavaScript 变量。如果这个变量是一个数组，则会展开这个数组的所有成员（查看 demo03 ）。\\nvar arr = [\\n  &lt;h1&gt;Hello world!&lt;/h1&gt;,\\n  &lt;h2&gt;React is awesome&lt;/h2&gt;,];React.render(\\n  &lt;div&gt;{arr}&lt;/div&gt;,\\n  document.getElementById(\'example\'));\\n\\n上面代码的arr变量是一个数组，结果 JSX 会把它的所有成员，添加到模板，运行结果如下。\\n\"},{\"type\":\"image\",\"content\":\"http://image.beekka.com/blog/2015/bg2015033107.png\"},{\"type\":\"contents\",\"content\":\"\\n四、组件\\nReact 允许将代码封装成组件（component），然后像插入普通 HTML 标签一样，在网页中插入这个组件。React.createClass 方法就用于生成一个组件类（查看 demo04）。\\nvar HelloMessage = React.createClass({\\n  render: function() {\\n    return &lt;h1&gt;Hello {this.props.name}&lt;/h1&gt;;\\n  }});React.render(\\n  &lt;HelloMessage name=\\\"John\\\" /&gt;,\\n  document.getElementById(\'example\'));\\n\\n上面代码中，变量 HelloMessage 就是一个组件类。模板插入 &lt;HelloMessage /&gt; 时，会自动生成 HelloMessage 的一个实例（下文的\\\"组件\\\"都指组件类的实例）。所有组件类都必须有自己的 render 方法，用于输出组件。\\n组件的用法与原生的 HTML 标签完全一致，可以任意加入属性，比如 &lt;HelloMessage  name=\\\"John\\\" /&gt; ，就是 HelloMessage 组件加入一个 name 属性，值为 John。组件的属性可以在组件类的 this.props 对象上获取，比如 name 属性就可以通过 this.props.name 读取。上面代码的运行结果如下。\\n\"},{\"type\":\"image\",\"content\":\"http://image.beekka.com/blog/2015/bg2015033108.png\"},{\"type\":\"contents\",\"content\":\"\\n添加组件属性，有一个地方需要注意，就是 class 属性需要写成 className ，for 属性需要写成 htmlFor ，这是因为 class 和 for 是 JavaScript 的保留字。\\n五、this.props.children\\nthis.props 对象的属性与组件的属性一一对应，但是有一个例外，就是 this.props.children 属性。它表示组件的所有子节点（查看 demo05）。\\nvar NotesList = React.createClass({\\n  render: function() {\\n    return (\\n      &lt;ol&gt;\\n      {\\n        this.props.children.map(function (child) {\\n          return &lt;li&gt;{child}&lt;/li&gt;\\n        })\\n      }\\n      &lt;/ol&gt;\\n    );\\n  }});React.render(\\n  &lt;NotesList&gt;\\n    &lt;span&gt;hello&lt;/span&gt;\\n    &lt;span&gt;world&lt;/span&gt;\\n  &lt;/NotesList&gt;,\\n  document.body);\\n\\n上面代码的 NoteList 组件有两个 span 子节点，它们都可以通过 this.props.children 读取，运行结果如下。\\n\"},{\"type\":\"image\",\"content\":\"http://image.beekka.com/blog/2015/bg2015033110.png\"},{\"type\":\"contents\",\"content\":\"\\n这里需要注意，只有当子节点多余1个时，this.props.children 才是一个数组，否则是不能用 map 方法的， 会报错。\\n六、PropTypes\\n组件的属性可以接受任意值，字符串、对象、函数等等都可以。有时，我们需要一种机制，验证别人使用组件时，提供的参数是否符合要求。\\n组件类的PropTypes属性，就是用来验证组件实例的属性是否符合要求（查看 demo06）。\\nvar MyTitle = React.createClass({\\n  propTypes: {\\n    title: React.PropTypes.string.isRequired,\\n  },\\n\\n  render: function() {\\n     return &lt;h1&gt; {this.props.title} &lt;/h1&gt;;\\n   }});\\n\\n上面的Mytitle组件有一个title属性。PropTypes 告诉 React，这个 title 属性是必须的，而且它的值必须是字符串。现在，我们设置 title 属性的值是一个数值。\\nvar data = 123;React.render(\\n  &lt;MyTitle title={data} /&gt;,\\n  document.body);\\n\\n这样一来，title属性就通不过验证了。控制台会显示一行错误信息。\\nWarning: Failed propType: Invalid prop `title` of type `number` supplied to `MyTitle`, expected `string`.\\n\\n更多的PropTypes设置，可以查看官方文档。\\n此外，getDefaultProps 方法可以用来设置组件属性的默认值。\\nvar MyTitle = React.createClass({\\n  getDefaultProps : function () {\\n    return {\\n      title : \'Hello World\'\\n    };\\n  },\\n\\n  render: function() {\\n     return &lt;h1&gt; {this.props.title} &lt;/h1&gt;;\\n   }});React.render(\\n  &lt;MyTitle /&gt;,\\n  document.body);\\n\\n上面代码会输出\\\"Hello World\\\"。\\n七、React.findDOMNode()\\n组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM）。只有当它插入文档以后，才会变成真实的 DOM 。根据 React 的设计，所有的 DOM 变动，都先在虚拟 DOM 上发生，然后再将实际发生变动的部分，反映在真实 DOM上，这种算法叫做 DOM diff ，它可以极大提高网页的性能表现。\\n但是，有时需要从组件获取真实 DOM 的节点，这时就要用到 React.findDOMNode 方法（查看 demo07 ）。\\nvar MyComponent = React.createClass({\\n  handleClick: function() {\\n    React.findDOMNode(this.refs.myTextInput).focus();\\n  },\\n  render: function() {\\n    return (\\n      &lt;div&gt;\\n        &lt;input type=\\\"text\\\" ref=\\\"myTextInput\\\" /&gt;\\n        &lt;input type=\\\"button\\\" value=\\\"Focus the text input\\\" onClick={this.handleClick} /&gt;\\n      &lt;/div&gt;\\n    );\\n  }});React.render(\\n  &lt;MyComponent /&gt;,\\n  document.getElementById(\'example\'));\\n\\n上面代码中，组件 MyComponent 的子节点有一个文本输入框，用于获取用户的输入。这时就必须获取真实的 DOM 节点，虚拟 DOM 是拿不到用户输入的。为了做到这一点，文本输入框必须有一个 ref 属性，然后 this.refs.[refName] 就指向这个虚拟 DOM 的子节点，最后通过 React.findDOMNode 方法获取真实 DOM 的节点。\\n需要注意的是，由于 React.findDOMNode 方法获取的是真实 DOM ，所以必须等到虚拟 DOM 插入文档以后，才能使用这个方法，否则会返回 null 。上面代码中，通过为组件指定 Click 事件的回调函数，确保了只有等到真实 DOM 发生 Click 事件之后，才会调用 React.findDOMNode 方法。\\nReact 组件支持很多事件，除了 Click 事件以外，还有 KeyDown 、Copy、Scroll 等，完整的事件清单请查看官方文档。\\n八、this.state\\n组件免不了要与用户互动，React 的一大创新，就是将组件看成是一个状态机，一开始有一个初始状态，然后用户互动，导致状态变化，从而触发重新渲染 UI （查看 demo08 ）。\\nvar LikeButton = React.createClass({\\n  getInitialState: function() {\\n    return {liked: false};\\n  },\\n  handleClick: function(event) {\\n    this.setState({liked: !this.state.liked});\\n  },\\n  render: function() {\\n    var text = this.state.liked ? \'like\' : \'haven\\\\\'t liked\';\\n    return (\\n      &lt;p onClick={this.handleClick}&gt;\\n        You {text} this. Click to toggle.\\n      &lt;/p&gt;\\n    );\\n  }});React.render(\\n  &lt;LikeButton /&gt;,\\n  document.getElementById(\'example\'));\\n\\n上面代码是一个 LikeButton 组件，它的 getInitialState 方法用于定义初始状态，也就是一个对象，这个对象可以通过 this.state 属性读取。当用户点击组件，导致状态变化，this.setState 方法就修改状态值，每次修改以后，自动调用 this.render 方法，再次渲染组件。\\n由于 this.props 和 this.state 都用于描述组件的特性，可能会产生混淆。一个简单的区分方法是，this.props 表示那些一旦定义，就不再改变的特性，而 this.state 是会随着用户互动而产生变化的特性。\\n九、表单\\n用户在表单填入的内容，属于用户跟组件的互动，所以不能用 this.props 读取（查看 demo9 ）。\\nvar Input = React.createClass({\\n  getInitialState: function() {\\n    return {value: \'Hello!\'};\\n  },\\n  handleChange: function(event) {\\n    this.setState({value: event.target.value});\\n  },\\n  render: function () {\\n    var value = this.state.value;\\n    return (\\n      &lt;div&gt;\\n        &lt;input type=\\\"text\\\" value={value} onChange={this.handleChange} /&gt;\\n        &lt;p&gt;{value}&lt;/p&gt;\\n      &lt;/div&gt;\\n    );\\n  }});React.render(&lt;Input/&gt;, document.body);\\n\\n上面代码中，文本输入框的值，不能用 this.props.value 读取，而要定义一个 onChange 事件的回调函数，通过 event.target.value 读取用户输入的值。textarea 元素、select元素、radio元素都属于这种情况，更多介绍请参考官方文档。\\n十、组件的生命周期\\n组件的生命周期分成三个状态：\\nMounting：已插入真实 DOM\\nUpdating：正在被重新渲染\\nUnmounting：已移出真实 DOM\\n\\nReact 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数。\\ncomponentWillMount()\\ncomponentDidMount()\\ncomponentWillUpdate(object nextProps, object nextState)\\ncomponentDidUpdate(object prevProps, object prevState)\\ncomponentWillUnmount()\\n\\n此外，React 还提供两种特殊状态的处理函数。\\ncomponentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用\\nshouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用\\n\\n这些方法的详细说明，可以参考官方文档。下面是一个例子（查看 demo10 ）。\\nvar Hello = React.createClass({\\n  getInitialState: function () {\\n    return {\\n      opacity: 1.0\\n    };\\n  },\\n\\n  componentDidMount: function () {\\n    this.timer = setInterval(function () {\\n      var opacity = this.state.opacity;\\n      opacity -= .05;\\n      if (opacity &lt; 0.1) {\\n        opacity = 1.0;\\n      }\\n      this.setState({\\n        opacity: opacity      });\\n    }.bind(this), 100);\\n  },\\n\\n  render: function () {\\n    return (\\n      &lt;div style={{opacity: this.state.opacity}}&gt;\\n        Hello {this.props.name}\\n      &lt;/div&gt;\\n    );\\n  }});React.render(\\n  &lt;Hello name=\\\"world\\\"/&gt;,\\n  document.body);\\n\\n上面代码在hello组件加载以后，通过 componentDidMount 方法设置一个定时器，每隔100毫秒，就重新设置组件的透明度，从而引发重新渲染。\\n另外，组件的style属性的设置方式也值得注意，不能写成\\nstyle=\\\"opacity:{this.state.opacity};\\\"\\n\\n而要写成\\nstyle={{opacity: this.state.opacity}}\\n\\n这是因为 React 组件样式是一个对象，所以第一重大括号表示这是 JavaScript 语法，第二重大括号表示样式对象。\\n十一、Ajax\\n组件的数据来源，通常是通过 Ajax 请求从服务器获取，可以使用 componentDidMount 方法设置 Ajax 请求，等到请求成功，再用 this.setState 方法重新渲染 UI （查看 demo11 ）。\\nvar UserGist = React.createClass({\\n  getInitialState: function() {\\n    return {\\n      username: \'\',\\n      lastGistUrl: \'\'\\n    };\\n  },\\n\\n  componentDidMount: function() {\\n    $.get(this.props.source, function(result) {\\n      var lastGist = result[0];\\n      if (this.isMounted()) {\\n        this.setState({\\n          username: lastGist.owner.login,\\n          lastGistUrl: lastGist.html_url        });\\n      }\\n    }.bind(this));\\n  },\\n\\n  render: function() {\\n    return (\\n      &lt;div&gt;\\n        {this.state.username}\'s last gist is        &lt;a href={this.state.lastGistUrl}&gt;here&lt;/a&gt;.\\n      &lt;/div&gt;\\n    );\\n  }});React.render(\\n  &lt;UserGist source=\\\"https://api.github.com/users/octocat/gists\\\" /&gt;,\\n  document.body);\\n\\n上面代码使用 jQuery 完成 Ajax 请求，这是为了便于说明。React 没有任何依赖，完全可以使用其他库。\\n十二、参考链接\\nReact\'s official site\\nReact\'s official examples\\nReact (Virtual) DOM Terminology, by Sebastian Markbåge\\nThe React Quick Start Guide, by Jack Callister\\nLearning React.js: Getting Started and Concepts, by Ken Wheeler\\nGetting started with React, by Ryan Clark\\nReact JS Tutorial and Guide to the Gotchas, by Justin Deal\\nReact Primer, by Binary Muse\\njQuery versus React.js thinking, by zigomir\\n\\n（完）\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444894963000.jpg','2015-09-16 03:01:14','2020-08-20 15:44:24'),(327,'NodeJs利用七牛云存储实现图片上传缩略图生成等操作','利用七牛云存储实现图片上传缩略图','1','1','','七牛云存储,nodejs','2',NULL,'','七牛云存储是在准备做上传功能的时候接触到的，于是发现很多站点都在用，于是仔细研究了下。优势在于提供10G的免费空间和每月额定的流量，对于小站已经足够免费使用了，于是尝试集成到了cms中，目前感觉还不错。','1','','','0:01',762,'2','0',NULL,1,'0',231533,'<p>作为国内比较出色的oss内容存储，七牛有一下几个特点：</p><p><br/></p><p style=\"text-align: center;\"><img alt=\"pic-safety.png\" src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_7_31_13_55_42_450_1000.png\" title=\"\"/></p><h3>1、安全性</h3><p>针对用户上传的数据，至少创建三副本并跨IDC存储到多个数据中心，保证数据的高可用性和可靠性。用户可通过七牛的身份验证机制设置不同的访问权限和访问级别。</p><p><br/></p><h3>2、弹性空间</h3><p>七牛的存储系统支持弹性扩容，让您无需担心存储空间不足。七牛的存储、加速节点遍布全球，且每个节点都是读/写/同步IO，真正做到数据实时一致，从而保障了读写性能不会随着数据量增长而降低。</p><p><br/></p><h3>3、按需付费</h3><p>用多少，花多少！传统的存储方式，基本是按峰值预估带宽和空间，但日常用不到那么大的量。使用七牛云存储，可以帮您节省高达70%的存储成本。</p><p><br/></p><h3>4、持续在线</h3><p>所有的故障（IDC故障、设备故障等）和升级（系统升级、扩容等）透明化，您感觉到的是持续可用的服务。七牛的服务7x24小时在线，避免服务升级或服务器宕机而导致数据不可访问。</p><p><br/></p><p>在分发加速和数据处理方面也做的不错，提供丰富的api可以实现复杂的需求，目前我就最简单的图片上传说明一下。</p><p><br/></p><p>主要用到了七牛的JS SDK 和 NodeJs sdk</p><p><br/></p><p>1、前端引入js文件：</p><pre class=\"brush:js;toolbar:false\">&lt;!--七牛上传--&gt;\n&lt;script&nbsp;src=&quot;/plugins/qiniu/plupload.full.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&nbsp;src=&quot;/plugins/qiniu/qiniu.js&quot;&gt;&lt;/script&gt;</pre><p>2、前端表现层：</p><pre class=\"brush:js;toolbar:false\">&lt;div&nbsp;class=&quot;col-sm-4&nbsp;selectHeaderLog&quot;&nbsp;id=&quot;upContainer&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button&nbsp;class=&quot;btn&nbsp;btn-gray&quot;&nbsp;role=&quot;button&quot;&nbsp;id=&quot;pickfiles&quot;&gt;选择图片&lt;/button&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;jpg、gif、png格式，尺寸要求：&lt;font&nbsp;color=&quot;#c00&quot;&gt;100x100/px&lt;/font&gt;&lt;/p&gt;\n&lt;/div&gt;</pre><p><br/></p><p>3、初始化上传按钮：</p><pre class=\"brush:js;toolbar:false\">//初始化七牛云存储\nfunction&nbsp;initQiniuBtn($scope,containerId,bottonId,callBack){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;uploader&nbsp;=&nbsp;Qiniu.uploader({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;runtimes:&nbsp;&#39;html5,flash,html4&#39;,&nbsp;&nbsp;&nbsp;&nbsp;//上传模式,依次退化\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;browse_button:&nbsp;&#39;pickfiles&#39;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//上传选择的点选按钮，**必需**\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uptoken_url:&nbsp;&#39;/users/qiniu/upToken&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Ajax请求upToken的Url，**强烈建议设置**（服务端提供）\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;uptoken&nbsp;:&nbsp;&#39;&lt;Your&nbsp;upload&nbsp;token&gt;&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//若未指定uptoken_url,则必须指定&nbsp;uptoken&nbsp;,uptoken由其他程序生成\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;unique_names:&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;默认&nbsp;false，key为文件名。若开启该选项，SDK会为每个文件自动生成key（文件名）\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;save_key:&nbsp;true,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;默认&nbsp;false。若在服务端生成uptoken的上传策略中指定了&nbsp;`sava_key`，则开启，SDK在前端将不对key进行任何处理\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;domain:&nbsp;&#39;http://7xkrk4.com1.z0.glb.clouddn.com/&#39;,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//bucket&nbsp;域名，下载资源时用到，**必需**\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;container:&nbsp;&#39;upContainer&#39;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//上传区域DOM&nbsp;ID，默认是browser_button的父元素，\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max_file_size:&nbsp;&#39;5mb&#39;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//最大文件体积限制\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flash_swf_url:&nbsp;&#39;js/plupload/Moxie.swf&#39;,&nbsp;&nbsp;//引入flash,相对路径\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max_retries:&nbsp;3,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//上传失败最大重试次数\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dragdrop:&nbsp;true,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//开启可拖曳上传\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drop_element:&nbsp;&#39;container&#39;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//拖曳上传区域元素的ID，拖曳文件或文件夹后可触发上传\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chunk_size:&nbsp;&#39;4mb&#39;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//分块上传时，每片的体积\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;auto_start:&nbsp;true,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//选择文件后自动上传，若关闭需要自己绑定事件触发上传\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filters:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mime_types&nbsp;:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{title&nbsp;:&nbsp;&quot;Image&nbsp;files&quot;,&nbsp;extensions:&nbsp;&quot;jpg,jpeg,gif,png&quot;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;multi_selection&nbsp;:&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;FilesAdded&#39;:&nbsp;function(up,&nbsp;files)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plupload.each(files,&nbsp;function(file)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;文件添加进队列后,处理相关的事情\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;BeforeUpload&#39;:&nbsp;function(up,&nbsp;file)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;每个文件上传前,处理相关的事情\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;UploadProgress&#39;:&nbsp;function(up,&nbsp;file)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;每个文件上传时,处理相关的事情\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;FileUploaded&#39;:&nbsp;function(up,&nbsp;file,&nbsp;info)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;domain&nbsp;=&nbsp;up.getOption(&#39;domain&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;res&nbsp;=&nbsp;jQuery.parseJSON(info);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callBack($scope,domain,res);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;Error&#39;:&nbsp;function(up,&nbsp;err,&nbsp;errTip)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//上传出错时,处理相关的事情\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;UploadComplete&#39;:&nbsp;function()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//队列文件处理完毕后,处理相关的事情\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;Key&#39;:&nbsp;function(up,&nbsp;file)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;若想在前端对每个文件的key进行个性化处理，可以配置该函数\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;该配置必须要在&nbsp;unique_names:&nbsp;false&nbsp;,&nbsp;save_key:&nbsp;false&nbsp;时才生效\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;key&nbsp;=&nbsp;&quot;&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;do&nbsp;something&nbsp;with&nbsp;key&nbsp;here\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;key\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;});\n//&nbsp;domain&nbsp;为七牛空间（bucket)对应的域名，选择某个空间后，可通过&quot;空间设置-&gt;基本设置-&gt;域名设置&quot;查看获取\n//&nbsp;uploader&nbsp;为一个plupload对象，继承了所有plupload的方法，参考http://plupload.com/docs\n}</pre><p><br/></p><p><br/></p><p>上面是七牛提供的初始化按钮的方式，在七牛文档可以找到，我在这里做了点小改动，传入了callBack 回调函数，通过后面的</p><p><br/></p><pre class=\"brush:js;toolbar:false\">initQiniuBtn($scope,&#39;upContainer&#39;,&#39;pickfiles&#39;,afterUpdateLogo);</pre><p>方式进行调用，这样其它的上传按钮就可以用同一个初始化的方法了，不用重复写。</p><p><br/></p><p>4、服务端只实现了一个获取 upToken 的方法，服务端需要先安装nodejs sdk</p><pre class=\"brush:js;toolbar:false\">npm&nbsp;install&nbsp;qiniu&nbsp;--save</pre><p><br/></p><pre class=\"brush:js;toolbar:false\">//七牛获取uptoken\n//七牛云存储\nvar&nbsp;qiniu&nbsp;=&nbsp;require(&#39;qiniu&#39;);\n\n//七牛key\nqiniu.conf.ACCESS_KEY&nbsp;=&nbsp;Settings.QINIUACCESS_KEY;\nqiniu.conf.SECRET_KEY&nbsp;=&nbsp;Settings.QINIUSECRET_KEY;\n\nrouter.get(&#39;/qiniu/upToken&#39;,&nbsp;function(req,&nbsp;res,&nbsp;next)&nbsp;{\n\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;myUptoken&nbsp;=&nbsp;new&nbsp;qiniu.rs.PutPolicy(Settings.QINIUCMSBUCKETNAME);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;token&nbsp;=&nbsp;myUptoken.token();\n&nbsp;&nbsp;&nbsp;&nbsp;moment.locale(&#39;en&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;currentKey&nbsp;=&nbsp;moment(new&nbsp;Date()).format(&#39;YYYY-MM-DD--HH-mm-ss&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;res.header(&quot;Cache-Control&quot;,&nbsp;&quot;max-age=0,&nbsp;private,&nbsp;must-revalidate&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;res.header(&quot;Pragma&quot;,&nbsp;&quot;no-cache&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;res.header(&quot;Expires&quot;,&nbsp;0);\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(token)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.json({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uptoken:&nbsp;token,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sava_key&nbsp;:currentKey\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n});</pre><p><br/></p><p>我这里返回了两个参数：</p><p>uptoken 必须，赋予客户端上传权限</p><p>save_key 非必须，定义上传文件名称参数</p><p><br/></p><p>大功告成<br/></p>','[{\"type\":\"contents\",\"content\":\"作为国内比较出色的oss内容存储，七牛有一下几个特点：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_7_31_13_55_42_450_1000.png\"},{\"type\":\"contents\",\"content\":\"\\n1、安全性\\n针对用户上传的数据，至少创建三副本并跨IDC存储到多个数据中心，保证数据的高可用性和可靠性。用户可通过七牛的身份验证机制设置不同的访问权限和访问级别。\\n\\n2、弹性空间\\n七牛的存储系统支持弹性扩容，让您无需担心存储空间不足。七牛的存储、加速节点遍布全球，且每个节点都是读/写/同步IO，真正做到数据实时一致，从而保障了读写性能不会随着数据量增长而降低。\\n\\n3、按需付费\\n用多少，花多少！传统的存储方式，基本是按峰值预估带宽和空间，但日常用不到那么大的量。使用七牛云存储，可以帮您节省高达70%的存储成本。\\n\\n4、持续在线\\n所有的故障（IDC故障、设备故障等）和升级（系统升级、扩容等）透明化，您感觉到的是持续可用的服务。七牛的服务7x24小时在线，避免服务升级或服务器宕机而导致数据不可访问。\\n\\n在分发加速和数据处理方面也做的不错，提供丰富的api可以实现复杂的需求，目前我就最简单的图片上传说明一下。\\n\\n主要用到了七牛的JS SDK 和 NodeJs sdk\\n\\n1、前端引入js文件：\\n&lt;!--七牛上传--&gt;\\n&lt;script src=\\\"/plugins/qiniu/plupload.full.min.js\\\"&gt;&lt;/script&gt;\\n&lt;script src=\\\"/plugins/qiniu/qiniu.js\\\"&gt;&lt;/script&gt;\\n2、前端表现层：\\n&lt;div class=\\\"col-sm-4 selectHeaderLog\\\" id=\\\"upContainer\\\"&gt;\\n       &lt;button class=\\\"btn btn-gray\\\" role=\\\"button\\\" id=\\\"pickfiles\\\"&gt;选择图片&lt;/button&gt;\\n       &lt;p&gt;jpg、gif、png格式，尺寸要求：&lt;font color=\\\"#c00\\\"&gt;100x100/px&lt;/font&gt;&lt;/p&gt;\\n&lt;/div&gt;\\n\\n3、初始化上传按钮：\\n//初始化七牛云存储\\nfunction initQiniuBtn($scope,containerId,bottonId,callBack){\\n    var uploader = Qiniu.uploader({\\n        runtimes: \'html5,flash,html4\',    //上传模式,依次退化\\n        browse_button: \'pickfiles\',       //上传选择的点选按钮，**必需**\\n        uptoken_url: \'/users/qiniu/upToken\',\\n        //Ajax请求upToken的Url，**强烈建议设置**（服务端提供）\\n        // uptoken : \'&lt;Your upload token&gt;\',\\n        //若未指定uptoken_url,则必须指定 uptoken ,uptoken由其他程序生成\\n        // unique_names: true,\\n        // 默认 false，key为文件名。若开启该选项，SDK会为每个文件自动生成key（文件名）\\n        save_key: true,\\n        // 默认 false。若在服务端生成uptoken的上传策略中指定了 `sava_key`，则开启，SDK在前端将不对key进行任何处理\\n        domain: \'http://7xkrk4.com1.z0.glb.clouddn.com/\',\\n        //bucket 域名，下载资源时用到，**必需**\\n        container: \'upContainer\',           //上传区域DOM ID，默认是browser_button的父元素，\\n        max_file_size: \'5mb\',           //最大文件体积限制\\n        flash_swf_url: \'js/plupload/Moxie.swf\',  //引入flash,相对路径\\n        max_retries: 3,                   //上传失败最大重试次数\\n        dragdrop: true,                   //开启可拖曳上传\\n        drop_element: \'container\',        //拖曳上传区域元素的ID，拖曳文件或文件夹后可触发上传\\n        chunk_size: \'4mb\',                //分块上传时，每片的体积\\n        auto_start: true,                 //选择文件后自动上传，若关闭需要自己绑定事件触发上传\\n        filters: {\\n            mime_types : [\\n                {title : \\\"Image files\\\", extensions: \\\"jpg,jpeg,gif,png\\\"}\\n            ]\\n        },\\n        multi_selection : false,\\n        init: {\\n            \'FilesAdded\': function(up, files) {\\n                plupload.each(files, function(file) {\\n                    // 文件添加进队列后,处理相关的事情\\n                });\\n            },\\n            \'BeforeUpload\': function(up, file) {\\n                // 每个文件上传前,处理相关的事情\\n            },\\n            \'UploadProgress\': function(up, file) {\\n                // 每个文件上传时,处理相关的事情\\n            },\\n            \'FileUploaded\': function(up, file, info) {\\n                var domain = up.getOption(\'domain\');\\n                var res = jQuery.parseJSON(info);\\n\\n                callBack($scope,domain,res);\\n\\n            },\\n            \'Error\': function(up, err, errTip) {\\n                //上传出错时,处理相关的事情\\n            },\\n            \'UploadComplete\': function() {\\n                //队列文件处理完毕后,处理相关的事情\\n            },\\n            \'Key\': function(up, file) {\\n                // 若想在前端对每个文件的key进行个性化处理，可以配置该函数\\n                // 该配置必须要在 unique_names: false , save_key: false 时才生效\\n                var key = \\\"\\\";\\n                // do something with key here\\n                return key\\n            }\\n        }\\n    });\\n// domain 为七牛空间（bucket)对应的域名，选择某个空间后，可通过\\\"空间设置-&gt;基本设置-&gt;域名设置\\\"查看获取\\n// uploader 为一个plupload对象，继承了所有plupload的方法，参考http://plupload.com/docs\\n}\\n\\n\\n上面是七牛提供的初始化按钮的方式，在七牛文档可以找到，我在这里做了点小改动，传入了callBack 回调函数，通过后面的\\n\\ninitQiniuBtn($scope,\'upContainer\',\'pickfiles\',afterUpdateLogo);\\n方式进行调用，这样其它的上传按钮就可以用同一个初始化的方法了，不用重复写。\\n\\n4、服务端只实现了一个获取 upToken 的方法，服务端需要先安装nodejs sdk\\nnpm install qiniu --save\\n\\n//七牛获取uptoken\\n//七牛云存储\\nvar qiniu = require(\'qiniu\');\\n\\n//七牛key\\nqiniu.conf.ACCESS_KEY = Settings.QINIUACCESS_KEY;\\nqiniu.conf.SECRET_KEY = Settings.QINIUSECRET_KEY;\\n\\nrouter.get(\'/qiniu/upToken\', function(req, res, next) {\\n\\n    var myUptoken = new qiniu.rs.PutPolicy(Settings.QINIUCMSBUCKETNAME);\\n    var token = myUptoken.token();\\n    moment.locale(\'en\');\\n    var currentKey = moment(new Date()).format(\'YYYY-MM-DD--HH-mm-ss\');\\n    res.header(\\\"Cache-Control\\\", \\\"max-age=0, private, must-revalidate\\\");\\n    res.header(\\\"Pragma\\\", \\\"no-cache\\\");\\n    res.header(\\\"Expires\\\", 0);\\n    if (token) {\\n        res.json({\\n            uptoken: token,\\n            sava_key :currentKey\\n        });\\n    }\\n\\n});\\n\\n我这里返回了两个参数：\\nuptoken 必须，赋予客户端上传权限\\nsave_key 非必须，定义上传文件名称参数\\n\\n大功告成\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444889802000.jpg','2015-07-31 06:13:20','2020-08-20 15:44:26'),(328,'NodeJs 根据链接生成二维码实现扫描后通过手机访问页面','NodeJs 根据链接生成二维码','1','1','','二维码,nodejs','2',NULL,'','今天给文档详情页增加了二维码扫描的功能，这个功能也是自己百度的，比较简单，记录下','1','','','0:01',762,'2','0',NULL,0,'0',226360,'<p>&nbsp;&nbsp;&nbsp;&nbsp;今天给文档详情页增加了二维码扫描的功能，这个功能也是自己百度的，比较简单，记录下。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;生成二维码需要一个小插件，对比了一下，qr-image ( https://github.com/alexeyten/qr-image) 比较合适，轻量级，操作方便。步骤如下：</p><p><br/></p><p>1、安装 qr-image</p><pre class=\"brush:js;toolbar:false\">npm&nbsp;install&nbsp;qr-image&nbsp;--save</pre><p>这里加 --save 可以把该插件自动加入到package文件里，比较方便</p><p><br/></p><p>2、实现（后端）</p><pre class=\"brush:js;toolbar:false\">//文章二维码生成\nrouter.get(&#39;/qrImg/show&#39;,&nbsp;function(req,&nbsp;res,&nbsp;next)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;params&nbsp;=&nbsp;url.parse(req.url,true);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;detailLink&nbsp;=&nbsp;params.query.detailLink;\n&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;img&nbsp;=&nbsp;qr.image(detailLink,{size&nbsp;:10});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.writeHead(200,&nbsp;{&#39;Content-Type&#39;:&nbsp;&#39;image/png&#39;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;img.pipe(res);\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(e)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.writeHead(414,&nbsp;{&#39;Content-Type&#39;:&nbsp;&#39;text/html&#39;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end(&#39;&lt;h1&gt;414&nbsp;Request-URI&nbsp;Too&nbsp;Large&lt;/h1&gt;&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n});</pre><p>3、实现（前端）</p><pre class=\"brush:js;toolbar:false\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;img&nbsp;class=&quot;pull-left&quot;&nbsp;width=&quot;87&quot;&nbsp;height=&quot;87&quot;&nbsp;alt=&quot;手机预览此网页&quot;&nbsp;src=&quot;/content/qrImg/show?detailLink=http://&lt;%=myDomain%&gt;/details/&lt;%=detailInfo._id%&gt;.html&quot;/&gt;</pre><p>只需要请求接口 /content/qrImg/show , 将指定文章链接通过参数 detailLink 传到后台就可以了，有点类似验证码的概念，是不是很简单 <img src=\"http://img.baidu.com/hi/jx2/j_0005.gif\"/></p>','[{\"type\":\"contents\",\"content\":\"    今天给文档详情页增加了二维码扫描的功能，这个功能也是自己百度的，比较简单，记录下。\\n    生成二维码需要一个小插件，对比了一下，qr-image ( https://github.com/alexeyten/qr-image) 比较合适，轻量级，操作方便。步骤如下：\\n\\n1、安装 qr-image\\nnpm install qr-image --save\\n这里加 --save 可以把该插件自动加入到package文件里，比较方便\\n\\n2、实现（后端）\\n//文章二维码生成\\nrouter.get(\'/qrImg/show\', function(req, res, next) {\\n    var params = url.parse(req.url,true);\\n    var detailLink = params.query.detailLink;\\n    try {\\n        var img = qr.image(detailLink,{size :10});\\n        res.writeHead(200, {\'Content-Type\': \'image/png\'});\\n        img.pipe(res);\\n    } catch (e) {\\n        res.writeHead(414, {\'Content-Type\': \'text/html\'});\\n        res.end(\'&lt;h1&gt;414 Request-URI Too Large&lt;/h1&gt;\');\\n    }\\n});\\n3、实现（前端）\\n                    &lt;img class=\\\"pull-left\\\" width=\\\"87\\\" height=\\\"87\\\" alt=\\\"手机预览此网页\\\" src=\\\"/content/qrImg/show?detailLink=http://&lt;%=myDomain%&gt;/details/&lt;%=detailInfo._id%&gt;.html\\\"/&gt;\\n只需要请求接口 /content/qrImg/show , 将指定文章链接通过参数 detailLink 传到后台就可以了，有点类似验证码的概念，是不是很简单 \"},{\"type\":\"image\",\"content\":\"http://img.baidu.com/hi/jx2/j_0005.gif\"},{\"type\":\"contents\",\"content\":\"\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1438156693000.jpg','2015-07-29 08:04:23','2020-08-20 15:44:26'),(329,'CentOS6.5下源码安装git2.3','CentOS6.5下源码安装git2.3','1','1','','git安装','2',NULL,'','最近在折腾CentOS，感觉并不比 ubuntu来的顺利，时不时就报个错，yum安装git后clone代码又有提示，百度了才知道版本不对(v1.7.1)，于是尝试用新版的git源码安装','1','','','0:01',762,'2','0',NULL,0,'0',223941,'<p>最近在折腾CentOS，感觉并不比 ubuntu来的顺利，时不时就报个错，yum安装git后clone代码又有提示，百度了才知道版本不对(v1.7.1)，于是尝试用新版的git源码安装：</p><p><br/></p><p>&nbsp;(1) 添加rpmforge源<br/></p><pre class=\"brush:js;toolbar:false\">wget&nbsp;http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.i686.rpm\nsudo&nbsp;rpm&nbsp;--import&nbsp;http://apt.sw.be/RPM-GPG-KEY.dag.txt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nsudo&nbsp;rpm&nbsp;-i&nbsp;rpmforge-release-0.5.3-1.el6.rf.i686.rpm</pre><p>&nbsp;<br/>(2) 安装依赖的包<br/></p><pre class=\"brush:js;toolbar:false\">sudo&nbsp;yum&nbsp;update\nsudo&nbsp;yum&nbsp;install&nbsp;curl-devel&nbsp;expat-devel&nbsp;gettext-devel&nbsp;openssl-devel&nbsp;zlib-devel&nbsp;gcc&nbsp;perl-ExtUtils-MakeMaker</pre><p><br/>(3) 下载git源码并解压缩<br/></p><pre class=\"brush:js;toolbar:false\">wget&nbsp;https://www.kernel.org/pub/software/scm/git/git-2.3.0.tar.gz\ntar&nbsp;-zxvf&nbsp;git-2.3.0.tar.gz\ncd&nbsp;git-2.3.0</pre><p><br/>(4) 编译安装<br/></p><pre class=\"brush:js;toolbar:false\">make&nbsp;prefix=/usr/local/git&nbsp;all\nsudo&nbsp;make&nbsp;prefix=/usr/local/git&nbsp;install</pre><p><br/>(5) 将git安装路径添加到PATH变量<br/></p><pre class=\"brush:js;toolbar:false\">sudo&nbsp;vim&nbsp;/etc/bashrc</pre><p><br/>在最后一行添加 export PATH=/usr/local/git/bin:$PATH 保存退出<br/><br/>&nbsp;<br/>(6) 验证是否安装成功<br/></p><pre class=\"brush:js;toolbar:false\">source&nbsp;/etc/bashrc\ngit&nbsp;--version</pre><p><br/>(7) 配置git<br/></p><pre class=\"brush:js;toolbar:false\">git&nbsp;config&nbsp;--global&nbsp;user.name&nbsp;&quot;username&quot;\ngit&nbsp;config&nbsp;--global&nbsp;user.email&nbsp;&quot;user@mail.com&quot;</pre><p><br/></p><p>在git编译的过程中可能会报错：&nbsp;Can&#39;t locate ExtUtils/MakeMaker.pm ，可以这么做：</p><pre class=\"brush:js;toolbar:false\">yum&nbsp;install&nbsp;perl-ExtUtils-CBuilder&nbsp;perl-ExtUtils-MakeMaker</pre><p>运行后重新make，后面就正常了。<br/></p>','[{\"type\":\"contents\",\"content\":\"最近在折腾CentOS，感觉并不比 ubuntu来的顺利，时不时就报个错，yum安装git后clone代码又有提示，百度了才知道版本不对(v1.7.1)，于是尝试用新版的git源码安装：\\n\\n (1) 添加rpmforge源\\nwget http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.i686.rpm\\nsudo rpm --import http://apt.sw.be/RPM-GPG-KEY.dag.txt       \\nsudo rpm -i rpmforge-release-0.5.3-1.el6.rf.i686.rpm\\n \\n(2) 安装依赖的包\\nsudo yum update\\nsudo yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker\\n\\n(3) 下载git源码并解压缩\\nwget https://www.kernel.org/pub/software/scm/git/git-2.3.0.tar.gz\\ntar -zxvf git-2.3.0.tar.gz\\ncd git-2.3.0\\n\\n(4) 编译安装\\nmake prefix=/usr/local/git all\\nsudo make prefix=/usr/local/git install\\n\\n(5) 将git安装路径添加到PATH变量\\nsudo vim /etc/bashrc\\n\\n在最后一行添加 export PATH=/usr/local/git/bin:$PATH 保存退出\\n\\n \\n(6) 验证是否安装成功\\nsource /etc/bashrc\\ngit --version\\n\\n(7) 配置git\\ngit config --global user.name \\\"username\\\"\\ngit config --global user.email \\\"user@mail.com\\\"\\n\\n在git编译的过程中可能会报错： Can\'t locate ExtUtils/MakeMaker.pm ，可以这么做：\\nyum install perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker\\n运行后重新make，后面就正常了。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20160112191955.jpg','2016-01-12 11:26:21','2020-08-20 15:44:11'),(330,'第9天response 响应渲染 —动态渲染插件开发','动态渲染插件开发','2','1','','动态渲染','2',NULL,'','下面列出view插件源代码，然后对其进行讲解。lib/view.js源代码','1','','','0:01',762,'2','0',NULL,0,'0',223051,'<h3>动态渲染插件开发</h3><p>下面列出view插件源代码，然后对其进行讲解。</p><p><code>lib/view.js</code>源代码</p><pre>var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;),\n&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;=&nbsp;require(&quot;path&quot;);\n\n//&nbsp;过滤&nbsp;\\r\\n\nfunction&nbsp;filterRN(s){\n&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;=&nbsp;s.replace(&quot;\\&#39;&quot;,&quot;\\&quot;&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;=&nbsp;s.replace(/\\n/g,&quot;\\\\n&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;=&nbsp;s.replace(/\\r/g,&quot;\\\\r&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;result&nbsp;+=&nbsp;\\&#39;&quot;+s+&quot;\\&#39;;\\n\\r&quot;;\n}&nbsp;&nbsp;&nbsp;&nbsp;\n\nmodule.exports&nbsp;=&nbsp;function(viewPath){\n\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;viewCache&nbsp;=&nbsp;{}\n&nbsp;&nbsp;&nbsp;&nbsp;fs.readdir(viewPath,&nbsp;function(err,files){\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;files.forEach(function(fn){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;filePath&nbsp;=&nbsp;path.join(viewPath,fn);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fs.readFile(filePath,function(err,data){\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;str&nbsp;=&nbsp;data.toString();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;buf&nbsp;=&nbsp;[];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.push(&#39;var&nbsp;result&nbsp;=&nbsp;&quot;&quot;;&#39;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;htmlPart=&nbsp;&quot;&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var&nbsp;i=0,len&nbsp;=&nbsp;str.length;i&lt;len;){\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(str.slice(i,i+2)&nbsp;===&nbsp;&quot;&lt;%&quot;){\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;end&nbsp;=&nbsp;&nbsp;str.indexOf(&quot;%&gt;&quot;,i);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;jsPart&nbsp;=&nbsp;str.slice(i+2,end);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i&nbsp;=&nbsp;end+2;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.push(filterRN(htmlPart));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;htmlPart&nbsp;=&nbsp;&quot;&quot;;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(jsPart.slice(0,1)&nbsp;===&nbsp;&quot;=&quot;){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.push(&quot;\\r\\nresult&nbsp;+=&nbsp;&quot;+jsPart.slice(1)+&quot;;\\r\\n&quot;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.push(&quot;\\r\\n&quot;+jsPart+&quot;\\r\\n&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;htmlPart&nbsp;+=&nbsp;str.slice(i,i+1);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i&nbsp;+=&nbsp;1;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.push(filterRN(htmlPart));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.push(&quot;return&nbsp;result;&quot;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;viewCache[fn]&nbsp;=&nbsp;new&nbsp;Function(&quot;locals&quot;,buf.join(&quot;&quot;));\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.view&nbsp;=&nbsp;function(fileName,locals){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.write(viewCache[fileName](locals));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n}</pre><p>这个插件的原理，上节分析过了，下面对细节进行讲解。插件用到了核心库的两个模块 <code>fs</code>和<code>path</code>，fs都很熟悉了，<code>path.join</code>方法是把字符串连接为一个完整目录的方法，可以参考附录。viewCache用来储存模板页面Function形式的。插件在调用app.use(view(viewPath))时，会读取这个目录下的全部文件，然后转换为javascript Function对象，保存到viewCache之中。</p><p>转换一个模板文件的方法是从头读取，当遇到<code>&lt;%</code>时会通过indexOf找到配对的<code>%&gt;</code>，然后抽离出中间的javascript代码，保存到buf中。而启动它部分都转换为字符串对象<code>result += ......</code> ，接着添加<code>return result;</code>字符串。而这些字符串储存在 <code>var buf = [];</code>中，在最后通过 buf.join(&quot;&#39;)把这些字符串数组合并为一个字符串，就构成了view函数体，最后通过<code>viewCache[fn] = new Function(&quot;locals&quot;,buf.join(&quot;&quot;));</code> 转换为javascript Function对象保存到viewCache中。</p><p>filterRN函数是用来过滤 \\n\\r 并且把它们转换为 \\\\n \\\\r 形式，目的是保证函数体能正确执行。因为如果不过滤，就会出现以下的函数体：</p><pre>result&nbsp;+=&nbsp;&quot;\n&nbsp;&nbsp;&nbsp;abc\n&quot;</pre><p>这是错误的，javascript不支持这种写法，所以通过转换后就会得到如下形式：</p><pre>result&nbsp;+=&nbsp;&quot;\\r\\n&nbsp;abc&nbsp;\\r\\n&quot;;</pre><p>代码不是太复杂，仔细分析后就能理解。重要的是自己要动手去开发，想一想如果模板文件不是&lt;%%&gt;这种形式，换成其他的写法应该如何做这个插件，比如模板文件是缩进写法等等。当然转换后的形式应该都是javascript Function对象形式。</p><p>最后，我们在<code>index.js</code>文件中加入以下代码，view插件就算告一段落了。</p><pre>exports.view&nbsp;=&nbsp;require(&quot;./lib/view&quot;);</pre><p>下一节，将用一个实例进行说明。</p>','[{\"type\":\"contents\",\"content\":\"动态渲染插件开发\\n下面列出view插件源代码，然后对其进行讲解。\\nlib/view.js源代码\\nvar fs = require(\\\"fs\\\"),\\n    path = require(\\\"path\\\");\\n\\n// 过滤 \\\\r\\\\n\\nfunction filterRN(s){\\n    s = s.replace(\\\"\\\\\'\\\",\\\"\\\\\\\"\\\");\\n    s = s.replace(/\\\\n/g,\\\"\\\\\\\\n\\\");\\n    s = s.replace(/\\\\r/g,\\\"\\\\\\\\r\\\");\\n    return \\\"result += \\\\\'\\\"+s+\\\"\\\\\';\\\\n\\\\r\\\";\\n}    \\n\\nmodule.exports = function(viewPath){\\n\\n    var viewCache = {}\\n    fs.readdir(viewPath, function(err,files){\\n\\n        files.forEach(function(fn){\\n            var filePath = path.join(viewPath,fn);\\n            fs.readFile(filePath,function(err,data){\\n\\n                var str = data.toString();                \\n                var buf = [];\\n                buf.push(\'var result = \\\"\\\";\')\\n                var htmlPart= \\\"\\\";\\n                for(var i=0,len = str.length;i&lt;len;){\\n\\n                    if(str.slice(i,i+2) === \\\"&lt;%\\\"){\\n\\n                        var end =  str.indexOf(\\\"%&gt;\\\",i);\\n\\n                        var jsPart = str.slice(i+2,end);\\n\\n                        i = end+2;\\n                        buf.push(filterRN(htmlPart));\\n                        htmlPart = \\\"\\\";\\n\\n                        if(jsPart.slice(0,1) === \\\"=\\\"){\\n                            buf.push(\\\"\\\\r\\\\nresult += \\\"+jsPart.slice(1)+\\\";\\\\r\\\\n\\\")\\n                        }else{\\n                            buf.push(\\\"\\\\r\\\\n\\\"+jsPart+\\\"\\\\r\\\\n\\\");\\n                        }\\n\\n                    }else{\\n                        htmlPart += str.slice(i,i+1);\\n                        i += 1;\\n                    }\\n\\n                }\\n\\n                buf.push(filterRN(htmlPart));\\n                buf.push(\\\"return result;\\\")\\n                viewCache[fn] = new Function(\\\"locals\\\",buf.join(\\\"\\\"));\\n\\n            });\\n        })\\n    })\\n\\n    return function(req,res,next){\\n        res.view = function(fileName,locals){\\n            res.write(viewCache[fileName](locals));\\n            res.end();\\n        }\\n        next();\\n    }\\n\\n}\\n这个插件的原理，上节分析过了，下面对细节进行讲解。插件用到了核心库的两个模块 fs和path，fs都很熟悉了，path.join方法是把字符串连接为一个完整目录的方法，可以参考附录。viewCache用来储存模板页面Function形式的。插件在调用app.use(view(viewPath))时，会读取这个目录下的全部文件，然后转换为javascript Function对象，保存到viewCache之中。\\n转换一个模板文件的方法是从头读取，当遇到&lt;%时会通过indexOf找到配对的%&gt;，然后抽离出中间的javascript代码，保存到buf中。而启动它部分都转换为字符串对象result += ...... ，接着添加return result;字符串。而这些字符串储存在 var buf = [];中，在最后通过 buf.join(\\\"\')把这些字符串数组合并为一个字符串，就构成了view函数体，最后通过viewCache[fn] = new Function(\\\"locals\\\",buf.join(\\\"\\\")); 转换为javascript Function对象保存到viewCache中。\\nfilterRN函数是用来过滤 \\\\n\\\\r 并且把它们转换为 \\\\\\\\n \\\\\\\\r 形式，目的是保证函数体能正确执行。因为如果不过滤，就会出现以下的函数体：\\nresult += \\\"\\n   abc\\n\\\"\\n这是错误的，javascript不支持这种写法，所以通过转换后就会得到如下形式：\\nresult += \\\"\\\\r\\\\n abc \\\\r\\\\n\\\";\\n代码不是太复杂，仔细分析后就能理解。重要的是自己要动手去开发，想一想如果模板文件不是&lt;%%&gt;这种形式，换成其他的写法应该如何做这个插件，比如模板文件是缩进写法等等。当然转换后的形式应该都是javascript Function对象形式。\\n最后，我们在index.js文件中加入以下代码，view插件就算告一段落了。\\nexports.view = require(\\\"./lib/view\\\");\\n下一节，将用一个实例进行说明。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445235995000.jpg','2015-10-19 06:27:39','2020-08-20 15:44:17'),(331,'DoraCMSv1.1.0一个已知的漏洞','DoraCMSv1.1.0一个已知的漏洞','1','1','','doracms,bug修复','2',NULL,'','前段时间，一个使用DoraCMS的朋友提出了一个明显的漏洞。细心的童鞋会发现，用testuser登录html-js.cn后台有两个模块关闭访问了（文件管理和模板编辑），因为确实存在问题而一直没时间改，今天有空更新上去了。','1','','','0:01',762,'2','0',NULL,0,'0',223863,'<p style=\"text-align: center;\"><img alt=\"20120327_085220_1.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_3_6_23_29_38_818_1001.jpg\" title=\"\"/></p><p>前段时间，一个使用DoraCMS的朋友提出了一个明显的漏洞。细心的童鞋会发现，用testuser登录html-js.cn后台有两个模块关闭访问了（文件管理和模板编辑），因为确实存在问题而一直没时间改，今天有空更新上去了。</p><p>文件管理和模板编辑两个模块用到了nodejs的文件模块，用户和根据需要对指定目录下的文件进行增、删、改。其实赋予了对网站文件的root权限，这个做法是没有问题的，问题在于，我之前的处理对于返回的文件路径全部是绝对路径，这样就要命了，之前这个朋友通过手动改路径的方式，居然独到了我的系统文件，吓死宝宝了<img src=\"http://img.baidu.com/hi/face/i_f36.gif\"/>。于是，果断关掉了这两个模块。其实解决起来也简单，只要不暴露服务器的绝对路径，然后对访问路径做限定，就没有问题了。</p><p>重新打开，有兴趣的童鞋可以帮我测下。。。<img src=\"http://img.baidu.com/hi/face/i_f02.gif\"/></p><p><a title=\"文件管理\" target=\"_blank\" href=\"http://www.html-js.cn/admin/manage/filesList\">文件管理</a><br/></p><p><a title=\"模板编辑\" target=\"_blank\" href=\"http://www.html-js.cn/admin/manage/contentTempsEdit\">模板编辑</a><br/></p>','[{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_3_6_23_29_38_818_1001.jpg\"},{\"type\":\"contents\",\"content\":\"\\n前段时间，一个使用DoraCMS的朋友提出了一个明显的漏洞。细心的童鞋会发现，用testuser登录html-js.cn后台有两个模块关闭访问了（文件管理和模板编辑），因为确实存在问题而一直没时间改，今天有空更新上去了。\\n文件管理和模板编辑两个模块用到了nodejs的文件模块，用户和根据需要对指定目录下的文件进行增、删、改。其实赋予了对网站文件的root权限，这个做法是没有问题的，问题在于，我之前的处理对于返回的文件路径全部是绝对路径，这样就要命了，之前这个朋友通过手动改路径的方式，居然独到了我的系统文件，吓死宝宝了\"},{\"type\":\"image\",\"content\":\"http://img.baidu.com/hi/face/i_f36.gif\"},{\"type\":\"contents\",\"content\":\"。于是，果断关掉了这两个模块。其实解决起来也简单，只要不暴露服务器的绝对路径，然后对访问路径做限定，就没有问题了。\\n重新打开，有兴趣的童鞋可以帮我测下。。。\"},{\"type\":\"image\",\"content\":\"http://img.baidu.com/hi/face/i_f02.gif\"},{\"type\":\"contents\",\"content\":\"\\n文件管理\\n模板编辑\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20160306232902.jpg','2016-03-06 15:19:49','2020-08-20 15:44:10'),(332,'node.js 操作MongoDB 根据条件 随机取记录，怎么做？','nodejs 操作MongoDB 随机搜','1','1','','mongoose,mongodb','2',NULL,'','大家在用nodejs做开发的过程中，很多时候有需求，需要操作mongodb获取随机的一些数据，在mysql中，好像通过rand()可以获取，但是mongodb没有这样的方法，当然是可以解决的。','1','','','0:01',762,'2','0',NULL,0,'0',224311,'<p>&nbsp; &nbsp; 大家在用nodejs做开发的过程中，很多时候有需求，需要操作mongodb获取随机的一些数据，在mysql中，好像通过rand()可以获取，但是mongodb没有这样的方法，当然是可以解决的。代码如下：</p><pre class=\"brush:js;toolbar:false\">Content.find({&#39;type&#39;&nbsp;:&nbsp;&#39;content&#39;}).count(function(err,count){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;randomNum&nbsp;=&nbsp;Math.floor(count*Math.random());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;randomList&nbsp;=&nbsp;Content.find({&#39;type&#39;&nbsp;:&nbsp;&#39;content&#39;}).sort({&#39;date&#39;:-1}).skip(randomNum).limit(4);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.render(&#39;web/temp/&#39;+result.contentTemp+&#39;/detail&#39;,&nbsp;{\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;randomList&nbsp;:&nbsp;randomList,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});</pre><p><br/></p><p><br/></p><p>1、我们可以用过 Content.find().count 根据条件查询到符合条件的结果个数。</p><p>2、根据获取的个数通过Math方法取得随机数&nbsp;</p><p><br/></p><pre class=\"brush:js;toolbar:false\">Math.floor(count*Math.random())</pre><p><br/></p><p>3、将获取的随机数作为skip的参数查询返回到前端。</p><p><br/></p><pre class=\"brush:js;toolbar:false\">Content.find({&#39;type&#39;&nbsp;:&nbsp;&#39;content&#39;}).sort({&#39;date&#39;:-1}).skip(randomNum).limit(4);</pre><p><br/></p><p>在本站的详情页，大家可以看到实现的效果：<br/></p><p><br/></p><p><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_6_26_13_35_57_320_1000.jpg\" title=\"\" alt=\"QQ截图20150626133702.jpg\"/></p>','[{\"type\":\"contents\",\"content\":\"    大家在用nodejs做开发的过程中，很多时候有需求，需要操作mongodb获取随机的一些数据，在mysql中，好像通过rand()可以获取，但是mongodb没有这样的方法，当然是可以解决的。代码如下：\\nContent.find({\'type\' : \'content\'}).count(function(err,count){\\n                    var randomNum = Math.floor(count*Math.random());\\n                    var randomList = Content.find({\'type\' : \'content\'}).sort({\'date\':-1}).skip(randomNum).limit(4);\\n                    res.render(\'web/temp/\'+result.contentTemp+\'/detail\', {\\n \\n                        randomList : randomList,\\n                        \\n                    });\\n                });\\n\\n\\n1、我们可以用过 Content.find().count 根据条件查询到符合条件的结果个数。\\n2、根据获取的个数通过Math方法取得随机数 \\n\\nMath.floor(count*Math.random())\\n\\n3、将获取的随机数作为skip的参数查询返回到前端。\\n\\nContent.find({\'type\' : \'content\'}).sort({\'date\':-1}).skip(randomNum).limit(4);\\n\\n在本站的详情页，大家可以看到实现的效果：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_6_26_13_35_57_320_1000.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1435296469000.jpg','2015-07-02 03:36:49','2020-08-20 15:44:27'),(333,'Express 4.8.x—配置应用程序','配置应用程序','2','1','','express应用程序','2',NULL,'','通过 app.set(key,value) 设置，可以配置web应用程序，通过app.get(key) 可以得到值。','1','','','0:01',762,'2','0',NULL,0,'0',224085,'<h3>配置应用程序</h3><h4 id=\"-\">配置</h4><p>通过 <code>app.set(key,value)</code> 设置，可以配置web应用程序，通过<code>app.get(key)</code> 可以得到值。</p><h5 id=\"-\">选项如下：</h5><ul class=\" list-paddingleft-2\"><li><p><code>env</code> 运行时环境，默认为 process.env.NODE_ENV 或者 &quot;development&quot;</p></li><li><p><code>trust proxy</code> 激活反向代理，默认未激活状态</p></li><li><p><code>jsonp callback name</code> 修改默认?callback=的jsonp回调的名字</p></li><li><p><code>json replacer</code> JSON replacer 替换时的回调, 默认为null</p></li><li><p><code>json spaces</code> JSON 响应的空格数量，开发环境下是2 , 生产环境是0</p></li><li><p><code>case sensitive routing</code> 路由的大小写敏感, 默认是关闭状态， &quot;/Foo&quot; 和&quot;/foo&quot; 是一样的</p></li><li><p><code>strict routing</code> 路由的严格格式, 默认情况下 &quot;/foo&quot; 和 &quot;/foo/&quot; 是被同样对待的</p></li><li><p><code>view cache</code> 模板缓存，在生产环境中是默认开启的</p></li><li><p><code>view engine</code> 模板引擎</p></li><li><p><code>views</code> 模板的目录, 默认是&quot;process.cwd() + ./views&quot;</p></li></ul><p>这些配置项，常用的是 <code>view engine</code> 和 <code>views</code> &nbsp;</p><pre>//&nbsp;设置动态页目录\napp.set(&#39;views&#39;,&nbsp;path.join(__dirname,&nbsp;&#39;views&#39;));\n\n//&nbsp;设置动态模版引擎，这里用的是ejs引擎。\napp.set(&#39;view&nbsp;engine&#39;,&nbsp;&#39;ejs&#39;);</pre><h4 id=\"-\">加载中间件</h4><p>通过 <code>app.user</code> 方法可以加入中间件，扩展web应用程序的功能，自己也可方便的开发中间件。</p><p>以下是express默认生成的代码</p><pre>app.use(favicon());\napp.use(logger(&#39;dev&#39;));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded());\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname,&nbsp;&#39;public&#39;)));</pre><p>你可以配置多个静态目录，比如：</p><pre>app.use(express.static(path.join(__dirname,&nbsp;&#39;public&#39;)));\napp.use(express.static(path.join(__dirname,&nbsp;book)));</pre><p>会先从public目录找，如果没有会查找book目录。</p><h4 id=\"-\">模版引擎的配置说明</h4><p>通过调用 <code>app.engine(&#39;haml&#39;, engines.haml);</code> 可以让特定引擎，对特定扩展名的动态模版文件进行解析。</p><pre>var&nbsp;engines&nbsp;=&nbsp;require(&#39;consolidate&#39;);\napp.engine(&#39;haml&#39;,&nbsp;engines.haml);\napp.engine(&#39;html&#39;,&nbsp;engines.hogan);</pre><p>&#39;consolidate&#39; &nbsp;是一个库，可以铺平各个引擎集成到express差异性，因为并不是每个第三方引擎都遵守约定，所以&#39;consolidate&#39;起到了中间翻译的作用。</p><h4 id=\"-\">注意！</h4><p>app.engine 和 app.set(“view engine”,”...”) 到底什么关系呢？可以这么理解，你想改变对不同扩展名的动态模版进行解析，就要用到 app.engine，如下代码：</p><pre>var&nbsp;engines&nbsp;=&nbsp;require(&#39;consolidate&#39;);\napp.set(&#39;view&nbsp;engine&#39;,&nbsp;“html”);\napp.engine(&#39;html&#39;,&nbsp;engines.jade);</pre><p>这段代码说明，模版引擎采用了<code>html</code>引擎，这个很奇怪，其实是由于 app.engine(&#39;html&#39;, engines.jade); 这段代码注册了 html 引擎，而实际的解析是采用 jade 解析，就形成了可以对html扩展名文件进行解析，采用的解析方式是 jade。</p>','[{\"type\":\"contents\",\"content\":\"配置应用程序\\n配置\\n通过 app.set(key,value) 设置，可以配置web应用程序，通过app.get(key) 可以得到值。\\n选项如下：\\nenv 运行时环境，默认为 process.env.NODE_ENV 或者 \\\"development\\\"\\ntrust proxy 激活反向代理，默认未激活状态\\njsonp callback name 修改默认?callback=的jsonp回调的名字\\njson replacer JSON replacer 替换时的回调, 默认为null\\njson spaces JSON 响应的空格数量，开发环境下是2 , 生产环境是0\\ncase sensitive routing 路由的大小写敏感, 默认是关闭状态， \\\"/Foo\\\" 和\\\"/foo\\\" 是一样的\\nstrict routing 路由的严格格式, 默认情况下 \\\"/foo\\\" 和 \\\"/foo/\\\" 是被同样对待的\\nview cache 模板缓存，在生产环境中是默认开启的\\nview engine 模板引擎\\nviews 模板的目录, 默认是\\\"process.cwd() + ./views\\\"\\n\\n这些配置项，常用的是 view engine 和 views  \\n// 设置动态页目录\\napp.set(\'views\', path.join(__dirname, \'views\'));\\n\\n// 设置动态模版引擎，这里用的是ejs引擎。\\napp.set(\'view engine\', \'ejs\');\\n加载中间件\\n通过 app.user 方法可以加入中间件，扩展web应用程序的功能，自己也可方便的开发中间件。\\n以下是express默认生成的代码\\napp.use(favicon());\\napp.use(logger(\'dev\'));\\napp.use(bodyParser.json());\\napp.use(bodyParser.urlencoded());\\napp.use(cookieParser());\\napp.use(express.static(path.join(__dirname, \'public\')));\\n你可以配置多个静态目录，比如：\\napp.use(express.static(path.join(__dirname, \'public\')));\\napp.use(express.static(path.join(__dirname, book)));\\n会先从public目录找，如果没有会查找book目录。\\n模版引擎的配置说明\\n通过调用 app.engine(\'haml\', engines.haml); 可以让特定引擎，对特定扩展名的动态模版文件进行解析。\\nvar engines = require(\'consolidate\');\\napp.engine(\'haml\', engines.haml);\\napp.engine(\'html\', engines.hogan);\\n\'consolidate\'  是一个库，可以铺平各个引擎集成到express差异性，因为并不是每个第三方引擎都遵守约定，所以\'consolidate\'起到了中间翻译的作用。\\n注意！\\napp.engine 和 app.set(“view engine”,”...”) 到底什么关系呢？可以这么理解，你想改变对不同扩展名的动态模版进行解析，就要用到 app.engine，如下代码：\\nvar engines = require(\'consolidate\');\\napp.set(\'view engine\', “html”);\\napp.engine(\'html\', engines.jade);\\n这段代码说明，模版引擎采用了html引擎，这个很奇怪，其实是由于 app.engine(\'html\', engines.jade); 这段代码注册了 html 引擎，而实际的解析是采用 jade 解析，就形成了可以对html扩展名文件进行解析，采用的解析方式是 jade。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445057951000.jpg','2015-10-17 05:00:34','2020-08-20 15:44:22'),(334,'DoraCMS v1.1.1版本更新','DoraCMS v1.1.1版本更新','1','1','','版本更新','2',NULL,'','年后的第一次更新，开年比较忙，找工作、找房子各种事，最近整理了一下代码，把各位提出的一些明显的bug改了，感谢各位童鞋好的建议。本次更新的主要内容如下：','1','','','0:01',762,'2','0',NULL,1,'0',234124,'<p>年后的第一次更新，开年比较忙，找工作、找房子各种事，最近整理了一下代码，把各位提出的一些明显的bug改了，感谢各位童鞋好的建议。本次更新的主要内容如下：</p><p><br/></p><p>- 1、提取了管理员信息查询的静态方法</p><p>- 2、重新优化了广告模块，图片广告管理更方便了</p><p>- 3、修复了一个文档查询的bug（过滤掉隐藏的content），感谢@jier945的建议</p><p>- 4、修复了文件管理和模板编辑的bug（文件读取用相对路径更安全）</p><p>- 5、提取了关联对象删除的公共方法</p><p>- 6、添加文档页面添加了一个新增tag的入口</p><p>- 7、去掉了admin路由中的io（暂时用不上）</p><p>- 8、优化了后台路由，添加了adminCtrl过滤器从入口处先过滤一次非法请求，提高安全性</p><p>- 9、提取了一些中文信息提示为静态变量</p><p><br/></p><p>本次更新有两个比较大的改动：</p><p>1、广告管理模块优化了</p><p>图片广告之前是无法对每个图片属性进行编辑的，这次做了优化</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_3_20_22_16_32_303_1005.jpg\" title=\"\" alt=\"广告管理.jpg\"/></p><p><br/></p><p>2、后台入口添加了adminCtrl路由，从入口处先做一次校验，过滤掉一些非法访问，校验通过再处理后面的逻辑，同时去掉了admin.js中的一些冗余代码。</p><pre class=\"brush:js;toolbar:false\">//管理员主页\nrouter.get([&quot;/manage&quot;,&quot;/manage/*&quot;],function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;if(isAdminLogined(req)){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next();\n&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.redirect(&quot;/admin&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n});\n\n//模块管理页面\nrouter.get(&#39;/manage/:targetPage&#39;,&nbsp;function(req,&nbsp;res,&nbsp;next)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;currentPage&nbsp;=&nbsp;req.params.targetPage;\n&nbsp;&nbsp;&nbsp;&nbsp;if(settings[currentPage]){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!checkAdminPower(req,settings[currentPage][0]&nbsp;+&nbsp;&#39;_view&#39;)){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.render(&quot;manage/public/notice&quot;,&nbsp;adminFunc.setDataForInfo(&#39;danger&#39;,&#39;对不起，您无权操作&nbsp;&lt;strong&gt;&#39;+settings[currentPage][1]+&#39;&lt;/strong&gt;&nbsp;模块！&#39;));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n});\n\n//通用对象列表数据查询\nrouter.get(&#39;/manage/getDocumentList/:defaultUrl&#39;,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;currentPage&nbsp;=&nbsp;req.params.defaultUrl;\n&nbsp;&nbsp;&nbsp;&nbsp;if(checkAdminPower(req,currentPage&nbsp;+&nbsp;&#39;_view&#39;)){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next();\n&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;res.json({});\n&nbsp;&nbsp;&nbsp;&nbsp;}\n});\n\n//获取单个对象数据\nrouter.get(&#39;/manage/:defaultUrl/item&#39;,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;currentPage&nbsp;=&nbsp;req.params.defaultUrl;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;params&nbsp;=&nbsp;url.parse(req.url,true);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;targetId&nbsp;=&nbsp;params.query.uid;\n&nbsp;&nbsp;&nbsp;&nbsp;if(checkAdminPower(req,currentPage&nbsp;+&nbsp;&#39;_view&#39;)){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(shortid.isValid(targetId)){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end(settings.system_illegal_param);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;res.json({});\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n});\n\n//对象新增\nrouter.post(&#39;/manage/:defaultUrl/addOne&#39;,function(req,res,next){\n\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;currentPage&nbsp;=&nbsp;req.params.defaultUrl;\n&nbsp;&nbsp;&nbsp;&nbsp;if(adminFunc.checkAdminPower(req,currentPage&nbsp;+&nbsp;&#39;_add&#39;)){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next();\n&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end(settings.system_noPower);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n});\n\n//更新单条记录(执行更新)\nrouter.post(&#39;/manage/:defaultUrl/modify&#39;,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;currentPage&nbsp;=&nbsp;req.params.defaultUrl;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;params&nbsp;=&nbsp;url.parse(req.url,true);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;targetId&nbsp;=&nbsp;params.query.uid;\n&nbsp;&nbsp;&nbsp;&nbsp;if(checkAdminPower(req,currentPage&nbsp;+&nbsp;&#39;_modify&#39;)){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(shortid.isValid(targetId)){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end(settings.system_illegal_param);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end(settings.system_noPower);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n});\n\n//通用对象删除\nrouter.get(&#39;/manage/:defaultUrl/del&#39;,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;currentPage&nbsp;=&nbsp;req.params.defaultUrl;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;params&nbsp;=&nbsp;url.parse(req.url,true);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;targetId&nbsp;=&nbsp;params.query.uid;\n&nbsp;&nbsp;&nbsp;&nbsp;if(checkAdminPower(req,currentPage&nbsp;+&nbsp;&#39;_del&#39;)){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(shortid.isValid(targetId)){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end(settings.system_illegal_param);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end(settings.system_noPower);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n});\n\n//批量删除对象\nrouter.get(&#39;/manage/:defaultUrl/batchDel&#39;,function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;currentPage&nbsp;=&nbsp;req.params.defaultUrl;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;params&nbsp;=&nbsp;url.parse(req.url,true);\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;ids&nbsp;=&nbsp;params.query.ids;\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;idsArr&nbsp;=&nbsp;ids.split(&#39;,&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;if(adminFunc.checkAdminPower(req,currentPage&nbsp;+&nbsp;&#39;_del&#39;)){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(idsArr.length&nbsp;&gt;&nbsp;0){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end(settings.system_atLeast_one);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end(settings.system_noPower);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n});\n\n//访问指定对象的数据列表(不带分页)\nrouter.get(&#39;/manage/:modular/list&#39;,&nbsp;function(req,&nbsp;res,&nbsp;next)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;currentPage&nbsp;=&nbsp;req.params.modular;\n&nbsp;&nbsp;&nbsp;&nbsp;if(settings[currentPage]){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!checkAdminPower(req,settings[currentPage][0]&nbsp;+&nbsp;&#39;_view&#39;)){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;res.json({});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n});</pre><p>&nbsp;</p><p><strong><span style=\"color: rgb(192, 0, 0);\">3、adminCtrl.js 替换了之前的&nbsp;validat.js ，<strong><span style=\"color: rgb(192, 0, 0);\">validat</span>.js 不再使用。</strong>新安装的童鞋要注意了哈</span></strong></p>','[{\"type\":\"contents\",\"content\":\"年后的第一次更新，开年比较忙，找工作、找房子各种事，最近整理了一下代码，把各位提出的一些明显的bug改了，感谢各位童鞋好的建议。本次更新的主要内容如下：\\n\\n- 1、提取了管理员信息查询的静态方法\\n- 2、重新优化了广告模块，图片广告管理更方便了\\n- 3、修复了一个文档查询的bug（过滤掉隐藏的content），感谢@jier945的建议\\n- 4、修复了文件管理和模板编辑的bug（文件读取用相对路径更安全）\\n- 5、提取了关联对象删除的公共方法\\n- 6、添加文档页面添加了一个新增tag的入口\\n- 7、去掉了admin路由中的io（暂时用不上）\\n- 8、优化了后台路由，添加了adminCtrl过滤器从入口处先过滤一次非法请求，提高安全性\\n- 9、提取了一些中文信息提示为静态变量\\n\\n本次更新有两个比较大的改动：\\n1、广告管理模块优化了\\n图片广告之前是无法对每个图片属性进行编辑的，这次做了优化\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_3_20_22_16_32_303_1005.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n2、后台入口添加了adminCtrl路由，从入口处先做一次校验，过滤掉一些非法访问，校验通过再处理后面的逻辑，同时去掉了admin.js中的一些冗余代码。\\n//管理员主页\\nrouter.get([\\\"/manage\\\",\\\"/manage/*\\\"],function(req,res,next){\\n    if(isAdminLogined(req)){\\n        next();\\n    }else{\\n        res.redirect(\\\"/admin\\\");\\n    }\\n});\\n\\n//模块管理页面\\nrouter.get(\'/manage/:targetPage\', function(req, res, next) {\\n    var currentPage = req.params.targetPage;\\n    if(settings[currentPage]){\\n        if(!checkAdminPower(req,settings[currentPage][0] + \'_view\')){\\n            res.render(\\\"manage/public/notice\\\", adminFunc.setDataForInfo(\'danger\',\'对不起，您无权操作 &lt;strong&gt;\'+settings[currentPage][1]+\'&lt;/strong&gt; 模块！\'));\\n        }else{\\n            next();\\n        }\\n    }else{\\n        next();\\n    }\\n});\\n\\n//通用对象列表数据查询\\nrouter.get(\'/manage/getDocumentList/:defaultUrl\',function(req,res,next){\\n    var currentPage = req.params.defaultUrl;\\n    if(checkAdminPower(req,currentPage + \'_view\')){\\n        next();\\n    }else{\\n        return res.json({});\\n    }\\n});\\n\\n//获取单个对象数据\\nrouter.get(\'/manage/:defaultUrl/item\',function(req,res,next){\\n    var currentPage = req.params.defaultUrl;\\n    var params = url.parse(req.url,true);\\n    var targetId = params.query.uid;\\n    if(checkAdminPower(req,currentPage + \'_view\')){\\n        if(shortid.isValid(targetId)){\\n            next();\\n        }else{\\n            res.end(settings.system_illegal_param);\\n        }\\n    }else{\\n        return res.json({});\\n    }\\n\\n});\\n\\n//对象新增\\nrouter.post(\'/manage/:defaultUrl/addOne\',function(req,res,next){\\n\\n    var currentPage = req.params.defaultUrl;\\n    if(adminFunc.checkAdminPower(req,currentPage + \'_add\')){\\n        next();\\n    }else{\\n        res.end(settings.system_noPower);\\n    }\\n});\\n\\n//更新单条记录(执行更新)\\nrouter.post(\'/manage/:defaultUrl/modify\',function(req,res,next){\\n    var currentPage = req.params.defaultUrl;\\n    var params = url.parse(req.url,true);\\n    var targetId = params.query.uid;\\n    if(checkAdminPower(req,currentPage + \'_modify\')){\\n        if(shortid.isValid(targetId)){\\n            next();\\n        }else{\\n            res.end(settings.system_illegal_param);\\n        }\\n    }else{\\n        res.end(settings.system_noPower);\\n    }\\n});\\n\\n//通用对象删除\\nrouter.get(\'/manage/:defaultUrl/del\',function(req,res,next){\\n    var currentPage = req.params.defaultUrl;\\n    var params = url.parse(req.url,true);\\n    var targetId = params.query.uid;\\n    if(checkAdminPower(req,currentPage + \'_del\')){\\n        if(shortid.isValid(targetId)){\\n            next();\\n        }else{\\n            res.end(settings.system_illegal_param);\\n        }\\n\\n    }else{\\n        res.end(settings.system_noPower);\\n    }\\n});\\n\\n//批量删除对象\\nrouter.get(\'/manage/:defaultUrl/batchDel\',function(req,res,next){\\n    var currentPage = req.params.defaultUrl;\\n    var params = url.parse(req.url,true);\\n    var ids = params.query.ids;\\n    var idsArr = ids.split(\',\');\\n    if(adminFunc.checkAdminPower(req,currentPage + \'_del\')){\\n        if(idsArr.length &gt; 0){\\n            next();\\n        }else{\\n            res.end(settings.system_atLeast_one);\\n        }\\n    }else{\\n        res.end(settings.system_noPower);\\n    }\\n\\n});\\n\\n//访问指定对象的数据列表(不带分页)\\nrouter.get(\'/manage/:modular/list\', function(req, res, next) {\\n    var currentPage = req.params.modular;\\n    if(settings[currentPage]){\\n        if(!checkAdminPower(req,settings[currentPage][0] + \'_view\')){\\n            return res.json({});\\n        }else{\\n            next();\\n        }\\n    }else{\\n        next();\\n    }\\n});\\n\\n3、adminCtrl.js 替换了之前的 validat.js ，validat.js 不再使用。新安装的童鞋要注意了哈\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20160320220240.jpg','2016-03-20 14:13:54','2020-10-03 13:50:05'),(335,'Node.js API实例讲解——FS 文件夹操作','FS 文件夹操作','2','1','','nodejs,fs文件','2',NULL,'','FS 文件夹操作。创建文件夹，在当前目录下，创建一个mydir的文件夹','1','','','0:01',762,'2','0',NULL,0,'0',227207,'<h3>FS 文件夹操作</h3><h5 id=\"-\">创建文件夹</h5><p>在当前目录下，创建一个mydir的文件夹</p><p>异步实现代码：</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\nfs.mkdir(&quot;mydir&quot;,function(err){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(err)\n})</pre><p>同步实现代码:</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\nfs.mkdirSync(&quot;mydir&quot;);</pre><p>很简单，不做过多解释。</p><h5 id=\"-\">删除文件夹</h5><p>异步实现代码：</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\nfs.rmdir(&quot;mydir&quot;,function(err){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(err);\n})</pre><p>同步实现代码：</p><pre class=\"code\">fs.rmdirSync(&quot;mydir&quot;);</pre><h5 id=\"-\">文件夹重命名</h5><p>把当前目录下mydir文件夹改为mydir2名，如果没有mydir文件夹，那么会抛出异常err。</p><p>同步实现代码</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\n\nfs.rename(&quot;mydir&quot;,&quot;mydir2&quot;,function(err){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(err);\n})</pre><p>异步实现代码：</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);&nbsp;&nbsp;\nfs.renameSync(&quot;mydir&quot;,&quot;mydir2&quot;)</pre><h5 id=\"-\">查看文件夹内有哪些文件和文件夹。</h5><p>查看当前目录下有哪些文件，异步实现代码：</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\n\nfs.readdir(&quot;.&quot;,function(err,files){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(files)\n})</pre><p>回调函数中，err表示异常信息，比如文件夹不存在，files并不是文件本身，而是一个数组，数组里储存当前目录下有哪些文件夹和文件的字符串名称。</p><p>同步实现代码：</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\n\nvar&nbsp;files&nbsp;=&nbsp;fs.readdirSync(&quot;.&quot;);\nconsole.log(files);</pre><h5 id=\"-\">查看文件夹、文件属性状态</h5><p>查看当前文件夹状态属性</p><p>异步实现代码1 ：</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\n\nfs.stat(&quot;.&quot;,function(err,stats){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;stats.isFile()&nbsp;-&gt;&quot;&nbsp;+&nbsp;stats.isFile())\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;stats.isDirectory()&nbsp;-&gt;&nbsp;&quot;&nbsp;+&nbsp;stats.isDirectory())\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;stats.isBlockDevice()&nbsp;-&gt;&quot;&nbsp;+&nbsp;stats.isBlockDevice())\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;stats.isCharacterDevice()&quot;&nbsp;+&nbsp;stats.isCharacterDevice())\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;stats.isSymbolicLink()&nbsp;-&gt;&nbsp;&quot;+stats.isSymbolicLink())\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;stats.isFIFO()&nbsp;-&gt;&quot;&nbsp;+&nbsp;stats.isFIFO())\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;stats.isSocket()-&gt;&nbsp;&quot;&nbsp;+&nbsp;stats.isSocket())\n})</pre><p>回调函数的stats是一个fs.Stats对象，这个对象常用的方法是stats.isDirectory()和stats.isFile()，可以判断是文件还是文件夹。</p><p>异步实现代码2 ：</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\n\nfs.lstat(&quot;.&quot;,function(err,stats){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;stats.isFile()&nbsp;-&gt;&quot;&nbsp;+&nbsp;stats.isFile())\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;stats.isDirectory()&nbsp;-&gt;&nbsp;&quot;&nbsp;+&nbsp;stats.isDirectory())\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;stats.isBlockDevice()&nbsp;-&gt;&quot;&nbsp;+&nbsp;stats.isBlockDevice())\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;stats.isCharacterDevice()&quot;&nbsp;+&nbsp;stats.isCharacterDevice())\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;stats.isSymbolicLink()&nbsp;-&gt;&nbsp;&quot;+stats.isSymbolicLink())\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;stats.isFIFO()&nbsp;-&gt;&quot;&nbsp;+&nbsp;stats.isFIFO())\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;stats.isSocket()-&gt;&nbsp;&quot;&nbsp;+&nbsp;stats.isSocket())\n})</pre><p>这段代码和第一个实现代码一样，所不同的是使用了 fs.lstat方法，这个方法和stat方法的差别是，如果第一个参数是文件链接（linux用户比较熟悉）,那么stats.isSymbolicLink()会为真，而stats.isFile()和stats.isDirectory()为假。文件链接在node.js中可以通过fs.link方法来创建（可参看下一节“文件操作”）。</p><p>异步实现代码3 ：</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\nvar&nbsp;fd&nbsp;=&nbsp;fs.openSync(&quot;.&quot;,&quot;r&quot;);&nbsp;&nbsp;&nbsp;&nbsp;\nfs.fstat(fd,function(err,stats){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;stats.isFile()&nbsp;-&gt;&quot;&nbsp;+&nbsp;stats.isFile())\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;stats.isDirectory()&nbsp;-&gt;&nbsp;&quot;&nbsp;+&nbsp;stats.isDirectory())\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;stats.isBlockDevice()&nbsp;-&gt;&quot;&nbsp;+&nbsp;stats.isBlockDevice())\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;stats.isCharacterDevice()&quot;&nbsp;+&nbsp;stats.isCharacterDevice())\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;stats.isSymbolicLink()&nbsp;-&gt;&nbsp;&quot;+stats.isSymbolicLink())\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;stats.isFIFO()&nbsp;-&gt;&quot;&nbsp;+&nbsp;stats.isFIFO())\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;stats.isSocket()-&gt;&nbsp;&quot;&nbsp;+&nbsp;stats.isSocket())\n})</pre><p>这个实现方式，效果和前两种一样，不同点就是使用了fs.fstat方法，这个方法的第一个参数不是文件路径，而是文件描述符fd，通过fs.openSync同步方法得到了当前目录的fd文件描述符。</p><p>fs.openSync和异步fs.open方法将在下一节“文件操作”中详细介绍。</p><p>对应以上三种方法的同步实现代码：</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\nvar&nbsp;stats&nbsp;=&nbsp;fs.statSync(&quot;.&quot;)\nconsole.log(&quot;stats.isFile()&nbsp;-&gt;&quot;&nbsp;+&nbsp;stats.isFile())\nconsole.log(&quot;stats.isDirectory()&nbsp;-&gt;&nbsp;&quot;&nbsp;+&nbsp;stats.isDirectory())\nconsole.log(&quot;stats.isBlockDevice()&nbsp;-&gt;&quot;&nbsp;+&nbsp;stats.isBlockDevice())\nconsole.log(&quot;stats.isCharacterDevice()&quot;&nbsp;+&nbsp;stats.isCharacterDevice())\nconsole.log(&quot;stats.isSymbolicLink()&nbsp;-&gt;&nbsp;&quot;+stats.isSymbolicLink())\nconsole.log(&quot;stats.isFIFO()&nbsp;-&gt;&quot;&nbsp;+&nbsp;stats.isFIFO())\nconsole.log(&quot;stats.isSocket()-&gt;&nbsp;&quot;&nbsp;+&nbsp;stats.isSocket())</pre><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\nvar&nbsp;stats&nbsp;=&nbsp;fs.lstatSync(&quot;.&quot;)\nconsole.log(&quot;stats.isFile()&nbsp;-&gt;&quot;&nbsp;+&nbsp;stats.isFile())\nconsole.log(&quot;stats.isDirectory()&nbsp;-&gt;&nbsp;&quot;&nbsp;+&nbsp;stats.isDirectory())\nconsole.log(&quot;stats.isBlockDevice()&nbsp;-&gt;&quot;&nbsp;+&nbsp;stats.isBlockDevice())\nconsole.log(&quot;stats.isCharacterDevice()&quot;&nbsp;+&nbsp;stats.isCharacterDevice())\nconsole.log(&quot;stats.isSymbolicLink()&nbsp;-&gt;&nbsp;&quot;+stats.isSymbolicLink())\nconsole.log(&quot;stats.isFIFO()&nbsp;-&gt;&quot;&nbsp;+&nbsp;stats.isFIFO())\nconsole.log(&quot;stats.isSocket()-&gt;&nbsp;&quot;&nbsp;+&nbsp;stats.isSocket())</pre><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\nvar&nbsp;fd&nbsp;=&nbsp;fs.openSync(&quot;.&quot;,&quot;r&quot;);&nbsp;&nbsp;&nbsp;&nbsp;\nvar&nbsp;stats&nbsp;=&nbsp;fs.fstatSync(fd)\nconsole.log(&quot;stats.isFile()&nbsp;-&gt;&quot;&nbsp;+&nbsp;stats.isFile())\nconsole.log(&quot;stats.isDirectory()&nbsp;-&gt;&nbsp;&quot;&nbsp;+&nbsp;stats.isDirectory())\nconsole.log(&quot;stats.isBlockDevice()&nbsp;-&gt;&quot;&nbsp;+&nbsp;stats.isBlockDevice())\nconsole.log(&quot;stats.isCharacterDevice()&quot;&nbsp;+&nbsp;stats.isCharacterDevice())\nconsole.log(&quot;stats.isSymbolicLink()&nbsp;-&gt;&nbsp;&quot;+stats.isSymbolicLink())\nconsole.log(&quot;stats.isFIFO()&nbsp;-&gt;&quot;&nbsp;+&nbsp;stats.isFIFO())\nconsole.log(&quot;stats.isSocket()-&gt;&nbsp;&quot;&nbsp;+&nbsp;stats.isSocket())</pre><h5 id=\"-\">监听文件夹</h5><p>这个功能很有趣，就是当文件夹内有变化时，会触发事件，比如文件夹内，增加文件、修改文件都会触发事件。</p><p>监听当前目录的代码实现</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\nfs.watch(&quot;.&quot;,function(eventname,filename){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(eventname);\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(filename);\n});</pre><p>通过fs.watch方法可以监听一个文件或文件夹，这里监听了当前文件夹。这里有几种情况，当创建一个文件夹或文件时，eventname是rename，filename是新创建的文件夹或文件的名称。当删除一个文件夹或文件时，eventname是rename，filename是null。当更改一个文件内容或文件（文件夹）名时，eventname是change，filename是被更改的那个文件的文件名。</p><p>还有一种监听方式。</p><pre class=\"code\">var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\n\nvar&nbsp;watch&nbsp;=&nbsp;fs.watch(&quot;.&quot;);\n\nwatch.on(&quot;change&quot;,function(eventname,filename){\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(eventname);\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(filename);\n})</pre><p>fs.watch会返回一个fs.FSWatcher对象，通过watch监听来达到同样目的，watch.close() 可以关闭监听，watch.on(&quot;error&quot;,callback)可以监听错误。</p>','[{\"type\":\"contents\",\"content\":\"FS 文件夹操作\\n创建文件夹\\n在当前目录下，创建一个mydir的文件夹\\n异步实现代码：\\nvar fs = require(\\\"fs\\\");\\nfs.mkdir(\\\"mydir\\\",function(err){\\n    console.log(err)\\n})\\n同步实现代码:\\nvar fs = require(\\\"fs\\\");\\nfs.mkdirSync(\\\"mydir\\\");\\n很简单，不做过多解释。\\n删除文件夹\\n异步实现代码：\\nvar fs = require(\\\"fs\\\");\\nfs.rmdir(\\\"mydir\\\",function(err){\\n    console.log(err);\\n})\\n同步实现代码：\\nfs.rmdirSync(\\\"mydir\\\");\\n文件夹重命名\\n把当前目录下mydir文件夹改为mydir2名，如果没有mydir文件夹，那么会抛出异常err。\\n同步实现代码\\nvar fs = require(\\\"fs\\\");\\n\\nfs.rename(\\\"mydir\\\",\\\"mydir2\\\",function(err){\\n    console.log(err);\\n})\\n异步实现代码：\\nvar fs = require(\\\"fs\\\");  \\nfs.renameSync(\\\"mydir\\\",\\\"mydir2\\\")\\n查看文件夹内有哪些文件和文件夹。\\n查看当前目录下有哪些文件，异步实现代码：\\nvar fs = require(\\\"fs\\\");\\n\\nfs.readdir(\\\".\\\",function(err,files){\\n    console.log(files)\\n})\\n回调函数中，err表示异常信息，比如文件夹不存在，files并不是文件本身，而是一个数组，数组里储存当前目录下有哪些文件夹和文件的字符串名称。\\n同步实现代码：\\nvar fs = require(\\\"fs\\\");\\n\\nvar files = fs.readdirSync(\\\".\\\");\\nconsole.log(files);\\n查看文件夹、文件属性状态\\n查看当前文件夹状态属性\\n异步实现代码1 ：\\nvar fs = require(\\\"fs\\\");\\n\\nfs.stat(\\\".\\\",function(err,stats){\\n    console.log(\\\"stats.isFile() -&gt;\\\" + stats.isFile())\\n    console.log(\\\"stats.isDirectory() -&gt; \\\" + stats.isDirectory())\\n    console.log(\\\"stats.isBlockDevice() -&gt;\\\" + stats.isBlockDevice())\\n    console.log(\\\"stats.isCharacterDevice()\\\" + stats.isCharacterDevice())\\n    console.log(\\\"stats.isSymbolicLink() -&gt; \\\"+stats.isSymbolicLink())\\n    console.log(\\\"stats.isFIFO() -&gt;\\\" + stats.isFIFO())\\n    console.log(\\\"stats.isSocket()-&gt; \\\" + stats.isSocket())\\n})\\n回调函数的stats是一个fs.Stats对象，这个对象常用的方法是stats.isDirectory()和stats.isFile()，可以判断是文件还是文件夹。\\n异步实现代码2 ：\\nvar fs = require(\\\"fs\\\");\\n\\nfs.lstat(\\\".\\\",function(err,stats){\\n    console.log(\\\"stats.isFile() -&gt;\\\" + stats.isFile())\\n    console.log(\\\"stats.isDirectory() -&gt; \\\" + stats.isDirectory())\\n    console.log(\\\"stats.isBlockDevice() -&gt;\\\" + stats.isBlockDevice())\\n    console.log(\\\"stats.isCharacterDevice()\\\" + stats.isCharacterDevice())\\n    console.log(\\\"stats.isSymbolicLink() -&gt; \\\"+stats.isSymbolicLink())\\n    console.log(\\\"stats.isFIFO() -&gt;\\\" + stats.isFIFO())\\n    console.log(\\\"stats.isSocket()-&gt; \\\" + stats.isSocket())\\n})\\n这段代码和第一个实现代码一样，所不同的是使用了 fs.lstat方法，这个方法和stat方法的差别是，如果第一个参数是文件链接（linux用户比较熟悉）,那么stats.isSymbolicLink()会为真，而stats.isFile()和stats.isDirectory()为假。文件链接在node.js中可以通过fs.link方法来创建（可参看下一节“文件操作”）。\\n异步实现代码3 ：\\nvar fs = require(\\\"fs\\\");\\nvar fd = fs.openSync(\\\".\\\",\\\"r\\\");    \\nfs.fstat(fd,function(err,stats){\\n    console.log(\\\"stats.isFile() -&gt;\\\" + stats.isFile())\\n    console.log(\\\"stats.isDirectory() -&gt; \\\" + stats.isDirectory())\\n    console.log(\\\"stats.isBlockDevice() -&gt;\\\" + stats.isBlockDevice())\\n    console.log(\\\"stats.isCharacterDevice()\\\" + stats.isCharacterDevice())\\n    console.log(\\\"stats.isSymbolicLink() -&gt; \\\"+stats.isSymbolicLink())\\n    console.log(\\\"stats.isFIFO() -&gt;\\\" + stats.isFIFO())\\n    console.log(\\\"stats.isSocket()-&gt; \\\" + stats.isSocket())\\n})\\n这个实现方式，效果和前两种一样，不同点就是使用了fs.fstat方法，这个方法的第一个参数不是文件路径，而是文件描述符fd，通过fs.openSync同步方法得到了当前目录的fd文件描述符。\\nfs.openSync和异步fs.open方法将在下一节“文件操作”中详细介绍。\\n对应以上三种方法的同步实现代码：\\nvar fs = require(\\\"fs\\\");\\nvar stats = fs.statSync(\\\".\\\")\\nconsole.log(\\\"stats.isFile() -&gt;\\\" + stats.isFile())\\nconsole.log(\\\"stats.isDirectory() -&gt; \\\" + stats.isDirectory())\\nconsole.log(\\\"stats.isBlockDevice() -&gt;\\\" + stats.isBlockDevice())\\nconsole.log(\\\"stats.isCharacterDevice()\\\" + stats.isCharacterDevice())\\nconsole.log(\\\"stats.isSymbolicLink() -&gt; \\\"+stats.isSymbolicLink())\\nconsole.log(\\\"stats.isFIFO() -&gt;\\\" + stats.isFIFO())\\nconsole.log(\\\"stats.isSocket()-&gt; \\\" + stats.isSocket())\\nvar fs = require(\\\"fs\\\");\\nvar stats = fs.lstatSync(\\\".\\\")\\nconsole.log(\\\"stats.isFile() -&gt;\\\" + stats.isFile())\\nconsole.log(\\\"stats.isDirectory() -&gt; \\\" + stats.isDirectory())\\nconsole.log(\\\"stats.isBlockDevice() -&gt;\\\" + stats.isBlockDevice())\\nconsole.log(\\\"stats.isCharacterDevice()\\\" + stats.isCharacterDevice())\\nconsole.log(\\\"stats.isSymbolicLink() -&gt; \\\"+stats.isSymbolicLink())\\nconsole.log(\\\"stats.isFIFO() -&gt;\\\" + stats.isFIFO())\\nconsole.log(\\\"stats.isSocket()-&gt; \\\" + stats.isSocket())\\nvar fs = require(\\\"fs\\\");\\nvar fd = fs.openSync(\\\".\\\",\\\"r\\\");    \\nvar stats = fs.fstatSync(fd)\\nconsole.log(\\\"stats.isFile() -&gt;\\\" + stats.isFile())\\nconsole.log(\\\"stats.isDirectory() -&gt; \\\" + stats.isDirectory())\\nconsole.log(\\\"stats.isBlockDevice() -&gt;\\\" + stats.isBlockDevice())\\nconsole.log(\\\"stats.isCharacterDevice()\\\" + stats.isCharacterDevice())\\nconsole.log(\\\"stats.isSymbolicLink() -&gt; \\\"+stats.isSymbolicLink())\\nconsole.log(\\\"stats.isFIFO() -&gt;\\\" + stats.isFIFO())\\nconsole.log(\\\"stats.isSocket()-&gt; \\\" + stats.isSocket())\\n监听文件夹\\n这个功能很有趣，就是当文件夹内有变化时，会触发事件，比如文件夹内，增加文件、修改文件都会触发事件。\\n监听当前目录的代码实现\\nvar fs = require(\\\"fs\\\");\\nfs.watch(\\\".\\\",function(eventname,filename){\\n    console.log(eventname);\\n    console.log(filename);\\n});\\n通过fs.watch方法可以监听一个文件或文件夹，这里监听了当前文件夹。这里有几种情况，当创建一个文件夹或文件时，eventname是rename，filename是新创建的文件夹或文件的名称。当删除一个文件夹或文件时，eventname是rename，filename是null。当更改一个文件内容或文件（文件夹）名时，eventname是change，filename是被更改的那个文件的文件名。\\n还有一种监听方式。\\nvar fs = require(\\\"fs\\\");\\n\\nvar watch = fs.watch(\\\".\\\");\\n\\nwatch.on(\\\"change\\\",function(eventname,filename){\\n    console.log(eventname);\\n    console.log(filename);\\n})\\nfs.watch会返回一个fs.FSWatcher对象，通过watch监听来达到同样目的，watch.close() 可以关闭监听，watch.on(\\\"error\\\",callback)可以监听错误。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444889296000.jpg','2015-08-09 13:37:56','2020-08-20 15:44:26'),(336,'第7天 Post方法与上传——上传实例','第7天 Post方法与上传——上传实例','2','1','','Post方法','2',NULL,'','下面我们开发一个上传小例子，我们得到上传文件后，要把文件保存到public目录下。','1','','','0:01',762,'2','0',NULL,0,'0',224295,'<h3>上传实例</h3><p>下面我们开发一个上传小例子，我们得到上传文件后，要把文件保存到public目录下。</p><pre>var&nbsp;fk&nbsp;=&nbsp;require(&quot;../..&quot;)\n&nbsp;&nbsp;&nbsp;,App&nbsp;=&nbsp;fk.App\n&nbsp;&nbsp;&nbsp;,post&nbsp;=&nbsp;fk.post\n&nbsp;&nbsp;&nbsp;,app&nbsp;=&nbsp;new&nbsp;App\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.use(post);\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.post(&quot;/post&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;fs&nbsp;=&nbsp;require(&quot;fs&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fs.writeFile(__dirname+&quot;/public/file.txt&quot;,req.files.txt,function(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.write(&quot;ok!&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.listen(3000)</pre><p>编写一个表单</p><pre>&lt;!doctype&nbsp;html&gt;\n&lt;html&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;write&nbsp;article&lt;/title&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;body&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;form&nbsp;action=&quot;http://localhost:3000/post&quot;&nbsp;enctype=&quot;multipart/form-data&quot;&nbsp;method=&quot;post&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;&lt;input&nbsp;type=&quot;file&quot;&nbsp;name=&quot;txt&quot;/&gt;&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;&nbsp;type=&quot;submit&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/form&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/body&gt;\n&lt;/html&gt;</pre><p>下面是演示是视频</p><hr/><p><embed width=\"480\" height=\"400\" align=\"middle\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" quality=\"high\" allowfullscreen=\"true\" src=\"http://static.video.qq.com/TPout.swf?vid=u0115d4jgf9\"/></p><hr/><p>在这里说一个很无奈的事实，就是眼下post.js插件并不支持二进制文件的上传，可以上传但是上传后文件不可读，眼下只支持文本文件上传。这个问题将在明天得到解决。今天内容相对多，要好好消化，明天的开发任务是，完善post.js插件，让其具有上传二进制文件的特性，今天就到这里，记得发布stuwebfk0.0.6版本，明天见！</p>','[{\"type\":\"contents\",\"content\":\"上传实例\\n下面我们开发一个上传小例子，我们得到上传文件后，要把文件保存到public目录下。\\nvar fk = require(\\\"../..\\\")\\n   ,App = fk.App\\n   ,post = fk.post\\n   ,app = new App\\n\\n    app.use(post);\\n\\n    app.post(\\\"/post\\\",function(req,res){\\n        var fs = require(\\\"fs\\\");\\n        fs.writeFile(__dirname+\\\"/public/file.txt\\\",req.files.txt,function(){\\n            res.write(\\\"ok!\\\");\\n            res.end();\\n        })\\n\\n    })\\n\\n\\n    app.listen(3000)\\n编写一个表单\\n&lt;!doctype html&gt;\\n&lt;html&gt;\\n    &lt;head&gt;\\n        &lt;title&gt;write article&lt;/title&gt;\\n    &lt;/head&gt;\\n    &lt;body&gt;\\n        &lt;form action=\\\"http://localhost:3000/post\\\" enctype=\\\"multipart/form-data\\\" method=\\\"post\\\"&gt;\\n            &lt;p&gt;&lt;input type=\\\"file\\\" name=\\\"txt\\\"/&gt;&lt;/p&gt;\\n            &lt;input  type=\\\"submit\\\" /&gt;\\n        &lt;/form&gt;\\n    &lt;/body&gt;\\n&lt;/html&gt;\\n下面是演示是视频\\n&lt;embed width=\\\"480\\\" height=\\\"400\\\" align=\\\"middle\\\" type=\\\"application/x-shockwave-flash\\\" allowscriptaccess=\\\"always\\\" quality=\\\"high\\\" allowfullscreen=\\\"true\\\" src=\\\"http://static.video.qq.com/TPout.swf?vid=u0115d4jgf9\\\"&gt;\\n在这里说一个很无奈的事实，就是眼下post.js插件并不支持二进制文件的上传，可以上传但是上传后文件不可读，眼下只支持文本文件上传。这个问题将在明天得到解决。今天内容相对多，要好好消化，明天的开发任务是，完善post.js插件，让其具有上传二进制文件的特性，今天就到这里，记得发布stuwebfk0.0.6版本，明天见！\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444982336000.jpg','2015-10-16 07:59:48','2020-08-20 15:44:22'),(337,'ng-switch on、ng-if/ng-show/ng-hide/ng-disabled标签','angularjs分支语句标签','1','1','','分支语句,标签','2',NULL,'','分支语句让你在界面上都可以写逻辑判断。','1','','','0:01',762,'2','0',NULL,NULL,'0',224769,'<p>分支语句让你在界面上都可以写逻辑判断。</p><pre class=\"brush:js;toolbar:false\">&lt;ul&gt;\n&lt;li&nbsp;ng-repeat=&quot;person&nbsp;in&nbsp;persons&quot;&gt;\n&lt;span&nbsp;ng-switch&nbsp;on=&quot;person.sex&quot;&gt;\n&lt;span&nbsp;ng-switch-when=&quot;1&quot;&gt;you&nbsp;are&nbsp;a&nbsp;boy&lt;/span&gt;\n&lt;span&nbsp;ng-switch-when=&quot;2&quot;&gt;you&nbsp;are&nbsp;a&nbsp;girl&lt;/span&gt;\n&lt;/span&gt;\n&lt;span&nbsp;ng-if=&quot;person.sex==1&quot;&gt;you&nbsp;may&nbsp;be&nbsp;a&nbsp;father&lt;/span&gt;\n&lt;span&nbsp;ng-show=&quot;person.sex==2&quot;&gt;you&nbsp;may&nbsp;be&nbsp;a&nbsp;mother&lt;/span&gt;\n&lt;span&gt;\nplease&nbsp;input&nbsp;your&nbsp;baby&#39;s&nbsp;name:&lt;input&nbsp;type=&quot;text&quot;&nbsp;ng-disabled=&quot;!person.hasBaby&quot;/&gt;\n&lt;/span&gt;\n&lt;span&gt;\n&lt;/li&gt;\n&lt;/ul&gt;</pre><p><br/></p>','[{\"type\":\"contents\",\"content\":\"分支语句让你在界面上都可以写逻辑判断。\\n&lt;ul&gt;\\n&lt;li ng-repeat=\\\"person in persons\\\"&gt;\\n&lt;span ng-switch on=\\\"person.sex\\\"&gt;\\n&lt;span ng-switch-when=\\\"1\\\"&gt;you are a boy&lt;/span&gt;\\n&lt;span ng-switch-when=\\\"2\\\"&gt;you are a girl&lt;/span&gt;\\n&lt;/span&gt;\\n&lt;span ng-if=\\\"person.sex==1\\\"&gt;you may be a father&lt;/span&gt;\\n&lt;span ng-show=\\\"person.sex==2\\\"&gt;you may be a mother&lt;/span&gt;\\n&lt;span&gt;\\nplease input your baby\'s name:&lt;input type=\\\"text\\\" ng-disabled=\\\"!person.hasBaby\\\"/&gt;\\n&lt;/span&gt;\\n&lt;span&gt;\\n&lt;/li&gt;\\n&lt;/ul&gt;\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444895061000.jpg','2015-09-19 03:25:42','2020-08-20 15:44:24'),(338,'基于Jquery的模拟滚动条插件，兼容主流浏览器','','1','plug','','doraPlug-scrollPlug','2',NULL,'','基于jquery的模拟滚动条，带鼠标滚轮事件，兼容主流浏览器，可扩展和配置','1','','','0:01',762,'2','0',NULL,0,'0',223402,'<p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">&nbsp;基于jquery的模拟滚动条，带鼠标滚轮事件，兼容主流浏览器，可扩展和配置。第一次尝试写插件，预测代码还有不够完善的地方，如果发现问题，会不断完善，也希望大牛们对发现的问题及时提出来，我会尽快修复。</span></p><p><br/></p><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">&nbsp;需要引用的文件（bootstrap是为了演示效果，非必须）：</span></p><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">&nbsp;</span></p><pre class=\"brush:js;toolbar:false\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">&lt;link&nbsp;rel=&quot;stylesheet&quot;&nbsp;href=&quot;css/bootstrap.min.css&quot;/&gt;<br/>&lt;script&nbsp;src=&quot;js/jquery-1.11.1.js&quot;&gt;&lt;/script&gt;<br/>&lt;script&nbsp;src=&quot;js/scroll.js&quot;&gt;&lt;/script&gt;<br/></span></p></pre><p><br/></p><p style=\"line-height: normal;\"><span style=\"font-size: 16px; color: rgb(84, 141, 212);\"><strong>DoraScrollBar表现层接口</strong><br/></span></p><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\"><strong><br/></strong></span></p><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\"><strong>使用方法：</strong></span></p><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\"><strong><br/></strong></span></p><pre class=\"brush:js;toolbar:false\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">new&nbsp;doraScroll(jsonData);<br/></span></p></pre><p><br/></p><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">示例：<br/></span></p><pre class=\"brush:js;toolbar:false\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">var&nbsp;doraScroll&nbsp;=&nbsp;new&nbsp;doraScroll({<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;container&nbsp;:&nbsp;$(&#39;#panel2&#39;),&nbsp;//&nbsp;作用的容器对象<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contentBox&nbsp;:&nbsp;$(&#39;#panelBody2&#39;),&nbsp;//&nbsp;控制滚动内容的对象<br/>		speed&nbsp;:&nbsp;30,&nbsp;//&nbsp;滚动速度，即滚轮一次滑动的距离<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color&nbsp;:&nbsp;&#39;#337ab7&#39;,&nbsp;//&nbsp;滚动条颜色<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width&nbsp;:&nbsp;&#39;5px&#39;,&nbsp;//&nbsp;滚动条宽度<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position&nbsp;:&nbsp;&#39;left&#39;,&nbsp;//&nbsp;滚动条的位置<br/>		radius&nbsp;:&nbsp;&#39;6px&#39;&nbsp;//&nbsp;滚动条的圆角大小<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br/></span></p></pre><p><br/></p><p style=\"line-height: normal;\"><span style=\"color: rgb(84, 141, 212); font-size: 16px;\"><strong>参数配置：</strong></span></p><p><br/></p><table interlaced=\"enabled\"><tbody><tr class=\"ue-table-interlace-color-single\"><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">参数<br/></span></p></td><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">说明</span></p></td><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">是否必须</span></p></td></tr><tr class=\"ue-table-interlace-color-double\"><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">container</span></p></td><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">作用的容器对象<br/></span></p></td><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">是</span></p></td></tr><tr class=\"ue-table-interlace-color-single\"><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">contentBox</span></p></td><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">控制滚动内容的对象</span></p></td><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">是</span></p></td></tr><tr class=\"ue-table-interlace-color-double\"><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">width</span></p></td><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">滚动条的宽度设置</span></p></td><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">否<br/></span></p></td></tr><tr class=\"ue-table-interlace-color-single\"><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">speed</span></p></td><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">滚轮滚动时滚动条滑动距离</span></p></td><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">否</span></p></td></tr><tr class=\"ue-table-interlace-color-double\"><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">color</span></p></td><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">滚动条颜色</span></p></td><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">否</span></p></td></tr><tr class=\"ue-table-interlace-color-single\"><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">position</span></p></td><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">滚动条显示位置(left or right)</span></p></td><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">否</span></p></td></tr><tr class=\"ue-table-interlace-color-double\"><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">radius</span></p></td><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">滚动条圆角大小</span></p></td><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">否</span></p></td></tr></tbody></table><p><br/></p><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\"><strong style=\"color: rgb(84, 141, 212); white-space: normal;\">DoraScrollBar功能方法接口</strong></span></p><p><br/></p><table interlaced=\"enabled\"><tbody><tr class=\"ue-table-interlace-color-single\"><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\" class=\"selectTdClass\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">方法名</span></p></td><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\" class=\"selectTdClass\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">使用示例</span></p></td><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">说明</span></p></td></tr><tr class=\"ue-table-interlace-color-double\"><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\" class=\"selectTdClass\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">reSetScrollBar</span></p></td><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\" class=\"selectTdClass\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">myScrollBar.reSetScrollBar();</span></p></td><td width=\"238\" valign=\"middle\" style=\"word-break: break-all;\" align=\"center\"><p style=\"line-height: normal;\"><span style=\"font-size: 16px;\">内容增加后重设滚动条</span></p></td></tr></tbody></table><p><br/></p>','[{\"type\":\"contents\",\"content\":\" 基于jquery的模拟滚动条，带鼠标滚轮事件，兼容主流浏览器，可扩展和配置。第一次尝试写插件，预测代码还有不够完善的地方，如果发现问题，会不断完善，也希望大牛们对发现的问题及时提出来，我会尽快修复。\\n\\n 需要引用的文件（bootstrap是为了演示效果，非必须）：\\n \\n&lt;link rel=\\\"stylesheet\\\" href=\\\"css/bootstrap.min.css\\\"/&gt;\\n&lt;script src=\\\"js/jquery-1.11.1.js\\\"&gt;&lt;/script&gt;\\n&lt;script src=\\\"js/scroll.js\\\"&gt;&lt;/script&gt;\\n\\n\\n\\nDoraScrollBar表现层接口\\n\\n\\n\\n使用方法：\\n\\n\\nnew doraScroll(jsonData);\\n\\n\\n\\n示例：\\n\\nvar doraScroll = new doraScroll({\\n                container : $(\'#panel2\'), // 作用的容器对象\\n                contentBox : $(\'#panelBody2\'), // 控制滚动内容的对象\\n\\t\\tspeed : 30, // 滚动速度，即滚轮一次滑动的距离\\n                color : \'#337ab7\', // 滚动条颜色\\n                width : \'5px\', // 滚动条宽度\\n                position : \'left\', // 滚动条的位置\\n\\t\\tradius : \'6px\' // 滚动条的圆角大小\\n\\n            });\\n\\n\\n\\n参数配置：\\n\\n参数\\n\\n说明\\n是否必须\\ncontainer\\n作用的容器对象\\n\\n是\\ncontentBox\\n控制滚动内容的对象\\n是\\nwidth\\n滚动条的宽度设置\\n否\\n\\nspeed\\n滚轮滚动时滚动条滑动距离\\n否\\ncolor\\n滚动条颜色\\n否\\nposition\\n滚动条显示位置(left or right)\\n否\\nradius\\n滚动条圆角大小\\n否\\n\\n\\nDoraScrollBar功能方法接口\\n\\n方法名\\n使用示例\\n说明\\nreSetScrollBar\\nmyScrollBar.reSetScrollBar();\\n内容增加后重设滚动条\\n\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445323852000.jpg','2015-07-17 03:05:24','2020-08-20 15:44:26'),(339,'nodeJs基础教程系列(7)——generator','nodeJs基础教程系列(7)','1','1','','nodejs','2',NULL,'','运行generator代码需要Node.js version > 0.11.3，在运行时，使用 node --harmony xx.js  方式运行。*\n在 ES6 规范中，定义一个生成器函数，在 function 后跟上*即可定义','1','','','0:01',762,'2','0',NULL,0,'0',224848,'<h3><span style=\"font-size: 16px;\">generator</span></h3><ul class=\" list-paddingleft-2\"><li><p><span style=\"font-size: 16px;\">运行generator代码需要Node.js version &gt; 0.11.3，在运行时，使用 node --harmony xx.js &nbsp;方式运行。*</span></p></li></ul><p><span style=\"font-size: 16px;\">在 ES6 规范中，定义一个生成器函数，在 function 后跟上</span><code><span style=\"font-size: 16px;\">*</span></code><span style=\"font-size: 16px;\">即可定义：</span></p><pre><span style=\"font-size: 16px;\">function*&nbsp;gf()&nbsp;{&nbsp;};<br/>function&nbsp;*gf()&nbsp;{&nbsp;};<br/>function&nbsp;*&nbsp;gf()&nbsp;{&nbsp;};<br/></span></pre><p><span style=\"font-size: 16px;\">以上三种方式都是对的。</span></p><pre><span style=\"font-size: 16px;\">gf.constructor;&nbsp;//&nbsp;function&nbsp;GeneratorFunction()&nbsp;{&nbsp;[native&nbsp;code]&nbsp;}<br/></span></pre><p><span style=\"font-size: 16px;\">调用</span><code><span style=\"font-size: 16px;\">生成器函数</span></code><span style=\"font-size: 16px;\">会产生一个</span><code><span style=\"font-size: 16px;\">生成器（generator）对象</span></code><span style=\"font-size: 16px;\">。生成器拥有的最重要的方法是 next()，用来迭代：</span></p><pre><span style=\"font-size: 16px;\">function*&nbsp;gf(){<br/>&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;hello&quot;);<br/>}<br/><br/>gf();<br/></span></pre><p><span style=\"font-size: 16px;\">运行后，终端并没打印出 </span><code><span style=\"font-size: 16px;\">hello</span></code><span style=\"font-size: 16px;\">，这是因为：调用</span><code><span style=\"font-size: 16px;\">生成器函数</span></code><span style=\"font-size: 16px;\">会产生一个</span><code><span style=\"font-size: 16px;\">生成器（generator）对象</span></code><span style=\"font-size: 16px;\">，但不会执行里面的代码，需要调用</span><code><span style=\"font-size: 16px;\">next()</span></code><span style=\"font-size: 16px;\">函数。</span></p><pre><span style=\"font-size: 16px;\">function*&nbsp;gf(){<br/>&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;hello&quot;);<br/>}<br/><br/>var&nbsp;g&nbsp;=&nbsp;gf();<br/>g.next();<br/></span></pre><p><code><span style=\"font-size: 16px;\">g</span></code><span style=\"font-size: 16px;\">是一个</span><code><span style=\"font-size: 16px;\">generator</span></code><span style=\"font-size: 16px;\">对象，调用</span><code><span style=\"font-size: 16px;\">next</span></code><span style=\"font-size: 16px;\">方法后，将真正[进入]gf函数体。</span></p><p><span style=\"font-size: 16px;\">sex通常generator用理论讲解的很多，我们采用实例规律法进行学习，也就是通过多个例子来学会一种知识的使用，找到其规律；这个好处是，快速掌握并实际应用，避免学习大量理论后反而出不来。fuck</span></p><p><span style=\"font-size: 16px;\">sex根据上面的例子，会发现generator有个断点效果，就是在执行方法体之前，等待调用next方法。</span></p><p><span style=\"font-size: 16px;\">通常generator函数和</span><code><span style=\"font-size: 16px;\">yield</span></code><span style=\"font-size: 16px;\">关键词一起使用。</span><code><span style=\"font-size: 16px;\">yield</span></code><span style=\"font-size: 16px;\">可以理解为添加</span><code><span style=\"font-size: 16px;\">1个断点</span></code><span style=\"font-size: 16px;\">，看下面的例子：</span></p><pre><span style=\"font-size: 16px;\">function*&nbsp;gf(){<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;start&quot;);<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;str&nbsp;=&nbsp;yield&nbsp;&quot;hello&quot;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;result&quot;,str);<br/>}<br/><br/>var&nbsp;g&nbsp;=&nbsp;gf();<br/>g.next();<br/></span></pre><p><span style=\"font-size: 16px;\">fuck调用一次next，进入了函数，打印出 start , 这时遇到</span><code><span style=\"font-size: 16px;\">yield</span></code><span style=\"font-size: 16px;\"> 所以终端了，我们后面继续调用一个 next 方法:good</span></p><pre><span style=\"font-size: 16px;\">function*&nbsp;gf(){<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;start&quot;);<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;str&nbsp;=&nbsp;yield&nbsp;&quot;hello&quot;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;result&quot;,str);<br/>}<br/><br/>var&nbsp;g&nbsp;=&nbsp;gf();<br/>g.next();<br/>g.next();<br/></span></pre><p><span style=\"font-size: 16px;\">打印出:</span></p><pre><span style=\"font-size: 16px;\">start<br/>result&nbsp;undefined<br/></span></pre><p><span style=\"font-size: 16px;\">好像和我们预期的不一样，第一感觉应该是 result hello ，而不是 result undefined ，这是因为yield 后面跟着的语句确实返回了，只不过返回的hello值不是给了 str 变量，而是在第一次调用 g.next() 时，它会返回一个对象，这个对象里有个 </span><code><span style=\"font-size: 16px;\">value</span></code><span style=\"font-size: 16px;\"> 属性，这个属性值就是 hello 。我们修改一下代码：</span></p><pre><span style=\"font-size: 16px;\">function*&nbsp;gf(){<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;start&quot;);<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;str&nbsp;=&nbsp;yield&nbsp;&quot;hello&quot;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;result&quot;,str);<br/>}<br/><br/>var&nbsp;g&nbsp;=&nbsp;gf();<br/>var&nbsp;value&nbsp;=&nbsp;g.next().value;<br/>console.log(&quot;yield&nbsp;value&nbsp;-&gt;&nbsp;&quot;,value);<br/>//g.next();<br/></span></pre><p><span style=\"font-size: 16px;\">结果：</span></p><pre><span style=\"font-size: 16px;\">start<br/>yield&nbsp;value&nbsp;-&gt;&nbsp;&nbsp;hello<br/></span></pre><p><span style=\"font-size: 16px;\">也就是第一次调用 next后，进入函数题，遇到yield确实中断了，准确解释是：中断并把 yield 的右侧的值，写入本次调用next生成的对象中，这个对象的value就是右侧的值。</span></p><p><span style=\"font-size: 16px;\">而第二次调用next方法后，yield会把next(args)方法的 args值赋予左侧变量，并继续执行语句，下面的代码是我们想要的结果：</span></p><pre><span style=\"font-size: 16px;\">function*&nbsp;gf(){<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;start&quot;);<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;str&nbsp;=&nbsp;yield&nbsp;&quot;hello&quot;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;result&quot;,str);<br/>}<br/><br/>var&nbsp;g&nbsp;=&nbsp;gf();<br/>var&nbsp;value&nbsp;=&nbsp;g.next().value;<br/>g.next(value);<br/></span></pre><p><span style=\"font-size: 16px;\">结果：god</span></p><pre><span style=\"font-size: 16px;\">start<br/>result&nbsp;hello<br/></span></pre><p><code><span style=\"font-size: 16px;\">next</span></code><span style=\"font-size: 16px;\">方法返回的对象有两个值，</span><code><span style=\"font-size: 16px;\">{value , done}</span></code><span style=\"font-size: 16px;\"> value 表示yield右侧的值（也可能是generator函数的return值）；done如果是false，表示后面还有未执行的yield语句。</span></p><p><span style=\"font-size: 16px;\">sex下面做几个练习，根据不同的调用，分析终端输出结果：</span></p><pre><span style=\"font-size: 16px;\">function&nbsp;*test()&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;start&quot;);<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;a&nbsp;=&nbsp;yield&nbsp;&quot;a&quot;;<br/>&nbsp;&nbsp;&nbsp;&nbsp;console.log(a,&nbsp;&quot;&nbsp;－&nbsp;inside&quot;);<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;b&nbsp;=&nbsp;yield&nbsp;&quot;b&quot;;<br/>&nbsp;&nbsp;&nbsp;&nbsp;console.log(b,&nbsp;&quot;&nbsp;－&nbsp;inside&quot;);<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;c&nbsp;=&nbsp;yield&nbsp;&quot;c&quot;;<br/>&nbsp;&nbsp;&nbsp;&nbsp;console.log(c,&nbsp;&quot;&nbsp;－&nbsp;inside&quot;);<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;game&nbsp;over&quot;;<br/>}<br/></span></pre><p><span style=\"font-size: 16px;\">这是个generator函数，下面是执行语句，你需要思考终端打印结果，有不理解的可在线提问：book</span></p><p><span style=\"font-size: 16px;\">1.</span></p><pre><span style=\"font-size: 16px;\">test();<br/></span></pre><p><span style=\"font-size: 16px;\">2.</span></p><pre><span style=\"font-size: 16px;\">var&nbsp;g&nbsp;=&nbsp;test();<br/>g.next();<br/></span></pre><p><span style=\"font-size: 16px;\">3.</span></p><pre><span style=\"font-size: 16px;\">var&nbsp;g&nbsp;=&nbsp;test();<br/>var&nbsp;a&nbsp;=&nbsp;g.next();<br/>console.log(a.value);<br/></span></pre><p><span style=\"font-size: 16px;\">4.</span></p><pre><span style=\"font-size: 16px;\">var&nbsp;g&nbsp;=&nbsp;test();<br/>var&nbsp;a&nbsp;=&nbsp;g.next();<br/>console.log(a.value);<br/>var&nbsp;b&nbsp;=&nbsp;g.next(a.value);<br/></span></pre><p><span style=\"font-size: 16px;\">5.god</span></p><pre><span style=\"font-size: 16px;\">var&nbsp;g&nbsp;=&nbsp;test();<br/>var&nbsp;a&nbsp;=&nbsp;g.next();<br/>console.log(a.value);<br/>var&nbsp;b&nbsp;=&nbsp;g.next(a.value);<br/>console.log(b.value);<br/>var&nbsp;c&nbsp;=&nbsp;g.next(b.value);<br/>console.log(c.value);<br/>var&nbsp;d&nbsp;=&nbsp;g.next(c.value);<br/>console.log(d.value);<br/></span></pre><p><span style=\"font-size: 16px;\">对ES6 generator 生成器就介绍到这里，下一节我们学习使用</span><code><span style=\"font-size: 16px;\">co</span></code><span style=\"font-size: 16px;\"> 库，它是建立在 generator基础之上的，主要用于优化异步回调方式，让异步函数的调用和同步一样简单，使用体验要比 promise/A+ 更好。</span></p>','[{\"type\":\"contents\",\"content\":\"generator\\n运行generator代码需要Node.js version &gt; 0.11.3，在运行时，使用 node --harmony xx.js  方式运行。*\\n\\n在 ES6 规范中，定义一个生成器函数，在 function 后跟上*即可定义：\\nfunction* gf() { };\\nfunction *gf() { };\\nfunction * gf() { };\\n\\n以上三种方式都是对的。\\ngf.constructor; // function GeneratorFunction() { [native code] }\\n\\n调用生成器函数会产生一个生成器（generator）对象。生成器拥有的最重要的方法是 next()，用来迭代：\\nfunction* gf(){\\n    console.log(\\\"hello\\\");\\n}\\n\\ngf();\\n\\n运行后，终端并没打印出 hello，这是因为：调用生成器函数会产生一个生成器（generator）对象，但不会执行里面的代码，需要调用next()函数。\\nfunction* gf(){\\n    console.log(\\\"hello\\\");\\n}\\n\\nvar g = gf();\\ng.next();\\n\\ng是一个generator对象，调用next方法后，将真正[进入]gf函数体。\\nsex通常generator用理论讲解的很多，我们采用实例规律法进行学习，也就是通过多个例子来学会一种知识的使用，找到其规律；这个好处是，快速掌握并实际应用，避免学习大量理论后反而出不来。fuck\\nsex根据上面的例子，会发现generator有个断点效果，就是在执行方法体之前，等待调用next方法。\\n通常generator函数和yield关键词一起使用。yield可以理解为添加1个断点，看下面的例子：\\nfunction* gf(){\\n\\n    console.log(\\\"start\\\");\\n\\n    var str = yield \\\"hello\\\"\\n\\n    console.log(\\\"result\\\",str);\\n}\\n\\nvar g = gf();\\ng.next();\\n\\nfuck调用一次next，进入了函数，打印出 start , 这时遇到yield 所以终端了，我们后面继续调用一个 next 方法:good\\nfunction* gf(){\\n\\n    console.log(\\\"start\\\");\\n\\n    var str = yield \\\"hello\\\"\\n\\n    console.log(\\\"result\\\",str);\\n}\\n\\nvar g = gf();\\ng.next();\\ng.next();\\n\\n打印出:\\nstart\\nresult undefined\\n\\n好像和我们预期的不一样，第一感觉应该是 result hello ，而不是 result undefined ，这是因为yield 后面跟着的语句确实返回了，只不过返回的hello值不是给了 str 变量，而是在第一次调用 g.next() 时，它会返回一个对象，这个对象里有个 value 属性，这个属性值就是 hello 。我们修改一下代码：\\nfunction* gf(){\\n\\n    console.log(\\\"start\\\");\\n\\n    var str = yield \\\"hello\\\"\\n\\n    console.log(\\\"result\\\",str);\\n}\\n\\nvar g = gf();\\nvar value = g.next().value;\\nconsole.log(\\\"yield value -&gt; \\\",value);\\n//g.next();\\n\\n结果：\\nstart\\nyield value -&gt;  hello\\n\\n也就是第一次调用 next后，进入函数题，遇到yield确实中断了，准确解释是：中断并把 yield 的右侧的值，写入本次调用next生成的对象中，这个对象的value就是右侧的值。\\n而第二次调用next方法后，yield会把next(args)方法的 args值赋予左侧变量，并继续执行语句，下面的代码是我们想要的结果：\\nfunction* gf(){\\n\\n    console.log(\\\"start\\\");\\n\\n    var str = yield \\\"hello\\\"\\n\\n    console.log(\\\"result\\\",str);\\n}\\n\\nvar g = gf();\\nvar value = g.next().value;\\ng.next(value);\\n\\n结果：god\\nstart\\nresult hello\\n\\nnext方法返回的对象有两个值，{value , done} value 表示yield右侧的值（也可能是generator函数的return值）；done如果是false，表示后面还有未执行的yield语句。\\nsex下面做几个练习，根据不同的调用，分析终端输出结果：\\nfunction *test() {\\n    console.log(\\\"start\\\");\\n\\n    var a = yield \\\"a\\\";\\n    console.log(a, \\\" － inside\\\");\\n\\n    var b = yield \\\"b\\\";\\n    console.log(b, \\\" － inside\\\");\\n\\n    var c = yield \\\"c\\\";\\n    console.log(c, \\\" － inside\\\");\\n\\n    return \\\"game over\\\";\\n}\\n\\n这是个generator函数，下面是执行语句，你需要思考终端打印结果，有不理解的可在线提问：book\\n1.\\ntest();\\n\\n2.\\nvar g = test();\\ng.next();\\n\\n3.\\nvar g = test();\\nvar a = g.next();\\nconsole.log(a.value);\\n\\n4.\\nvar g = test();\\nvar a = g.next();\\nconsole.log(a.value);\\nvar b = g.next(a.value);\\n\\n5.god\\nvar g = test();\\nvar a = g.next();\\nconsole.log(a.value);\\nvar b = g.next(a.value);\\nconsole.log(b.value);\\nvar c = g.next(b.value);\\nconsole.log(c.value);\\nvar d = g.next(c.value);\\nconsole.log(d.value);\\n\\n对ES6 generator 生成器就介绍到这里，下一节我们学习使用co 库，它是建立在 generator基础之上的，主要用于优化异步回调方式，让异步函数的调用和同步一样简单，使用体验要比 promise/A+ 更好。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1436164404000.jpg','2015-07-06 06:33:31','2020-08-20 15:44:27'),(340,'Node.js进程管理器PM2','Node.js进程管理器PM2','1','1','','pm2,进程管理','2',NULL,'','最近把DoraCMS迁移到的linux上，由于node使用npm start开启服务，当ssh关闭，进程就断了，另外我在服务器上挂了3个node服务，管理起来非常不方便，于是朋友介绍了pm2，目前我只用到了一小部分功能，已经感觉很强大了。','1','','','0:01',762,'2','0',NULL,0,'0',227173,'<p>最近把DoraCMS迁移到的linux上，由于node使用npm start开启服务，当ssh关闭，进程就断了，另外我在服务器上挂了3个node服务，管理起来非常不方便，于是朋友介绍了pm2，目前我只用到了一小部分功能，已经感觉很强大了。</p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_11_44_54_450_1000.png\" title=\"\" alt=\"pm2.20d3ef.png\"/></p><p>pm2 是一个带有负载均衡功能的Node应用的进程管理器. 当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载， PM2是非常不错的选择的。它非常适合IaaS结构，但不要把它用于PaaS方案（随后将开发Paas的解决方案）.</p><p><br/></p><p>主要特性：</p><p><br/></p><p>内建负载均衡（使用Node cluster 集群模块）</p><p>后台运行</p><p>0秒停机重载，我理解大概意思是维护升级的时候不需要停机.</p><p>具有Ubuntu和CentOS 的启动脚本</p><p>停止不稳定的进程（避免无限循环）</p><p>控制台检测</p><p>提供 HTTP API</p><p>远程控制和实时的接口API ( Nodejs 模块,允许和PM2进程管理器交互 )</p><p><br/></p><p>测试过Nodejs v0.11 v0.10 v0.8版本，兼容CoffeeScript,基于Linux 和MacOS.</p><p><br/></p><p>安装</p><pre class=\"brush:js;toolbar:false\">npm&nbsp;install&nbsp;-g&nbsp;pm2</pre><p><br/></p><p>用法</p><pre class=\"brush:js;toolbar:false\">$&nbsp;npm&nbsp;install&nbsp;pm2&nbsp;-g&nbsp;#&nbsp;命令行安装&nbsp;pm2\n$&nbsp;pm2&nbsp;start&nbsp;app.js&nbsp;-i&nbsp;4&nbsp;#后台运行pm2，启动4个app.js\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;也可以把&#39;max&#39;&nbsp;参数传递给&nbsp;start\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;正确的进程数目依赖于Cpu的核心数目\n$&nbsp;pm2&nbsp;start&nbsp;app.js&nbsp;--name&nbsp;my-api&nbsp;#&nbsp;命名进程\n$&nbsp;pm2&nbsp;list&nbsp;#&nbsp;显示所有进程状态\n$&nbsp;pm2&nbsp;monit&nbsp;#&nbsp;监视所有进程\n$&nbsp;pm2&nbsp;logs&nbsp;#&nbsp;显示所有进程日志\n$&nbsp;pm2&nbsp;stop&nbsp;all&nbsp;#&nbsp;停止所有进程\n$&nbsp;pm2&nbsp;restart&nbsp;all&nbsp;#&nbsp;重启所有进程\n$&nbsp;pm2&nbsp;reload&nbsp;all&nbsp;#&nbsp;0秒停机重载进程&nbsp;(用于&nbsp;NETWORKED&nbsp;进程)\n$&nbsp;pm2&nbsp;stop&nbsp;0&nbsp;#&nbsp;停止指定的进程\n$&nbsp;pm2&nbsp;restart&nbsp;0&nbsp;#&nbsp;重启指定的进程\n$&nbsp;pm2&nbsp;startup&nbsp;#&nbsp;产生&nbsp;init&nbsp;脚本&nbsp;保持进程活着\n$&nbsp;pm2&nbsp;web&nbsp;#&nbsp;运行健壮的&nbsp;computer&nbsp;API&nbsp;endpoint&nbsp;(http://localhost:9615)\n$&nbsp;pm2&nbsp;delete&nbsp;0&nbsp;#&nbsp;杀死指定的进程\n$&nbsp;pm2&nbsp;delete&nbsp;all&nbsp;#&nbsp;杀死全部进程</pre><p><br/></p><p>运行进程的不同方式：</p><pre class=\"brush:js;toolbar:false\">$&nbsp;pm2&nbsp;start&nbsp;app.js&nbsp;-i&nbsp;max&nbsp;#&nbsp;根据有效CPU数目启动最大进程数目\n$&nbsp;pm2&nbsp;start&nbsp;app.js&nbsp;-i&nbsp;3&nbsp;#&nbsp;启动3个进程\n$&nbsp;pm2&nbsp;start&nbsp;app.js&nbsp;-x&nbsp;#用fork模式启动&nbsp;app.js&nbsp;而不是使用&nbsp;cluster\n$&nbsp;pm2&nbsp;start&nbsp;app.js&nbsp;-x&nbsp;--&nbsp;-a&nbsp;23&nbsp;#&nbsp;用fork模式启动&nbsp;app.js&nbsp;并且传递参数&nbsp;(-a&nbsp;23)\n$&nbsp;pm2&nbsp;start&nbsp;app.js&nbsp;--name&nbsp;serverone&nbsp;#&nbsp;启动一个进程并把它命名为&nbsp;serverone\n$&nbsp;pm2&nbsp;stop&nbsp;serverone&nbsp;#&nbsp;停止&nbsp;serverone&nbsp;进程\n$&nbsp;pm2&nbsp;start&nbsp;app.json&nbsp;#&nbsp;启动进程,&nbsp;在&nbsp;app.json里设置选项\n$&nbsp;pm2&nbsp;start&nbsp;app.js&nbsp;-i&nbsp;max&nbsp;--&nbsp;-a&nbsp;23&nbsp;#在--之后给&nbsp;app.js&nbsp;传递参数\n$&nbsp;pm2&nbsp;start&nbsp;app.js&nbsp;-i&nbsp;max&nbsp;-e&nbsp;err.log&nbsp;-o&nbsp;out.log&nbsp;#&nbsp;启动&nbsp;并&nbsp;生成一个配置文件</pre><p>你也可以执行用其他语言编写的app ( fork 模式):</p><pre class=\"brush:js;toolbar:false\">$&nbsp;pm2&nbsp;start&nbsp;my-bash-script.sh&nbsp;-x&nbsp;--interpreter&nbsp;bash\n$&nbsp;pm2&nbsp;start&nbsp;my-python-script.py&nbsp;-x&nbsp;--interpreter&nbsp;python</pre><p><br/></p><p>如何用pm2启动 DoraCMS:</p><p>进入源码根目录下执行：</p><pre class=\"brush:js;toolbar:false\">pm2&nbsp;start&nbsp;bin/www</pre><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_11_48_58_91_1001.jpg\" title=\"\" alt=\"DoraCMS使用pm2管理进程.jpg\"/></p><p><br/></p><p>可以使用 pm2 list 查看当前所有的进程列表。更多关于pm2的api可以查看官方文档&nbsp;https://github.com/Unitech/pm2</p>','[{\"type\":\"contents\",\"content\":\"最近把DoraCMS迁移到的linux上，由于node使用npm start开启服务，当ssh关闭，进程就断了，另外我在服务器上挂了3个node服务，管理起来非常不方便，于是朋友介绍了pm2，目前我只用到了一小部分功能，已经感觉很强大了。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_11_44_54_450_1000.png\"},{\"type\":\"contents\",\"content\":\"\\npm2 是一个带有负载均衡功能的Node应用的进程管理器. 当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载， PM2是非常不错的选择的。它非常适合IaaS结构，但不要把它用于PaaS方案（随后将开发Paas的解决方案）.\\n\\n主要特性：\\n\\n内建负载均衡（使用Node cluster 集群模块）\\n后台运行\\n0秒停机重载，我理解大概意思是维护升级的时候不需要停机.\\n具有Ubuntu和CentOS 的启动脚本\\n停止不稳定的进程（避免无限循环）\\n控制台检测\\n提供 HTTP API\\n远程控制和实时的接口API ( Nodejs 模块,允许和PM2进程管理器交互 )\\n\\n测试过Nodejs v0.11 v0.10 v0.8版本，兼容CoffeeScript,基于Linux 和MacOS.\\n\\n安装\\nnpm install -g pm2\\n\\n用法\\n$ npm install pm2 -g # 命令行安装 pm2\\n$ pm2 start app.js -i 4 #后台运行pm2，启动4个app.js\\n                # 也可以把\'max\' 参数传递给 start\\n                # 正确的进程数目依赖于Cpu的核心数目\\n$ pm2 start app.js --name my-api # 命名进程\\n$ pm2 list # 显示所有进程状态\\n$ pm2 monit # 监视所有进程\\n$ pm2 logs # 显示所有进程日志\\n$ pm2 stop all # 停止所有进程\\n$ pm2 restart all # 重启所有进程\\n$ pm2 reload all # 0秒停机重载进程 (用于 NETWORKED 进程)\\n$ pm2 stop 0 # 停止指定的进程\\n$ pm2 restart 0 # 重启指定的进程\\n$ pm2 startup # 产生 init 脚本 保持进程活着\\n$ pm2 web # 运行健壮的 computer API endpoint (http://localhost:9615)\\n$ pm2 delete 0 # 杀死指定的进程\\n$ pm2 delete all # 杀死全部进程\\n\\n运行进程的不同方式：\\n$ pm2 start app.js -i max # 根据有效CPU数目启动最大进程数目\\n$ pm2 start app.js -i 3 # 启动3个进程\\n$ pm2 start app.js -x #用fork模式启动 app.js 而不是使用 cluster\\n$ pm2 start app.js -x -- -a 23 # 用fork模式启动 app.js 并且传递参数 (-a 23)\\n$ pm2 start app.js --name serverone # 启动一个进程并把它命名为 serverone\\n$ pm2 stop serverone # 停止 serverone 进程\\n$ pm2 start app.json # 启动进程, 在 app.json里设置选项\\n$ pm2 start app.js -i max -- -a 23 #在--之后给 app.js 传递参数\\n$ pm2 start app.js -i max -e err.log -o out.log # 启动 并 生成一个配置文件\\n你也可以执行用其他语言编写的app ( fork 模式):\\n$ pm2 start my-bash-script.sh -x --interpreter bash\\n$ pm2 start my-python-script.py -x --interpreter python\\n\\n如何用pm2启动 DoraCMS:\\n进入源码根目录下执行：\\npm2 start bin/www\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_11_48_58_91_1001.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n可以使用 pm2 list 查看当前所有的进程列表。更多关于pm2的api可以查看官方文档 https://github.com/Unitech/pm2\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20160104114145.jpg','2016-01-04 03:50:08','2020-08-20 15:44:12'),(341,'第4天 路由——更新后的代码','更新后的代码','2','1','','路由功能','2',NULL,'','下面是App.js 更新后的代码，会在更改后的代码后加上 // 更改后的代码 字样。','1','','','0:01',762,'2','0',NULL,0,'0',224181,'<h3>更新后的代码</h3><p>下面是<code>App.js</code> 更新后的代码，会在更改后的代码后加上 <code>// 更改后的代码</code> 字样。</p><pre>var&nbsp;http&nbsp;=&nbsp;require(&quot;http&quot;);\n\nmodule.exports&nbsp;=&nbsp;App;\n\nfunction&nbsp;App(){\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;插件有序列表\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;middleList&nbsp;=&nbsp;this._middleList&nbsp;=&nbsp;[];\n\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;self&nbsp;=&nbsp;this;\n\n&nbsp;&nbsp;&nbsp;&nbsp;this._route_post_handles&nbsp;=&nbsp;{}&nbsp;&nbsp;//&nbsp;更改后的代码\n\n&nbsp;&nbsp;&nbsp;&nbsp;this._route_get_handles&nbsp;=&nbsp;{}&nbsp;&nbsp;//&nbsp;更改后的代码\n\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;request事件响应函数\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;handle(req,res){\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;循环执行插件\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;middleIndex&nbsp;=&nbsp;0;&nbsp;//&nbsp;插件索引\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;execMiddle();\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;执行这个函数时，会自动执行下一个middle插件。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;至于这个函数的执行，是由插件所控制。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;next(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;middleIndex&nbsp;+=&nbsp;1;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;execMiddle();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;执行插件函数\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;execMiddle(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;middle&nbsp;=&nbsp;middleList[middleIndex];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(middle){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;middle(req,res,next);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;handle;&nbsp;&nbsp;//&nbsp;更改后的代码\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;判断是GET还是POST方法\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch(req.method){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&quot;GET&quot;:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handle&nbsp;=&nbsp;self._route_get_handles[req.url]&nbsp;&nbsp;//&nbsp;更改后的代码\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&quot;POST&quot;:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handle&nbsp;=&nbsp;self._route_post_handles[req.url]&nbsp;&nbsp;&nbsp;//&nbsp;更改后的代码\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(handle){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handle(req,res);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;this._server&nbsp;=&nbsp;http.createServer(handle);\n\n}\n\n//&nbsp;加入功能栈\nApp.prototype.use&nbsp;=&nbsp;function(middle){\n&nbsp;&nbsp;&nbsp;&nbsp;this._middleList.push(middle);\n}\n\nApp.prototype.get&nbsp;=&nbsp;function(route,handle){&nbsp;&nbsp;//&nbsp;更改后的代码\n&nbsp;&nbsp;&nbsp;&nbsp;this._route_get_handles[route]&nbsp;=&nbsp;handle;&nbsp;&nbsp;\n}\n\nApp.prototype.post&nbsp;=&nbsp;function(route,handle){&nbsp;//&nbsp;更改后的代码\n&nbsp;&nbsp;&nbsp;&nbsp;this._route_post_handles[route]&nbsp;=&nbsp;handle;\n}\n\n//&nbsp;监听端口\nApp.prototype.listen&nbsp;=&nbsp;function(){\n&nbsp;&nbsp;&nbsp;&nbsp;this._server.listen.apply(this._server,arguments);\n}</pre><p>下一节，要做个路由的例子。<span class=\"invade-word\"></span></p>','[{\"type\":\"contents\",\"content\":\"更新后的代码\\n下面是App.js 更新后的代码，会在更改后的代码后加上 // 更改后的代码 字样。\\nvar http = require(\\\"http\\\");\\n\\nmodule.exports = App;\\n\\nfunction App(){\\n    // 插件有序列表\\n    var middleList = this._middleList = [];\\n\\n    var self = this;\\n\\n    this._route_post_handles = {}  // 更改后的代码\\n\\n    this._route_get_handles = {}  // 更改后的代码\\n\\n    // request事件响应函数\\n    function handle(req,res){\\n\\n        // 循环执行插件\\n        var middleIndex = 0; // 插件索引\\n\\n        execMiddle();\\n\\n        // 执行这个函数时，会自动执行下一个middle插件。\\n        // 至于这个函数的执行，是由插件所控制。\\n        function next(){\\n            middleIndex += 1;\\n            execMiddle();\\n        }\\n\\n        // 执行插件函数\\n        function execMiddle(){\\n            var middle = middleList[middleIndex];\\n            if(middle){\\n                middle(req,res,next);\\n            }else{\\n               var handle;  // 更改后的代码\\n               // 判断是GET还是POST方法\\n               switch(req.method){\\n                     case \\\"GET\\\":\\n                         handle = self._route_get_handles[req.url]  // 更改后的代码\\n                     break;\\n                     case \\\"POST\\\":\\n                         handle = self._route_post_handles[req.url]   // 更改后的代码\\n                     break;\\n               }        \\n               if(handle){\\n                   handle(req,res);\\n               }\\n            }\\n        }        \\n\\n    }\\n\\n    this._server = http.createServer(handle);\\n\\n}\\n\\n// 加入功能栈\\nApp.prototype.use = function(middle){\\n    this._middleList.push(middle);\\n}\\n\\nApp.prototype.get = function(route,handle){  // 更改后的代码\\n    this._route_get_handles[route] = handle;  \\n}\\n\\nApp.prototype.post = function(route,handle){ // 更改后的代码\\n    this._route_post_handles[route] = handle;\\n}\\n\\n// 监听端口\\nApp.prototype.listen = function(){\\n    this._server.listen.apply(this._server,arguments);\\n}\\n下一节，要做个路由的例子。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444892060000.jpg','2015-09-20 10:58:07','2020-08-20 15:44:24'),(342,'第10天 cookie与session—实例演示','session插件实例演示','2','1','','session插件','2',NULL,'','这一节开发一个实例，用来演示session插件的用法。首先，写一个动态模板页面num.html。','1','','','0:01',762,'2','0',NULL,0,'0',223458,'<h3>实例演示</h3><p>这一节开发一个实例，用来演示session插件的用法。</p><p>首先，写一个动态模板页面<code>num.html</code>。</p><pre>&lt;!doctype&nbsp;html&gt;\n&lt;html&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;&lt;%=locals.title%&gt;&lt;/title&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/head&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;body&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;&lt;%=locals.num%&gt;&lt;/p&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/body&gt;\n&lt;/html&gt;</pre><p>然后，开发应用程序<code>run.js</code>。</p><pre>var&nbsp;fk&nbsp;=&nbsp;require(&quot;../..&quot;)\n&nbsp;&nbsp;&nbsp;,App&nbsp;=&nbsp;fk.App\n&nbsp;&nbsp;&nbsp;,download&nbsp;=&nbsp;fk.download\n&nbsp;&nbsp;&nbsp;,app&nbsp;=&nbsp;new&nbsp;App\n&nbsp;&nbsp;&nbsp;,view&nbsp;=&nbsp;fk.view\n&nbsp;&nbsp;&nbsp;,session&nbsp;=&nbsp;fk.session\n&nbsp;&nbsp;&nbsp;,fs&nbsp;=&nbsp;require(&quot;fs&quot;);\n\n&nbsp;&nbsp;&nbsp;app.use(session);&nbsp;//&nbsp;加载session插件\n&nbsp;&nbsp;&nbsp;app.use(view(__dirname+&quot;/views&quot;));&nbsp;\n\n&nbsp;&nbsp;&nbsp;app.get(&quot;/num&quot;,function(req,res){\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req.session&nbsp;=&nbsp;req.session&nbsp;||&nbsp;0;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req.session&nbsp;+=&nbsp;1;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.view(&quot;num.html&quot;,{title:&quot;num&nbsp;page&quot;,num:req.session});\n\n&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;app.listen(3000);</pre><h5 id=\"-\">视频演示</h5><hr/><p><embed width=\"480\" height=\"400\" align=\"middle\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" quality=\"high\" allowfullscreen=\"true\" src=\"http://static.video.qq.com/TPout.swf?vid=p011643h2d7\"/></p><hr/>','[{\"type\":\"contents\",\"content\":\"实例演示\\n这一节开发一个实例，用来演示session插件的用法。\\n首先，写一个动态模板页面num.html。\\n&lt;!doctype html&gt;\\n&lt;html&gt;\\n    &lt;head&gt;\\n        &lt;title&gt;&lt;%=locals.title%&gt;&lt;/title&gt;\\n    &lt;/head&gt;\\n    &lt;body&gt;\\n        &lt;p&gt;&lt;%=locals.num%&gt;&lt;/p&gt;\\n    &lt;/body&gt;\\n&lt;/html&gt;\\n然后，开发应用程序run.js。\\nvar fk = require(\\\"../..\\\")\\n   ,App = fk.App\\n   ,download = fk.download\\n   ,app = new App\\n   ,view = fk.view\\n   ,session = fk.session\\n   ,fs = require(\\\"fs\\\");\\n\\n   app.use(session); // 加载session插件\\n   app.use(view(__dirname+\\\"/views\\\")); \\n\\n   app.get(\\\"/num\\\",function(req,res){\\n\\n       req.session = req.session || 0;\\n       req.session += 1;\\n       res.view(\\\"num.html\\\",{title:\\\"num page\\\",num:req.session});\\n\\n   })\\n\\n   app.listen(3000);\\n视频演示\\n&lt;embed width=\\\"480\\\" height=\\\"400\\\" align=\\\"middle\\\" type=\\\"application/x-shockwave-flash\\\" allowscriptaccess=\\\"always\\\" quality=\\\"high\\\" allowfullscreen=\\\"true\\\" src=\\\"http://static.video.qq.com/TPout.swf?vid=p011643h2d7\\\"&gt;\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445236759000.jpg','2015-10-19 06:39:54','2020-08-20 15:44:16'),(343,'Atom 更为先进的文本代码编辑器 - 由 Github 打造的下一代编程开发利器','Atom 更为先进的文本代码编辑器','1','1','','Atom ,GitHub','2',NULL,'','在代码编辑器、文本编辑器领域，有着不少的「神器」级的产品，如历史悠久的 VIM、Emacs 以及如今当红的 SublimeText。另外还有 EditPlus、NotePad++、UltraEdit 等一大堆流行的利器，可谓百家争鸣。','1','','','0:01',762,'2','0',NULL,0,'0',225257,'<p><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;然而，作为目前全球范围内影响力最大的代码仓库/开源社区，GitHub 的程序员们并不满足于此。他们使用目前最先进流行的技术重新打造了一款称为“属于21世纪”的代码编辑器——Atom， 它开源免费跨平台，并且整合 GIT 并提供类似 SublimeText 的包管理功能，支持插件扩展，可配置性非常高……</span></p><p><br/></p><p><span style=\"font-size: 16px;\">ATOM - 由 GitHub 打造更为先进的编辑器</span></p><p><br/></p><p><span style=\"font-size: 16px;\">Atom 代码编辑器支持 Windows、Mac、Linux 三大桌面平台，完全免费，并且已经在 GitHub 上开放了全部的源代码。在经过一段长时间的迭代开发和不断改进后，Atom 终于从早期的测试版达到了 1.0 正式版了！相比之前的版本，在性能和稳定性方面都有着显著的改善。</span></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_7_4_9_44_16_164_1000.png\" title=\"\" alt=\"atom_screenshot.png\"/></p><p><span style=\"font-size: 16px;\">开发团队将 Atom 称为一个“为 21 世纪创造的可配置的编辑器”，它拥有非常精致细腻的界面，并且可配置项丰富，加上它提供了与 SublimeText 上类似的 Package Control (包管理)功能，人们可以非常方便地安装和管理各种插件，并将 Atom 打造成真正适合自己的开发工具。</span></p><p><br/></p><p><span style=\"font-size: 16px;\">Atom 编辑器官方宣传片：</span></p><p><br/></p><p style=\"text-align: center;\"><embed type=\"application/x-shockwave-flash\" class=\"edui-faked-video\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" src=\"http://player.youku.com/player.php/sid/XMTI3MDg2NjczMg==/v.swf\" width=\"420\" height=\"280\" wmode=\"transparent\" play=\"true\" loop=\"false\" menu=\"false\" allowscriptaccess=\"never\" allowfullscreen=\"true\"/></p><p><br/></p><p><span style=\"font-size: 16px;\">一个拥有丰富功能的现代化代码编辑器/文本编辑器</span></p><p><br/></p><p><span style=\"font-size: 16px;\">作为一个现代的代码编辑器，Atom 有着各种流行编辑器都有的特性，功能上非常丰富，支持各种编程语言的代码高亮(HTML / CSS / Javascript / PHP / Python / C / C++ / Objective C / Java / JSON / Perl / CoffeeScript / Go / Sass / YAML / Markdown 等等)、 与大多数其他编辑器相比，Atom的语言支持已经算是覆盖非常全面了。另外，它的代码补全功能（也叫Snippets） 也非常好用，你只需输入几个字符即可展开成各种常用代码，可以极大提高编程效率。</span></p><p><span style=\"font-size: 16px;\">&nbsp;&nbsp;&nbsp;&nbsp;<br/></span></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_7_4_9_47_40_797_1001.jpg\" title=\"\" alt=\"atom_github.jpg\"/></p><p><br/></p><p><span style=\"font-size: 16px;\">另外，Atom同样支持 SublimeText 的几个重要的功能，譬如 Goto Anything、Goto Symbol、Goto Line、命令面板等等，就连快捷键也是一模一样的！相信 ST 的用户将会比较轻松地过渡到 Atom 去。实际上，从功能上来看，目前的 Atom 编辑器基本就是 Sublime 的一个复刻版，只是技术实现方式不同，插件的技术也有所差异。</span></p><p><span style=\"font-size: 16px;\">和 GIT 完美结合工作</span></p><p><br/></p><p><span style=\"font-size: 16px;\">Atom 编辑器可以和 GIT 完美结合，所有对代码、文本的修改都能体现在编辑器的界面上。比如在文件内新写的代码会在左边标记为绿色，删除的标记为红色，修改的标记为黄色。在左边的目录导航也能方便的看到文件改动：有改动的文件其文件名和所在文件夹名都会被标记为高亮显示。编辑器底部会显示当前所在分支和对文件的修改行数统计，对于 GIT 用户来说非常方便。</span></p><p><span style=\"font-size: 16px;\">基于 WEB 技术构建</span></p><p><br/></p><p><span style=\"font-size: 16px;\">和之前介绍过的微软 Visual Studio Code 编辑器一样，Atom 也是基于 WEB 技术（Chromium+Node.js）开发的，简单理解的话编辑器本身其实是一个跑在本地的网页，这足以让无数 WEB 工程师为之兴奋！用户可以用Javascript来编写编辑器插件，用 CSS把主题界面改成任何你喜欢的样式等，这使得编写插件、主题、二次开发的门槛的降低了许多。这也能解释从 Atom 发布到现在不长的时间里，Atom的 Package 和主题数量都快速增长上来了。</span></p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_7_4_9_48_15_74_1002.png\" title=\"\" alt=\"atom_themes.png\"/></p><p><br/></p><p><span style=\"font-size: 16px;\">不过，也正因为它基于WEB 技术构建的，目前处于初步阶段的 Atom 在性能上与传统的编辑器还有点差距，在打开大文件时尤为明显，而在一些机器上也容易出现 CPU 占用率过高等问题，这一点确实有待改进，而且还是需要大幅改进。</span></p><p><span style=\"font-size: 16px;\">Atom 编辑器到底怎么样？</span></p><p><br/></p><p><span style=\"font-size: 16px;\">那么，很多人关心的是，Atom 与主流的编辑器对比会怎么样？其实，在我看来， Atom 目前还不太适合用做主力编辑器，虽然它的功能与 SublimeText 较为接近，但现在的它和 Sublime 相比还是稚嫩了一点，毕竟现在Sublime 已经非常成熟了，后者有很全面的内置功能，也有非常丰富的插件包和活跃的社区，而 Atom 则还需给予时间让其发展。</span></p><p><br/></p><p><span style=\"font-size: 16px;\">不过由于 Atom 是由 Github 维护的，它拥有非常强大的后台。并且那里有着大量极为优秀的编程爱好者，也是极客们的聚集地，相信在不久的将来Atom一定也会拥有不少新的插件包，而性能方面的缺点迟早也会被解决掉。</span></p><p><br/></p><p><span style=\"font-size: 16px;\">对于喜欢追求新鲜技术的极客和程序员们，Atom 肯定将会是你的一个不错的新玩物，毕竟它是开源社区的产物，并且也代表着 WEB 技术进入桌面程序开发的新方向。纵使目前它还有不少的进步的空间，但一旦它解决了性能问题、建立了丰富强大的插件库，开源且跨平台的 Atom 编辑器将会成为业界新宠。</span></p><p><br/></p><p><span style=\"font-size: 16px;\">可以在官网上下载&nbsp;</span><a href=\"https://atom.io/\" target=\"_self\" style=\"font-size: 16px; text-decoration: underline;\"><span style=\"font-size: 16px;\">https://atom.io/</span></a></p>','[{\"type\":\"contents\",\"content\":\"    然而，作为目前全球范围内影响力最大的代码仓库/开源社区，GitHub 的程序员们并不满足于此。他们使用目前最先进流行的技术重新打造了一款称为“属于21世纪”的代码编辑器——Atom， 它开源免费跨平台，并且整合 GIT 并提供类似 SublimeText 的包管理功能，支持插件扩展，可配置性非常高……\\n\\nATOM - 由 GitHub 打造更为先进的编辑器\\n\\nAtom 代码编辑器支持 Windows、Mac、Linux 三大桌面平台，完全免费，并且已经在 GitHub 上开放了全部的源代码。在经过一段长时间的迭代开发和不断改进后，Atom 终于从早期的测试版达到了 1.0 正式版了！相比之前的版本，在性能和稳定性方面都有着显著的改善。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_7_4_9_44_16_164_1000.png\"},{\"type\":\"contents\",\"content\":\"\\n开发团队将 Atom 称为一个“为 21 世纪创造的可配置的编辑器”，它拥有非常精致细腻的界面，并且可配置项丰富，加上它提供了与 SublimeText 上类似的 Package Control (包管理)功能，人们可以非常方便地安装和管理各种插件，并将 Atom 打造成真正适合自己的开发工具。\\n\\nAtom 编辑器官方宣传片：\\n\\n\"},{\"type\":\"image\",\"content\":\"/ueditor/themes/default/images/spacer.gif\"},{\"type\":\"contents\",\"content\":\"\\n\\n一个拥有丰富功能的现代化代码编辑器/文本编辑器\\n\\n作为一个现代的代码编辑器，Atom 有着各种流行编辑器都有的特性，功能上非常丰富，支持各种编程语言的代码高亮(HTML / CSS / Javascript / PHP / Python / C / C++ / Objective C / Java / JSON / Perl / CoffeeScript / Go / Sass / YAML / Markdown 等等)、 与大多数其他编辑器相比，Atom的语言支持已经算是覆盖非常全面了。另外，它的代码补全功能（也叫Snippets） 也非常好用，你只需输入几个字符即可展开成各种常用代码，可以极大提高编程效率。\\n    \\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_7_4_9_47_40_797_1001.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n另外，Atom同样支持 SublimeText 的几个重要的功能，譬如 Goto Anything、Goto Symbol、Goto Line、命令面板等等，就连快捷键也是一模一样的！相信 ST 的用户将会比较轻松地过渡到 Atom 去。实际上，从功能上来看，目前的 Atom 编辑器基本就是 Sublime 的一个复刻版，只是技术实现方式不同，插件的技术也有所差异。\\n和 GIT 完美结合工作\\n\\nAtom 编辑器可以和 GIT 完美结合，所有对代码、文本的修改都能体现在编辑器的界面上。比如在文件内新写的代码会在左边标记为绿色，删除的标记为红色，修改的标记为黄色。在左边的目录导航也能方便的看到文件改动：有改动的文件其文件名和所在文件夹名都会被标记为高亮显示。编辑器底部会显示当前所在分支和对文件的修改行数统计，对于 GIT 用户来说非常方便。\\n基于 WEB 技术构建\\n\\n和之前介绍过的微软 Visual Studio Code 编辑器一样，Atom 也是基于 WEB 技术（Chromium+Node.js）开发的，简单理解的话编辑器本身其实是一个跑在本地的网页，这足以让无数 WEB 工程师为之兴奋！用户可以用Javascript来编写编辑器插件，用 CSS把主题界面改成任何你喜欢的样式等，这使得编写插件、主题、二次开发的门槛的降低了许多。这也能解释从 Atom 发布到现在不长的时间里，Atom的 Package 和主题数量都快速增长上来了。\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_7_4_9_48_15_74_1002.png\"},{\"type\":\"contents\",\"content\":\"\\n\\n不过，也正因为它基于WEB 技术构建的，目前处于初步阶段的 Atom 在性能上与传统的编辑器还有点差距，在打开大文件时尤为明显，而在一些机器上也容易出现 CPU 占用率过高等问题，这一点确实有待改进，而且还是需要大幅改进。\\nAtom 编辑器到底怎么样？\\n\\n那么，很多人关心的是，Atom 与主流的编辑器对比会怎么样？其实，在我看来， Atom 目前还不太适合用做主力编辑器，虽然它的功能与 SublimeText 较为接近，但现在的它和 Sublime 相比还是稚嫩了一点，毕竟现在Sublime 已经非常成熟了，后者有很全面的内置功能，也有非常丰富的插件包和活跃的社区，而 Atom 则还需给予时间让其发展。\\n\\n不过由于 Atom 是由 Github 维护的，它拥有非常强大的后台。并且那里有着大量极为优秀的编程爱好者，也是极客们的聚集地，相信在不久的将来Atom一定也会拥有不少新的插件包，而性能方面的缺点迟早也会被解决掉。\\n\\n对于喜欢追求新鲜技术的极客和程序员们，Atom 肯定将会是你的一个不错的新玩物，毕竟它是开源社区的产物，并且也代表着 WEB 技术进入桌面程序开发的新方向。纵使目前它还有不少的进步的空间，但一旦它解决了性能问题、建立了丰富强大的插件库，开源且跨平台的 Atom 编辑器将会成为业界新宠。\\n\\n可以在官网上下载 https://atom.io/\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1435974076000.jpg','2015-07-04 01:51:14','2020-08-20 15:44:27'),(344,'尼玛，婚纱店也能跑路。。。','尼玛，婚纱店也能跑路。。。','1','1','','跑路','2',NULL,'','最近真是乱糟糟，见过p2p跑路的，还没见过婚纱店老板也能跑路的，计划着月底结婚的，7月份就拍了婚纱照，十一准备去拿照片，打电话竟然一直不通，网上搜了一下才恍然大悟，老板跑路了、、、','1','','','0:01',762,'2','0',NULL,0,'0',223566,'<p>&nbsp; 最近真是乱糟糟，见过p2p跑路的，还没见过婚纱店老板也能跑路的，计划着月底结婚的，7月份就拍了婚纱照，十一准备去拿照片，打电话竟然一直不通，网上搜了一下才恍然大悟，老板跑路了、、、</p><p style=\"text-align: center;\"><img alt=\"QQ图片20151010100731.jpg\" src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_10_10_10_7_12_552_1001.jpg\" title=\"\"/></p><p><br/></p><p>受伤了，赶忙跑去门店看了下，受害者还真不少，有付了钱没拍的， 还有拍了没拿到东西的，那么大的<a title=\"世纪佳人天猫\" target=\"_blank\" href=\"https://shangpinjiaren.tmall.com/\">天猫店旗舰店</a>，说跑就跑了，哥能说啥呢？？</p><p>过去的时候，有人都准备拆招牌了</p><p style=\"text-align: center;\"><img alt=\"QQ图片20151010101022.jpg\" src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_10_10_10_9_32_28_1002.jpg\" title=\"\"/></p><p><br/></p><p style=\"text-align: center;\"><img alt=\"QQ图片20151010100436.jpg\" src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_10_10_10_16_44_933_1004.jpg\" title=\"\"/></p><p><br/></p><p>深圳广播电台的记者也来了</p><p><br/></p><p style=\"text-align: center;\"><img alt=\"IMG_1594.JPG\" src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_10_10_10_17_21_612_1005.JPG\" title=\"\"/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/></p><p>这还咋结婚呢，哥也是醉了，抽一根压压惊 , 让哥静一静。。。<img src=\"http://img.baidu.com/hi/jx2/j_0012.gif\"/></p>','[{\"type\":\"contents\",\"content\":\"  最近真是乱糟糟，见过p2p跑路的，还没见过婚纱店老板也能跑路的，计划着月底结婚的，7月份就拍了婚纱照，十一准备去拿照片，打电话竟然一直不通，网上搜了一下才恍然大悟，老板跑路了、、、\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_10_10_10_7_12_552_1001.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n受伤了，赶忙跑去门店看了下，受害者还真不少，有付了钱没拍的， 还有拍了没拿到东西的，那么大的天猫店旗舰店，说跑就跑了，哥能说啥呢？？\\n过去的时候，有人都准备拆招牌了\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_10_10_10_9_32_28_1002.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_10_10_10_16_44_933_1004.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n深圳广播电台的记者也来了\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_10_10_10_17_21_612_1005.JPG\"},{\"type\":\"contents\",\"content\":\"\\n            \\n这还咋结婚呢，哥也是醉了，抽一根压压惊 , 让哥静一静。。。\"},{\"type\":\"image\",\"content\":\"http://img.baidu.com/hi/jx2/j_0012.gif\"},{\"type\":\"contents\",\"content\":\"\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444891315000.jpg','2015-10-10 02:12:26','2020-08-20 15:44:23'),(345,'[转]有关网页渲染，每个前端开发者都该知道的那点事','有关网页渲染，每个前端开发者都该知道的','1','1','','html','2',NULL,'','其实，有关网页渲染的文章很多，但是相关信息比较分散，且论述并不是很完整。如果要想对这个主题有个大致的了解，我们还得学习很多知识。因此，Web开发者Alexander Skutin 决定写一篇文章。他相信，这篇文章不仅能帮助初学者，也能对那些想要刷新知识结构的高级前端开发者有所裨','1','','','0:01',762,'2','0',NULL,0,'0',223560,'<p>其实，有关网页渲染的文章很多，但是相关信息比较分散，且论述并不是很完整。如果要想对这个主题有个大致的了解，我们还得学习很多知识。因此，Web开发者Alexander Skutin 决定写一篇文章。他相信，这篇文章不仅能帮助初学者，也能对那些想要刷新知识结构的高级前端开发者有所裨益。<a href=\"http://frontendbabel.info/articles/webpage-rendering-101/\" target=\"_blank\">原文地址</a></p><p><br/></p><p>译文如下：</p><p><br/></p><p>网页渲染必须在很早的阶段进行，可以早到页面布局刚刚定型。因为样式和脚本都会对网页渲染产生关键性的影响。所以专业开发者必须了解一些技巧，从而避免在实践的过程中遇到性能问题。</p><p><br/></p><p>这篇文章不会研究浏览器内部的详细机制，而是提出一些通用的规则。毕竟，不同浏览器引擎的工作机制各不相同，这无疑会让开发者对浏览器特性的研究变得更加复杂。</p><p>浏览器是如何完成网页渲染？</p><p><br/></p><p>首先，我们回顾一下网页渲染时，浏览器的动作：</p><p><br/></p><p>&nbsp; &nbsp; 根据来自服务器端的HTML代码形成文档对象模型（DOM）</p><p>&nbsp; &nbsp; 加载并解析样式，形成CSS对象模型。</p><p>&nbsp; &nbsp; 在文档对象模型和CSS对象模型之上，创建一棵由一组待生成渲染的对象组成的渲染树（在Webkit中这些对象被称为渲染器或渲染对象，而在Gecko中称之为“frame”。）渲染树反映了文档对象模型的结构，但是不包含诸如&lt;head&gt;标签或含有display:none属性的不可见元素。在渲染树中，每一段文本字符串都表现为独立的渲染器。每一个渲染对象都包含与之对应的DOM对象，或者文本块，还加上计算过的样式。换言之，渲染树是一个文档对象模型的直观展示。</p><p><br/></p><p>&nbsp; &nbsp; 对渲染树上的每个元素，计算它的坐标，称之为布局。浏览器采用一种流方法，布局一个元素只需通过一次，但是表格元素需要通过多次。</p><p><br/></p><p>&nbsp; &nbsp; 最后，渲染树上的元素最终展示在浏览器里，这一过程称为“painting”。</p><p><br/></p><p>当用户与网页交互，或者脚本程序改动修改网页时，前文提到的一些操作将会重复执行，因为网页的内在结构已经发生了改变。</p><p>重绘</p><p><br/></p><p>当改变那些不会影响元素在网页中的位置的元素样式时，譬如background-color(背景色)， border-color(边框色)， visibility(可见性)，浏览器只会用新的样式将元素重绘一次(这就是重绘，或者说重新构造样式)。</p><p>重排</p><p><br/></p><p>当改变影响到文本内容或结构，或者元素位置时，重排或者说重新布局就会发生。这些改变通常由以下事件触发：</p><p><br/></p><p>&nbsp; &nbsp; DOM操作（元素添加，删除，修改，或者元素顺序的改变）;</p><p>&nbsp; &nbsp; 内容变化，包括表单域内的文本改变;</p><p>&nbsp; &nbsp; CSS属性的计算或改变;</p><p>&nbsp; &nbsp; 添加或删除样式表;</p><p>&nbsp; &nbsp; 更改“类”的属性;</p><p>&nbsp; &nbsp; 浏览器窗口的操作（缩放，滚动）;</p><p>&nbsp; &nbsp; 伪类激活（：悬停）。</p><p><br/></p><p>浏览器如何优化渲染？</p><p><br/></p><p>浏览器尽可能将重绘/重构 限制在被改变元素的区域内。比如，对于位置固定或绝对的元素，其大小改变只影响元素本身及其子元素，然而，静态定位元素的大小改变会触发后续所有元素的重流。</p><p><br/></p><p>另一种优化技巧是，在运行几段JavaScript代码时，浏览器会缓存这些改变，在代码运行完毕后再将这些改变经一次通过加以应用。举个例子，下面这段代码只会触发一个重构和重绘：</p><pre class=\"brush:js;toolbar:false\">var&nbsp;$body&nbsp;=&nbsp;$(&#39;body&#39;);\n$body.css(&#39;padding&#39;,&nbsp;&#39;1px&#39;);&nbsp;//&nbsp;reflow,&nbsp;repaint\n$body.css(&#39;color&#39;,&nbsp;&#39;red&#39;);&nbsp;//&nbsp;repaint\n$body.css(&#39;margin&#39;,&nbsp;&#39;2px&#39;);&nbsp;//&nbsp;reflow,&nbsp;repaint\n//&nbsp;only&nbsp;1&nbsp;reflow&nbsp;and&nbsp;repaint&nbsp;will&nbsp;actually&nbsp;happen</pre><p>然而，如前所述，改变元素的属性会触发强制性的重排。如果我们在上面的代码块中加入一行代码，用来访问元素的属性，就会发生这种现象。</p><pre class=\"brush:js;toolbar:false\">var&nbsp;$body&nbsp;=&nbsp;$(&#39;body&#39;);\n$body.css(&#39;padding&#39;,&nbsp;&#39;1px&#39;);\n$body.css(&#39;padding&#39;);&nbsp;//&nbsp;reading&nbsp;a&nbsp;property,&nbsp;a&nbsp;forced&nbsp;&nbsp;reflow\n$body.css(&#39;color&#39;,&nbsp;&#39;red&#39;);\n$body.css(&#39;margin&#39;,&nbsp;&#39;2px&#39;);</pre><p><br/></p><p>其结果就是，重排发生了两次。因此，你应该把访问元素属性的操作都组织在一起，从而优化网页性能。（你可以在<a href=\"http://jsbin.com/duhah/2/edit?html,css,js,output\" target=\"_blank\">JSBin查到更为详细的例子</a>）</p><p><br/></p><p>有时，你必须触发一个强制性重排。比如，我们必须将同样的属性(比如左边距)两次赋值给同一个元素。起初，它应该设置为100px，且不带动效。接着，它必须通过过渡(transition)动效改变为50px。你现在可以在JSbin上学习这个例子，不过我会在这儿更详细地介绍它。</p><p><br/></p><p>首先，我们创建一个带过渡效果的CSS类：</p><pre class=\"brush:js;toolbar:false\">.has-transition&nbsp;{\n&nbsp;-webkit-transition:&nbsp;margin-left&nbsp;1s&nbsp;ease-out;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-moz-transition:&nbsp;margin-left&nbsp;1s&nbsp;ease-out;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-o-transition:&nbsp;margin-left&nbsp;1s&nbsp;ease-out;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transition:&nbsp;margin-left&nbsp;1s&nbsp;ease-out;\n}</pre><p>然后继续执行：</p><pre class=\"brush:js;toolbar:false\">//&nbsp;our&nbsp;element&nbsp;that&nbsp;has&nbsp;a&nbsp;&quot;has-transition&quot;&nbsp;class&nbsp;by&nbsp;default\nvar&nbsp;$targetElem&nbsp;=&nbsp;$(&#39;#targetElemId&#39;);\n\n//&nbsp;remove&nbsp;the&nbsp;transition&nbsp;class\n$targetElem.removeClass(&#39;has-transition&#39;);\n\n//&nbsp;change&nbsp;the&nbsp;property&nbsp;expecting&nbsp;the&nbsp;transition&nbsp;to&nbsp;be&nbsp;&nbsp;&nbsp;off,&nbsp;as&nbsp;the&nbsp;class&nbsp;is&nbsp;not&nbsp;there\n//&nbsp;anymore\n$targetElem.css(&#39;margin-left&#39;,&nbsp;100);\n\n//&nbsp;put&nbsp;the&nbsp;transition&nbsp;class&nbsp;back\n$targetElem.addClass(&#39;has-transition&#39;);\n\n//&nbsp;change&nbsp;the&nbsp;property\n$targetElem.css(&#39;margin-left&#39;,&nbsp;50);</pre><p>然而，这个执行无法奏效。所有改变都被缓存，只在代码块末尾加以执行。我们需要的是强制性的重排，我们可以通过以下更改加以实现：</p><pre class=\"brush:js;toolbar:false\">//&nbsp;remove&nbsp;the&nbsp;transition&nbsp;class\n$(this).removeClass(&#39;has-transition&#39;);\n\n//&nbsp;change&nbsp;the&nbsp;property\n$(this).css(&#39;margin-left&#39;,&nbsp;100);\n\n//&nbsp;trigger&nbsp;a&nbsp;forced&nbsp;reflow,&nbsp;so&nbsp;that&nbsp;changes&nbsp;in&nbsp;a&nbsp;&nbsp;&nbsp;&nbsp;class/property&nbsp;get&nbsp;applied&nbsp;immediately\n$(this)[0].offsetHeight;&nbsp;//&nbsp;an&nbsp;example,&nbsp;other&nbsp;&nbsp;properties&nbsp;would&nbsp;work,&nbsp;too\n\n//&nbsp;put&nbsp;the&nbsp;transition&nbsp;class&nbsp;back\n$(this).addClass(&#39;has-transition&#39;);\n\n//&nbsp;change&nbsp;the&nbsp;property\n$(this).css(&#39;margin-left&#39;,&nbsp;50);</pre><p>现在代码如预期那样执行了。</p><p>有关性能优化的实际建议</p><p><br/></p><p>总结现有的资料，我提出以下建议：</p><p><br/></p><p>&nbsp; &nbsp; 创建有效的HTML和CSS文件，不要忘记指明文档的编码方式。样式应该包含在&lt;head&gt;标签内，脚本代码则应该加在&lt;body&gt;标签末端。</p><p><br/></p><p>&nbsp; &nbsp; 尽量简化和优化CSS选择器（这种优化方式几乎被使用CSS预处理器的开发者统一忽视了）将嵌套程度保持在最低水平。以下是CSS选择器的性能排名（从最快者开始）</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 识别器:#id</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 类:.class</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 标签：div</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 相邻兄弟选择器：a + i</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 父类选择器：ul&gt; li</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 通用选择器：*</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 属性选择：input[type=”text”]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 伪类和伪元素：a:hover</p><p><br/></p><p>你应该记住，浏览器在处理选择器时依照从右到左的原则，因此最右端的选择器应该是最快的：#id或则.class：</p><pre class=\"brush:js;toolbar:false\">div&nbsp;*&nbsp;{...}&nbsp;//&nbsp;bad\n.list&nbsp;li&nbsp;{...}&nbsp;//&nbsp;bad\n.list-item&nbsp;{...}&nbsp;//&nbsp;good\n#list&nbsp;.list-item&nbsp;{...}&nbsp;//&nbsp;good</pre><p><br/></p><p><br/></p><p>&nbsp; &nbsp; 1.在你的脚本代码中，尽可能减少DOM操作。缓存所有东西，包括元素属性以及对象（如果它们被重用的话）。当进行复杂的操作时，使用“孤立”元素会更好，之后可以将其加到DOM中（所谓“孤立”元素是与DOM脱离，仅保存在内存中的元素）。</p><p><br/></p><p>&nbsp; &nbsp; 2.如果你使用jQuery来选择元素，请遵从jQuery选择器最佳实践方案。</p><p><br/></p><p>&nbsp; &nbsp; 3.为了改变元素的样式，修改“类”的属性是奏效的方法之一。执行这一改变时，处在DOM渲染树的位置越深越好（这还有助于将逻辑与表象脱离）。</p><p><br/></p><p>&nbsp; &nbsp; 4.尽量只给位置绝对或者固定的元素添加动画效果。</p><p><br/></p><p>&nbsp; &nbsp; 5.在使用滚动时禁用复杂的悬停动效（比如，在&lt;body&gt;中添加一个额外的不悬停类）。读者可以阅读关于这个问题的<a href=\"http://habrahabr.ru/post/204238/\" target=\"_blank\">一篇文章</a>。</p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"其实，有关网页渲染的文章很多，但是相关信息比较分散，且论述并不是很完整。如果要想对这个主题有个大致的了解，我们还得学习很多知识。因此，Web开发者Alexander Skutin 决定写一篇文章。他相信，这篇文章不仅能帮助初学者，也能对那些想要刷新知识结构的高级前端开发者有所裨益。原文地址\\n\\n译文如下：\\n\\n网页渲染必须在很早的阶段进行，可以早到页面布局刚刚定型。因为样式和脚本都会对网页渲染产生关键性的影响。所以专业开发者必须了解一些技巧，从而避免在实践的过程中遇到性能问题。\\n\\n这篇文章不会研究浏览器内部的详细机制，而是提出一些通用的规则。毕竟，不同浏览器引擎的工作机制各不相同，这无疑会让开发者对浏览器特性的研究变得更加复杂。\\n浏览器是如何完成网页渲染？\\n\\n首先，我们回顾一下网页渲染时，浏览器的动作：\\n\\n    根据来自服务器端的HTML代码形成文档对象模型（DOM）\\n    加载并解析样式，形成CSS对象模型。\\n    在文档对象模型和CSS对象模型之上，创建一棵由一组待生成渲染的对象组成的渲染树（在Webkit中这些对象被称为渲染器或渲染对象，而在Gecko中称之为“frame”。）渲染树反映了文档对象模型的结构，但是不包含诸如&lt;head&gt;标签或含有display:none属性的不可见元素。在渲染树中，每一段文本字符串都表现为独立的渲染器。每一个渲染对象都包含与之对应的DOM对象，或者文本块，还加上计算过的样式。换言之，渲染树是一个文档对象模型的直观展示。\\n\\n    对渲染树上的每个元素，计算它的坐标，称之为布局。浏览器采用一种流方法，布局一个元素只需通过一次，但是表格元素需要通过多次。\\n\\n    最后，渲染树上的元素最终展示在浏览器里，这一过程称为“painting”。\\n\\n当用户与网页交互，或者脚本程序改动修改网页时，前文提到的一些操作将会重复执行，因为网页的内在结构已经发生了改变。\\n重绘\\n\\n当改变那些不会影响元素在网页中的位置的元素样式时，譬如background-color(背景色)， border-color(边框色)， visibility(可见性)，浏览器只会用新的样式将元素重绘一次(这就是重绘，或者说重新构造样式)。\\n重排\\n\\n当改变影响到文本内容或结构，或者元素位置时，重排或者说重新布局就会发生。这些改变通常由以下事件触发：\\n\\n    DOM操作（元素添加，删除，修改，或者元素顺序的改变）;\\n    内容变化，包括表单域内的文本改变;\\n    CSS属性的计算或改变;\\n    添加或删除样式表;\\n    更改“类”的属性;\\n    浏览器窗口的操作（缩放，滚动）;\\n    伪类激活（：悬停）。\\n\\n浏览器如何优化渲染？\\n\\n浏览器尽可能将重绘/重构 限制在被改变元素的区域内。比如，对于位置固定或绝对的元素，其大小改变只影响元素本身及其子元素，然而，静态定位元素的大小改变会触发后续所有元素的重流。\\n\\n另一种优化技巧是，在运行几段JavaScript代码时，浏览器会缓存这些改变，在代码运行完毕后再将这些改变经一次通过加以应用。举个例子，下面这段代码只会触发一个重构和重绘：\\nvar $body = $(\'body\');\\n$body.css(\'padding\', \'1px\'); // reflow, repaint\\n$body.css(\'color\', \'red\'); // repaint\\n$body.css(\'margin\', \'2px\'); // reflow, repaint\\n// only 1 reflow and repaint will actually happen\\n然而，如前所述，改变元素的属性会触发强制性的重排。如果我们在上面的代码块中加入一行代码，用来访问元素的属性，就会发生这种现象。\\nvar $body = $(\'body\');\\n$body.css(\'padding\', \'1px\');\\n$body.css(\'padding\'); // reading a property, a forced  reflow\\n$body.css(\'color\', \'red\');\\n$body.css(\'margin\', \'2px\');\\n\\n其结果就是，重排发生了两次。因此，你应该把访问元素属性的操作都组织在一起，从而优化网页性能。（你可以在JSBin查到更为详细的例子）\\n\\n有时，你必须触发一个强制性重排。比如，我们必须将同样的属性(比如左边距)两次赋值给同一个元素。起初，它应该设置为100px，且不带动效。接着，它必须通过过渡(transition)动效改变为50px。你现在可以在JSbin上学习这个例子，不过我会在这儿更详细地介绍它。\\n\\n首先，我们创建一个带过渡效果的CSS类：\\n.has-transition {\\n -webkit-transition: margin-left 1s ease-out;\\n     -moz-transition: margin-left 1s ease-out;\\n       -o-transition: margin-left 1s ease-out;\\n          transition: margin-left 1s ease-out;\\n}\\n然后继续执行：\\n// our element that has a \\\"has-transition\\\" class by default\\nvar $targetElem = $(\'#targetElemId\');\\n\\n// remove the transition class\\n$targetElem.removeClass(\'has-transition\');\\n\\n// change the property expecting the transition to be   off, as the class is not there\\n// anymore\\n$targetElem.css(\'margin-left\', 100);\\n\\n// put the transition class back\\n$targetElem.addClass(\'has-transition\');\\n\\n// change the property\\n$targetElem.css(\'margin-left\', 50);\\n然而，这个执行无法奏效。所有改变都被缓存，只在代码块末尾加以执行。我们需要的是强制性的重排，我们可以通过以下更改加以实现：\\n// remove the transition class\\n$(this).removeClass(\'has-transition\');\\n\\n// change the property\\n$(this).css(\'margin-left\', 100);\\n\\n// trigger a forced reflow, so that changes in a    class/property get applied immediately\\n$(this)[0].offsetHeight; // an example, other  properties would work, too\\n\\n// put the transition class back\\n$(this).addClass(\'has-transition\');\\n\\n// change the property\\n$(this).css(\'margin-left\', 50);\\n现在代码如预期那样执行了。\\n有关性能优化的实际建议\\n\\n总结现有的资料，我提出以下建议：\\n\\n    创建有效的HTML和CSS文件，不要忘记指明文档的编码方式。样式应该包含在&lt;head&gt;标签内，脚本代码则应该加在&lt;body&gt;标签末端。\\n\\n    尽量简化和优化CSS选择器（这种优化方式几乎被使用CSS预处理器的开发者统一忽视了）将嵌套程度保持在最低水平。以下是CSS选择器的性能排名（从最快者开始）\\n        识别器:#id\\n        类:.class\\n        标签：div\\n        相邻兄弟选择器：a + i\\n        父类选择器：ul&gt; li\\n        通用选择器：*\\n        属性选择：input[type=”text”]\\n        伪类和伪元素：a:hover\\n\\n你应该记住，浏览器在处理选择器时依照从右到左的原则，因此最右端的选择器应该是最快的：#id或则.class：\\ndiv * {...} // bad\\n.list li {...} // bad\\n.list-item {...} // good\\n#list .list-item {...} // good\\n\\n\\n    1.在你的脚本代码中，尽可能减少DOM操作。缓存所有东西，包括元素属性以及对象（如果它们被重用的话）。当进行复杂的操作时，使用“孤立”元素会更好，之后可以将其加到DOM中（所谓“孤立”元素是与DOM脱离，仅保存在内存中的元素）。\\n\\n    2.如果你使用jQuery来选择元素，请遵从jQuery选择器最佳实践方案。\\n\\n    3.为了改变元素的样式，修改“类”的属性是奏效的方法之一。执行这一改变时，处在DOM渲染树的位置越深越好（这还有助于将逻辑与表象脱离）。\\n\\n    4.尽量只给位置绝对或者固定的元素添加动画效果。\\n\\n    5.在使用滚动时禁用复杂的悬停动效（比如，在&lt;body&gt;中添加一个额外的不悬停类）。读者可以阅读关于这个问题的一篇文章。\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1435810953000.jpg','2015-07-02 04:22:48','2020-08-20 15:44:27'),(346,'第五天——范式路由之使用例子','范式路由之使用例子','2','1','','范式路由','2',NULL,'','下面写一段代码，用来测试使用效果。','1','','','0:01',762,'2','0',NULL,0,'0',222982,'<h3>使用例子</h3><p>下面写一段代码，用来测试使用效果。</p><pre>//&nbsp;route-example.js\nvar&nbsp;App&nbsp;=&nbsp;require(&quot;../..&quot;).App,\n&nbsp;&nbsp;&nbsp;&nbsp;app&nbsp;=&nbsp;new&nbsp;App;\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.get(&quot;/about&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.write(&quot;my&nbsp;name&nbsp;is&nbsp;leo&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end();\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.get(&quot;/contact/*/:id/ok&quot;,function(req,res){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.write(&quot;contact&nbsp;me&nbsp;use&nbsp;QQ&nbsp;1405491181&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.end();\n&nbsp;&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;&nbsp;app.listen(3000);</pre><p>下面是视频演示</p><p><embed type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" quality=\"high\" allowfullscreen=\"true\" src=\"http://static.video.qq.com/TPout.swf?vid=n01159cpdd5\" align=\"middle\" height=\"400\" width=\"480\"/></p><hr/><p>今天就开发到这里，结束之前，要养成好习惯，把stuwebfk代码发布到github和npmjs上，代码版本0.0.4。至于如何发布，前几天介绍了很多，相信你会发布成功！明天见。<span class=\"invade-word\"></span></p>','[{\"type\":\"contents\",\"content\":\"使用例子\\n下面写一段代码，用来测试使用效果。\\n// route-example.js\\nvar App = require(\\\"../..\\\").App,\\n    app = new App;\\n\\n    app.get(\\\"/about\\\",function(req,res){\\n        res.write(\\\"my name is leo\\\");\\n        res.end();\\n    })\\n\\n    app.get(\\\"/contact/*/:id/ok\\\",function(req,res){\\n        res.write(\\\"contact me use QQ 1405491181\\\");\\n        res.end();\\n    })\\n\\n    app.listen(3000);\\n下面是视频演示\\n&lt;embed type=\\\"application/x-shockwave-flash\\\" allowscriptaccess=\\\"always\\\" quality=\\\"high\\\" allowfullscreen=\\\"true\\\" src=\\\"http://static.video.qq.com/TPout.swf?vid=n01159cpdd5\\\" align=\\\"middle\\\" height=\\\"400\\\" width=\\\"480\\\"&gt;\\n今天就开发到这里，结束之前，要养成好习惯，把stuwebfk代码发布到github和npmjs上，代码版本0.0.4。至于如何发布，前几天介绍了很多，相信你会发布成功！明天见。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444891673000.jpg','2015-10-05 01:36:07','2020-08-20 15:44:23'),(347,'第8天 二进制文件上传—原理解析','二进制原理解析','2','1','','二进制文件上传','2',NULL,'','今天要让post.js插件，解析二进制文件。今天采用的解析方式和昨天完全不同，post.js插件需要重写，当然昨天的基础也是很必要的。','1','','','0:01',762,'2','0',NULL,0,'0',223324,'<h3>第8天 二进制文件上传</h3><p>今天要让post.js插件，解析二进制文件。今天采用的解析方式和昨天完全不同，post.js插件需要重写，当然昨天的基础也是很必要的。</p><p><span class=\"invade-word\">this</span>首先，还是要找到突破口，研究如何让插件支持二进制，并且分析解析原理。然后着手开发一些测试代码，基本的分析工作完成后，再重写post.js插件，最后通过例子进行测试。</p><p><span class=\"invade-word\">yellow</span>今天的内容相对抽象，需要全神贯注和动手实验，一定要动手自己做demo和测试代码。下面就开始今天的开发，希望一切顺利！</p><h3>二进制解析原理</h3><h5 id=\"-\">用二进制格式代替字符串</h5><p>对二进制进行解析，就不能把上传来的body信息转换为字符串形式处理，而是要用Buffer二进制类型处理。</p><p>首先，我们不能用 body_data += chunk 方式合并体数据了，因为合并后是字符串形式，需要采用下面的编码方式代替。</p><pre>var&nbsp;body_data;\nvar&nbsp;chunk_list&nbsp;=&nbsp;[];\n\nreq.on(&quot;data&quot;,function(chunk){\n&nbsp;&nbsp;&nbsp;&nbsp;chunk_list.push(chunk);\n})\n\nreq.on(&quot;end&quot;,function(){\n&nbsp;&nbsp;&nbsp;&nbsp;body_data&nbsp;=&nbsp;Buffer.concat(chunk_list);\n})</pre><p>通过这种方式，我们得到了二进制Buffer类型对象body_data，<code>Buffer.concat</code>方法可以合并二进制类型数组，返回一个新的Buffer对象。</p><p>先不必弄明白所有代码，跟着往下走就好。现在只要明白 body_data 是二进制对象，我们要对它进行解析，找到它各个部分的信息块。</p><p>body_data可以理解为是一个byte字节数组，通过body_data[0]可以得到第一个byte。</p><h5 id=\"-\">为什么？</h5><p>（小胖问：为什么要这样呢？和之前的合并方式有什么差异呢？）</p><p>最关键的差异，是当二进制转换为字符形式处理后，再转回二进制形式，里面的数据结构就变化了。通过下面的代码，让你明白。</p><pre>var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer([0,1,21,0]);\nconsole.log(buf);&nbsp;//&nbsp;&lt;Buffer&nbsp;00&nbsp;01&nbsp;15&nbsp;00&gt;\n\nvar&nbsp;buf2&nbsp;=&nbsp;new&nbsp;Buffer(buf.toString(&quot;ascii&quot;),&quot;ascii&quot;);\nconsole.log(buf2);//&nbsp;&lt;Buffer&nbsp;20&nbsp;01&nbsp;15&nbsp;20&gt;</pre><p>上面的代码的意思是，把二进制对象buf通过转换为ascii编码的字符串，然后再转回来。这时候数据就不一样了。我们发现里面的 00 转换为 20 ，太深的不必解释，至少知道通过二进制转字符串，再转换回二进制格式，数据就会变化！</p><p>所以，结论就出来了，昨天的方式只适合于文本文件的上传。</p><h5 id=\"-\">那该如何是好？</h5><p>（小帅哥说道：字符串不能用了，直接操作二进制？好像很复杂的样子！）</p><p>是的，相对之前的编码要复杂一些。不过，弄明白原理后，就没什么神秘之处了。下面，我们分析一下，到底该如何做，从哪里下手。</p><p>二进制的读取和分析，可以从头循环读取，每次抓取一个byte，然后根据上下文，来判断读取的是哪个信息块。比如，读取的是边界字符串部分，还是信息头，或者是主体信息。根据这个思考方向，我们可以编写一些代码：（分析要配合编码，这样将很快把分析落实和验证分析，不要只是想，要想一些就要马上做一些，这是最快的设计与开发的方法）</p><pre>var&nbsp;position&nbsp;=&nbsp;0;&nbsp;//&nbsp;读取的自己位置\nfor(var&nbsp;len&nbsp;=&nbsp;body_data.length;position&lt;len;){&nbsp;&nbsp;//&nbsp;循环读body_data字节\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;b&nbsp;=&nbsp;body_data[position];&nbsp;//&nbsp;b&nbsp;就是字节的&nbsp;int数据。\n}</pre><p>下一步，我们要配合上下文，对 <code>var b</code>进行分析。所谓上下文，我们可以理解为：读取状态，也就是眼下读取的是哪部分数据。所以要定义一下编码：</p><pre>&nbsp;//&nbsp;读取状态&nbsp;\n&nbsp;//&nbsp;0表示怀疑是边界字符串\n&nbsp;//&nbsp;1表示正在读取头部信息字符串\n&nbsp;//&nbsp;2表示正在读取body体数据\n&nbsp;var&nbsp;readState&nbsp;=&nbsp;0;</pre><p>上下文状态，也就是当前读取什么，我们分为三种状态。怀疑读取边界，这个状态的产生，是由于读取到了<code>-</code>这个信息，<code>-</code>二进制转为int是<code>45</code>，每当读取到<code>-</code>就会把<code>readState=0</code>；1表示读取信息头，这里没有怀疑字样，因为如果读取边界之后，就能确定要读取头部信息了；2表示读取body体信息，这个也不需要怀疑，因为读取完头部信息，就可以确定要读取body体数据了。</p><p>回过头来再说说，怀疑读取边界信息。为什么要用怀疑字样呢？这是因为除了第一个边界信息外，我们不知道什么时候读完body体信息，如果读到<code>-</code>就说明要开始读取边界信息，这个不准确，因为我们无法确定body信息体内是否包括<code>-</code>。</p><p>根据以上的分析，我们可以写出如下的编码：</p><pre>function&nbsp;handle(b){&nbsp;&nbsp;//&nbsp;字节处理器\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch(readState){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;0:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;处理怀疑是正在读取边界字符串\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;1:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;读取信息头的实际操作\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;2:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;读取信息体\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre><p>handle是个处理器，根据readState的状态处理上下文数据。</p><h5 id=\"var-backup-var-body-\">var backup = [] 备用数据 和 var body = []</h5><p>bady表示上传的数据体。backup表示一个储存二进制 int 类型数据的数组，也就是当读取数据时，如果不确定是属于哪部分数据，就先存储在备用数据中。当确定之后直接把backup放入body，并清空backup。</p><p>以上就是整个的分析过程，其实看书学习，重点在于训练分析能力，而不在于背诵了多少API，API文档就是用来查看的，所以没必要所谓的精通API。当然精通更好。思路清晰了，编码也就水到渠成，分析的过程就是经验之谈，这个和API不同，每个人分析方式都不同，在这里我也只是抛砖引玉。希望通过这个过程，传授你经验，而不是几个API使用的知识。</p><p>在全书中，我也一直在强调经验的传授，分析过程大于记忆的理念。我们要提高的是创造力和逻辑分析能力，记忆力现在确实不是什么强项，因为知识从哪里都可以学到，资讯获得太容易，而分析能力和创造力却是很难量化的，也是很难学到的。</p><p>下一节，我们要大幅度修改post.js插件的代码，让它具有处理二进制信息的能力。</p>','[{\"type\":\"contents\",\"content\":\"第8天 二进制文件上传\\n今天要让post.js插件，解析二进制文件。今天采用的解析方式和昨天完全不同，post.js插件需要重写，当然昨天的基础也是很必要的。\\nthis首先，还是要找到突破口，研究如何让插件支持二进制，并且分析解析原理。然后着手开发一些测试代码，基本的分析工作完成后，再重写post.js插件，最后通过例子进行测试。\\nyellow今天的内容相对抽象，需要全神贯注和动手实验，一定要动手自己做demo和测试代码。下面就开始今天的开发，希望一切顺利！\\n二进制解析原理\\n用二进制格式代替字符串\\n对二进制进行解析，就不能把上传来的body信息转换为字符串形式处理，而是要用Buffer二进制类型处理。\\n首先，我们不能用 body_data += chunk 方式合并体数据了，因为合并后是字符串形式，需要采用下面的编码方式代替。\\nvar body_data;\\nvar chunk_list = [];\\n\\nreq.on(\\\"data\\\",function(chunk){\\n    chunk_list.push(chunk);\\n})\\n\\nreq.on(\\\"end\\\",function(){\\n    body_data = Buffer.concat(chunk_list);\\n})\\n通过这种方式，我们得到了二进制Buffer类型对象body_data，Buffer.concat方法可以合并二进制类型数组，返回一个新的Buffer对象。\\n先不必弄明白所有代码，跟着往下走就好。现在只要明白 body_data 是二进制对象，我们要对它进行解析，找到它各个部分的信息块。\\nbody_data可以理解为是一个byte字节数组，通过body_data[0]可以得到第一个byte。\\n为什么？\\n（小胖问：为什么要这样呢？和之前的合并方式有什么差异呢？）\\n最关键的差异，是当二进制转换为字符形式处理后，再转回二进制形式，里面的数据结构就变化了。通过下面的代码，让你明白。\\nvar buf = new Buffer([0,1,21,0]);\\nconsole.log(buf); // &lt;Buffer 00 01 15 00&gt;\\n\\nvar buf2 = new Buffer(buf.toString(\\\"ascii\\\"),\\\"ascii\\\");\\nconsole.log(buf2);// &lt;Buffer 20 01 15 20&gt;\\n上面的代码的意思是，把二进制对象buf通过转换为ascii编码的字符串，然后再转回来。这时候数据就不一样了。我们发现里面的 00 转换为 20 ，太深的不必解释，至少知道通过二进制转字符串，再转换回二进制格式，数据就会变化！\\n所以，结论就出来了，昨天的方式只适合于文本文件的上传。\\n那该如何是好？\\n（小帅哥说道：字符串不能用了，直接操作二进制？好像很复杂的样子！）\\n是的，相对之前的编码要复杂一些。不过，弄明白原理后，就没什么神秘之处了。下面，我们分析一下，到底该如何做，从哪里下手。\\n二进制的读取和分析，可以从头循环读取，每次抓取一个byte，然后根据上下文，来判断读取的是哪个信息块。比如，读取的是边界字符串部分，还是信息头，或者是主体信息。根据这个思考方向，我们可以编写一些代码：（分析要配合编码，这样将很快把分析落实和验证分析，不要只是想，要想一些就要马上做一些，这是最快的设计与开发的方法）\\nvar position = 0; // 读取的自己位置\\nfor(var len = body_data.length;position&lt;len;){  // 循环读body_data字节\\n        var b = body_data[position]; // b 就是字节的 int数据。\\n}\\n下一步，我们要配合上下文，对 var b进行分析。所谓上下文，我们可以理解为：读取状态，也就是眼下读取的是哪部分数据。所以要定义一下编码：\\n // 读取状态 \\n // 0表示怀疑是边界字符串\\n // 1表示正在读取头部信息字符串\\n // 2表示正在读取body体数据\\n var readState = 0;\\n上下文状态，也就是当前读取什么，我们分为三种状态。怀疑读取边界，这个状态的产生，是由于读取到了-这个信息，-二进制转为int是45，每当读取到-就会把readState=0；1表示读取信息头，这里没有怀疑字样，因为如果读取边界之后，就能确定要读取头部信息了；2表示读取body体信息，这个也不需要怀疑，因为读取完头部信息，就可以确定要读取body体数据了。\\n回过头来再说说，怀疑读取边界信息。为什么要用怀疑字样呢？这是因为除了第一个边界信息外，我们不知道什么时候读完body体信息，如果读到-就说明要开始读取边界信息，这个不准确，因为我们无法确定body信息体内是否包括-。\\n根据以上的分析，我们可以写出如下的编码：\\nfunction handle(b){  // 字节处理器\\n         switch(readState){\\n            case 0:\\n            // 处理怀疑是正在读取边界字符串\\n            break\\n            case 1:\\n            // 读取信息头的实际操作\\n            break;\\n            case 2:\\n            // 读取信息体\\n            break;\\n         }\\n}\\nhandle是个处理器，根据readState的状态处理上下文数据。\\nvar backup = [] 备用数据 和 var body = []\\nbady表示上传的数据体。backup表示一个储存二进制 int 类型数据的数组，也就是当读取数据时，如果不确定是属于哪部分数据，就先存储在备用数据中。当确定之后直接把backup放入body，并清空backup。\\n以上就是整个的分析过程，其实看书学习，重点在于训练分析能力，而不在于背诵了多少API，API文档就是用来查看的，所以没必要所谓的精通API。当然精通更好。思路清晰了，编码也就水到渠成，分析的过程就是经验之谈，这个和API不同，每个人分析方式都不同，在这里我也只是抛砖引玉。希望通过这个过程，传授你经验，而不是几个API使用的知识。\\n在全书中，我也一直在强调经验的传授，分析过程大于记忆的理念。我们要提高的是创造力和逻辑分析能力，记忆力现在确实不是什么强项，因为知识从哪里都可以学到，资讯获得太容易，而分析能力和创造力却是很难量化的，也是很难学到的。\\n下一节，我们要大幅度修改post.js插件的代码，让它具有处理二进制信息的能力。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445139698000.jpg','2015-10-18 03:44:43','2020-08-20 15:44:19'),(348,'整理几个常用的正则','整理几个常用的正则','1','1','','正则表达式','2',NULL,'','最近重新对DoraCMS中的正则表达式进行了整理，前后端同步校验，下面列出几个常用的','1','','','0:01',762,'2','0',NULL,0,'0',223053,'<p>最近重新对DoraCMS中的正则表达式进行了整理，前后端同步校验，下面列出几个常用的：</p><p><br/></p><p>1、用户名校验：</p><p>5-12个非特殊字符</p><pre class=\"brush:js;toolbar:false\">^[a-zA-Z][a-zA-Z0-9_]{4,11}$</pre><p><br/></p><p>2、邮箱校验</p><pre class=\"brush:js;toolbar:false\">^\\w+((-\\w+)|(\\.\\w+))*\\@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$</pre><p>3、密码校验<br/></p><p>5个字符以上，数字、字母下划线等</p><pre class=\"brush:js;toolbar:false\">(?!^\\\\d+$)(?!^[a-zA-Z]+$)(?!^[_#@]+$).{5,}</pre><p><br/></p><p>4、QQ号码校验</p><pre class=\"brush:js;toolbar:false\">^[1-9][0-9]{4,9}$</pre><p><br/></p><p>5、手机号校验<br/></p><pre class=\"brush:js;toolbar:false\">^1[3|4|5|8][0-9]\\d{4,8}$</pre><p><br/></p><p>6、中文字符校验</p><pre class=\"brush:js;toolbar:false\">[\\u4e00-\\u9fa5]</pre><p><br/></p>','[{\"type\":\"contents\",\"content\":\"最近重新对DoraCMS中的正则表达式进行了整理，前后端同步校验，下面列出几个常用的：\\n\\n1、用户名校验：\\n5-12个非特殊字符\\n^[a-zA-Z][a-zA-Z0-9_]{4,11}$\\n\\n2、邮箱校验\\n^\\\\w+((-\\\\w+)|(\\\\.\\\\w+))*\\\\@[A-Za-z0-9]+((\\\\.|-)[A-Za-z0-9]+)*\\\\.[A-Za-z0-9]+$\\n3、密码校验\\n5个字符以上，数字、字母下划线等\\n(?!^\\\\\\\\d+$)(?!^[a-zA-Z]+$)(?!^[_#@]+$).{5,}\\n\\n4、QQ号码校验\\n^[1-9][0-9]{4,9}$\\n\\n5、手机号校验\\n^1[3|4|5|8][0-9]\\\\d{4,8}$\\n\\n6、中文字符校验\\n[\\\\u4e00-\\\\u9fa5]\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444893880000.jpg','2015-10-08 03:24:59','2020-08-20 15:44:23'),(349,'第4天 路由——路由总结','路由功能总结','2','1','','路由总结','2',NULL,'','这几天学习到很多新知识。作为node.js服务器端运行javascript代码的环境，让我们前后端都能统一采用javascript进行编码，这一点让web程序员很欣喜。','1','','','0:01',762,'2','0',NULL,0,'0',223298,'<h3>小结</h3><p>这几天学习到很多新知识。作为node.js服务器端运行javascript代码的环境，让我们前后端都能统一采用javascript进行编码，这一点让web程序员很欣喜。</p><p>node.js内部是V8为引擎，所以速度很快。集成了npm命令，让发布和获取node.js扩展库非常方便，只需要 <code>npm publish</code> 和 <code>npm install</code>命令即可做到。通过查阅node.js doc api文档，可以看到所有node.js的核心库的使用信息。所以要时常翻阅和对照API进行demo练习与测试。</p><p>原始的node.js http模块没有静态服务器和路由的功能，通过扩展功能，本周的stuwebfk框架具有了路由功能和静态服务器的功能，打造出了web服务器的雏形，虽然功能还很简单，但确实是好的开始。</p><p>通过项目的需要，我们用到了如下node.js的核心库，可以参看api文档查看详细使用信息。</p><ul class=\" list-paddingleft-2\"><li><p>http</p></li><li><p>file system</p></li><li><p>url</p></li></ul><p>http库是重点，通过调用http.createServer方法可建立http服务器对象，服务器对象是 http.Server的实例，通过监听服务器对象的request事件，可以响应客户端请求。其实，在stuwebfk框架实际开发过程中，并没有通过server.on(&quot;request&quot;,handle) 的方式监听请求事件的，而是通过 http.createServer(handle) 的方法， 他们的效果是一致的。</p><p>通过git和npm命令，我们成功的把不断迭代版本发布到githhub和npmjs上，这对于版本管理和维护至关重要，即使电脑损毁了，也不会威胁到云端的代码。</p><p>我们也学会了，通过倒推的方式，先写出实现后的使用代码，然后在分析如何实现，最后实际编码。这样有了蓝图再开发，比较准确和快速。在框架设计的初期，通过先构思，然后找到技术层面的切入点，然后加以实现的方式，找到突破口。也明白了，无需思考完美后，再去实现，而应该遵循逐步完善的哲学，逐步迭代的达到目标。就总结到这里。</p><p>本周我们都很努力，希望有个快乐周末，下周有个好的开始。<span class=\"invade-word\"></span></p>','[{\"type\":\"contents\",\"content\":\"小结\\n这几天学习到很多新知识。作为node.js服务器端运行javascript代码的环境，让我们前后端都能统一采用javascript进行编码，这一点让web程序员很欣喜。\\nnode.js内部是V8为引擎，所以速度很快。集成了npm命令，让发布和获取node.js扩展库非常方便，只需要 npm publish 和 npm install命令即可做到。通过查阅node.js doc api文档，可以看到所有node.js的核心库的使用信息。所以要时常翻阅和对照API进行demo练习与测试。\\n原始的node.js http模块没有静态服务器和路由的功能，通过扩展功能，本周的stuwebfk框架具有了路由功能和静态服务器的功能，打造出了web服务器的雏形，虽然功能还很简单，但确实是好的开始。\\n通过项目的需要，我们用到了如下node.js的核心库，可以参看api文档查看详细使用信息。\\nhttp\\nfile system\\nurl\\n\\nhttp库是重点，通过调用http.createServer方法可建立http服务器对象，服务器对象是 http.Server的实例，通过监听服务器对象的request事件，可以响应客户端请求。其实，在stuwebfk框架实际开发过程中，并没有通过server.on(\\\"request\\\",handle) 的方式监听请求事件的，而是通过 http.createServer(handle) 的方法， 他们的效果是一致的。\\n通过git和npm命令，我们成功的把不断迭代版本发布到githhub和npmjs上，这对于版本管理和维护至关重要，即使电脑损毁了，也不会威胁到云端的代码。\\n我们也学会了，通过倒推的方式，先写出实现后的使用代码，然后在分析如何实现，最后实际编码。这样有了蓝图再开发，比较准确和快速。在框架设计的初期，通过先构思，然后找到技术层面的切入点，然后加以实现的方式，找到突破口。也明白了，无需思考完美后，再去实现，而应该遵循逐步完善的哲学，逐步迭代的达到目标。就总结到这里。\\n本周我们都很努力，希望有个快乐周末，下周有个好的开始。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444892036000.jpg','2015-09-20 11:03:53','2020-08-20 15:44:24'),(350,'关于添加用户组提示没有权限的问题','关于添加用户组提示没有权限的问题','1','1',NULL,'bug修复','2',NULL,'','最近的一次更新出现了些问题，很多童鞋在github上提问了，在按教程注释了相关代码后，访问用户组页面可以访问，添加却提示没有权限。','1','','','0:01',762,'2','0',NULL,0,'0',223759,'<p>最近的一次更新出现了些问题，很多童鞋在github上提问了，在按教程注释了相关代码后，访问用户组页面可以访问，添加却提示没有权限。原因是上个版本去掉了validat.js，改用了adminCtrl.js。没有权限访问主要是在&nbsp;checkAdminPower 这个方法上，现已修复，你可以这么做：</p><p><br/></p><p>1、github更新最新代码</p><p>2、后面两步跟之前的完全一样：</p><p>① 找到adminCtrl.js注释以下代码：</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_4_2_14_8_24_106_1009.jpg\" title=\"\" alt=\"DoraCMS bug修复.jpg\"/></p><p><br/></p><p>②找到adminFunc.js注释以下代码，并返回true</p><p><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_4_2_14_10_11_268_1010.jpg\" title=\"\" alt=\"DoraCMS bug修复1.jpg\"/></p><p><br/></p><p>3、</p><p>用户组管理 ：<a href=\"http://127.0.0.1:81/admin/manage/adminGroupList\" _src=\"http://127.0.0.1:81/admin/manage/adminGroupList\" style=\"white-space: normal;\">http://127.0.0.1:81/admin/manage/adminGroupList</a></p><p style=\"white-space: normal;\">管理员添加 ：&nbsp;<a href=\"http://127.0.0.1:81/admin/manage/adminUsersList\" _src=\"http://127.0.0.1:81/admin/manage/adminUsersList\">http://127.0.0.1:81/admin/manage/adminUsersList</a></p><p style=\"white-space: normal;\"><br/></p>','[{\"type\":\"contents\",\"content\":\"最近的一次更新出现了些问题，很多童鞋在github上提问了，在按教程注释了相关代码后，访问用户组页面可以访问，添加却提示没有权限。原因是上个版本去掉了validat.js，改用了adminCtrl.js。没有权限访问主要是在 checkAdminPower 这个方法上，现已修复，你可以这么做：\\n\\n1、github更新最新代码\\n2、后面两步跟之前的完全一样：\\n① 找到adminCtrl.js注释以下代码：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_4_2_14_8_24_106_1009.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n②找到adminFunc.js注释以下代码，并返回true\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_4_2_14_10_11_268_1010.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n3、\\n用户组管理 ：http://127.0.0.1:81/admin/manage/adminGroupList\\n管理员添加 ： http://127.0.0.1:81/admin/manage/adminUsersList\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20160402135655.jpg','2016-04-02 06:11:57','2020-08-20 15:44:09'),(351,'FIS3 , 为你定制的前端工程构建工具','FIS3 , 为你定制的前端工程构建工具','1','1','','FIS3,fis','2',NULL,'','最近看了一下fis的相关文档，发现它对于前端开发带来很大的便利，借用官方说法:解决前端开发中自动化工具、性能优化、模块化框架、开发规范、代码部署、开发流程等问题','1','','','0:01',762,'2','0',NULL,1,'0',224648,'<p>&nbsp;&nbsp;&nbsp;&nbsp;最近看了一下fis的相关文档，发现它对于前端开发带来很大的便利,根据文档的相关操作，我尝试着跟着做了下，非常方便。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;fis到底是做什么用的呢，目前我所知道的很便捷的一点，就是静态文件的压缩和文件指纹，自动化的操作只通过一句命令行就可以实现文件的压缩、打包、指纹等操作，非常方便，下面简单介绍一下使用方式。由于最新版本是fis3，所以以fis3为例。<br/></p><p><br/></p><h4 class=\"\">FIS3 是什么</h4><p>FIS3 是面向前端的工程构建工具。解决前端工程中性能优化、资源加载（异步、同步、按需、预加载、依赖管理、合并、内嵌）、模块化开发、自动化工具、开发规范、代码部署等问题。以Nodejs为底层编写。所以需要通过npm进行全局安装（当然前提是需要安装nodejs和npm，参考<a href=\"https://nodejs.org这里不多说）\" _src=\"https://nodejs.org这里不多说）\">https://nodejs.org</a> 这里不多说）</p><p><br/></p><p>1、安装fis</p><pre class=\"brush:js;toolbar:false\">npm&nbsp;install&nbsp;-g&nbsp;fis3</pre><p>-g 安装到全局目录，必须使用全局安装，当全局安装后才能在命令行（cmd或者终端）找到 fis3 命令。</p><p><br/></p><p>安装完成后执行 fis3 -v 判断是否安装成功，安装成功命令行会出现以下提示：</p><pre class=\"brush:html;toolbar:false;\">$&nbsp;fis3&nbsp;-v\n\n&nbsp;[INFO]&nbsp;Currently&nbsp;running&nbsp;fis3&nbsp;(/Users/Your/Dev/fis3/dev/fis3)\n\n&nbsp;&nbsp;v3.0.0\n\n&nbsp;&nbsp;&nbsp;/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\&nbsp;&nbsp;/\\\\\\\\\\\\\\\\\\\\\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/\\\\\\\\\\\\\\\\\\\\\\\n&nbsp;&nbsp;&nbsp;\\/\\\\\\///////////&nbsp;&nbsp;\\/////\\\\\\///&nbsp;&nbsp;&nbsp;&nbsp;/\\\\\\/////////\\\\\\\n&nbsp;&nbsp;&nbsp;&nbsp;\\/\\\\\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\/\\\\\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\//\\\\\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\///\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\/\\\\\\\\\\\\\\\\\\\\\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\/\\\\\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\////\\\\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\/\\\\\\///////&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\/\\\\\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\////\\\\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\/\\\\\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\/\\\\\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\////\\\\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\/\\\\\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\/\\\\\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/\\\\\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\//\\\\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\/\\\\\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/\\\\\\\\\\\\\\\\\\\\\\&nbsp;\\///\\\\\\\\\\\\\\\\\\\\\\/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\///&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\///////////&nbsp;&nbsp;&nbsp;&nbsp;\\///////////</pre><p><br/></p><p>2、在你的静态文件根目录下添加文件 fis-config.js</p><pre class=\"brush:js;toolbar:false\">fis.match(&#39;*.js&#39;,&nbsp;{&nbsp;//&nbsp;所有js文件静态压缩\n&nbsp;&nbsp;useHash:&nbsp;false\n});\n\nfis.match(&#39;*.css&#39;,&nbsp;{&nbsp;//&nbsp;&nbsp;所有样式文件静态压缩\n&nbsp;&nbsp;useHash:&nbsp;false\n});\n\nfis.match(&#39;*.png&#39;,&nbsp;{&nbsp;//&nbsp;&nbsp;所有png图片压缩\n&nbsp;&nbsp;useHash:&nbsp;false\n});</pre><p><br/></p><p>3、在当前根目录打开命令行，输入指令：</p><pre class=\"brush:js;toolbar:false\">fis3&nbsp;release&nbsp;-d&nbsp;../output</pre><p>这里的output 是压缩后输出目录，这里要注意的是，压缩操作不会改变你本来的文件，会根据你所指定的目录输出。执行完毕后等待几秒钟，查看输出结构。<br/></p><p><br/></p><p>当然，上面介绍的是最简单的文件压缩，你可以根据自己的需要添加文件合并、文件指纹等属性。具体可参考fis官网api，<a href=\"http://fis.baidu.com/fis3/docs/beginning/intro.html，里面有详细介绍\" _src=\"http://fis.baidu.com/fis3/docs/beginning/intro.html，里面有详细介绍\">http://fis.baidu.com/fis3/docs/beginning/intro.html</a> ，里面有详细介绍</p><p><br/></p><p>执行后结果：<br/></p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_6_19_6_2_342_1000.png\" title=\"\" alt=\"demo-uri-dir-output_d22b536.png\"/></p>','[{\"type\":\"contents\",\"content\":\"    最近看了一下fis的相关文档，发现它对于前端开发带来很大的便利,根据文档的相关操作，我尝试着跟着做了下，非常方便。\\n    fis到底是做什么用的呢，目前我所知道的很便捷的一点，就是静态文件的压缩和文件指纹，自动化的操作只通过一句命令行就可以实现文件的压缩、打包、指纹等操作，非常方便，下面简单介绍一下使用方式。由于最新版本是fis3，所以以fis3为例。\\n\\nFIS3 是什么\\nFIS3 是面向前端的工程构建工具。解决前端工程中性能优化、资源加载（异步、同步、按需、预加载、依赖管理、合并、内嵌）、模块化开发、自动化工具、开发规范、代码部署等问题。以Nodejs为底层编写。所以需要通过npm进行全局安装（当然前提是需要安装nodejs和npm，参考https://nodejs.org 这里不多说）\\n\\n1、安装fis\\nnpm install -g fis3\\n-g 安装到全局目录，必须使用全局安装，当全局安装后才能在命令行（cmd或者终端）找到 fis3 命令。\\n\\n安装完成后执行 fis3 -v 判断是否安装成功，安装成功命令行会出现以下提示：\\n$ fis3 -v\\n\\n [INFO] Currently running fis3 (/Users/Your/Dev/fis3/dev/fis3)\\n\\n  v3.0.0\\n\\n   /\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\  /\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\     /\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n   \\\\/\\\\\\\\\\\\///////////  \\\\/////\\\\\\\\\\\\///    /\\\\\\\\\\\\/////////\\\\\\\\\\\\\\n    \\\\/\\\\\\\\\\\\                 \\\\/\\\\\\\\\\\\      \\\\//\\\\\\\\\\\\      \\\\///\\n     \\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\         \\\\/\\\\\\\\\\\\       \\\\////\\\\\\\\\\\\\\n      \\\\/\\\\\\\\\\\\///////          \\\\/\\\\\\\\\\\\          \\\\////\\\\\\\\\\\\\\n       \\\\/\\\\\\\\\\\\                 \\\\/\\\\\\\\\\\\             \\\\////\\\\\\\\\\\\\\n        \\\\/\\\\\\\\\\\\                 \\\\/\\\\\\\\\\\\      /\\\\\\\\\\\\      \\\\//\\\\\\\\\\\\\\n         \\\\/\\\\\\\\\\\\              /\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ \\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/\\n          \\\\///              \\\\///////////    \\\\///////////\\n\\n2、在你的静态文件根目录下添加文件 fis-config.js\\nfis.match(\'*.js\', { // 所有js文件静态压缩\\n  useHash: false\\n});\\n\\nfis.match(\'*.css\', { //  所有样式文件静态压缩\\n  useHash: false\\n});\\n\\nfis.match(\'*.png\', { //  所有png图片压缩\\n  useHash: false\\n});\\n\\n3、在当前根目录打开命令行，输入指令：\\nfis3 release -d ../output\\n这里的output 是压缩后输出目录，这里要注意的是，压缩操作不会改变你本来的文件，会根据你所指定的目录输出。执行完毕后等待几秒钟，查看输出结构。\\n\\n当然，上面介绍的是最简单的文件压缩，你可以根据自己的需要添加文件合并、文件指纹等属性。具体可参考fis官网api，http://fis.baidu.com/fis3/docs/beginning/intro.html ，里面有详细介绍\\n\\n执行后结果：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/blogpicture/2015_8_6_19_6_2_342_1000.png\"},{\"type\":\"contents\",\"content\":\"\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444890599000.jpg','2015-08-06 11:06:22','2020-08-20 15:44:26'),(352,'关于JavaScript循环中的跳转语句','关于JavaScript循环中的跳转语句','1','1','','continue,break','2',NULL,'','循环在前端开发中，经常用到，用法不在赘述，我们在循环的过程中，经常会用到\nbreak, continue来处理循环中的跳转。','1','','','0:01',762,'2','0',NULL,0,'0',223414,'<p>关于JavaScript循环有以下四种,</p><p>1、for循环</p><pre class=\"brush:js;toolbar:false\">let&nbsp;arr&nbsp;=&nbsp;new&nbsp;Array(6);\nfor&nbsp;(let&nbsp;item&nbsp;in&nbsp;arr)&nbsp;{\n&nbsp;&nbsp;console.log(item,&nbsp;arr[item]);\n}</pre><p>2、switch<br/></p><pre class=\"brush:js;toolbar:false\">switch&nbsp;(key)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&#39;a&#39;:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;is&nbsp;a&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&#39;b&#39;:&nbsp;//多选\n&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&#39;c&#39;:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;is&nbsp;b&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;default:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\n}</pre><p>3、while<br/></p><pre class=\"brush:js;toolbar:false\">let&nbsp;j&nbsp;=&nbsp;0;\nwhile&nbsp;(j&nbsp;&lt;&nbsp;10)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;j++;\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(j);\n}</pre><p>4、do while<br/></p><pre class=\"brush:js;toolbar:false\">let&nbsp;m&nbsp;=&nbsp;11;\ndo&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(m);\n}&nbsp;while&nbsp;(m&nbsp;&lt;&nbsp;10)</pre><p>循环在前端开发中，经常用到，用法不在赘述，我们在循环的过程中，经常会用到</p><p>break, continue来处理循环中的跳转。</p><p>1、break ，终止循环</p><p>2、continue 终止本次循环</p><p>如果我们遇到下面的场景，如何处理呢？</p><pre class=\"brush:js;toolbar:false\">for&nbsp;(var&nbsp;j&nbsp;=&nbsp;0;&nbsp;j&nbsp;&lt;&nbsp;10;&nbsp;j++)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(j);\n&nbsp;&nbsp;&nbsp;&nbsp;switch&nbsp;(&#39;b&#39;)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&#39;b&#39;:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;bbbbb&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;&nbsp;//&nbsp;跳转1\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre><p>代码中的逻辑，会在“跳转1” 处跳转出switch，然后继续for循环，这样没问题，如果我想终止整个循环该怎么做？</p><p>我们需要为循环添加标签：</p><pre class=\"brush:js;toolbar:false\">stop:for&nbsp;(var&nbsp;j&nbsp;=&nbsp;0;&nbsp;j&nbsp;&lt;&nbsp;10;&nbsp;j++)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(j);\n&nbsp;&nbsp;&nbsp;&nbsp;switch&nbsp;(&#39;b&#39;)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;&#39;b&#39;:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;bbbbb&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break&nbsp;stop;&nbsp;//&nbsp;跳转1\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre><p>输出</p><pre class=\"brush:js;toolbar:false\">1\n2\n3\n4</pre><p>代码块里也可以这么做</p><pre class=\"brush:js;toolbar:false\">stop:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;aaaa--&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stop2:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(var&nbsp;n&nbsp;=&nbsp;0;&nbsp;n&nbsp;&lt;&nbsp;10;&nbsp;n++)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(n);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(n&nbsp;&gt;&nbsp;5)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break&nbsp;stop;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;bbbb----&#39;);&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\nconsole.log(&#39;ccc--&#39;);</pre><p>输出：</p><pre class=\"brush:js;toolbar:false\">aaaa--\n0\n1\n2\n3\n4\n5\n6\nccc--</pre><p>看明白了吧，通过break标签的写法，我们可以在需要中断的地方跳出循环。</p><p><br/></p><p><span style=\"color: rgb(192, 0, 0);\">ps: 我们在开发的过程中，往往因为一些重要功能或问题而忽视了基础而选择更复杂而顺手的解决方案，而这些基础却又是非常重要的，这也是我们在学习过程中需要重点关注的。</span></p>','[{\"type\":\"contents\",\"content\":\"关于JavaScript循环有以下四种,\\n1、for循环\\nlet arr = new Array(6);\\nfor (let item in arr) {\\n  console.log(item, arr[item]);\\n}\\n2、switch\\nswitch (key) {\\n    case \'a\':\\n        console.log(\'is a\');\\n        break;\\n    case \'b\': //多选\\n    case \'c\':\\n        console.log(\'is b\');\\n        break;\\n    default:\\n        break;\\n}\\n3、while\\nlet j = 0;\\nwhile (j &lt; 10) {\\n    j++;\\n    console.log(j);\\n}\\n4、do while\\nlet m = 11;\\ndo {\\n    console.log(m);\\n} while (m &lt; 10)\\n循环在前端开发中，经常用到，用法不在赘述，我们在循环的过程中，经常会用到\\nbreak, continue来处理循环中的跳转。\\n1、break ，终止循环\\n2、continue 终止本次循环\\n如果我们遇到下面的场景，如何处理呢？\\nfor (var j = 0; j &lt; 10; j++) {\\n    console.log(j);\\n    switch (\'b\') {\\n        case \'b\':\\n        console.log(\'bbbbb\');\\n        break; // 跳转1\\n    }\\n}\\n代码中的逻辑，会在“跳转1” 处跳转出switch，然后继续for循环，这样没问题，如果我想终止整个循环该怎么做？\\n我们需要为循环添加标签：\\nstop:for (var j = 0; j &lt; 10; j++) {\\n    console.log(j);\\n    switch (\'b\') {\\n        case \'b\':\\n        console.log(\'bbbbb\');\\n        break stop; // 跳转1\\n    }\\n}\\n输出\\n1\\n2\\n3\\n4\\n代码块里也可以这么做\\nstop: {\\n    console.log(\'aaaa--\');\\n        stop2: {\\n            for (var n = 0; n &lt; 10; n++) {\\n            console.log(n);\\n            if (n &gt; 5) {\\n                break stop;\\n            }\\n        }\\n    console.log(\'bbbb----\');    \\n    }\\n}\\nconsole.log(\'ccc--\');\\n输出：\\naaaa--\\n0\\n1\\n2\\n3\\n4\\n5\\n6\\nccc--\\n看明白了吧，通过break标签的写法，我们可以在需要中断的地方跳出循环。\\n\\nps: 我们在开发的过程中，往往因为一些重要功能或问题而忽视了基础而选择更复杂而顺手的解决方案，而这些基础却又是非常重要的，这也是我们在学习过程中需要重点关注的。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20170418151442.jpg','2017-04-18 07:35:42','2020-08-20 15:44:06'),(353,'第10天 cookie与session—开发总结','cookie与session开发总结','2','1','','cookie与session','2',NULL,'','stuwebfk框架到此就告一段落了，这是一个有趣的开发旅程，这个过程中我们学到了一些有用的技巧和经验。stuwebfk仅是一个为学习而诞生的框架，用于生产还是需要加入一些细节，同时web框架的核心功能都体现在stuwebfk框架中了。','1','','','0:01',762,'2','0',NULL,0,'0',223449,'<h3>开发总结</h3><p>stuwebfk框架到此就告一段落了，这是一个有趣的开发旅程，这个过程中我们学到了一些有用的技巧和经验。stuwebfk仅是一个为学习而诞生的框架，用于生产还是需要加入一些细节，同时web框架的核心功能都体现在stuwebfk框架中了。如果你有雄心，可以对其进一步的更新和优化，形成自己的成熟web框架。</p><p>从安装node、git开始，注定我们的脚步无法停止。通过静态服务器的开发，让探索的钻头深入了web核心，通过构思的过程，细致的分析实现了框架的骨架，也学到了原理和经验。版本发布让项目可以分享给他人，通过git可以控制项目的版本。</p><p>为框架增加GET/POST方法后，当时的心情也很激动，看起来确实有模有样了。路由器功能的实现用了3天的时间，从第一天的路由功能分析，到最后实现了泛式路由和路由功能的补完，也让你我的信心倍增，经验更丰富，大大的提高了一步。</p><p>上传功能的实现用了2天的时间，这个是考验耐力的过程，可你坚持了下来。因为上传功能相对繁琐，而你也能按部就班的跟着做，本身就是一个挑战，挑战后的奖励也是如此的丰厚，让我们的框架具备了上传文本文件和二进制文件的特性，更重要的是你也具备了这种开发经验和能力。<span class=\"invade-word\">good</span></p><p>为了开发博客系统，我们还需要一个动态模板渲染的插件，这个功能的实现说难不难，但也不简单。这个开发的过程有迷茫和兴奋，你也是这样勇敢的跟了上来。在最后session功能的挑战，让你我都看到了框架的可用性，有信心用它来做一些什么了。</p><p>在明天，也就是开发旅程最后一站，用stuwebfk框架开发自己博客。功能不会太复杂，是的，也许不会实际用它，但它让我们用自己开发的web框架，开发自己的应用程序，这本身就是一个飞跃！明天是个值得庆祝的一天！</p>','[{\"type\":\"contents\",\"content\":\"开发总结\\nstuwebfk框架到此就告一段落了，这是一个有趣的开发旅程，这个过程中我们学到了一些有用的技巧和经验。stuwebfk仅是一个为学习而诞生的框架，用于生产还是需要加入一些细节，同时web框架的核心功能都体现在stuwebfk框架中了。如果你有雄心，可以对其进一步的更新和优化，形成自己的成熟web框架。\\n从安装node、git开始，注定我们的脚步无法停止。通过静态服务器的开发，让探索的钻头深入了web核心，通过构思的过程，细致的分析实现了框架的骨架，也学到了原理和经验。版本发布让项目可以分享给他人，通过git可以控制项目的版本。\\n为框架增加GET/POST方法后，当时的心情也很激动，看起来确实有模有样了。路由器功能的实现用了3天的时间，从第一天的路由功能分析，到最后实现了泛式路由和路由功能的补完，也让你我的信心倍增，经验更丰富，大大的提高了一步。\\n上传功能的实现用了2天的时间，这个是考验耐力的过程，可你坚持了下来。因为上传功能相对繁琐，而你也能按部就班的跟着做，本身就是一个挑战，挑战后的奖励也是如此的丰厚，让我们的框架具备了上传文本文件和二进制文件的特性，更重要的是你也具备了这种开发经验和能力。good\\n为了开发博客系统，我们还需要一个动态模板渲染的插件，这个功能的实现说难不难，但也不简单。这个开发的过程有迷茫和兴奋，你也是这样勇敢的跟了上来。在最后session功能的挑战，让你我都看到了框架的可用性，有信心用它来做一些什么了。\\n在明天，也就是开发旅程最后一站，用stuwebfk框架开发自己博客。功能不会太复杂，是的，也许不会实际用它，但它让我们用自己开发的web框架，开发自己的应用程序，这本身就是一个飞跃！明天是个值得庆祝的一天！\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1445236840000.jpg','2015-10-19 06:41:28','2020-08-20 15:44:16'),(354,'DoraCMS安装教程(linux)','DoraCMS安装教程(linux)','1','1',NULL,'DoraCMS安装','2',NULL,'','最近在熟悉linux环境，也基本上把DoraCMS部署上去了，本教程基于ubuntu server 14.0.4，其它linux版本部署方式基本上差不多，下面详细说明一下','1','','','0:01',762,'2','0',NULL,0,'0',226991,'<p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/upload/images/img20151230160943.jpg\" title=\"DoraCMS安装教程\" alt=\"DoraCMS安装教程\"/></p><p><br/></p><p>最近在熟悉linux环境，也基本上把DoraCMS部署上去了，本教程基于ubuntu server 14.0.4，其它linux版本部署方式基本上差不多，下面详细说明一下：</p><p><br/></p><p>1、进入server环境下，在ubuntu目录下建立文件夹softbak,我们用来存放部署需要的一些软件。</p><p><img alt=\"DoraCMS安装教程1.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_21_53_6_374_1000.jpg\" title=\"\"/></p><p><br/></p><p>2、安装nodeJS</p><p>① 推荐先做系统更新</p><pre class=\"brush:js;toolbar:false\">#&nbsp;apt-get&nbsp;update</pre><p>②&nbsp;Node.js 仅需要你的服务器上有一些基本系统和软件功能，比如 &#39;make&#39;、&#39;gcc&#39;和&#39;wget&#39; 之类的。如果你还没有安装它们，运行如下命令安装：</p><pre class=\"brush:js;toolbar:false\">#&nbsp;apt-get&nbsp;install&nbsp;python&nbsp;gcc&nbsp;make&nbsp;g++&nbsp;wget</pre><p>③ 访问链接 <a href=\"https://nodejs.org/download/rc/v4.0.0-rc.1/\" target=\"_blank\" title=\"DoraCMS安装教程\">Node JS Download Page</a> 下载源代码.</p><p><img alt=\"DoraCMS安装教程2.png\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_21_54_17_618_1001.png\" title=\"\"/></p><p>复制其中的最新的源代码的链接，然后用wget 下载，命令如下：</p><pre class=\"brush:js;toolbar:false\">#&nbsp;wget&nbsp;https://nodejs.org/download/rc/v4.0.0-rc.1/node-v4.0.0-rc.1.tar.gz</pre><p><img alt=\"DoraCMS安装教程3.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_21_54_42_610_1002.jpg\" title=\"\"/></p><p>解压缩下载的压缩包：</p><pre class=\"brush:js;toolbar:false\">tar&nbsp;-zxvf&nbsp;node-v4.0.0-rc.1.tar.gz</pre><p><br/></p><p>④&nbsp;安装 Node JS v4.0.0</p><p>现在可以开始使用下载好的源代码编译 Node.js。在开始编译前，你需要在 ubuntu server 上切换到源代码解压缩后的目录，运行 configure 脚本来配置源代码。</p><pre class=\"brush:js;toolbar:false\">&nbsp;./configure</pre><p><img alt=\"DoraCMS安装教程4.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_21_55_11_562_1003.jpg\" title=\"\"/></p><p><br/></p><p>现在运行命令 &#39;make install&#39; 编译安装 Node.js：</p><pre class=\"brush:js;toolbar:false\">make&nbsp;install</pre><p>make 命令会花费几分钟完成编译，安静的等待一会.................</p><p>漫长的等待过后（大概10分钟），编译结束，我们验证一下是否安装成功：</p><p><img alt=\"DoraCMS安装教程5.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_21_55_50_193_1004.jpg\" title=\"\"/></p><p>我们看到Nodejs已经成功安装了。</p><p><br/></p><p>3、安装npm,node中已经自带了</p><pre class=\"brush:js;toolbar:false\">#npm&nbsp;-v</pre><p>通过 npm -v 查看是否安装成功。</p><p><br/></p><p>4、安装mongodb</p><p>① 去<a href=\"http://www.mongodb.org/downloads\" _src=\"http://www.mongodb.org/downloads\">http://www.mongodb.org/downloads</a>&nbsp; 找最新版的链接，切换到softbak目录下执行</p><pre class=\"brush:js;toolbar:false\">#wget&nbsp;https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1404-3.2.0.tgz</pre><p>② 解压缩到 /usr/local/mongodb/</p><pre class=\"brush:js;toolbar:false\">tar&nbsp;zxvf&nbsp;mongodb-linux-x86_64-ubuntu1404-3.2.0.tgz\ncd&nbsp;/usr/local/mongodb//bin</pre><p>③ 在/usr/local/mongodb/目录下建立文件夹data、log<br/></p><pre class=\"brush:js;toolbar:false\">#mkdir&nbsp;data\n#mkdir&nbsp;log</pre><p>④ 在/usr/local/mongodb/目录下创建配置文件mongodb.conf</p><pre class=\"brush:js;toolbar:false\">dbpath=/usr/local/mongodb/data/&nbsp;&nbsp;#数据存放路径\n\nlogpath=/usr/local/mongodb/log/mongodb.log&nbsp;#日志存放路径\n\n#auth=true</pre><p><br/></p><p>⑤ 启动mongodb<br/></p><pre class=\"brush:js;toolbar:false\">./mongod&nbsp;--config&nbsp;/usr/local/mongodb/mongodb.conf&nbsp;--smallfiles&nbsp;&amp;</pre><p>这里使用smallfiles是由于 mongodb的数据恢复功能导致磁盘RAM不足(journal),因为journalRAM至少以2G的数量增长.磁盘大的可以不需要后面的参数， 后面的&amp;是让进程可以挂起，免得进行下面操作后把mongodb服务关掉了</p><p><img alt=\"DoraCMS安装教程6.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_21_56_1_987_1005.jpg\" title=\"\"/></p><p>至此，mongodb服务就开启了。</p><p><span style=\"color: rgb(255, 0, 0);\"><strong>注意：这里的mongodb没有设置密码，真正部署到服务器需要配置用户名和密码！</strong></span></p><p><span style=\"color: rgb(255, 0, 0);\"></span><br/></p><p>5、安装redis</p><p>① 切换到 /home/ubuntu/softbak目录下，下载最新的redis：</p><pre class=\"brush:js;toolbar:false\">#wget&nbsp;http://download.redis.io/releases/redis-3.0.6.tar.gz</pre><p><img alt=\"DoraCMS安装教程7.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_21_56_32_585_1006.jpg\" title=\"\"/></p><p>② 下载完成后解压缩</p><pre class=\"brush:js;toolbar:false\">#tar&nbsp;-xvf&nbsp;redis-3.0.6.tar.gz</pre><p>③ 进入解压目录下执行make编译源码，这里需要等待几分钟。</p><p>make命令执行完成后，会在src目录下生成6个可执行文件，分别是redis-server、redis-cli、redis-benchmark、redis-check-aof、redis-check-dump、redis-sentinel。</p><p><img alt=\"DoraCMS安装教程8.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_21_59_12_405_1007.jpg\" title=\"\"/></p><p>④ 执行make install安装，或者通过make PREFIX=/usr/local/redis install指定安装目录。这里默认安装，默认将之前生成的可执行文件拷贝到/usr/local/bin目录下；</p><p><img alt=\"DoraCMS安装教程9.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_21_59_37_566_1008.jpg\" title=\"\"/></p><p><br/></p><p>⑤ 修改配置文件</p><p>1、将源码目录下redis配置文件redis.conf拷贝到/etc/redis目录下。</p><p>2、修改配置项，根据需要；如果不修改，使用默认配置也可以，我这里没有修改。请注意，<span style=\"color: rgb(255, 0, 0); background-color: rgb(255, 255, 255);\"><strong>真实服务器环境必须设置密码</strong></span></p><p><img alt=\"DoraCMS安装教程10.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_0_6_896_1009.jpg\" title=\"\"/></p><p><br/></p><p>3、启动服务： <br/></p><p>查看端口是否被占用：</p><pre class=\"brush:js;toolbar:false\">netstat&nbsp;–ntlp&nbsp;|grep&nbsp;6379</pre><p>通过指定配置文件启动；</p><pre class=\"brush:js;toolbar:false\">redis-server&nbsp;/etc/redis/redis.conf</pre><p>默认安装的路径已经加入环境变量中，可直接在命令行执行命令；</p><p><img alt=\"DoraCMS安装教程11.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_1_0_671_1010.jpg\" title=\"\"/></p><p><br/></p><p>⑥ 命令客户端检测链接</p><p>1、连接之前可以先检测服务是否启动；</p><p>2、测试启动 redis-cli ping 返回PONG，启动成功。</p><p><img alt=\"DoraCMS安装教程12.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_1_31_154_1011.jpg\" title=\"\"/></p><p>至此，redis服务已经启动成功。</p><p><br/></p><p>6、安装git，非常简单</p><pre class=\"brush:js;toolbar:false\">#apt-get&nbsp;install&nbsp;git</pre><p>执行&nbsp;git --version 可以查看安装的版本号。</p><p><br/></p><p>7、安装GraphicsMagick,图片上传压缩需要该软件支持</p><pre class=\"brush:js;toolbar:false\">apt-get&nbsp;install&nbsp;graphicsmagick</pre><p>然后运行 man gm，如果显示graphicsmagick的manual，则证明graphicsmagick安装成功。</p><p><br/></p><p>8、下载doracms源码</p><p>① 在/home/ubuntu下建立文件夹doracms,进入doracms，执行如下命令：<br/></p><pre class=\"brush:js;toolbar:false\">git&nbsp;clone&nbsp;https://github.com/doramart/DoraCMS.git</pre><p><img alt=\"DoraCMS安装教程13.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_2_10_99_1012.jpg\" title=\"\"/></p><p>② 进入代码根目录 /home/ubuntu/doracms/DoraCMS 执行 npm install 安装所有依赖，速度可能比较慢，可以先打个盹<img src=\"http://img.baidu.com/hi/face/i_f33.gif\"/></p><p><img alt=\"DoraCMS安装教程14.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_2_41_672_1013.jpg\" title=\"\"/></p><p><span style=\"color: rgb(255, 0, 0);\"><strong>注意：如果安装依赖报错了，或者没安装完整，可以把node_modules删掉再重新装一次。</strong></span><br/></p><p>9、经过长时间等待，依赖安装完成，我们在代码根目录执行 npm start&nbsp;</p><pre class=\"brush:js;toolbar:false\">#npm&nbsp;start</pre><p><img alt=\"DoraCMS安装教程15.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_3_13_843_1014.jpg\" title=\"\"/>&nbsp;<br/></p><p>发现没有报错，访问后台： <a _src=\"http://127.0.0.1:80/admin\" href=\"http://127.0.0.1:80/admin\">http://127.0.0.1:81/admin</a> 看到界面可以访问了， 环境搭建完成。</p><p><br/></p><p><img alt=\"DoraCMS安装教程16.jpg\" src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_3_31_980_1015.jpg\" title=\"\"/></p><p><br/></p><p>注意，这里只是环境搭建完成，并不代表可以运行，比如如何添加用户组和管理员等操作，和在windows中完全一样，可以参考文档 <a title=\"D\" target=\"_blank\" href=\"http://www.html-js.cn/details/41vynq2rl.html\">DoraCMS安装教程(windows)</a><br/></p><p>linux我也不是很熟，最近也是在摸索。如果有哪些地方处理有问题或者可以改善，麻烦提出，我们一起完善<img src=\"http://img.baidu.com/hi/bobo/B_0025.gif\"/></p><p><a style=\"color: rgb(0, 176, 240); text-decoration: underline;\" title=\"DoraCMS源码\" target=\"_blank\" href=\"https://github.com/doramart/DoraCMS\"><span style=\"color: rgb(0, 176, 240);\">DoraCMS源码</span></a><br/></p>','[{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/img20151230160943.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n最近在熟悉linux环境，也基本上把DoraCMS部署上去了，本教程基于ubuntu server 14.0.4，其它linux版本部署方式基本上差不多，下面详细说明一下：\\n\\n1、进入server环境下，在ubuntu目录下建立文件夹softbak,我们用来存放部署需要的一些软件。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_21_53_6_374_1000.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n2、安装nodeJS\\n① 推荐先做系统更新\\n# apt-get update\\n② Node.js 仅需要你的服务器上有一些基本系统和软件功能，比如 \'make\'、\'gcc\'和\'wget\' 之类的。如果你还没有安装它们，运行如下命令安装：\\n# apt-get install python gcc make g++ wget\\n③ 访问链接 Node JS Download Page 下载源代码.\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_21_54_17_618_1001.png\"},{\"type\":\"contents\",\"content\":\"\\n复制其中的最新的源代码的链接，然后用wget 下载，命令如下：\\n# wget https://nodejs.org/download/rc/v4.0.0-rc.1/node-v4.0.0-rc.1.tar.gz\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_21_54_42_610_1002.jpg\"},{\"type\":\"contents\",\"content\":\"\\n解压缩下载的压缩包：\\ntar -zxvf node-v4.0.0-rc.1.tar.gz\\n\\n④ 安装 Node JS v4.0.0\\n现在可以开始使用下载好的源代码编译 Node.js。在开始编译前，你需要在 ubuntu server 上切换到源代码解压缩后的目录，运行 configure 脚本来配置源代码。\\n ./configure\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_21_55_11_562_1003.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n现在运行命令 \'make install\' 编译安装 Node.js：\\nmake install\\nmake 命令会花费几分钟完成编译，安静的等待一会.................\\n漫长的等待过后（大概10分钟），编译结束，我们验证一下是否安装成功：\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_21_55_50_193_1004.jpg\"},{\"type\":\"contents\",\"content\":\"\\n我们看到Nodejs已经成功安装了。\\n\\n3、安装npm,node中已经自带了\\n#npm -v\\n通过 npm -v 查看是否安装成功。\\n\\n4、安装mongodb\\n① 去http://www.mongodb.org/downloads  找最新版的链接，切换到softbak目录下执行\\n#wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1404-3.2.0.tgz\\n② 解压缩到 /usr/local/mongodb/\\ntar zxvf mongodb-linux-x86_64-ubuntu1404-3.2.0.tgz\\ncd /usr/local/mongodb//bin\\n③ 在/usr/local/mongodb/目录下建立文件夹data、log\\n#mkdir data\\n#mkdir log\\n④ 在/usr/local/mongodb/目录下创建配置文件mongodb.conf\\ndbpath=/usr/local/mongodb/data/  #数据存放路径\\n\\nlogpath=/usr/local/mongodb/log/mongodb.log #日志存放路径\\n\\n#auth=true\\n\\n⑤ 启动mongodb\\n./mongod --config /usr/local/mongodb/mongodb.conf --smallfiles &amp;\\n这里使用smallfiles是由于 mongodb的数据恢复功能导致磁盘RAM不足(journal),因为journalRAM至少以2G的数量增长.磁盘大的可以不需要后面的参数， 后面的&amp;是让进程可以挂起，免得进行下面操作后把mongodb服务关掉了\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_21_56_1_987_1005.jpg\"},{\"type\":\"contents\",\"content\":\"\\n至此，mongodb服务就开启了。\\n注意：这里的mongodb没有设置密码，真正部署到服务器需要配置用户名和密码！\\n\\n5、安装redis\\n① 切换到 /home/ubuntu/softbak目录下，下载最新的redis：\\n#wget http://download.redis.io/releases/redis-3.0.6.tar.gz\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_21_56_32_585_1006.jpg\"},{\"type\":\"contents\",\"content\":\"\\n② 下载完成后解压缩\\n#tar -xvf redis-3.0.6.tar.gz\\n③ 进入解压目录下执行make编译源码，这里需要等待几分钟。\\nmake命令执行完成后，会在src目录下生成6个可执行文件，分别是redis-server、redis-cli、redis-benchmark、redis-check-aof、redis-check-dump、redis-sentinel。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_21_59_12_405_1007.jpg\"},{\"type\":\"contents\",\"content\":\"\\n④ 执行make install安装，或者通过make PREFIX=/usr/local/redis install指定安装目录。这里默认安装，默认将之前生成的可执行文件拷贝到/usr/local/bin目录下；\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_21_59_37_566_1008.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n⑤ 修改配置文件\\n1、将源码目录下redis配置文件redis.conf拷贝到/etc/redis目录下。\\n2、修改配置项，根据需要；如果不修改，使用默认配置也可以，我这里没有修改。请注意，真实服务器环境必须设置密码\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_0_6_896_1009.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n3、启动服务： \\n查看端口是否被占用：\\nnetstat –ntlp |grep 6379\\n通过指定配置文件启动；\\nredis-server /etc/redis/redis.conf\\n默认安装的路径已经加入环境变量中，可直接在命令行执行命令；\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_1_0_671_1010.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n⑥ 命令客户端检测链接\\n1、连接之前可以先检测服务是否启动；\\n2、测试启动 redis-cli ping 返回PONG，启动成功。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_1_31_154_1011.jpg\"},{\"type\":\"contents\",\"content\":\"\\n至此，redis服务已经启动成功。\\n\\n6、安装git，非常简单\\n#apt-get install git\\n执行 git --version 可以查看安装的版本号。\\n\\n7、安装GraphicsMagick,图片上传压缩需要该软件支持\\napt-get install graphicsmagick\\n然后运行 man gm，如果显示graphicsmagick的manual，则证明graphicsmagick安装成功。\\n\\n8、下载doracms源码\\n① 在/home/ubuntu下建立文件夹doracms,进入doracms，执行如下命令：\\ngit clone https://github.com/doramart/DoraCMS.git\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_2_10_99_1012.jpg\"},{\"type\":\"contents\",\"content\":\"\\n② 进入代码根目录 /home/ubuntu/doracms/DoraCMS 执行 npm install 安装所有依赖，速度可能比较慢，可以先打个盹\"},{\"type\":\"image\",\"content\":\"http://img.baidu.com/hi/face/i_f33.gif\"},{\"type\":\"contents\",\"content\":\"\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_2_41_672_1013.jpg\"},{\"type\":\"contents\",\"content\":\"\\n注意：如果安装依赖报错了，或者没安装完整，可以把node_modules删掉再重新装一次。\\n9、经过长时间等待，依赖安装完成，我们在代码根目录执行 npm start \\n#npm start\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_3_13_843_1014.jpg\"},{\"type\":\"contents\",\"content\":\" \\n发现没有报错，访问后台： http://127.0.0.1:81/admin 看到界面可以访问了， 环境搭建完成。\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_2_22_3_31_980_1015.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n注意，这里只是环境搭建完成，并不代表可以运行，比如如何添加用户组和管理员等操作，和在windows中完全一样，可以参考文档 DoraCMS安装教程(windows)\\nlinux我也不是很熟，最近也是在摸索。如果有哪些地方处理有问题或者可以改善，麻烦提出，我们一起完善\"},{\"type\":\"image\",\"content\":\"http://img.baidu.com/hi/bobo/B_0025.gif\"},{\"type\":\"contents\",\"content\":\"\\nDoraCMS源码\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20151230160943.jpg','2015-12-29 06:58:37','2020-08-20 15:44:13'),(355,'css伪类一个简单而又容易忽略的问题','css伪类一个简单而又容易忽略的问题','1','1','','css,伪类','2',NULL,'','css3的伪类大多数初级前端开发者都用的很多了，最常用的形如 :hover,:active等，选择器类型的如 :nth-child(),:first-child,:last-child等。\n最近在改一个样式的时候发现一个问题，dom结构是这样的','1','','','0:01',762,'2','0',NULL,0,'0',223329,'<p>css3的伪类大多数初级前端开发者都用的很多了，最常用的形如 :hover,:active等，选择器类型的如 :nth-child(),:first-child,:last-child等。</p><p>最近在改一个样式的时候发现一个问题，dom结构是这样的：</p><pre class=\"brush:html;toolbar:false\">&lt;div&nbsp;class=&quot;col-md-9&nbsp;left-frame&quot;&gt;\n	&lt;article&nbsp;class=&quot;post&quot;&gt;&lt;/article&gt;\n	&lt;article&nbsp;class=&quot;post&quot;&gt;&lt;/article&gt;\n	&lt;article&nbsp;class=&quot;post&quot;&gt;&lt;/article&gt;\n	&lt;article&nbsp;class=&quot;post&quot;&gt;&lt;/article&gt;\n	&lt;article&nbsp;class=&quot;post&quot;&gt;&lt;/article&gt;\n	&lt;article&nbsp;class=&quot;post&quot;&gt;&lt;/article&gt;\n	&lt;article&nbsp;class=&quot;post&quot;&gt;&lt;/article&gt;\n	&lt;article&nbsp;class=&quot;post&quot;&gt;&lt;/article&gt;\n	&lt;article&nbsp;class=&quot;post&quot;&gt;&lt;/article&gt;\n	&lt;article&nbsp;class=&quot;post&quot;&gt;&lt;/article&gt;\n	&lt;article&nbsp;class=&quot;post&quot;&gt;&lt;/article&gt;\n	&lt;div&nbsp;class=&quot;pagenation&nbsp;text-center&quot;&gt;\n&lt;/div&gt;</pre><p>这个结构很清晰，left-frame中包含了文档的list，最下面是分页（pagenation）,于是有了下面的样式：<br/></p><pre class=\"brush:html;toolbar:false\">.left-frame&nbsp;.post{border-bottom:1px&nbsp;solid&nbsp;#ccc}\n.left-frame&nbsp;.post:last-child{border:none}</pre><p>目的是让每个article底部虚线，最后一条记录下不用虚线。反复刷新页面发现，最后一个article依然存在，难道 :last-child不是通过选择器选择指定的最后一条记录吗？百思不得其解，于是又去w3上查了一遍</p><h2>实例</h2><p>指定属于其父元素的最后一个子元素的 p 元素的背景色：</p><pre>p:last-child{&nbsp;\nbackground:#ff0000;\n}</pre><h2>定义和用法</h2><p>:last-child 选择器匹配属于其父元素的最后一个子元素的每个元素。</p><p class=\"tip\">提示：p:last-child 等同于 p:nth-last-child(1)。</p><p><br/></p><p>写的很简单，但是大概明白问题出在哪里了，:last-child貌似只认识同级的最后一个匹配元素，由于父元素 .left-frame的子元素最后一个元素并不是article，而是 pagenation ,下面的这一样是找不到的</p><pre class=\"brush:html;toolbar:false\">.left-frame&nbsp;.post:last-child{border:none}</pre><p>因此出现了没有任何效果的情况，同样的:first-child也是类似情况。知道了原理，就很好处理了，我把结构改一下：</p><pre class=\"brush:html;toolbar:false\">&lt;div&nbsp;class=&quot;col-md-9&nbsp;left-frame&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;post-list&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	&lt;article&nbsp;class=&quot;post&quot;&gt;&lt;/article&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	&lt;article&nbsp;class=&quot;post&quot;&gt;&lt;/article&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	&lt;article&nbsp;class=&quot;post&quot;&gt;&lt;/article&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	&lt;article&nbsp;class=&quot;post&quot;&gt;&lt;/article&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	&lt;article&nbsp;class=&quot;post&quot;&gt;&lt;/article&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	&lt;article&nbsp;class=&quot;post&quot;&gt;&lt;/article&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	&lt;article&nbsp;class=&quot;post&quot;&gt;&lt;/article&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	&lt;article&nbsp;class=&quot;post&quot;&gt;&lt;/article&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	&lt;article&nbsp;class=&quot;post&quot;&gt;&lt;/article&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	&lt;article&nbsp;class=&quot;post&quot;&gt;&lt;/article&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	&lt;article&nbsp;class=&quot;post&quot;&gt;&lt;/article&gt;\n	&lt;/div&gt;\n	&lt;div&nbsp;class=&quot;pagenation&nbsp;text-center&quot;&gt;\n&lt;/div&gt;</pre><pre class=\"brush:html;toolbar:false\">.post-list&nbsp;.post{border-bottom:1px&nbsp;solid&nbsp;#ccc}\n.post-list&nbsp;.post:last-child{border:none}</pre><p>这样就没问题了，一直以为通过</p><pre class=\"brush:html;toolbar:false\">.left-frame&nbsp;.post:last-child</pre><p>能定位到指定class的最后一条记录，后面要明确下了。</p>','[{\"type\":\"contents\",\"content\":\"css3的伪类大多数初级前端开发者都用的很多了，最常用的形如 :hover,:active等，选择器类型的如 :nth-child(),:first-child,:last-child等。\\n最近在改一个样式的时候发现一个问题，dom结构是这样的：\\n&lt;div class=\\\"col-md-9 left-frame\\\"&gt;\\n\\t&lt;article class=\\\"post\\\"&gt;&lt;/article&gt;\\n\\t&lt;article class=\\\"post\\\"&gt;&lt;/article&gt;\\n\\t&lt;article class=\\\"post\\\"&gt;&lt;/article&gt;\\n\\t&lt;article class=\\\"post\\\"&gt;&lt;/article&gt;\\n\\t&lt;article class=\\\"post\\\"&gt;&lt;/article&gt;\\n\\t&lt;article class=\\\"post\\\"&gt;&lt;/article&gt;\\n\\t&lt;article class=\\\"post\\\"&gt;&lt;/article&gt;\\n\\t&lt;article class=\\\"post\\\"&gt;&lt;/article&gt;\\n\\t&lt;article class=\\\"post\\\"&gt;&lt;/article&gt;\\n\\t&lt;article class=\\\"post\\\"&gt;&lt;/article&gt;\\n\\t&lt;article class=\\\"post\\\"&gt;&lt;/article&gt;\\n\\t&lt;div class=\\\"pagenation text-center\\\"&gt;\\n&lt;/div&gt;\\n这个结构很清晰，left-frame中包含了文档的list，最下面是分页（pagenation）,于是有了下面的样式：\\n.left-frame .post{border-bottom:1px solid #ccc}\\n.left-frame .post:last-child{border:none}\\n目的是让每个article底部虚线，最后一条记录下不用虚线。反复刷新页面发现，最后一个article依然存在，难道 :last-child不是通过选择器选择指定的最后一条记录吗？百思不得其解，于是又去w3上查了一遍\\n实例\\n指定属于其父元素的最后一个子元素的 p 元素的背景色：\\np:last-child{ \\nbackground:#ff0000;\\n}\\n定义和用法\\n:last-child 选择器匹配属于其父元素的最后一个子元素的每个元素。\\n提示：p:last-child 等同于 p:nth-last-child(1)。\\n\\n写的很简单，但是大概明白问题出在哪里了，:last-child貌似只认识同级的最后一个匹配元素，由于父元素 .left-frame的子元素最后一个元素并不是article，而是 pagenation ,下面的这一样是找不到的\\n.left-frame .post:last-child{border:none}\\n因此出现了没有任何效果的情况，同样的:first-child也是类似情况。知道了原理，就很好处理了，我把结构改一下：\\n&lt;div class=\\\"col-md-9 left-frame\\\"&gt;\\n        &lt;div class=\\\"post-list\\\"&gt;\\n        \\t&lt;article class=\\\"post\\\"&gt;&lt;/article&gt;\\n        \\t&lt;article class=\\\"post\\\"&gt;&lt;/article&gt;\\n        \\t&lt;article class=\\\"post\\\"&gt;&lt;/article&gt;\\n        \\t&lt;article class=\\\"post\\\"&gt;&lt;/article&gt;\\n        \\t&lt;article class=\\\"post\\\"&gt;&lt;/article&gt;\\n        \\t&lt;article class=\\\"post\\\"&gt;&lt;/article&gt;\\n        \\t&lt;article class=\\\"post\\\"&gt;&lt;/article&gt;\\n        \\t&lt;article class=\\\"post\\\"&gt;&lt;/article&gt;\\n        \\t&lt;article class=\\\"post\\\"&gt;&lt;/article&gt;\\n        \\t&lt;article class=\\\"post\\\"&gt;&lt;/article&gt;\\n        \\t&lt;article class=\\\"post\\\"&gt;&lt;/article&gt;\\n\\t&lt;/div&gt;\\n\\t&lt;div class=\\\"pagenation text-center\\\"&gt;\\n&lt;/div&gt;\\n.post-list .post{border-bottom:1px solid #ccc}\\n.post-list .post:last-child{border:none}\\n这样就没问题了，一直以为通过\\n.left-frame .post:last-child\\n能定位到指定class的最后一条记录，后面要明确下了。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1447737622000.jpg','2015-11-17 05:36:04','2020-08-20 15:44:14'),(356,'nodeJs基础教程系列(2)——版本管理工具','nodeJs基础教程系列(2)','1','1','','nodejs','2',NULL,'','版本工具在linux和mac下采用nvm工具，而windows下采用nvmw工具，使用方法基本一样。\n在安装nvm之前，介绍一下git命令，因为马上就会用到，因为需要通过git命令安装nvm和nvmw工具。','1','','','0:01',762,'2','0',NULL,0,'0',223462,'<h3 style=\"text-align: left;\"><span style=\"font-size: 16px;\">版本管理工具</span></h3><p style=\"text-align: left;\"><span style=\"font-size: 16px;\">版本工具在linux和mac下采用nvm工具，而windows下采用nvmw工具，使用方法基本一样。</span></p><p style=\"text-align: left;\"><span style=\"font-size: 16px;\">在安装nvm之前，介绍一下git命令，因为马上就会用到，因为需要通过git命令安装nvm和nvmw工具。</span></p><h4 id=\"git-\" style=\"text-align: left;\"><span style=\"font-size: 16px;\">git命令</span></h4><p style=\"text-align: left;\"><span style=\"font-size: 16px;\">Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。</span></p><ul class=\" list-paddingleft-2\"><li><p style=\"text-align: left;\"><span style=\"font-size: 16px;\">MAC用户可以下载</span><a href=\"http://code.google.com/p/git-osx-installer/downloads/list?can=3\" style=\"font-size: 16px; text-decoration: underline;\"><span style=\"font-size: 16px;\">这里</span></a></p></li><li><p style=\"text-align: left;\"><span style=\"font-size: 16px;\">Window用户可以下载</span><a href=\"https://github.com/msysgit/msysgit/releases/download/Git-1.9.4-preview20140815/Git-1.9.4-preview20140815.exe\" style=\"font-size: 16px; text-decoration: underline;\"><span style=\"font-size: 16px;\">这里</span></a></p></li><ul class=\" list-paddingleft-2\" style=\"list-style-type: square;\"><li><p style=\"text-align: left;\"><span style=\"font-size: 16px;\">windows系统中把</span><code><span style=\"font-size: 16px;\">C:\\Program Files\\Git\\bin</span></code><span style=\"font-size: 16px;\"> git的命令路径加入环境变量，这样就能在终端调用</span><code><span style=\"font-size: 16px;\">ssh-keygen</span></code><span style=\"font-size: 16px;\">命令了，在下一节会用到这个命令。</span></p></li></ul><li><p style=\"text-align: left;\"><span style=\"font-size: 16px;\">Linux用户可以下载</span><a href=\"http://book.git-scm.com/2_installing_git.html\" style=\"font-size: 16px; text-decoration: underline;\"><span style=\"font-size: 16px;\">这里</span></a></p></li></ul><p style=\"text-align: left;\"><span style=\"font-size: 16px;\">下载后安装即可，如果是ubuntu用户，可以通过 sudo apt-get install git 命令安装即可。</span></p><p style=\"text-align: left;\"><span style=\"font-size: 16px;\">下面我们会用到 git clone 命令，这个命令的作用就是把远程库的代码包拷贝到本地，暂时知道这些就足够，以后随着项目的深入会详细介绍其他使用方法。</span></p><h4 id=\"nvm-\" style=\"text-align: left;\"><span style=\"font-size: 16px;\">NVM的安装和使用</span></h4><p style=\"text-align: left;\"><span style=\"font-size: 16px;\">要知道 nvm 不支持windows，所以下面说的是针对非windows用户。\n可使用</span></p><pre style=\"text-align: left;\"><span style=\"font-size: 16px;\">curl https://raw.github.com/creationix/nvm/master/install.sh | sh<br/></span></pre><p style=\"text-align: left;\"><span style=\"font-size: 16px;\">look或以下命令进行安装this</span></p><pre style=\"text-align: left;\"><span style=\"font-size: 16px;\">wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh<br/></span></pre><p style=\"text-align: left;\"><span style=\"font-size: 16px;\">this 也可以使用GIT命令进行安装</span></p><pre style=\"text-align: left;\"><span style=\"font-size: 16px;\">git clone git://github.com/creationix/nvm.git ~/.nvm<br/>source ~/.nvm/nvm.sh<br/></span></pre><p style=\"text-align: left;\"><span style=\"font-size: 16px;\">以下视频演示了NVM的使用方法。</span></p><p style=\"text-align: left;\"><embed align=\"middle\" width=\"480\" height=\"400\" type=\"application/x-shockwave-flash\" quality=\"high\" allowfullscreen=\"true\" src=\"http://static.video.qq.com/TPout.swf?vid=j0115pex2mg\"/></p><h4 id=\"nvmw-\" style=\"text-align: left;\"><span style=\"font-size: 16px;\">NVMW安装</span></h4><p style=\"text-align: left;\"><span style=\"font-size: 16px;\">通过以下命令下载NVMW</span></p><pre style=\"text-align: left;\"><span style=\"font-size: 16px;\">git clone git://github.com/hakobera/nvmw.git<br/></span></pre><p style=\"text-align: left;\"><span style=\"font-size: 16px;\">然后设置windows环境变量指向nvmw文件夹即可。\nNVMW使用方法和NVM基本一致，不过使用的命令名是nvmw。</span></p><p style=\"text-align: left;\"><span style=\"font-size: 16px;\">恩，你已学会了node.js的版本管理，这对于调试不同node.js版本来说至关重要。</span></p><blockquote><p style=\"text-align: left;\"><span style=\"font-size: 16px;\">你实际动手去做了吗？没有做？马上去做！</span></p></blockquote><p style=\"text-align: left;\"><span style=\"font-size: 16px;\">非常好！下一节我们将在githubs上建立一个空的项目，这对于项目版本管理至关重要。</span></p>','[{\"type\":\"contents\",\"content\":\"版本管理工具\\n版本工具在linux和mac下采用nvm工具，而windows下采用nvmw工具，使用方法基本一样。\\n在安装nvm之前，介绍一下git命令，因为马上就会用到，因为需要通过git命令安装nvm和nvmw工具。\\ngit命令\\nGit是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。\\nMAC用户可以下载这里\\nWindow用户可以下载这里\\nwindows系统中把C:\\\\Program Files\\\\Git\\\\bin git的命令路径加入环境变量，这样就能在终端调用ssh-keygen命令了，在下一节会用到这个命令。\\n\\nLinux用户可以下载这里\\n\\n下载后安装即可，如果是ubuntu用户，可以通过 sudo apt-get install git 命令安装即可。\\n下面我们会用到 git clone 命令，这个命令的作用就是把远程库的代码包拷贝到本地，暂时知道这些就足够，以后随着项目的深入会详细介绍其他使用方法。\\nNVM的安装和使用\\n要知道 nvm 不支持windows，所以下面说的是针对非windows用户。可使用\\ncurl https://raw.github.com/creationix/nvm/master/install.sh | sh\\n\\nlook或以下命令进行安装this\\nwget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\\n\\nthis 也可以使用GIT命令进行安装\\ngit clone git://github.com/creationix/nvm.git ~/.nvm\\nsource ~/.nvm/nvm.sh\\n\\n以下视频演示了NVM的使用方法。\\n&lt;embed align=\\\"middle\\\" width=\\\"480\\\" height=\\\"400\\\" type=\\\"application/x-shockwave-flash\\\" quality=\\\"high\\\" allowfullscreen=\\\"true\\\" src=\\\"http://static.video.qq.com/TPout.swf?vid=j0115pex2mg\\\"&gt;\\nNVMW安装\\n通过以下命令下载NVMW\\ngit clone git://github.com/hakobera/nvmw.git\\n\\n然后设置windows环境变量指向nvmw文件夹即可。NVMW使用方法和NVM基本一致，不过使用的命令名是nvmw。\\n恩，你已学会了node.js的版本管理，这对于调试不同node.js版本来说至关重要。\\n你实际动手去做了吗？没有做？马上去做！\\n\\n非常好！下一节我们将在githubs上建立一个空的项目，这对于项目版本管理至关重要。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1436164305000.jpg','2015-07-06 06:31:59','2020-08-20 15:44:27'),(357,'Node.js API实例讲解——二进制类型转换','二进制类型转换','2','1','','前端开发,nodejs教程','2',NULL,'','二进制类型转换，buffer转json，通过buf.toJSON方法可将Buffer对象转换为JSON对象。','1','','','0:01',762,'2','0',NULL,0,'0',226932,'<h3>二进制类型转换</h3><h3 id=\"buffer-json\">buffer转json</h3><p>通过buf.toJSON方法可将Buffer对象转换为JSON对象。</p><p>例1</p><pre class=\"code\">&nbsp;var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer(&quot;你好&quot;);\n&nbsp;console.log(buf.toJSON())&nbsp;//&nbsp;打印&nbsp;[&nbsp;228,&nbsp;189,&nbsp;160,&nbsp;229,&nbsp;165,&nbsp;189&nbsp;]</pre><h3 id=\"json-buffer\">json转buffer</h3><p>通过new Buffer([byte数组])的方式可把JSON“转换”为Buffer对象。</p><p>例1</p><pre class=\"code\">var&nbsp;jsonObj&nbsp;=&nbsp;[&nbsp;228,&nbsp;189,&nbsp;160,&nbsp;229,&nbsp;165,&nbsp;189&nbsp;];\nvar&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer(jsonObj);&nbsp;//&nbsp;转换为Buffer对象\nconsole.log(buf.toString());&nbsp;&nbsp;&nbsp;//&nbsp;打印你好</pre><h3 id=\"buffer-string\">buffer转string</h3><p>通过buf.toString()方法可将buffer转换为字符串形式。<buf class=\"toString\" end=\"\" start=\"\" encoding=\"\"></buf><encoding>[可选]参数，表示转换时采用的编码方式，默认utf8。</encoding><start>[可选]参数，表示buf的起始位置，默认0。</start><end>[可选]参数，表示buf的结束位置，默认 buf.length 。</end></p><p>例1</p><pre class=\"code\">&nbsp;var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer([&nbsp;228,&nbsp;189,&nbsp;160,&nbsp;229,&nbsp;165,&nbsp;189&nbsp;]);&nbsp;//&nbsp;转换为Buffer对象\n&nbsp;console.log(buf.toString());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;你好\n&nbsp;console.log(buf.toString(&quot;base64&quot;));&nbsp;&nbsp;//&nbsp;5L2g5aW9\n&nbsp;console.log(buf.toString(&quot;hex&quot;));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;e4bda0e5a5bd\n&nbsp;console.log(buf.toString(&quot;utf8&quot;,0,3))&nbsp;//&nbsp;你</pre><h3 id=\"string-buffer\">string转buffer</h3><p>参看本章的‘创建Buffer实例’一节。</p><h3 id=\"buffer-arraybuffer\">Buffer转类型化数组ArrayBuffer</h3><p>前面我们知道node.js，具有的Buffer类型有强大的功能，同时标准化的类型化数组是标准，他们相互转换也是很必要的。</p><p>Buffer类型与ArrayBuffer之间的转换，可通过Uint8Array八位无符号整数对象来进行转换，原因是Uint8Array以byte(8bit)为单元的数据数组，而Buffer也是，所以可以利用这一点轻松转换。</p><p>首先我们开发一个方法，用来进行这个转换功能。</p><pre class=\"code\">&nbsp;function&nbsp;toArrayBuffer(buffer)&nbsp;{\n\n&nbsp;&nbsp;//&nbsp;创建一个缓存对象，长度等于buffer.length\n&nbsp;&nbsp;var&nbsp;ab&nbsp;=&nbsp;new&nbsp;ArrayBuffer(buffer.length);&nbsp;\n|\n&nbsp;&nbsp;//&nbsp;创建一个Uint8类型的数组对象。\n&nbsp;&nbsp;var&nbsp;view&nbsp;=&nbsp;new&nbsp;Uint8Array(ab);\n\n&nbsp;&nbsp;for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;buffer.length;&nbsp;++i)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view[i]&nbsp;=&nbsp;buffer[i];&nbsp;&nbsp;//&nbsp;把buffer的数据拷贝到ab缓存内。\n&nbsp;&nbsp;}\n&nbsp;&nbsp;return&nbsp;ab;&nbsp;&nbsp;//&nbsp;返回新的&nbsp;ArrayBuffer对象。\n&nbsp;}</pre><p>测试一下：</p><pre class=\"code\">&nbsp;var&nbsp;buf&nbsp;=&nbsp;new&nbsp;Buffer(&quot;你好&quot;);\n&nbsp;var&nbsp;ab&nbsp;=&nbsp;toArrayBuffer(buf);\n&nbsp;console.log(ab&nbsp;instanceof&nbsp;ArrayBuffer);&nbsp;//&nbsp;true&nbsp;&nbsp;表示Buffer对象已转为ArrayBuffer</pre><h3 id=\"-arraybuffer-buffer\">类型化数组ArrayBuffer转Buffer</h3><p>原理一样</p><pre class=\"code\">&nbsp;function&nbsp;toBuffer(ab)&nbsp;{\n&nbsp;&nbsp;var&nbsp;buffer&nbsp;=&nbsp;new&nbsp;Buffer(ab.byteLength);\n&nbsp;&nbsp;var&nbsp;view&nbsp;=&nbsp;new&nbsp;Uint8Array(ab);\n&nbsp;&nbsp;for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;buffer.length;&nbsp;++i)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffer[i]&nbsp;=&nbsp;view[i];\n&nbsp;&nbsp;}\n&nbsp;&nbsp;return&nbsp;buffer;\n&nbsp;}</pre><p>测试一下：</p><pre class=\"code\">&nbsp;var&nbsp;arb&nbsp;=&nbsp;new&nbsp;ArrayBuffer(10);\n&nbsp;var&nbsp;bf&nbsp;=&nbsp;toBuffer(arb);\n&nbsp;console.log(bf&nbsp;instanceof&nbsp;Buffer)&nbsp;&nbsp;//&nbsp;true&nbsp;，表示ArrayBuffer对象已转为Buffer</pre>','[{\"type\":\"contents\",\"content\":\"二进制类型转换\\nbuffer转json\\n通过buf.toJSON方法可将Buffer对象转换为JSON对象。\\n例1\\n var buf = new Buffer(\\\"你好\\\");\\n console.log(buf.toJSON()) // 打印 [ 228, 189, 160, 229, 165, 189 ]\\njson转buffer\\n通过new Buffer([byte数组])的方式可把JSON“转换”为Buffer对象。\\n例1\\nvar jsonObj = [ 228, 189, 160, 229, 165, 189 ];\\nvar buf = new Buffer(jsonObj); // 转换为Buffer对象\\nconsole.log(buf.toString());   // 打印你好\\nbuffer转string\\n通过buf.toString()方法可将buffer转换为字符串形式。[可选]参数，表示转换时采用的编码方式，默认utf8。[可选]参数，表示buf的起始位置，默认0。[可选]参数，表示buf的结束位置，默认 buf.length 。\\n例1\\n var buf = new Buffer([ 228, 189, 160, 229, 165, 189 ]); // 转换为Buffer对象\\n console.log(buf.toString());          // 你好\\n console.log(buf.toString(\\\"base64\\\"));  // 5L2g5aW9\\n console.log(buf.toString(\\\"hex\\\"));     // e4bda0e5a5bd\\n console.log(buf.toString(\\\"utf8\\\",0,3)) // 你\\nstring转buffer\\n参看本章的‘创建Buffer实例’一节。\\nBuffer转类型化数组ArrayBuffer\\n前面我们知道node.js，具有的Buffer类型有强大的功能，同时标准化的类型化数组是标准，他们相互转换也是很必要的。\\nBuffer类型与ArrayBuffer之间的转换，可通过Uint8Array八位无符号整数对象来进行转换，原因是Uint8Array以byte(8bit)为单元的数据数组，而Buffer也是，所以可以利用这一点轻松转换。\\n首先我们开发一个方法，用来进行这个转换功能。\\n function toArrayBuffer(buffer) {\\n\\n  // 创建一个缓存对象，长度等于buffer.length\\n  var ab = new ArrayBuffer(buffer.length); \\n|\\n  // 创建一个Uint8类型的数组对象。\\n  var view = new Uint8Array(ab);\\n\\n  for (var i = 0; i &lt; buffer.length; ++i) {\\n      view[i] = buffer[i];  // 把buffer的数据拷贝到ab缓存内。\\n  }\\n  return ab;  // 返回新的 ArrayBuffer对象。\\n }\\n测试一下：\\n var buf = new Buffer(\\\"你好\\\");\\n var ab = toArrayBuffer(buf);\\n console.log(ab instanceof ArrayBuffer); // true  表示Buffer对象已转为ArrayBuffer\\n类型化数组ArrayBuffer转Buffer\\n原理一样\\n function toBuffer(ab) {\\n  var buffer = new Buffer(ab.byteLength);\\n  var view = new Uint8Array(ab);\\n  for (var i = 0; i &lt; buffer.length; ++i) {\\n      buffer[i] = view[i];\\n  }\\n  return buffer;\\n }\\n测试一下：\\n var arb = new ArrayBuffer(10);\\n var bf = toBuffer(arb);\\n console.log(bf instanceof Buffer)  // true ，表示ArrayBuffer对象已转为Buffer\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444890269000.jpg','2015-08-01 13:13:51','2020-08-20 15:44:26'),(358,'DoraCMS之权限模块','DoraCMS之权限模块','1','1','','权限管理','2',NULL,'','最初的权限管理比较单一，定义了每个大的模块所管辖的范围，只要指定了单个模块，那么该模块下的所有操作都是有权限的，当初是这样设计的，但是最近对代码进行重构中发现了一些严重的漏洞','1','','','0:01',762,'2','0',NULL,0,'0',223482,'<p>最近对DoraCMS的权限模块进行了整理，之前的权限模块是这样的：<br/></p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_24_3_574_1018.jpg\" title=\"\" alt=\"DoraCMS权限模块.jpg\"/></p><p><br/></p><p>最初的权限管理比较单一，定义了每个大的模块所管辖的范围，只要指定了单个模块，那么该模块下的所有操作都是有权限的，当初是这样设计的，但是最近对代码进行重构中发现了一些严重的漏洞，因为之前思考不全，会出现这样的情况，例如管理员A没有权限访问<strong>文档管理模块</strong>，但是依然可以通过指定的接口获得该模块的所有数据，单条数据等，原因是之前只对单一路径进行了权限校验，之前的权限校验的代码是这样的：</p><pre class=\"brush:js;toolbar:false\">//权限校验回调函数\nfunction&nbsp;checkAdminPower(req,key,callBack)&nbsp;{\n\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;uGroupId&nbsp;=&nbsp;req.session.adminUserInfo.group;\n&nbsp;&nbsp;&nbsp;&nbsp;AdminGroup.findOne({_id&nbsp;:&nbsp;uGroupId},function(err,result){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(err){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(err)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;power&nbsp;=&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(result){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;uPower&nbsp;=&nbsp;result.power;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;newPowers&nbsp;=&nbsp;JSON.parse(uPower);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var&nbsp;cateName&nbsp;in&nbsp;newPowers){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(cateName&nbsp;===&nbsp;key&nbsp;&amp;&amp;&nbsp;newPowers[cateName]){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;power&nbsp;=&nbsp;true;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callBack(power);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;})\n}</pre><p>看过代码的几个兄弟也提到了，这种不断嵌套可读性比较差，也影响性能，于是都在这次权限改造中一并处理了。<br/></p><p>改造后的权限模块是这样的：</p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_24_8_886_1019.jpg\" title=\"\" alt=\"DoraCMS权限模块1.jpg\"/></p><p>这里对所有模块进行了细分，可以对不同角色管理员给定指定区域内的权限，也就不用再纠结给定一个模块，都可以访问的问题。这里借助了jquery 的 ztree 插件，这个插件比较强大，而且我一直在用，api非常丰富，可以满足大多数针对树的需求了，具体可以看官网 ：<a href=\"http://www.ztree.me/v3/main.php\" _src=\"http://www.ztree.me/v3/main.php\">http://www.ztree.me/v3/main.php</a></p><p>这里的权限模块主要用到了这个：<a href=\"http://www.ztree.me/v3/demo.php#_203\" target=\"_blank\" title=\"ztree\">用 ztree 方法勾选 checkBox</a></p><p><br/></p><p>和之前有些变动的是不再每次都查询用户权限数据，而在用户登录后，或者用户权限改变后缓存权限数据（用户登出必须清除），这样每次做权限校验的时候就快很多了，也不存在多层嵌套的问题：</p><pre class=\"brush:js;toolbar:false\">checkAdminPower&nbsp;:&nbsp;function(req,key){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;power&nbsp;=&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;uPower&nbsp;=&nbsp;req.session.adminPower;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(uPower){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;newPowers&nbsp;=&nbsp;eval(uPower);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var&nbsp;i=0;i&lt;newPowers.length;i++)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;checkedId&nbsp;=&nbsp;newPowers[i].split(&#39;:&#39;)[0];\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(checkedId&nbsp;==&nbsp;key&nbsp;&amp;&amp;&nbsp;newPowers[i].split(&#39;:&#39;)[1]){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;power&nbsp;=&nbsp;true;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;power;\n&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p><br/></p><p>设置权限后执行数据删除的效果：</p><p><br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_24_13_943_1020.jpg\" title=\"\" alt=\"DoraCMS权限模块2.jpg\"/></p><p>说白了，不想让你看见的，你是无论如何也看不见滴<img src=\"http://img.baidu.com/hi/jx2/j_0018.gif\"/>，权限模块已经上线，等测试几天看下是否有漏洞，后面计划把后台放开给大家体验一下，敬请期待：&nbsp;<br/></p>','[{\"type\":\"contents\",\"content\":\"最近对DoraCMS的权限模块进行了整理，之前的权限模块是这样的：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_24_3_574_1018.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n最初的权限管理比较单一，定义了每个大的模块所管辖的范围，只要指定了单个模块，那么该模块下的所有操作都是有权限的，当初是这样设计的，但是最近对代码进行重构中发现了一些严重的漏洞，因为之前思考不全，会出现这样的情况，例如管理员A没有权限访问文档管理模块，但是依然可以通过指定的接口获得该模块的所有数据，单条数据等，原因是之前只对单一路径进行了权限校验，之前的权限校验的代码是这样的：\\n//权限校验回调函数\\nfunction checkAdminPower(req,key,callBack) {\\n\\n    var uGroupId = req.session.adminUserInfo.group;\\n    AdminGroup.findOne({_id : uGroupId},function(err,result){\\n        if(err){\\n            console.log(err)\\n        }else{\\n            var power = false;\\n            if(result){\\n                var uPower = result.power;\\n                var newPowers = JSON.parse(uPower);\\n\\n                for(var cateName in newPowers){\\n                    if(cateName === key &amp;&amp; newPowers[cateName]){\\n                        power = true;\\n                        break;\\n                    }\\n                }\\n            }\\n            callBack(power);\\n        }\\n    })\\n}\\n看过代码的几个兄弟也提到了，这种不断嵌套可读性比较差，也影响性能，于是都在这次权限改造中一并处理了。\\n改造后的权限模块是这样的：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_24_8_886_1019.jpg\"},{\"type\":\"contents\",\"content\":\"\\n这里对所有模块进行了细分，可以对不同角色管理员给定指定区域内的权限，也就不用再纠结给定一个模块，都可以访问的问题。这里借助了jquery 的 ztree 插件，这个插件比较强大，而且我一直在用，api非常丰富，可以满足大多数针对树的需求了，具体可以看官网 ：http://www.ztree.me/v3/main.php\\n这里的权限模块主要用到了这个：用 ztree 方法勾选 checkBox\\n\\n和之前有些变动的是不再每次都查询用户权限数据，而在用户登录后，或者用户权限改变后缓存权限数据（用户登出必须清除），这样每次做权限校验的时候就快很多了，也不存在多层嵌套的问题：\\ncheckAdminPower : function(req,key){\\n        var power = false;\\n        var uPower = req.session.adminPower;\\n        if(uPower){\\n            var newPowers = eval(uPower);\\n            for(var i=0;i&lt;newPowers.length;i++) {\\n                var checkedId = newPowers[i].split(\':\')[0];\\n\\n                if(checkedId == key &amp;&amp; newPowers[i].split(\':\')[1]){\\n                    power = true;\\n                    break;\\n                }\\n            }\\n        }\\n        return power;\\n    }\\n\\n设置权限后执行数据删除的效果：\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/uploadhttps://cdn.html-js.cn/cms/upload/blogpicture/2016_1_4_9_24_13_943_1020.jpg\"},{\"type\":\"contents\",\"content\":\"\\n说白了，不想让你看见的，你是无论如何也看不见滴\"},{\"type\":\"image\",\"content\":\"http://img.baidu.com/hi/jx2/j_0018.gif\"},{\"type\":\"contents\",\"content\":\"，权限模块已经上线，等测试几天看下是否有漏洞，后面计划把后台放开给大家体验一下，敬请期待： \\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444895340000.jpg','2015-09-22 14:03:11','2020-08-20 15:44:24'),(359,'Get与Post方法请求——让app具有get/post方法','让app具有get/post方法','2','1','','get,post','2',NULL,'','我们知道http请求方法有GET和POST方法，而在stuwebfk框架中并没有体现出来。今天首先要做的工作，就是把这个特性加入到框架中去。','1','','','0:01',762,'2','0',NULL,0,'0',223170,'<h3>让app具有get/post方法&nbsp;</h3><p>我们知道http请求方法有GET和POST方法，而在stuwebfk框架中并没有体现出来。今天首先要做的工作，就是把这个特性加入到框架中去。</p><p>在<code>App.js</code>中，先要为App.prototype加入get和post方法。</p><pre>......\n\nApp.prototype.get&nbsp;=&nbsp;function(handle1){\n&nbsp;&nbsp;&nbsp;......\n}\n\nApp.prototype.post&nbsp;=&nbsp;function(handle2){\n&nbsp;&nbsp;&nbsp;......\n}</pre><p>handle1/handle2是请求处理函数。我们要的效果是，当有get方法请求时，会由handle1函数处理，当有post方法请求时，会由handle2处理。</p><p>加入框架已经集成这个特性了，下面的代码是使用例子：</p><pre>var&nbsp;app&nbsp;=&nbsp;...\napp.get(function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;get&nbsp;method&nbsp;request&#39;);\n})\napp.post(function(req,res,next){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;post&nbsp;method&nbsp;request&#39;);\n})</pre><p>启动这个程序后，get请求和post请求会进入不同的处理函数内进行处理。</p><p>（小胖问道：我们怎么知道客户端请求的方法是什么呢？）</p><p>这个问题问到关键了， 通过request.method这个属性就可以确定是什么方法。这个属性值是个大写的字符串&quot;GET&quot;或“POST”。经过以上的分析，我们有了解决问题的切入点。</p><p>下一节，就着手修改App.js这个文件，使之具有这个特性。</p>','[{\"type\":\"contents\",\"content\":\"让app具有get/post方法 \\n我们知道http请求方法有GET和POST方法，而在stuwebfk框架中并没有体现出来。今天首先要做的工作，就是把这个特性加入到框架中去。\\n在App.js中，先要为App.prototype加入get和post方法。\\n......\\n\\nApp.prototype.get = function(handle1){\\n   ......\\n}\\n\\nApp.prototype.post = function(handle2){\\n   ......\\n}\\nhandle1/handle2是请求处理函数。我们要的效果是，当有get方法请求时，会由handle1函数处理，当有post方法请求时，会由handle2处理。\\n加入框架已经集成这个特性了，下面的代码是使用例子：\\nvar app = ...\\napp.get(function(req,res,next){\\n     console.log(\\\"get method request\');\\n})\\napp.post(function(req,res,next){\\n     console.log(\\\"post method request\');\\n})\\n启动这个程序后，get请求和post请求会进入不同的处理函数内进行处理。\\n（小胖问道：我们怎么知道客户端请求的方法是什么呢？）\\n这个问题问到关键了， 通过request.method这个属性就可以确定是什么方法。这个属性值是个大写的字符串\\\"GET\\\"或“POST”。经过以上的分析，我们有了解决问题的切入点。\\n下一节，就着手修改App.js这个文件，使之具有这个特性。\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444892288000.jpg','2015-09-12 14:17:56','2020-08-20 15:44:24'),(360,'JS小技巧集锦（不断更新...）','JS小技巧集锦','1','1','','jquery,js,前端开发','2',NULL,'','前端开发过程中积累的一些js小技巧，平时并不很注意，但是开发的时候要找半天，特别开个文档做下收录','1','','','0:01',762,'2','0',NULL,0,'0',223444,'<p><span style=\"font-size: 16px; font-family: 微软雅黑, &#39;Microsoft YaHei&#39;;\">1、判断浏览器中滚动条是否下拉到最低端：</span></p><pre class=\"brush:js;toolbar:false\">$(window).scroll(function(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($(window).scrollTop()&nbsp;==&nbsp;$(document).height()&nbsp;-&nbsp;$(window).height()){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(&quot;滚动到底部啦！&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;});</pre><p><span style=\"font-size: 16px;\">2、 i++ 和 ++i 的区别</span></p><p><br/></p><p><span style=\"font-size: 16px;\">简单的来说，++i 和 i++,在单独使用时，就是 i=i+1。 <br/>而 a = ++i，相当于 i=i+1; a = i; <br/>而 a = i++，相当于 a = i; i=i+1;&nbsp;</span></p><p><span style=\"font-size: 16px;\"><br/></span></p><p><span style=\"font-size: 16px;\">3、 对n个对象（例如100个a标签）添加事件，如果用click事件：</span></p><pre class=\"brush:js;toolbar:false\">$(&#39;a&#39;).click(function(){\n&nbsp;&nbsp;&nbsp;&nbsp;alert($(this).text())\n})</pre><p>效率相对比较低，它的原理是做了循环然后绑定事件，测试用on更好：<br/></p><pre class=\"brush:js;toolbar:false\">$(&#39;a&#39;).on(&#39;click&#39;,function(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert($(this).text())\n&nbsp;&nbsp;&nbsp;&nbsp;})</pre><p>4、Nodejs 中让非www开始的域名(a.com),跳转到www开始的域名(<a href=\"http://www.a.com),目的是集中流量\" _src=\"http://www.a.com),目的是集中流量\">www.a.com),目的是集中流量</a> </p><pre class=\"brush:js;toolbar:false\">app.get(&#39;/*&#39;,&nbsp;function&nbsp;(req,&nbsp;res,&nbsp;next)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;haswww&nbsp;=&nbsp;req.headers.host.match(/^www\\./)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;url&nbsp;=&nbsp;[&#39;http://www.&#39;,&nbsp;req.headers.host,&nbsp;req.url].join(&#39;&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;haswww&nbsp;?&nbsp;next()&nbsp;:&nbsp;res.redirect(301,&nbsp;url);\n});</pre><p>5、关闭弹出窗口并刷新父窗口脚本</p><pre class=\"brush:js;toolbar:false\">window.opener&nbsp;&amp;&amp;&nbsp;window.opener.location.reload();</pre><p><br/></p><p>6、兼容方式获取scrolltop</p><pre class=\"brush:js;toolbar:false\">function&nbsp;getScrollTop()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;scrollTop&nbsp;=&nbsp;document.documentElement.scrollTop&nbsp;||&nbsp;window.pageYOffset&nbsp;||&nbsp;document.body.scrollTop;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;scrollTop;\n&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p><br/></p><p>7、兼容方式设置滚动条位置：</p><pre class=\"brush:js;toolbar:false\">function&nbsp;setScrollTop(scroll_top)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.documentElement.scrollTop&nbsp;=&nbsp;scroll_top;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.pageYOffset&nbsp;=&nbsp;scroll_top;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.body.scrollTop&nbsp;=&nbsp;scroll_top;\n&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p>8、 点击按钮返回到页面顶部</p><pre class=\"brush:js;toolbar:false\">//&nbsp;&nbsp;&nbsp;&nbsp;返回顶部\n&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;#gotop&#39;).click(function(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;body,html&#39;).animate({scrollTop:0},800);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;});\n\n//&nbsp;&nbsp;&nbsp;&nbsp;监听滚动条位置\n&nbsp;&nbsp;&nbsp;&nbsp;$(window).scroll(function(event)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(getScrollTop()&nbsp;&gt;&nbsp;60){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;#cbbfixed&#39;).css(&#39;bottom&#39;&nbsp;,&nbsp;&#39;10px&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;#cbbfixed&#39;).css(&#39;bottom&#39;&nbsp;,&nbsp;&#39;-85px&#39;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;});\n\n});</pre><p>9、执行String类型的方法名（funName为方法名）</p><pre class=\"brush:js;toolbar:false\">var&nbsp;ex&nbsp;=&nbsp;{callBack:eval(&quot;(&quot;+funName+&quot;)&quot;)};\nex.callBack(lilist.index(this));</pre><p><br/></p><p>10、判断浏览器是否支持svg</p><pre class=\"brush:js;toolbar:false\">function&nbsp;hasSVG(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;SVG_NS&nbsp;=&nbsp;&#39;http://www.w3.org/2000/svg&#39;;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;!!document.createElementNS&nbsp;&amp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!!document.createElementNS(SVG_NS,&nbsp;&#39;svg&#39;).createSVGRect;\n\n&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p><br/></p><p>11、关于 addEventListener</p><pre class=\"brush:js;toolbar:false\">var&nbsp;btn&nbsp;=&nbsp;document.getElementById(&quot;myBtn&quot;);\nbtn.addEventListener(&quot;click&quot;,&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;alert(this.id);\n},&nbsp;false);\nbtn.addEventListener(&quot;click&quot;,&nbsp;function&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;alert(&quot;Hello&nbsp;World&quot;);\n},&nbsp;false);</pre><p><br/></p>','[{\"type\":\"contents\",\"content\":\"1、判断浏览器中滚动条是否下拉到最低端：\\n$(window).scroll(function(){\\n        if($(window).scrollTop() == $(document).height() - $(window).height()){\\n            alert(\\\"滚动到底部啦！\\\");\\n        }\\n    });\\n2、 i++ 和 ++i 的区别\\n\\n简单的来说，++i 和 i++,在单独使用时，就是 i=i+1。 \\n而 a = ++i，相当于 i=i+1; a = i; \\n而 a = i++，相当于 a = i; i=i+1; \\n\\n\\n3、 对n个对象（例如100个a标签）添加事件，如果用click事件：\\n$(\'a\').click(function(){\\n    alert($(this).text())\\n})\\n效率相对比较低，它的原理是做了循环然后绑定事件，测试用on更好：\\n$(\'a\').on(\'click\',function(){\\n        alert($(this).text())\\n    })\\n4、Nodejs 中让非www开始的域名(a.com),跳转到www开始的域名(www.a.com),目的是集中流量 \\napp.get(\'/*\', function (req, res, next) {\\n    var haswww = req.headers.host.match(/^www\\\\./)\\n        , url = [\'http://www.\', req.headers.host, req.url].join(\'\');\\n    haswww ? next() : res.redirect(301, url);\\n});\\n5、关闭弹出窗口并刷新父窗口脚本\\nwindow.opener &amp;&amp; window.opener.location.reload();\\n\\n6、兼容方式获取scrolltop\\nfunction getScrollTop() {\\n        var scrollTop = document.documentElement.scrollTop || window.pageYOffset || document.body.scrollTop;\\n        return scrollTop;\\n    }\\n\\n7、兼容方式设置滚动条位置：\\nfunction setScrollTop(scroll_top) {\\n        document.documentElement.scrollTop = scroll_top;\\n        window.pageYOffset = scroll_top;\\n        document.body.scrollTop = scroll_top;\\n    }\\n8、 点击按钮返回到页面顶部\\n//    返回顶部\\n    $(\'#gotop\').click(function(){\\n        $(\'body,html\').animate({scrollTop:0},800);\\n        return false;\\n    });\\n\\n//    监听滚动条位置\\n    $(window).scroll(function(event) {\\n        if(getScrollTop() &gt; 60){\\n            $(\'#cbbfixed\').css(\'bottom\' , \'10px\');\\n        }else{\\n            $(\'#cbbfixed\').css(\'bottom\' , \'-85px\');\\n        }\\n    });\\n\\n});\\n9、执行String类型的方法名（funName为方法名）\\nvar ex = {callBack:eval(\\\"(\\\"+funName+\\\")\\\")};\\nex.callBack(lilist.index(this));\\n\\n10、判断浏览器是否支持svg\\nfunction hasSVG(){\\n        var SVG_NS = \'http://www.w3.org/2000/svg\';\\n\\n        return !!document.createElementNS &amp;&amp;\\n                !!document.createElementNS(SVG_NS, \'svg\').createSVGRect;\\n\\n    }\\n\\n11、关于 addEventListener\\nvar btn = document.getElementById(\\\"myBtn\\\");\\nbtn.addEventListener(\\\"click\\\", function () {\\n    alert(this.id);\\n}, false);\\nbtn.addEventListener(\\\"click\\\", function () {\\n    alert(\\\"Hello World\\\");\\n}, false);\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1435901489000.jpg','2015-07-31 07:28:38','2020-08-20 15:44:26'),(361,'Node.js API实例讲解——NodeJs控制台','NodeJs控制台','2','1','','nodejs,前端开发','2',NULL,'','在过去，一个机构可能只有一台主机，职员使用电传打印机（Teletypewritter 又简称为tty）通过串口连接到主机。后来人们又在电传打印机的基础上进行了改进，程序的输出不再是打印到纸带上而是显示屏上，并且支持彩色显示，这样的设备被称为终端（Terminal）','1','','','0:01',762,'2','0',NULL,0,'0',224210,'<h3>Node.js 控制台</h3><h3 id=\"-\">什么是终端</h3><p>在过去，一个机构可能只有一台主机，职员使用电传打印机（Teletypewritter 又简称为tty）通过串口连接到主机。后来人们又在电传打印机的基础上进行了改进，程序的输出不再是打印到纸带上而是显示屏上，并且支持彩色显示，这样的设备被称为终端（Terminal）。一台主机可以有很多个终端，早期的主机只支持串口线的终端，对应的设备叫做串口终端（Serials Terminal），又发展出了伪终端，以便于支持GUI，后来串口终端渐渐被图形界面的伪终端取代，也就是我们今天所说的终端。</p><p>但是在主机的系统启动完成之前，终端是不能连接到主机上的。为了能记录出主机开机过程的日志，也便于在主机出故障无法启动操作系统时进行检修维护，又多了一个叫做控制台的设备。一台主机有且只能有一个控制台。文件主机的重要日志，比如开机关机的日志和记录，重要应用程序的日志，都会输出到控制台来。&nbsp;</p><p>与Node.js终端相关的模块有STDIO、TTY、REPL。</p><h3 id=\"stdio\">STDIO</h3><p>打印到stdout和stderr。与大多数Web浏览器的控制台对象提供的功能类似，这里将输出发送到stdout或stderr。</p><h3 id=\"tty\">TTY</h3><p>在Linux中，TTY也许是跟终端有关系的最为混乱的术语。TTY是TeleTYpe的一个老缩写。Teletypes，或者teletypewriters，原来指的是电传打字机，是通过串行线用打印机键盘通过阅读和发送信息的设备，和古老的电报机区别并不是很大。之后，当计算机只能以批处理方式运行时（当时穿孔卡片阅读器是唯一一种使程序载入运行的方式），电传打字机成为唯一能够被使用的“实时”输入/输出设备。最终，电传打字机被键盘和显示器终端所取代，但在终端或TTY接插的地方，操作系统仍然需要一个程序来监视串行端口。一个getty“Get TTY”的处理过程是：一个程序监视物理的TTY/终端接口。对一个虚拟网络服务器（VNC）来说，一个伪装的TTY(Pseudo-TTY，即假冒的TTY，也叫做“PTY”）是等价的终端。当你运行一个xterm(终端仿真程序）或GNOME终端程序时，PTY对虚拟的用户或者如xterm一样的伪终端来说，就像是一个TTY在运行。“Pseudo”的意思是“duplicating in a fake way”（用伪造的方法复制），它相比“virtual”或“emulated”更能真实的说明问题。而在现在的计算中，它却处于被放弃的阶段。</p><h3 id=\"repl\">REPL</h3><p>交互式解释器（REPL）既可以作为一个独立的程序运行，也可以很容易地包含在其他程序中作为整体程序的一部分使用。REPL为运行JavaScript脚本与查看运行结果提供了一种交互方式，通常REPL交互方式可以用于调试、测试以及试验某种想法。</p><p>在终端输入 node 命令，会出现个 &gt; 箭头，可以输入javascript代码进行调试。</p><p>例如:</p><pre>console.log(&#39;hello&nbsp;world&#39;);&nbsp;&nbsp;//&nbsp;回车\n打印出&nbsp;hello&nbsp;world</pre><h2 id=\"stdio-console-\">STDIO - 标准输入输出到控制台(console)</h2><h3 id=\"console-log-data-\">console.log([data],[...])</h3><p>换行打印到基本输入。</p><p>第一个参数是一个字符串，其中包含零个或多个占位符。每一个占位符被替换其相应的参数。如果占位符没有相应的参数，将占位符不会被替换，而是直接打印出占位符的字面量。</p><p>支持的占位符：</p><p><span class=\"invade-word\">god</span> &nbsp; ％s - 字符串。<span class=\"invade-word\">good</span></p><p><span class=\"invade-word\">book</span> &nbsp; ％d - 数字（包括整数和浮点数）。<span class=\"invade-word\">this</span></p><p><span class=\"invade-word\">this</span> &nbsp; ％j - JSON。<span class=\"invade-word\">sex</span></p><h5 id=\"-1-\">测试1，只有第一个参数的情况。</h5><pre class=\"code\">&nbsp;console.log(&quot;hello&nbsp;world&quot;);&nbsp;//&nbsp;在终端会打印出&nbsp;hello&nbsp;world</pre><h5 id=\"-2-\">测试2，具有占位符，但后面无对应参数。</h5><pre class=\"code\">&nbsp;console.log(&quot;hello&nbsp;%s&quot;);&nbsp;&nbsp;&nbsp;//&nbsp;打印出&nbsp;hello&nbsp;%s</pre><h5 id=\"-3-\">测试3，具有占位符，后面对应相关参数。</h5><pre class=\"code\">&nbsp;console.log(&quot;hello&nbsp;%s&quot;,&quot;world!!&quot;);&nbsp;//&nbsp;打印出&nbsp;hello&nbsp;world!!\n&nbsp;console.log(&quot;1+1&nbsp;=&nbsp;%d&quot;,2);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;打印出&nbsp;1+1&nbsp;=&nbsp;2\n&nbsp;console.log(&quot;a&nbsp;json&nbsp;object&nbsp;:&nbsp;%j&quot;,{bookAuthor:&quot;brighthas&quot;});&nbsp;//&nbsp;打印出&nbsp;a&nbsp;json&nbsp;object&nbsp;:&nbsp;{&quot;bookAuthor&quot;:&quot;brighthas&quot;}\n\n&nbsp;注意：这里打印的是&nbsp;&quot;bookAuthor&quot;&nbsp;而不是&nbsp;bookAuthor，\n&nbsp;如果直接用&nbsp;console.log({bookAuthor:&quot;brighthas&quot;})打印&nbsp;bookAuthor就不会出现双引号。</pre><h5 id=\"-4-\">测试4，多个参数。</h5><pre class=\"code\">&nbsp;console.log(&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;);&nbsp;&nbsp;&nbsp;//&nbsp;打印出&nbsp;aa&nbsp;bb&nbsp;cc&nbsp;,&nbsp;之间有一个空格。\n&nbsp;console.log(&quot;aa&nbsp;%d%s&quot;,121,&quot;bbb&quot;)&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;打印出&nbsp;aa&nbsp;121bbb&nbsp;\n&nbsp;console.log(&quot;aa&nbsp;%d%s&quot;,&quot;ccc&quot;,&quot;bbb&quot;)&nbsp;&nbsp;//&nbsp;&nbsp;打印出&nbsp;aa&nbsp;NaNbbb&nbsp;&nbsp;我们会看到&nbsp;ccc&nbsp;参数被转换为NaN，\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;说明内部会根据占位符类型转换相应的参数。</pre><h3 id=\"console-info-data-\">console.info([data], [...])</h3><p>与console.log使用方法相同。</p><h3 id=\"console-error-data-\">console.error([data], [...])</h3><p>与console.log使用方法相同，不过，打印到stderr。</p><h3 id=\"console-warn-data-\">console.warn([data], [...])</h3><p>与console.log使用方法相同，不过，打印到stderr。</p><h3 id=\"console-dir-object-\">console.dir(object)</h3><p>打印出该对象的所有属性和属性值。</p><h3 id=\"console-time-label-\">console.time(label)</h3><p>标记时间，与console.timeEnd 搭配使用。</p><h3 id=\"console-timeend-label-\">console.timeEnd(label)</h3><p>完成计时器，打印出从console.time标记开始，到执行console.timeEnd之间的执行时间。</p><h5 id=\"-1\">测试1</h5><pre class=\"code\">&nbsp;console.time(&quot;test&quot;);\n&nbsp;for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;100;&nbsp;i++)&nbsp;{\n&nbsp;&nbsp;&nbsp;var&nbsp;o&nbsp;=&nbsp;new&nbsp;Object();\n&nbsp;}\n&nbsp;console.timeEnd(&quot;test&quot;);\n&nbsp;//打印出&nbsp;test&nbsp;:&nbsp;5ms&nbsp;\n&nbsp;//这个时间不是固定的，根据计算机性能而定。</pre><h3 id=\"console-trace-label-\">console.trace(label)</h3><p>打印当前位置的堆栈信息到标准错误stderr输出。可以追踪函数的调用轨迹。</p><h5 id=\"-1\">测试1</h5><pre class=\"code\">&nbsp;console.trace(&quot;test&quot;);</pre><p>会打印出如下类似的信息：</p><pre class=\"code\">Trace:&nbsp;test\n&nbsp;&nbsp;at&nbsp;repl:1:10\n&nbsp;&nbsp;at&nbsp;REPLServer.self.eval&nbsp;(repl.js:110:21)\n&nbsp;&nbsp;at&nbsp;Interface.(repl.js:239:12)\n&nbsp;&nbsp;at&nbsp;Interface.EventEmitter.emit&nbsp;(events.js:95:17)\n&nbsp;&nbsp;at&nbsp;Interface._onLine&nbsp;(readline.js:202:10)\n&nbsp;&nbsp;......</pre><h3 id=\"console-assert-expression-message-\">console.assert(expression, [message])</h3><p>如果expression等于false，就会抛出消息为[message]的AssertionError异常。</p><h5 id=\"-1\">测试1</h5><pre class=\"code\">console.assert(false,&quot;test&nbsp;error&quot;);\n//&nbsp;打印结果：\nAssertionError:&nbsp;test&nbsp;error\n&nbsp;&nbsp;at&nbsp;Console.assert&nbsp;(console.js:102:23)\n&nbsp;&nbsp;at&nbsp;repl:1:10\n&nbsp;&nbsp;at&nbsp;REPLServer.self.eval&nbsp;(repl.js:110:21)\n&nbsp;&nbsp;at&nbsp;Interface.(repl.js:239:12)\n&nbsp;&nbsp;......</pre>','[{\"type\":\"contents\",\"content\":\"Node.js 控制台\\n什么是终端\\n在过去，一个机构可能只有一台主机，职员使用电传打印机（Teletypewritter 又简称为tty）通过串口连接到主机。后来人们又在电传打印机的基础上进行了改进，程序的输出不再是打印到纸带上而是显示屏上，并且支持彩色显示，这样的设备被称为终端（Terminal）。一台主机可以有很多个终端，早期的主机只支持串口线的终端，对应的设备叫做串口终端（Serials Terminal），又发展出了伪终端，以便于支持GUI，后来串口终端渐渐被图形界面的伪终端取代，也就是我们今天所说的终端。\\n但是在主机的系统启动完成之前，终端是不能连接到主机上的。为了能记录出主机开机过程的日志，也便于在主机出故障无法启动操作系统时进行检修维护，又多了一个叫做控制台的设备。一台主机有且只能有一个控制台。文件主机的重要日志，比如开机关机的日志和记录，重要应用程序的日志，都会输出到控制台来。 \\n与Node.js终端相关的模块有STDIO、TTY、REPL。\\nSTDIO\\n打印到stdout和stderr。与大多数Web浏览器的控制台对象提供的功能类似，这里将输出发送到stdout或stderr。\\nTTY\\n在Linux中，TTY也许是跟终端有关系的最为混乱的术语。TTY是TeleTYpe的一个老缩写。Teletypes，或者teletypewriters，原来指的是电传打字机，是通过串行线用打印机键盘通过阅读和发送信息的设备，和古老的电报机区别并不是很大。之后，当计算机只能以批处理方式运行时（当时穿孔卡片阅读器是唯一一种使程序载入运行的方式），电传打字机成为唯一能够被使用的“实时”输入/输出设备。最终，电传打字机被键盘和显示器终端所取代，但在终端或TTY接插的地方，操作系统仍然需要一个程序来监视串行端口。一个getty“Get TTY”的处理过程是：一个程序监视物理的TTY/终端接口。对一个虚拟网络服务器（VNC）来说，一个伪装的TTY(Pseudo-TTY，即假冒的TTY，也叫做“PTY”）是等价的终端。当你运行一个xterm(终端仿真程序）或GNOME终端程序时，PTY对虚拟的用户或者如xterm一样的伪终端来说，就像是一个TTY在运行。“Pseudo”的意思是“duplicating in a fake way”（用伪造的方法复制），它相比“virtual”或“emulated”更能真实的说明问题。而在现在的计算中，它却处于被放弃的阶段。\\nREPL\\n交互式解释器（REPL）既可以作为一个独立的程序运行，也可以很容易地包含在其他程序中作为整体程序的一部分使用。REPL为运行JavaScript脚本与查看运行结果提供了一种交互方式，通常REPL交互方式可以用于调试、测试以及试验某种想法。\\n在终端输入 node 命令，会出现个 &gt; 箭头，可以输入javascript代码进行调试。\\n例如:\\nconsole.log(\'hello world\');  // 回车\\n打印出 hello world\\nSTDIO - 标准输入输出到控制台(console)\\nconsole.log([data],[...])\\n换行打印到基本输入。\\n第一个参数是一个字符串，其中包含零个或多个占位符。每一个占位符被替换其相应的参数。如果占位符没有相应的参数，将占位符不会被替换，而是直接打印出占位符的字面量。\\n支持的占位符：\\ngod   ％s - 字符串。good\\nbook   ％d - 数字（包括整数和浮点数）。this\\nthis   ％j - JSON。sex\\n测试1，只有第一个参数的情况。\\n console.log(\\\"hello world\\\"); // 在终端会打印出 hello world\\n测试2，具有占位符，但后面无对应参数。\\n console.log(\\\"hello %s\\\");   // 打印出 hello %s\\n测试3，具有占位符，后面对应相关参数。\\n console.log(\\\"hello %s\\\",\\\"world!!\\\"); // 打印出 hello world!!\\n console.log(\\\"1+1 = %d\\\",2);    // 打印出 1+1 = 2\\n console.log(\\\"a json object : %j\\\",{bookAuthor:\\\"brighthas\\\"}); // 打印出 a json object : {\\\"bookAuthor\\\":\\\"brighthas\\\"}\\n\\n 注意：这里打印的是 \\\"bookAuthor\\\" 而不是 bookAuthor，\\n 如果直接用 console.log({bookAuthor:\\\"brighthas\\\"})打印 bookAuthor就不会出现双引号。\\n测试4，多个参数。\\n console.log(\\\"aa\\\",\\\"bb\\\",\\\"cc\\\");   // 打印出 aa bb cc , 之间有一个空格。\\n console.log(\\\"aa %d%s\\\",121,\\\"bbb\\\")    //  打印出 aa 121bbb \\n console.log(\\\"aa %d%s\\\",\\\"ccc\\\",\\\"bbb\\\")  //  打印出 aa NaNbbb  我们会看到 ccc 参数被转换为NaN，\\n                                     //  说明内部会根据占位符类型转换相应的参数。\\nconsole.info([data], [...])\\n与console.log使用方法相同。\\nconsole.error([data], [...])\\n与console.log使用方法相同，不过，打印到stderr。\\nconsole.warn([data], [...])\\n与console.log使用方法相同，不过，打印到stderr。\\nconsole.dir(object)\\n打印出该对象的所有属性和属性值。\\nconsole.time(label)\\n标记时间，与console.timeEnd 搭配使用。\\nconsole.timeEnd(label)\\n完成计时器，打印出从console.time标记开始，到执行console.timeEnd之间的执行时间。\\n测试1\\n console.time(\\\"test\\\");\\n for (var i = 0; i &lt; 100; i++) {\\n   var o = new Object();\\n }\\n console.timeEnd(\\\"test\\\");\\n //打印出 test : 5ms \\n //这个时间不是固定的，根据计算机性能而定。\\nconsole.trace(label)\\n打印当前位置的堆栈信息到标准错误stderr输出。可以追踪函数的调用轨迹。\\n测试1\\n console.trace(\\\"test\\\");\\n会打印出如下类似的信息：\\nTrace: test\\n  at repl:1:10\\n  at REPLServer.self.eval (repl.js:110:21)\\n  at Interface.(repl.js:239:12)\\n  at Interface.EventEmitter.emit (events.js:95:17)\\n  at Interface._onLine (readline.js:202:10)\\n  ......\\nconsole.assert(expression, [message])\\n如果expression等于false，就会抛出消息为[message]的AssertionError异常。\\n测试1\\nconsole.assert(false,\\\"test error\\\");\\n// 打印结果：\\nAssertionError: test error\\n  at Console.assert (console.js:102:23)\\n  at repl:1:10\\n  at REPLServer.self.eval (repl.js:110:21)\\n  at Interface.(repl.js:239:12)\\n  ......\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1444889104000.jpg','2015-08-01 12:37:35','2020-08-20 15:44:26');
INSERT INTO `doracms_content` VALUES (362,'关于把doracms当作发布系统','关于把doracms当作发布系统','3','1','','','2',NULL,'','之前一直在用php开发。后来接触node。刚开始自己玩，后来寻么找个cms用用看，然后发现了doracms。','1','','','0:01',762,'2','0',NULL,0,'0',229866,'<p>之前一直在用php开发。后来接触node。刚开始自己玩，后来寻么找个cms用用看，然后发现了doracms。一番使用下来，还是很棒的开源项目，在此感谢作者的无私奉献。\n下面说一下后台图片上传怎么带上域名（因为做接口，送数据。用直接上传的物理路径搞不定）\n缩略图上传时：修改文件./server/routers/system.js中第151行代码，这个地方是cms自己的图片上传方法，再返回给前端图片地址是，前面拼上域名就行。\n编辑器上传时：doracms使用了ueditor，所以编辑器上传肯定是要修改编辑器的，所以在目录./public/ueditor/ueditor.config.json文件中有个参数叫imageUrlPrefix，这是ueditor编辑器的配置文件，直接修改imageUrlPrefix参数的值，就可以做到编辑器内上传图片带上域名\n顺便还有个小坑...编辑器编辑内容，上传图片或者修改内容上传图片时会出现图片加载失败，一直显示正在上传，但是可以更新或者保存内容。但其实图片压根没有上传成功，所以修改了代码：\n文件位于./src/manage/components/content/contentForm.vue第235行加入下列代码（记得修改完代码一定要npm run build）</p>\n<pre class=\"hljs\"><code>setTimeout(function(){\n            <span class=\"hljs-keyword\">this</span>.content = instance.getContent();\n            <span class=\"hljs-keyword\">this</span>.$store.dispatch(<span class=\"hljs-string\">\"showContentForm\"</span>, {\n                edit: <span class=\"hljs-keyword\">this</span>.formState.edit,\n                formData: Object.assign({}, <span class=\"hljs-keyword\">this</span>.formState.formData, {\n                    comments: <span class=\"hljs-keyword\">this</span>.content\n                })\n            });\n        }.bind(<span class=\"hljs-keyword\">this</span>),<span class=\"hljs-number\">1000</span>)\n</code></pre><p>这样修改完，编辑器上传图片在没有出过问题\n注：本人目前这样修改暂时没有什么问题，已经顺利的给小程序送上了数据</p>\n','[{\"type\":\"contents\",\"content\":\"之前一直在用php开发。后来接触node。刚开始自己玩，后来寻么找个cms用用看，然后发现了doracms。一番使用下来，还是很棒的开源项目，在此感谢作者的无私奉献。下面说一下后台图片上传怎么带上域名（因为做接口，送数据。用直接上传的物理路径搞不定）缩略图上传时：修改文件./server/routers/system.js中第151行代码，这个地方是cms自己的图片上传方法，再返回给前端图片地址是，前面拼上域名就行。编辑器上传时：doracms使用了ueditor，所以编辑器上传肯定是要修改编辑器的，所以在目录./public/ueditor/ueditor.config.json文件中有个参数叫imageUrlPrefix，这是ueditor编辑器的配置文件，直接修改imageUrlPrefix参数的值，就可以做到编辑器内上传图片带上域名顺便还有个小坑...编辑器编辑内容，上传图片或者修改内容上传图片时会出现图片加载失败，一直显示正在上传，但是可以更新或者保存内容。但其实图片压根没有上传成功，所以修改了代码：文件位于./src/manage/components/content/contentForm.vue第235行加入下列代码（记得修改完代码一定要npm run build）\\nsetTimeout(function(){            this.content = instance.getContent();            this.$store.dispatch(\\\"showContentForm\\\", {\\n                edit: this.formState.edit,\\n                formData: Object.assign({}, this.formState.formData, {\\n                    comments: this.content\\n                })\\n            });\\n        }.bind(this),1000)\\n这样修改完，编辑器上传图片在没有出过问题注：本人目前这样修改暂时没有什么问题，已经顺利的给小程序送上了数据\\n\"}]','之前一直在用php开发。后来接触node。刚开始自己玩，后来寻么找个cms用用看，然后发现了doracms。一番使用下来，还是很棒的开源项目，在此感谢作者的无私奉献。\n下面说一下后台图片上传怎么带上域名（因为做接口，送数据。用直接上传的物理路径搞不定）\n缩略图上传时：修改文件./server/routers/system.js中第151行代码，这个地方是cms自己的图片上传方法，再返回给前端图片地址是，前面拼上域名就行。\n编辑器上传时：doracms使用了ueditor，所以编辑器上传肯定是要修改编辑器的，所以在目录./public/ueditor/ueditor.config.json文件中有个参数叫imageUrlPrefix，这是ueditor编辑器的配置文件，直接修改imageUrlPrefix参数的值，就可以做到编辑器内上传图片带上域名\n顺便还有个小坑...编辑器编辑内容，上传图片或者修改内容上传图片时会出现图片加载失败，一直显示正在上传，但是可以更新或者保存内容。但其实图片压根没有上传成功，所以修改了代码：\n文件位于./src/manage/components/content/contentForm.vue第235行加入下列代码（记得修改完代码一定要npm run build）\n```\nsetTimeout(function(){\n            this.content = instance.getContent();\n            this.$store.dispatch(\"showContentForm\", {\n                edit: this.formState.edit,\n                formData: Object.assign({}, this.formState.formData, {\n                    comments: this.content\n                })\n            });\n        }.bind(this),1000)\n```\n这样修改完，编辑器上传图片在没有出过问题\n注：本人目前这样修改暂时没有什么问题，已经顺利的给小程序送上了数据','https://cdn.html-js.cn/cms/upload/images/img20180415005551.jpg','2018-03-30 10:41:23','2020-08-20 15:44:03'),(363,'游记随笔—香港','游记随笔—香港','1','1','','','2',NULL,'','前一阵子去到香港，主要是想到马上到年末了，年休假还有8天，不休对不起自己啊，不过说实在的，香港真不是什么好去处。','1','','','0:01',762,'2','0',NULL,0,'0',227668,'<p><iframe frameborder=\"no\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28854182&auto=1&height=66\"></iframe></p><p>&nbsp;前一阵子去到香港，主要是想到马上到年末了，年休假还有8天，不休对不起自己啊，不过说实在的，香港真不是什么好去处。初中时候看古惑仔，很想去传说中的铜锣湾看看，去过几次之后，感觉真和电影里长得很像，但问题是，已经过了几十年了啊。</p><p>要说香港有哪些地方值得去，有几个地方可以参考下（当然我去的地方不多）：</p><p>1、星光大道，大多数TVB剧中，都能看到的场景。<br/></p><p style=\"text-align: center;\"><img src=\"https://cdn.html-js.cn/ueditor/images/938750252238901248.jpeg\" title=\"timg.jpeg\" alt=\"timg.jpeg\" width=\"600\" height=\"399\"/></p><p>2、迪士尼乐园。</p><p>3、太平山顶，站在山顶往下看，可谓壮观</p><p style=\"text-align:center\"><img src=\"https://cdn.html-js.cn/ueditor/images/938751171861024768.jpg\" title=\"太平山顶.jpg\" alt=\"太平山顶.jpg\" width=\"600\" height=\"450\"/></p><p><br/></p><p>&nbsp; 这些地方景色还是不错的，不过如果深入到大街小巷，又是另一番风景</p><p style=\"text-align:center\"><img src=\"https://cdn.html-js.cn/ueditor/images/938751812897476608.jpg\" title=\"IMG_0050.jpg\" alt=\"IMG_0050.jpg\" width=\"600\" height=\"450\"/></p><p>&nbsp; 香港在早上10点之前，大街上人很少，一到下班时间，人超级多，车水马龙，人多其实是委婉的说法，说白了是道路太窄。一条马路连深圳马路的一半都不到，难怪会觉得拥挤。</p><p>&nbsp; 由于地理位置和其他原因，香港也是购物天堂，就凭一点，很少假货，因为香港对假货处理非常严格。很多大陆客去香港购物，买奶粉，很多大牌也聚集于此。</p><p style=\"text-align:center\"><img src=\"https://cdn.html-js.cn/ueditor/images/938752839377883136.jpg\" title=\"IMG_0053.jpg\" alt=\"IMG_0053.jpg\" width=\"600\" height=\"450\"/></p><p>&nbsp; 虽说香港给人第一印象人很多，房子很久。不过香港的卫生还是做的非常不错的，很少看到地上有垃圾，随便抽烟是不允许的，酒店就更不允许了，发现后需要罚款1500港币。</p><p>&nbsp; 如果不是广东人的话，去香港吃东西是吃不惯的，感觉吃米饭的地方不多，西餐厅比较多，香港口味非常清淡，小食比较多，我每次去之前会查酒店附近的肯德基或者麦当劳，一个是便宜，另一个至少能吃，不会饿肚子。有幸吃到酒店的早餐，太淡了，我老婆说，下次过去带瓶老干妈 O(∩_∩)O哈哈~</p><p style=\"text-align:center\"><img src=\"https://cdn.html-js.cn/ueditor/images/938754640873394176.jpg\" title=\"IMG_3783.jpg\" alt=\"IMG_3783.jpg\" width=\"600\" height=\"450\"/></p><p><br/></p><p>不过不挑食的我还是吃完了，毕竟没花钱</p><p style=\"text-align:center\"><img src=\"https://cdn.html-js.cn/ueditor/images/938754902451163136.jpg\" title=\"IMG_0075.jpg\" alt=\"IMG_0075.jpg\" width=\"600\" height=\"450\"/></p><p><br/></p><p>&nbsp; 如果想到香港买苹果产品的话，你可以从福田口岸出发，从落马洲坐地铁，大概9个站到九龙塘，从H出口出来，就是崇光百货了，坐电梯上二楼就是苹果店，非常方便。</p><p>&nbsp; 总体上感觉，香港没深圳好，也可能是在深圳待惯了，不过去那边买买东西还是很不错的，毕竟电子产品相对大陆便宜，不买多也是没有问题滴，这次过去的战利品，嗷嗷... 卡里空了。。&nbsp;</p><p style=\"text-align:center\"><img src=\"https://cdn.html-js.cn/ueditor/images/938778763846619136.jpg\" title=\"战利品.jpg\" alt=\"战利品.jpg\" width=\"600\" height=\"451\"/></p><p><br/></p>','[{\"type\":\"contents\",\"content\":\"&lt;iframe frameborder=\\\"no\\\" width=\\\"330\\\" height=\\\"86\\\" src=\\\"//music.163.com/outchain/player?type=2&amp;id=28854182&amp;auto=1&amp;height=66\\\"&gt;\\n 前一阵子去到香港，主要是想到马上到年末了，年休假还有8天，不休对不起自己啊，不过说实在的，香港真不是什么好去处。初中时候看古惑仔，很想去传说中的铜锣湾看看，去过几次之后，感觉真和电影里长得很像，但问题是，已经过了几十年了啊。\\n要说香港有哪些地方值得去，有几个地方可以参考下（当然我去的地方不多）：\\n1、星光大道，大多数TVB剧中，都能看到的场景。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/ueditor/images/938750252238901248.jpeg\"},{\"type\":\"contents\",\"content\":\"\\n2、迪士尼乐园。\\n3、太平山顶，站在山顶往下看，可谓壮观\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/ueditor/images/938751171861024768.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n  这些地方景色还是不错的，不过如果深入到大街小巷，又是另一番风景\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/ueditor/images/938751812897476608.jpg\"},{\"type\":\"contents\",\"content\":\"\\n  香港在早上10点之前，大街上人很少，一到下班时间，人超级多，车水马龙，人多其实是委婉的说法，说白了是道路太窄。一条马路连深圳马路的一半都不到，难怪会觉得拥挤。\\n  由于地理位置和其他原因，香港也是购物天堂，就凭一点，很少假货，因为香港对假货处理非常严格。很多大陆客去香港购物，买奶粉，很多大牌也聚集于此。\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/ueditor/images/938752839377883136.jpg\"},{\"type\":\"contents\",\"content\":\"\\n  虽说香港给人第一印象人很多，房子很久。不过香港的卫生还是做的非常不错的，很少看到地上有垃圾，随便抽烟是不允许的，酒店就更不允许了，发现后需要罚款1500港币。\\n  如果不是广东人的话，去香港吃东西是吃不惯的，感觉吃米饭的地方不多，西餐厅比较多，香港口味非常清淡，小食比较多，我每次去之前会查酒店附近的肯德基或者麦当劳，一个是便宜，另一个至少能吃，不会饿肚子。有幸吃到酒店的早餐，太淡了，我老婆说，下次过去带瓶老干妈 O(∩_∩)O哈哈~\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/ueditor/images/938754640873394176.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n不过不挑食的我还是吃完了，毕竟没花钱\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/ueditor/images/938754902451163136.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n  如果想到香港买苹果产品的话，你可以从福田口岸出发，从落马洲坐地铁，大概9个站到九龙塘，从H出口出来，就是崇光百货了，坐电梯上二楼就是苹果店，非常方便。\\n  总体上感觉，香港没深圳好，也可能是在深圳待惯了，不过去那边买买东西还是很不错的，毕竟电子产品相对大陆便宜，不买多也是没有问题滴，这次过去的战利品，嗷嗷... 卡里空了。。 \\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/ueditor/images/938778763846619136.jpg\"},{\"type\":\"contents\",\"content\":\"\\n\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/img20171207211200.jpg','2017-12-07 13:05:18','2020-08-20 15:44:04'),(364,'DoraCMS 后台UI的一些小调整','DoraCMS 后台UI的一些小调整','1','1','','','2',NULL,'','近期对DoraCMS的后台展示做了点小调整，本人不喜欢重复造轮子，在github上找到了...','1','','','0:01',762,'2','0',NULL,1,'0',226294,'<p>&nbsp; 近期对DoraCMS的后台展示做了点小调整，本人不喜欢重复造轮子，在github上找到了 <a href=\"https://github.com/PanJiaChen/vue-element-admin\" target=\"_blank\" title=\"vue-element-admin\">@panjiachen</a> 的&nbsp;vue-element-admin ，感觉比较符合doracms后台的技术栈，于是花时间整合了一下，在此感谢作者开源。个人感觉整合后交互方面比以前更好了，页面模块方面跟以前一样，多了几个小功能：</p><p><br/></p><p>1、语言切换，目前可以支持左侧菜单的国际化了。</p><p>2、后台最大化模式。</p><p>3、可以支持多级菜单。</p><p>4、继承了&nbsp;vue-element-admin 的一系列小细节和功能。</p><p><br/></p><p><img src=\"https://cdn.html-js.cn/cms/upload/images/ueditor/1041325089330696192.png\" width=\"600\" title=\"Snipaste_2018-09-16_21-46-05.png\" alt=\"Snipaste_2018-09-16_21-46-05.png\" height=\"374\"/></p><p><br/></p><p>PS：代码后续会跟版本更新，敬请期待</p>','[{\"type\":\"contents\",\"content\":\"  近期对DoraCMS的后台展示做了点小调整，本人不喜欢重复造轮子，在github上找到了 @panjiachen 的 vue-element-admin ，感觉比较符合doracms后台的技术栈，于是花时间整合了一下，在此感谢作者开源。个人感觉整合后交互方面比以前更好了，页面模块方面跟以前一样，多了几个小功能：\\n\\n1、语言切换，目前可以支持左侧菜单的国际化了。\\n2、后台最大化模式。\\n3、可以支持多级菜单。\\n4、继承了 vue-element-admin 的一系列小细节和功能。\\n\\n\"},{\"type\":\"image\",\"content\":\"https://cdn.html-js.cn/cms/upload/images/ueditor/1041325089330696192.png\"},{\"type\":\"contents\",\"content\":\"\\n\\nPS：代码后续会跟版本更新，敬请期待\\n\"}]',NULL,'https://cdn.html-js.cn/cms/upload/images/img20180916215915.jpg','2018-09-16 13:59:23','2020-10-17 16:16:27'),(365,'测试coturn服务器是否可用(Webrtc)','测试coturn服务器是否可用(Webrtc)','3','1','','','2',NULL,'','我们在使用webrtc 做视频连接的时候，如果涉及到不同网络之间的通信，往往会用到turn server来做视频中转。','1','','','0:01',762,'2','0',NULL,0,'0',228744,'<p>我们在使用webrtc 做视频连接的时候，如果涉及到不同网络之间的通信，往往会用到turn server来做视频中转，google也为我们提供了开源的turn server 源码，但是搭建成功后，如何能知道是否能正常使用呢？我们需要一个demo来做简单测试：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkTURNServer</span>(<span class=\"hljs-params\">turnConfig, timeout</span>)</span>{  \n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve, reject</span>)</span>{  \n\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{  \n      <span class=\"hljs-keyword\">if</span>(promiseResolved) <span class=\"hljs-keyword\">return</span>;  \n      resolve(<span class=\"hljs-literal\">false</span>);  \n      promiseResolved = <span class=\"hljs-literal\">true</span>;  \n    }, timeout || <span class=\"hljs-number\">5000</span>);  \n\n    <span class=\"hljs-keyword\">var</span> promiseResolved = <span class=\"hljs-literal\">false</span>  \n      , myPeerConnection = <span class=\"hljs-built_in\">window</span>.RTCPeerConnection || <span class=\"hljs-built_in\">window</span>.mozRTCPeerConnection || <span class=\"hljs-built_in\">window</span>.webkitRTCPeerConnection   <span class=\"hljs-comment\">//compatibility for firefox and chrome  </span>\n      , pc = <span class=\"hljs-keyword\">new</span> myPeerConnection({<span class=\"hljs-attr\">iceServers</span>:[turnConfig]})  \n      , noop = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{};  \n    pc.createDataChannel(<span class=\"hljs-string\">\"\"</span>);    <span class=\"hljs-comment\">//create a bogus data channel  </span>\n    pc.createOffer(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">sdp</span>)</span>{  \n      <span class=\"hljs-keyword\">if</span>(sdp.sdp.indexOf(<span class=\"hljs-string\">\'typ relay\'</span>) &gt; <span class=\"hljs-number\">-1</span>){ <span class=\"hljs-comment\">// sometimes sdp contains the ice candidates...  </span>\n        promiseResolved = <span class=\"hljs-literal\">true</span>;  \n        resolve(<span class=\"hljs-literal\">true</span>);  \n      }  \n      pc.setLocalDescription(sdp, noop, noop);  \n    }, noop);    <span class=\"hljs-comment\">// create offer and set local description  </span>\n    pc.onicecandidate = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ice</span>)</span>{  <span class=\"hljs-comment\">//listen for candidate events  </span>\n      <span class=\"hljs-keyword\">if</span>(promiseResolved || !ice || !ice.candidate || !ice.candidate.candidate || !(ice.candidate.candidate.indexOf(<span class=\"hljs-string\">\'typ relay\'</span>)&gt;<span class=\"hljs-number\">-1</span>))  <span class=\"hljs-keyword\">return</span>;  \n      promiseResolved = <span class=\"hljs-literal\">true</span>;  \n      resolve(<span class=\"hljs-literal\">true</span>);  \n    };  \n  });  \n\n}  \ncheckTURNServer({  \n  <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\'turn:*.*.*.*\'</span>,  \n  <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">\'×××××××\'</span>,  \n  <span class=\"hljs-attr\">credential</span>: <span class=\"hljs-string\">\'××××××××××\'</span>,  \n}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">bool</span>)</span>{  \n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'is my TURN server active? \'</span>, bool? <span class=\"hljs-string\">\'yes\'</span>:<span class=\"hljs-string\">\'no\'</span>);  \n}).catch(<span class=\"hljs-built_in\">console</span>.error.bind(<span class=\"hljs-built_in\">console</span>));\n</code></pre><p>通过执行 checkTURNServer 方法，根据返回值判断是否连接成功。</p>\n','[{\"type\":\"contents\",\"content\":\"我们在使用webrtc 做视频连接的时候，如果涉及到不同网络之间的通信，往往会用到turn server来做视频中转，google也为我们提供了开源的turn server 源码，但是搭建成功后，如何能知道是否能正常使用呢？我们需要一个demo来做简单测试：\\nfunction checkTURNServer(turnConfig, timeout){  \\n  return new Promise(function(resolve, reject){  \\n\\n    setTimeout(function(){  \\n      if(promiseResolved) return;  \\n      resolve(false);  \\n      promiseResolved = true;  \\n    }, timeout || 5000);  \\n\\n    var promiseResolved = false  \\n      , myPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection   //compatibility for firefox and chrome  \\n      , pc = new myPeerConnection({iceServers:[turnConfig]})  \\n      , noop = function(){};  \\n    pc.createDataChannel(\\\"\\\");    //create a bogus data channel  \\n    pc.createOffer(function(sdp){  \\n      if(sdp.sdp.indexOf(\'typ relay\') &gt; -1){ // sometimes sdp contains the ice candidates...  \\n        promiseResolved = true;  \\n        resolve(true);  \\n      }  \\n      pc.setLocalDescription(sdp, noop, noop);  \\n    }, noop);    // create offer and set local description  \\n    pc.onicecandidate = function(ice){  //listen for candidate events  \\n      if(promiseResolved || !ice || !ice.candidate || !ice.candidate.candidate || !(ice.candidate.candidate.indexOf(\'typ relay\')&gt;-1))  return;  \\n      promiseResolved = true;  \\n      resolve(true);  \\n    };  \\n  });  \\n\\n}  \\ncheckTURNServer({  \\n  url: \'turn:*.*.*.*\',  \\n  username: \'×××××××\',  \\n  credential: \'××××××××××\',  \\n}).then(function(bool){  \\n  console.log(\'is my TURN server active? \', bool? \'yes\':\'no\');  \\n}).catch(console.error.bind(console));\\n通过执行 checkTURNServer 方法，根据返回值判断是否连接成功。\\n\"}]','我们在使用webrtc 做视频连接的时候，如果涉及到不同网络之间的通信，往往会用到turn server来做视频中转，google也为我们提供了开源的turn server 源码，但是搭建成功后，如何能知道是否能正常使用呢？我们需要一个demo来做简单测试：\n```\nfunction checkTURNServer(turnConfig, timeout){  \n  return new Promise(function(resolve, reject){  \n  \n    setTimeout(function(){  \n      if(promiseResolved) return;  \n      resolve(false);  \n      promiseResolved = true;  \n    }, timeout || 5000);  \n  \n    var promiseResolved = false  \n      , myPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection   //compatibility for firefox and chrome  \n      , pc = new myPeerConnection({iceServers:[turnConfig]})  \n      , noop = function(){};  \n    pc.createDataChannel(\"\");    //create a bogus data channel  \n    pc.createOffer(function(sdp){  \n      if(sdp.sdp.indexOf(\'typ relay\') > -1){ // sometimes sdp contains the ice candidates...  \n        promiseResolved = true;  \n        resolve(true);  \n      }  \n      pc.setLocalDescription(sdp, noop, noop);  \n    }, noop);    // create offer and set local description  \n    pc.onicecandidate = function(ice){  //listen for candidate events  \n      if(promiseResolved || !ice || !ice.candidate || !ice.candidate.candidate || !(ice.candidate.candidate.indexOf(\'typ relay\')>-1))  return;  \n      promiseResolved = true;  \n      resolve(true);  \n    };  \n  });  \n  \n}  \ncheckTURNServer({  \n  url: \'turn:*.*.*.*\',  \n  username: \'×××××××\',  \n  credential: \'××××××××××\',  \n}).then(function(bool){  \n  console.log(\'is my TURN server active? \', bool? \'yes\':\'no\');  \n}).catch(console.error.bind(console)); \n```\n\n通过执行 checkTURNServer 方法，根据返回值判断是否连接成功。','https://cdn.html-js.cn/cms/upload/images/img20171231152208.png','2017-12-31 07:22:14','2020-08-20 15:44:04'),(366,'DoraCMS','DoraCMS',NULL,'1',NULL,'','2',NULL,NULL,'建站案例建站案例建站案例建站案例建站案例建站案例','1','','','0:01',762,'1','1','',NULL,NULL,NULL,'<p>建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例</p>','[{\"type\":\"contents\",\"content\":\"建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例\\n\"}]',NULL,'/static/upload/images/20201001/1601558788589963944.png','2020-10-01 13:46:45','2020-10-01 17:02:19'),(367,'DoraCMS1111111','DoraCMS333333',NULL,'1',NULL,'111,222','2',NULL,NULL,'建站案例建站案例建站案例建站案例建站案例建站案例44444','1','','','0:01',762,'1','0','',NULL,NULL,NULL,'<p>建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例4444</p>','[{\"type\":\"contents\",\"content\":\"建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例建站案例4444\\n\"}]',NULL,'/static/upload/images/20201001/1601558788589963944.png','2020-10-01 13:48:53','2020-10-03 01:57:40');
/*!40000 ALTER TABLE `doracms_content` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_content_and_category`
--

DROP TABLE IF EXISTS `doracms_content_and_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_content_and_category` (
  `content_id` int NOT NULL,
  `category_id` int NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`content_id`,`category_id`),
  UNIQUE KEY `doracms_content_and_category_content_id_category_id_unique` (`content_id`,`category_id`),
  KEY `category_id` (`category_id`),
  CONSTRAINT `doracms_content_and_category_ibfk_1` FOREIGN KEY (`content_id`) REFERENCES `doracms_content` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `doracms_content_and_category_ibfk_2` FOREIGN KEY (`category_id`) REFERENCES `doracms_content_category` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_content_and_category`
--

LOCK TABLES `doracms_content_and_category` WRITE;
/*!40000 ALTER TABLE `doracms_content_and_category` DISABLE KEYS */;
INSERT INTO `doracms_content_and_category` VALUES (163,2,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(163,6,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(164,9,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(164,12,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(165,5,'2020-10-10 16:32:59','2020-10-10 16:32:59'),(165,6,'2020-10-10 16:32:59','2020-10-10 16:32:59'),(166,9,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(167,4,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(167,9,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(168,5,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(168,6,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(169,4,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(169,9,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(170,4,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(170,9,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(171,5,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(171,6,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(172,4,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(172,9,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(173,4,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(173,9,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(174,9,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(174,15,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(175,9,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(175,15,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(176,5,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(176,6,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(177,4,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(177,9,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(178,5,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(178,6,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(179,5,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(179,6,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(180,9,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(180,15,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(181,4,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(181,9,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(182,4,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(182,9,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(183,4,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(183,9,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(184,5,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(184,6,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(185,4,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(185,9,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(186,9,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(186,15,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(187,4,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(187,9,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(188,4,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(188,9,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(189,5,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(189,6,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(190,4,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(190,9,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(191,5,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(191,6,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(192,4,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(192,9,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(193,5,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(193,6,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(194,4,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(194,9,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(195,4,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(195,9,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(196,9,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(196,15,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(197,4,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(197,9,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(198,4,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(198,9,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(199,4,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(199,9,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(200,4,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(200,9,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(201,9,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(201,15,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(202,5,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(202,6,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(203,4,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(203,9,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(204,5,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(204,6,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(205,9,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(205,13,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(206,5,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(206,6,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(207,4,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(207,9,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(208,4,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(208,9,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(209,5,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(209,6,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(210,5,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(210,6,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(211,9,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(211,13,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(212,4,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(212,9,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(213,2,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(213,6,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(214,4,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(214,9,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(215,4,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(215,9,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(216,4,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(216,9,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(217,5,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(217,6,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(218,4,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(218,9,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(219,9,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(219,10,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(220,5,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(220,6,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(221,9,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(221,15,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(222,5,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(222,6,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(223,9,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(223,10,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(224,2,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(224,6,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(225,2,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(225,6,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(226,3,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(226,7,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(227,5,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(227,6,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(228,4,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(228,9,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(229,4,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(229,9,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(230,4,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(230,9,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(231,4,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(231,9,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(232,9,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(232,15,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(233,5,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(233,6,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(234,9,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(234,13,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(235,4,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(235,9,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(236,4,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(236,9,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(237,4,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(237,9,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(238,5,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(238,6,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(239,4,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(239,9,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(240,5,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(240,6,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(241,4,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(241,9,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(242,9,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(242,13,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(243,5,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(243,6,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(244,4,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(244,9,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(245,2,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(245,6,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(246,4,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(246,9,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(247,9,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(247,13,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(248,4,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(248,9,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(249,9,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(249,15,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(250,4,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(250,9,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(251,5,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(251,6,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(252,4,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(252,9,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(253,4,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(253,9,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(254,9,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(254,13,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(255,2,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(255,6,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(256,9,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(256,15,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(257,5,'2020-08-17 08:12:20','2020-08-17 08:12:20'),(257,6,'2020-08-17 08:12:20','2020-08-17 08:12:20'),(258,5,'2020-08-17 08:12:20','2020-08-17 08:12:20'),(258,6,'2020-08-17 08:12:20','2020-08-17 08:12:20'),(259,5,'2020-08-17 08:12:20','2020-08-17 08:12:20'),(259,6,'2020-08-17 08:12:20','2020-08-17 08:12:20'),(260,4,'2020-08-17 08:12:20','2020-08-17 08:12:20'),(260,9,'2020-08-17 08:12:20','2020-08-17 08:12:20'),(261,4,'2020-08-17 08:12:20','2020-08-17 08:12:20'),(261,9,'2020-08-17 08:12:20','2020-08-17 08:12:20'),(262,2,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(262,6,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(263,9,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(263,18,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(264,4,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(264,9,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(265,4,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(265,9,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(266,9,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(266,13,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(267,9,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(267,15,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(268,4,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(268,9,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(269,5,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(269,6,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(270,9,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(270,15,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(271,14,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(272,9,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(272,13,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(273,4,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(273,9,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(274,4,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(274,9,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(275,5,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(275,6,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(276,4,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(276,9,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(277,5,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(277,6,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(278,9,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(278,13,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(279,4,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(279,9,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(280,4,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(280,9,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(281,9,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(281,13,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(282,9,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(282,13,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(283,9,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(283,15,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(284,4,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(284,9,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(285,4,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(285,9,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(286,4,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(286,9,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(287,9,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(287,15,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(288,4,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(288,9,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(289,4,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(289,9,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(290,5,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(290,6,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(291,5,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(291,6,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(292,9,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(292,15,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(293,5,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(293,6,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(294,5,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(294,6,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(295,2,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(295,6,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(296,2,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(296,6,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(297,9,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(297,15,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(298,2,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(298,6,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(299,9,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(299,12,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(300,9,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(300,15,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(301,2,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(301,6,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(302,5,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(302,6,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(303,5,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(303,6,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(304,5,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(304,6,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(305,4,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(305,9,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(306,5,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(306,6,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(307,4,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(307,9,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(308,9,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(308,13,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(309,4,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(309,9,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(310,4,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(310,9,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(311,4,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(311,9,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(312,9,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(312,13,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(313,4,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(313,9,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(314,14,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(315,4,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(315,9,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(316,14,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(317,5,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(317,6,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(318,8,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(318,15,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(319,5,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(319,6,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(320,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(320,13,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(321,4,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(321,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(322,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(322,18,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(323,4,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(323,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(324,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(324,15,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(325,8,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(325,15,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(326,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(326,18,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(327,5,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(327,6,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(328,5,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(328,6,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(329,5,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(329,6,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(330,4,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(330,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(331,5,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(331,6,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(332,1,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(332,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(333,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(333,13,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(334,2,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(334,6,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(335,4,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(335,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(336,4,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(336,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(337,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(337,15,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(338,8,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(338,15,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(339,4,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(339,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(340,2,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(340,6,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(341,4,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(341,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(342,4,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(342,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(343,2,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(343,6,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(344,14,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(345,5,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(345,6,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(346,4,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(346,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(347,4,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(347,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(348,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(348,15,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(349,4,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(349,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(350,5,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(350,6,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(351,2,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(351,6,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(352,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(352,15,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(353,4,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(353,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(354,5,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(354,6,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(355,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(355,15,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(356,4,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(356,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(357,4,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(357,9,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(358,5,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(358,6,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(359,4,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(359,9,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(360,9,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(360,15,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(361,4,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(361,9,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(362,5,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(362,6,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(363,14,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(364,5,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(364,6,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(367,5,'2020-10-01 16:03:04','2020-10-01 16:03:04'),(367,6,'2020-10-01 16:03:03','2020-10-01 16:03:03');
/*!40000 ALTER TABLE `doracms_content_and_category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_content_and_tag`
--

DROP TABLE IF EXISTS `doracms_content_and_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_content_and_tag` (
  `content_id` int NOT NULL,
  `tag_id` int NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`content_id`,`tag_id`),
  UNIQUE KEY `doracms_content_and_tag_content_id_tag_id_unique` (`content_id`,`tag_id`),
  KEY `tag_id` (`tag_id`),
  CONSTRAINT `doracms_content_and_tag_ibfk_1` FOREIGN KEY (`content_id`) REFERENCES `doracms_content` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `doracms_content_and_tag_ibfk_2` FOREIGN KEY (`tag_id`) REFERENCES `doracms_content_tag` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_content_and_tag`
--

LOCK TABLES `doracms_content_and_tag` WRITE;
/*!40000 ALTER TABLE `doracms_content_and_tag` DISABLE KEYS */;
INSERT INTO `doracms_content_and_tag` VALUES (163,5,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(163,9,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(164,15,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(164,45,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(165,26,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(166,30,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(167,24,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(167,26,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(168,24,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(168,26,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(169,24,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(169,26,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(170,24,'2020-08-17 08:12:11','2020-08-17 08:12:11'),(170,26,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(171,5,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(172,24,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(173,24,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(173,26,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(174,8,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(174,26,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(175,26,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(176,24,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(176,30,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(177,24,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(178,5,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(178,24,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(178,26,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(179,24,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(179,26,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(180,27,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(181,24,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(181,25,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(181,30,'2020-08-17 08:12:12','2020-08-17 08:12:12'),(182,24,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(182,26,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(183,9,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(183,24,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(184,5,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(184,24,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(184,26,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(185,24,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(186,26,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(187,24,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(188,24,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(188,26,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(189,5,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(189,24,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(189,26,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(190,24,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(190,26,'2020-08-17 08:12:13','2020-08-17 08:12:13'),(191,24,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(191,25,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(192,24,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(192,26,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(193,5,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(193,24,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(193,26,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(194,24,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(195,24,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(195,26,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(196,24,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(196,26,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(197,24,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(197,26,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(198,24,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(199,24,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(199,26,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(200,24,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(200,26,'2020-08-17 08:12:14','2020-08-17 08:12:14'),(201,26,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(202,5,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(202,26,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(203,24,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(203,26,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(204,9,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(204,24,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(205,30,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(206,5,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(206,24,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(206,26,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(207,24,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(207,26,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(208,24,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(208,26,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(209,13,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(209,26,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(210,5,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(210,26,'2020-08-17 08:12:15','2020-08-17 08:12:15'),(211,30,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(212,24,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(213,24,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(213,26,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(214,24,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(214,26,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(215,24,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(215,26,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(216,24,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(216,26,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(217,5,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(217,24,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(217,26,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(218,24,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(219,5,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(220,5,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(221,18,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(221,33,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(221,44,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(222,5,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(222,15,'2020-08-17 08:12:16','2020-08-17 08:12:16'),(222,34,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(223,15,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(224,5,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(224,26,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(224,30,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(225,5,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(225,24,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(226,42,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(227,5,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(227,24,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(228,24,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(228,26,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(229,24,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(229,26,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(230,24,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(230,26,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(231,24,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(232,26,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(233,8,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(233,26,'2020-08-17 08:12:17','2020-08-17 08:12:17'),(234,30,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(235,24,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(235,26,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(236,24,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(237,24,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(237,30,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(238,31,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(239,24,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(239,26,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(240,5,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(240,24,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(240,26,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(241,24,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(242,30,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(243,26,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(244,24,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(244,26,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(245,24,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(245,26,'2020-08-17 08:12:18','2020-08-17 08:12:18'),(246,24,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(246,26,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(247,30,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(248,5,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(248,24,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(249,13,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(249,26,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(250,24,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(251,24,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(251,26,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(252,24,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(252,26,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(253,24,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(254,30,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(255,5,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(255,26,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(256,26,'2020-08-17 08:12:19','2020-08-17 08:12:19'),(257,26,'2020-08-17 08:12:20','2020-08-17 08:12:20'),(258,5,'2020-08-17 08:12:20','2020-08-17 08:12:20'),(258,24,'2020-08-17 08:12:20','2020-08-17 08:12:20'),(259,13,'2020-08-17 08:12:20','2020-08-17 08:12:20'),(260,24,'2020-08-17 08:12:20','2020-08-17 08:12:20'),(260,26,'2020-08-17 08:12:20','2020-08-17 08:12:20'),(261,24,'2020-08-17 08:12:20','2020-08-17 08:12:20'),(262,5,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(262,11,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(262,26,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(263,36,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(264,24,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(264,26,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(265,24,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(265,26,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(266,30,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(267,11,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(267,24,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(268,24,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(268,26,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(269,24,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(269,30,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(270,26,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(271,7,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(272,30,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(273,24,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(274,24,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(274,26,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(275,5,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(275,24,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(276,24,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(277,5,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(277,24,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(278,30,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(279,24,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(279,26,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(280,24,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(280,26,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(281,30,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(282,30,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(283,28,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(284,24,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(284,26,'2020-08-17 08:12:21','2020-08-17 08:12:21'),(285,24,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(285,26,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(286,24,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(286,26,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(287,8,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(288,24,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(288,26,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(289,24,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(289,26,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(290,24,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(290,30,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(291,24,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(291,26,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(292,26,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(293,5,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(293,41,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(294,5,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(294,9,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(295,5,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(295,43,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(296,5,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(296,15,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(297,15,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(298,5,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(298,15,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(299,26,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(300,10,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(301,5,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(301,9,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(301,15,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(302,5,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(302,15,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(303,10,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(303,24,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(303,26,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(304,5,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(304,9,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(305,9,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(305,13,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(305,15,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(306,5,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(307,24,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(307,26,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(308,30,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(309,24,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(310,24,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(310,26,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(311,24,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(311,26,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(312,30,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(313,24,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(314,26,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(315,24,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(315,26,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(316,26,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(317,5,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(317,24,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(317,26,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(319,5,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(319,24,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(319,26,'2020-08-17 08:12:22','2020-08-17 08:12:22'),(320,30,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(321,24,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(322,36,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(323,24,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(323,26,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(324,38,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(326,26,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(326,36,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(327,24,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(327,26,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(328,24,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(329,24,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(330,24,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(331,5,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(331,31,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(332,37,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(333,30,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(334,23,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(335,24,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(335,26,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(336,24,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(337,11,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(337,26,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(339,24,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(339,26,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(340,5,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(340,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(341,24,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(341,26,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(342,24,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(343,26,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(344,7,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(345,13,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(345,16,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(346,24,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(346,26,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(347,24,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(348,24,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(348,26,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(349,24,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(349,26,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(350,31,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(351,24,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(351,26,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(352,9,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(352,13,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(353,24,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(354,5,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(354,26,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(355,16,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(356,24,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(356,26,'2020-08-17 08:12:23','2020-08-17 08:12:23'),(357,24,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(357,26,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(358,5,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(358,24,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(358,26,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(359,24,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(359,26,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(360,8,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(360,26,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(361,24,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(361,26,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(362,31,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(363,7,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(364,5,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(364,9,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(364,15,'2020-08-17 08:12:24','2020-08-17 08:12:24'),(367,41,'2020-10-01 16:03:03','2020-10-01 16:03:03'),(367,42,'2020-10-01 16:03:04','2020-10-01 16:03:04');
/*!40000 ALTER TABLE `doracms_content_and_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_content_category`
--

DROP TABLE IF EXISTS `doracms_content_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_content_category` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `keywords` varchar(255) DEFAULT NULL,
  `cate_type` varchar(255) DEFAULT '1',
  `sort_id` int DEFAULT '1',
  `parent_id` varchar(255) DEFAULT '0',
  `enable` tinyint(1) DEFAULT '1',
  `content_temp` int DEFAULT NULL,
  `default_url` varchar(255) DEFAULT '',
  `home_page` varchar(255) DEFAULT 'ui',
  `sort_path` varchar(255) DEFAULT '0',
  `comments` varchar(255) DEFAULT NULL,
  `s_img` varchar(500) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_content_category`
--

LOCK TABLES `doracms_content_category` WRITE;
/*!40000 ALTER TABLE `doracms_content_category` DISABLE KEYS */;
INSERT INTO `doracms_content_category` VALUES (1,'Mongodb','Mongodb,开发,前端开发','1',4,'9',1,NULL,'front-development/Mongodb','Jquery','0,Nycd05pP,4JknAqTv','Mongodb 相关技术文档, 使用技巧，进阶，应用实战，mongodb 基础操作，聚合查询，分布式部署','','2020-08-16 14:31:24','2020-08-16 14:31:24'),(2,'版本升级','DoraCMS,eggCMS,nodecms','1',2,'6',1,NULL,'document/softUpdate','soft','0,Ek7skiaw,4yzPes6w','DoraCMS 版本升级发布记录,升级注意事项,更新功能点。手把手教您部署DoraCMS，二次开发无压力','','2020-08-16 14:31:24','2020-08-16 14:31:24'),(3,'关于我们','关于我们','2',1,'7',1,27,'service/about_us','ui','0,HyVhxcjAE,8Ow0giHO9','关于我们','','2020-08-16 14:31:24','2020-11-07 15:34:36'),(4,'NodeJs','NodeJs,前端开发,全栈开发,前端开发工程师','1',1,'9',1,NULL,'front-development/NodeJs','NodeJs','0,Nycd05pP,E1lagiaw','NodeJs相关技术文档、教程，nodejs相关技术文档，为开发者提供nodejs基础api的相关介绍。','','2020-08-16 14:31:24','2020-08-16 14:31:24'),(5,'原创教程','前端开发,前端开发者,教程,前端开发教程','1',3,'6',1,NULL,'document/course','course','0,Ek7skiaw,EJFzljaw','关于前端原创或者转载的教程系列，给前端开发者入门或者进阶提供帮助。主要涵盖了doracms部署过程中遇到的问题解答','','2020-08-16 14:31:24','2020-08-16 14:31:24'),(6,'DoraCMS','DoraCMS相关原创,文档,资源,下载,前端开发,英文翻译,api','1',2,'0',1,NULL,'document','document','0,Ek7skiaw','DoraCMS相关技术资源，教程，api等相关资料，DoraCMS 安装，调试，发布，新功能开发指南，插件开发','https://cdn.html-js.cn/cms/upload/images/20200221/1582249733419640853.jpg','2020-08-16 14:31:24','2020-08-16 14:31:24'),(7,'关于我们','service,doracms','2',9,'0',1,27,'service','ui','0,HyVhxcjAE','提供技术指导，二次开发等服务','','2020-08-16 14:31:24','2020-11-07 15:34:36'),(8,'实验室','jquery插件,js插件,前端开发','1',3,'0',0,NULL,'lab','lab','0,NkGSLLZF','本人原创Jquery组件，通过自定义组件加深对JS和jquery的理解，已经对面向对象的编程的深入了解',NULL,'2020-08-16 14:31:24','2020-08-16 14:31:24'),(9,'前端开发','开发, 前端资源, CSS, JavaScript, Ajax, jQuery, html,html5,css3,浏览器兼容','1',1,'0',1,NULL,'front-development','front-development','0,Nycd05pP','前端开发相关技术文档，学习文档，打造专业的前端技术博客',NULL,'2020-08-16 14:31:24','2020-08-16 14:31:24'),(10,'VueJs','vuejs,vue,vuex,router,vue ssr','1',5,'9',1,NULL,'front-development/vuejs','ui','0,Nycd05pP,QquXtTpL','vue 开发文档,开发技巧,前端开发,vue ssr, vue router,介绍业内最新基于vue的文档和相关技巧与实践','','2020-08-16 14:31:24','2020-08-16 14:31:24'),(11,'案例','doracms,demo,case','1',8,'0',1,26,'cmscase','ui','0,SkCL09aCb','doracms案例展示',NULL,'2020-08-16 14:31:24','2020-11-07 15:34:17'),(12,'软件推荐','前端开发软件,前端利器,前端工具','1',7,'9',1,NULL,'front-development/softs','ui','0,Nycd05pP,TzP0_3e-','推荐前端开发用到的一些实用工具和使用方法，让开发者更好的运用工具编写代码，拓展思维','','2020-08-16 14:31:24','2020-08-16 14:31:24'),(13,'Express','Express教程,express深入浅出','1',2,'9',1,NULL,'front-development/Express-Course','Express-Course','0,Nycd05pP,V1U2-a9le','介绍关于express框架方面的基础知识和本人在开发过程中的一些经验技巧。express相关技术文档，为开发者提供express基础api的相关介绍。','','2020-08-16 14:31:24','2020-08-16 14:31:24'),(14,'关于我','nodejs,doacms,doramart,express,eggjs,全栈,前端开发俱乐部,前端开发','1',6,'0',0,8,'aboutme','aboutme','0,VJ5tjVyw','关于我在开发，生活中的积累，留下生活的印记','','2020-08-16 14:31:24','2020-10-25 09:39:14'),(15,'插件','jquery,jquery插件','1',1,'8',0,NULL,'lab/plug-in','plug-in','0,NkGSLLZF,VkzcL8-t','集合作者原创jquery插件，和资源，和开发者一起探索前端插件开发的点点滴滴。',NULL,'2020-08-16 14:31:24','2020-08-16 14:31:24'),(16,'技巧','前端开发,前端,jquery,nodejs,AngularJs,BootStrap','1',8,'9',1,NULL,'front-development/others','others','0,Nycd05pP,VyU4rLbt','关于前端开发相关技术文档，分享作者在前端开发中遇到的问题和经验，和同行一起技术学分享，共同进步','','2020-08-16 14:31:24','2020-08-16 14:31:24'),(17,'帮助链接','help,帮助,','2',1,'7',1,27,'service/helpme','ui','0,HyVhxcjAE,kwHqaP9V','整理 DoraCMS 重要技术文章','','2020-08-16 14:31:24','2020-11-07 15:34:36'),(18,'ReactJS','react,redux,ssr,reactjs,react native','1',4,'9',1,NULL,'front-development/reactjs','ui','0,Nycd05pP,nWIwZBc7','react开发技术相关,react移动开发,react native','','2020-08-16 14:31:24','2020-08-16 14:31:24');
/*!40000 ALTER TABLE `doracms_content_category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_content_tag`
--

DROP TABLE IF EXISTS `doracms_content_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_content_tag` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `alias` varchar(255) DEFAULT NULL,
  `comments` varchar(255) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=46 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_content_tag`
--

LOCK TABLES `doracms_content_tag` WRITE;
/*!40000 ALTER TABLE `doracms_content_tag` DISABLE KEYS */;
INSERT INTO `doracms_content_tag` VALUES (4,'插件','plugs','插件','2020-08-16 13:30:28','2020-08-16 13:30:28'),(5,'DoraCMS','doracms','doracms','2020-08-16 13:30:28','2020-08-16 13:30:28'),(6,'马云','jackma','马云','2020-08-16 13:30:28','2020-08-16 13:30:28'),(7,'旅游','track','旅游','2020-08-16 13:30:28','2020-08-16 13:30:28'),(8,'jquery','jquery','jquery','2020-08-16 13:30:28','2020-08-16 13:30:28'),(9,'前端框架','frame','前端框架','2020-08-16 13:30:28','2020-08-16 13:30:28'),(10,'es6','','es6','2020-08-16 13:30:28','2020-08-16 13:30:28'),(11,'angularjs','angularjs','angularjs','2020-08-16 13:30:28','2020-08-16 13:30:28'),(12,'react-native','reactnative','react-native','2020-08-16 13:30:28','2020-08-16 13:30:28'),(13,'html','html','html','2020-08-16 13:30:28','2020-08-16 13:30:28'),(14,'数码','Digital','数码','2020-08-16 13:30:28','2020-08-16 13:30:28'),(15,'前端开发','kaifa','前端开发','2020-08-16 13:30:28','2020-08-16 13:30:28'),(16,'css','css','css','2020-08-16 13:30:28','2020-08-16 13:30:28'),(17,'reactjs','reactjs','reactjs','2020-08-16 13:30:28','2020-08-16 13:30:28'),(18,'任正非','','任正非','2020-08-16 13:30:28','2020-08-16 13:30:28'),(19,'vue','','vue','2020-08-16 13:30:28','2020-08-16 13:30:28'),(20,'webRTC','','webRTC','2020-08-16 13:30:28','2020-08-16 13:30:28'),(21,'nodecms',NULL,'nodecms','2020-08-16 13:30:28','2020-08-16 13:30:28'),(22,'linux',NULL,'linux','2020-08-16 13:30:28','2020-08-16 13:30:28'),(23,'版本更新','version','版本更新','2020-08-16 13:30:28','2020-08-16 13:30:28'),(24,'nodejs','nodejs','nodejs','2020-08-16 13:30:28','2020-08-16 13:30:28'),(25,'ejs','ejs','ejs','2020-08-16 13:30:28','2020-08-16 13:30:28'),(26,'前端开发','webdevolep','前端开发','2020-08-16 13:30:28','2020-08-16 13:30:28'),(27,'智能硬件','hardware','智能硬件','2020-08-16 13:30:28','2020-08-16 13:30:28'),(28,'BootStrap','BootStrap','BootStrap','2020-08-16 13:30:28','2020-08-16 13:30:28'),(29,'科学上网','shadowsocks','科学上网','2020-08-16 13:30:28','2020-08-16 13:30:28'),(30,'express','express','express','2020-08-16 13:30:28','2020-08-16 13:30:28'),(31,'漏洞','bug','漏洞','2020-08-16 13:30:28','2020-08-16 13:30:28'),(32,'国际化',NULL,'国际化','2020-08-16 13:30:28','2020-08-16 13:30:28'),(33,'芯片','','芯片','2020-08-16 13:30:28','2020-08-16 13:30:28'),(34,'docker',NULL,'docker','2020-08-16 13:30:28','2020-08-16 13:30:28'),(35,'html2canvas',NULL,'html2canvas','2020-08-16 13:30:28','2020-08-16 13:30:28'),(36,'React','React','React','2020-08-16 13:30:29','2020-08-16 13:30:29'),(37,'mongodb','mongodb','mongodb','2020-08-16 13:30:29','2020-08-16 13:30:29'),(38,'环境','environment','环境','2020-08-16 13:30:29','2020-08-16 13:30:29'),(39,'eggcms',NULL,'eggcms','2020-08-16 13:30:29','2020-08-16 13:30:29'),(40,'upstream',NULL,'upstream','2020-08-16 13:30:29','2020-08-16 13:30:29'),(41,'插件化',NULL,'插件化','2020-08-16 13:30:29','2020-08-16 13:30:29'),(42,'帮助',NULL,'帮助','2020-08-16 13:30:29','2020-08-16 13:30:29'),(43,'服务端渲染','','服务端渲染','2020-08-16 13:30:29','2020-08-16 13:30:29'),(44,'国产','','国产','2020-08-16 13:30:29','2020-08-16 13:30:29'),(45,'vscode',NULL,'vscode','2020-08-16 13:30:29','2020-08-16 13:30:29');
/*!40000 ALTER TABLE `doracms_content_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_content_template`
--

DROP TABLE IF EXISTS `doracms_content_template`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_content_template` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `alias` varchar(255) DEFAULT 'defaultTemp',
  `version` varchar(255) DEFAULT '',
  `s_img` varchar(500) DEFAULT '/stylesheets/backstage/img/screenshot.png',
  `author` varchar(255) DEFAULT 'doramart',
  `using` tinyint(1) DEFAULT '0',
  `comment` varchar(255) DEFAULT NULL,
  `shop_temp_id` varchar(255) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_content_template`
--

LOCK TABLES `doracms_content_template` WRITE;
/*!40000 ALTER TABLE `doracms_content_template` DISABLE KEYS */;
INSERT INTO `doracms_content_template` VALUES (12,'hidora','hidora','2.1.7','https://cdn.html-js.cn/cms/upload/images/20201107/1604717965133076684.jpg','杨青',1,'DoraCMS-SQL默认模板，专题模板','bIOEocZne','2020-11-07 06:41:58','2020-11-07 06:42:24');
/*!40000 ALTER TABLE `doracms_content_template` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_help_center`
--

DROP TABLE IF EXISTS `doracms_help_center`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_help_center` (
  `id` int DEFAULT NULL,
  `name` varchar(500) DEFAULT NULL,
  `lang` varchar(500) DEFAULT '1',
  `state` tinyint(1) DEFAULT '0',
  `help_type` varchar(500) DEFAULT '0',
  `comments` varchar(500) DEFAULT NULL,
  `admin_userid` int DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_help_center`
--

LOCK TABLES `doracms_help_center` WRITE;
/*!40000 ALTER TABLE `doracms_help_center` DISABLE KEYS */;
INSERT INTO `doracms_help_center` VALUES (0,'我是一个帮助','1',0,'0','<p>我是一个帮助我是一个帮助我是一个帮助</p>',1,'2020-08-15 15:00:44','2020-08-15 15:12:34');
/*!40000 ALTER TABLE `doracms_help_center` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_hook`
--

DROP TABLE IF EXISTS `doracms_hook`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_hook` (
  `id` char(36) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `name` varchar(100) DEFAULT NULL,
  `description` varchar(100) DEFAULT NULL,
  `type` varchar(100) DEFAULT NULL,
  `ext` varchar(100) DEFAULT NULL,
  `status` varchar(100) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_hook`
--

LOCK TABLES `doracms_hook` WRITE;
/*!40000 ALTER TABLE `doracms_hook` DISABLE KEYS */;
/*!40000 ALTER TABLE `doracms_hook` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_mail_delivery`
--

DROP TABLE IF EXISTS `doracms_mail_delivery`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_mail_delivery` (
  `id` int NOT NULL AUTO_INCREMENT,
  `sender_id` int DEFAULT NULL,
  `email_type` int DEFAULT NULL,
  `state` varchar(255) DEFAULT NULL,
  `timing` datetime DEFAULT NULL,
  `comments` longtext,
  `task_type` varchar(255) DEFAULT NULL,
  `target_type` varchar(255) DEFAULT NULL,
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `sender_id` (`sender_id`),
  KEY `email_type` (`email_type`),
  CONSTRAINT `doracms_mail_delivery_ibfk_1` FOREIGN KEY (`sender_id`) REFERENCES `doracms_admin_user` (`id`) ON UPDATE CASCADE,
  CONSTRAINT `doracms_mail_delivery_ibfk_2` FOREIGN KEY (`email_type`) REFERENCES `doracms_mail_template` (`id`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_mail_delivery`
--

LOCK TABLES `doracms_mail_delivery` WRITE;
/*!40000 ALTER TABLE `doracms_mail_delivery` DISABLE KEYS */;
/*!40000 ALTER TABLE `doracms_mail_delivery` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_mail_template`
--

DROP TABLE IF EXISTS `doracms_mail_template`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_mail_template` (
  `id` int NOT NULL AUTO_INCREMENT,
  `comment` varchar(255) DEFAULT NULL,
  `title` varchar(255) DEFAULT NULL,
  `sub_title` varchar(255) DEFAULT NULL,
  `content` longtext,
  `temp_type` varchar(255) DEFAULT NULL,
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_mail_template`
--

LOCK TABLES `doracms_mail_template` WRITE;
/*!40000 ALTER TABLE `doracms_mail_template` DISABLE KEYS */;
INSERT INTO `doracms_mail_template` VALUES (1,'1找回密码','通过加密链接重置密码','找回密码','<div class=\"main-body\" style=\"width:600px;margin:0 auto;border: 1px solid #eeeeee;\"><div class=\"main-header\" style=\"width: 100%;height: 30px;line-height: 30px;background-color: #1487f4;padding: 5px 0;\"><div class=\"logo\" style=\"width: 150px;height: 30px;float: left;\"><img style=\"height: 100%;margin-left: 10px;\" src=\"https://user-images.githubusercontent.com/11911066/74080231-c6353f80-4a7c-11ea-9da3-3e9837bdd6be.png\" alt=\"\"/></div><div class=\"menu\" style=\"width: 450px;height: 30px;float: right;text-align: right;\"><div style=\"margin: 0;padding: 0;\"><span style=\"font-size: 13px;padding-right: 10px;\"><a style=\"text-decoration: none;color:#ffffff;\" href=\"https://www.html-js.cn\" target=\"_blank\">首页</a></span></div></div></div><p class=\"main-container\" style=\"min-height: 300px;padding: 30px;\">您好：tempkey_email<br/><br/><br/>\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 请点击下面的链接再设置密码<br/><br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href=\"tempkey_siteDomain/api/user/reset_pass?key=tempkey_token\" target=\"_blank\">点击重置密码 </a><br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<a href=\"tempkey_siteDomain/api/user/reset_pass?key=tempkey_token\" target=\"_blank\">tempkey_siteDomain/api/user/reset_pass?key=tempkey_token</a><br/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p><div class=\"main-footer\" style=\"height: 40px;line-height: 40px;background-color: #F4F4F4;text-align: right;padding-right: 10px;font-size: 13px;\">© 2009-present <a style=\"color: #1487f4;\" href=\"https://www.html-js.cn\" target=\"_blank\">www.html-js.cn</a>\n &nbsp;All rights reserved.</div></div>','0','2020-10-02 05:57:17','2020-10-02 06:14:48'),(2,'留言通知','有人给您留言啦！！！','留言通知','<div class=\"main-body\" style=\"width:600px;margin:0 auto;border: 1px solid #eeeeee;\"><div class=\"main-header\" style=\"width: 100%;height: 30px;line-height: 30px;background-color: #1487f4;padding: 5px 0;\"><div class=\"logo\" style=\"width: 150px;height: 30px;float: left;\"><img style=\"height: 100%;margin-left: 10px;\" src=\"https://user-images.githubusercontent.com/11911066/74080231-c6353f80-4a7c-11ea-9da3-3e9837bdd6be.png\" alt=\"\"/></div><div class=\"menu\" style=\"width: 450px;height: 30px;float: right;text-align: right;\"><div style=\"margin: 0;padding: 0;\"><span style=\"font-size: 13px;padding-right: 10px;\"><a style=\"text-decoration: none;color:#ffffff;\" href=\"https://www.html-js.cn\" target=\"_blank\">首页</a></span></div></div></div><p class=\"main-container\" style=\"min-height: 300px;padding: 30px;\">&nbsp; 主人您好，<strong>tempkey_message_author_userName</strong> 于 tempkey_message_sendDate 在 <strong>tempkey_siteName</strong> 的文章 <a href=\"tempkey_siteDomain/details/tempkey_message_content_id.html\" target=\"_blank\">tempkey_message_content_title</a> 中回复了您&nbsp;</p><div class=\"main-footer\" style=\"height: 40px;line-height: 40px;background-color: #F4F4F4;text-align: right;padding-right: 10px;font-size: 13px;\">© 2009-present <a style=\"color: #1487f4;\" href=\"https://www.html-js.cn\" target=\"_blank\">www.html-js.cn</a>&nbsp;All rights reserved.</div></div>','6','2020-10-02 05:59:41','2020-10-02 05:59:41'),(3,'邮箱验证码','请查收您的邮箱验证码','发送验证码','<div class=\"main-body\" style=\"width:600px;margin:0 auto;border: 1px solid #eeeeee;\"><div class=\"main-header\" style=\"width: 100%;height: 30px;line-height: 30px;background-color: #1487f4;padding: 5px 0;\"><div class=\"logo\" style=\"width: 150px;height: 30px;float: left;\"><img style=\"height: 100%;margin-left: 10px;\" src=\"https://user-images.githubusercontent.com/11911066/74080231-c6353f80-4a7c-11ea-9da3-3e9837bdd6be.png\" alt=\"\"/></div><div class=\"menu\" style=\"width: 450px;height: 30px;float: right;text-align: right;\"><div style=\"margin: 0;padding: 0;\"><span style=\"font-size: 13px;padding-right: 10px;\"><a style=\"text-decoration: none;color:#ffffff;\" href=\"https://www.html-js.cn\" target=\"_blank\">首页</a></span></div></div></div><p class=\"main-container\" style=\"min-height: 200px;padding: 30px;\">您正在注册 DoraCMS 会员，本次验证码是：tempkey_msgCode，如非本人操作，请忽略！&nbsp;</p><div class=\"main-footer\" style=\"height: 40px;line-height: 40px;background-color: #F4F4F4;text-align: right;padding-right: 10px;font-size: 13px;\">© 2009-present <a style=\"color: #1487f4;\" href=\"https://www.html-js.cn\" target=\"_blank\">www.html-js.cn</a> All rights reserved.</div></div>','8','2020-10-02 06:14:34','2020-10-02 06:14:34');
/*!40000 ALTER TABLE `doracms_mail_template` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_mail_user`
--

DROP TABLE IF EXISTS `doracms_mail_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_mail_user` (
  `task_id` int NOT NULL,
  `user_id` int NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`task_id`,`user_id`),
  UNIQUE KEY `doracms_mail_user_task_id_user_id_unique` (`task_id`,`user_id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `doracms_mail_user_ibfk_1` FOREIGN KEY (`task_id`) REFERENCES `doracms_send_log` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `doracms_mail_user_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `doracms_user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_mail_user`
--

LOCK TABLES `doracms_mail_user` WRITE;
/*!40000 ALTER TABLE `doracms_mail_user` DISABLE KEYS */;
/*!40000 ALTER TABLE `doracms_mail_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_message`
--

DROP TABLE IF EXISTS `doracms_message`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_message` (
  `id` int NOT NULL AUTO_INCREMENT,
  `content_id` int DEFAULT NULL,
  `content_title` varchar(255) DEFAULT NULL,
  `author_id` int DEFAULT NULL,
  `admin_author_id` int DEFAULT NULL,
  `reply_author_id` int DEFAULT NULL,
  `admin_reply_author_id` int DEFAULT NULL,
  `state` tinyint(1) DEFAULT '0',
  `utype` varchar(255) DEFAULT '0',
  `relation_msg_id` varchar(255) DEFAULT NULL,
  `content` varchar(255) DEFAULT '输入评论内容...',
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `content_id` (`content_id`),
  KEY `author_id` (`author_id`),
  KEY `admin_author_id` (`admin_author_id`),
  KEY `reply_author_id` (`reply_author_id`),
  KEY `admin_reply_author_id` (`admin_reply_author_id`),
  CONSTRAINT `doracms_message_ibfk_1` FOREIGN KEY (`content_id`) REFERENCES `doracms_content` (`id`) ON UPDATE CASCADE,
  CONSTRAINT `doracms_message_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `doracms_user` (`id`) ON UPDATE CASCADE,
  CONSTRAINT `doracms_message_ibfk_3` FOREIGN KEY (`admin_author_id`) REFERENCES `doracms_admin_user` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `doracms_message_ibfk_4` FOREIGN KEY (`reply_author_id`) REFERENCES `doracms_user` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `doracms_message_ibfk_5` FOREIGN KEY (`admin_reply_author_id`) REFERENCES `doracms_admin_user` (`id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_message`
--

LOCK TABLES `doracms_message` WRITE;
/*!40000 ALTER TABLE `doracms_message` DISABLE KEYS */;
INSERT INTO `doracms_message` VALUES (9,164,NULL,762,NULL,NULL,NULL,0,'0',NULL,'goodfasfdasd','2020-10-30 15:43:31','2020-10-30 15:43:31');
/*!40000 ALTER TABLE `doracms_message` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_plugin`
--

DROP TABLE IF EXISTS `doracms_plugin`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_plugin` (
  `id` char(36) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `name` varchar(100) DEFAULT NULL,
  `plugin_id` varchar(100) DEFAULT NULL,
  `alias` varchar(100) DEFAULT NULL,
  `pkg_name` varchar(100) DEFAULT NULL,
  `en_name` varchar(100) DEFAULT NULL,
  `description` varchar(100) DEFAULT NULL,
  `state` tinyint(1) DEFAULT NULL,
  `amount` varchar(100) DEFAULT NULL,
  `isadm` varchar(100) DEFAULT NULL,
  `isindex` varchar(100) DEFAULT NULL,
  `version` varchar(100) DEFAULT NULL,
  `operation_instructions` varchar(100) DEFAULT NULL,
  `author` varchar(100) DEFAULT NULL,
  `admin_url` varchar(100) DEFAULT NULL,
  `icon_name` varchar(100) DEFAULT NULL,
  `admin_api` varchar(100) DEFAULT NULL,
  `font_api` varchar(100) DEFAULT NULL,
  `auth_user` tinyint(1) DEFAULT NULL,
  `init_data_path` varchar(100) DEFAULT NULL,
  `hooks` varchar(100) DEFAULT NULL,
  `default_config` varchar(100) DEFAULT NULL,
  `plugins_config` varchar(100) DEFAULT NULL,
  `plugin_type` varchar(100) DEFAULT NULL,
  `installor` varchar(100) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_plugin`
--

LOCK TABLES `doracms_plugin` WRITE;
/*!40000 ALTER TABLE `doracms_plugin` DISABLE KEYS */;
/*!40000 ALTER TABLE `doracms_plugin` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_send_log`
--

DROP TABLE IF EXISTS `doracms_send_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_send_log` (
  `id` int NOT NULL AUTO_INCREMENT,
  `recipient_email` varchar(255) DEFAULT NULL,
  `task_id` int DEFAULT NULL,
  `state` varchar(255) DEFAULT '0',
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `task_id` (`task_id`),
  CONSTRAINT `doracms_send_log_ibfk_1` FOREIGN KEY (`task_id`) REFERENCES `doracms_mail_delivery` (`id`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_send_log`
--

LOCK TABLES `doracms_send_log` WRITE;
/*!40000 ALTER TABLE `doracms_send_log` DISABLE KEYS */;
/*!40000 ALTER TABLE `doracms_send_log` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_send_user`
--

DROP TABLE IF EXISTS `doracms_send_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_send_user` (
  `log_id` int NOT NULL,
  `user_id` int NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`log_id`,`user_id`),
  UNIQUE KEY `doracms_send_user_log_id_user_id_unique` (`log_id`,`user_id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `doracms_send_user_ibfk_1` FOREIGN KEY (`log_id`) REFERENCES `doracms_send_log` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `doracms_send_user_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `doracms_user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_send_user`
--

LOCK TABLES `doracms_send_user` WRITE;
/*!40000 ALTER TABLE `doracms_send_user` DISABLE KEYS */;
/*!40000 ALTER TABLE `doracms_send_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_system_config`
--

DROP TABLE IF EXISTS `doracms_system_config`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_system_config` (
  `id` int NOT NULL AUTO_INCREMENT,
  `site_name` varchar(500) DEFAULT NULL,
  `og_title` varchar(500) DEFAULT NULL,
  `site_logo` varchar(1000) DEFAULT NULL,
  `site_domain` varchar(1000) DEFAULT NULL,
  `site_discription` varchar(1000) DEFAULT NULL,
  `site_keywords` varchar(1000) DEFAULT NULL,
  `site_alt_keywords` varchar(1000) DEFAULT NULL,
  `site_email_server` varchar(1000) DEFAULT NULL,
  `site_email` varchar(100) DEFAULT NULL,
  `site_email_pwd` varchar(500) DEFAULT NULL,
  `registration_no` varchar(100) DEFAULT NULL,
  `mongodb_install_path` varchar(1000) DEFAULT NULL,
  `databack_forder_path` varchar(1000) DEFAULT NULL,
  `show_img_code` tinyint(1) DEFAULT NULL,
  `bak_databy_time` tinyint(1) DEFAULT NULL,
  `bak_data_rate` varchar(100) DEFAULT NULL,
  `statistical_code` varchar(100) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_system_config`
--

LOCK TABLES `doracms_system_config` WRITE;
/*!40000 ALTER TABLE `doracms_system_config` DISABLE KEYS */;
INSERT INTO `doracms_system_config` VALUES (1,'前端开发俱乐部','','https://cdn.html-js.cn/cms/upload/images/20201006/1601965851944803438.png','https://www.html-js.cn','前端开发俱乐部,分享前端知识,丰富前端技能。汇集国内专业的前端开发文档,为推动业内前端开发水平共同奋斗。DoraCMS,html,js,css,nodejs,前端开发,jquery,web前端, web前端开发, 前端开发工程师','前端开发俱乐部,前端俱乐部,DoraCMS,Nodejs内容管理系统, 前端开发, web前端, 前端开发工程师,前端资源, angularjs, 前端开发工具, nodejs ,boostrap','前端开发俱乐部,前端俱乐部,DoraCMS,Nodejs内容管理系统, 前端开发, web前端, 前端开发工程师,前端资源, angularjs, 前端开发工具, nodejs ,boostrap','smtp.exmail.qq.com','admin@html-js.cn','U2FsdGVkX1+kjh0gX0XoVXVY2HMePl9jSXeosDx3o3o=','粤ICP备15038960号-2','/usr/local/mongodb/mongodb-linux-x86_64-ubuntu1604-4.0.0/bin/','/home/database/doracms/',1,1,'3','','2020-08-13 14:28:20','2020-11-07 15:39:13');
/*!40000 ALTER TABLE `doracms_system_config` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_system_notify`
--

DROP TABLE IF EXISTS `doracms_system_notify`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_system_notify` (
  `id` int NOT NULL AUTO_INCREMENT,
  `is_read` tinyint(1) DEFAULT '0',
  `user_id` int DEFAULT NULL,
  `admin_userid` int DEFAULT NULL,
  `notify_id` int DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `admin_userid` (`admin_userid`),
  KEY `notify_id` (`notify_id`),
  CONSTRAINT `doracms_system_notify_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `doracms_user` (`id`) ON UPDATE CASCADE,
  CONSTRAINT `doracms_system_notify_ibfk_2` FOREIGN KEY (`admin_userid`) REFERENCES `doracms_admin_user` (`id`) ON UPDATE CASCADE,
  CONSTRAINT `doracms_system_notify_ibfk_3` FOREIGN KEY (`notify_id`) REFERENCES `doracms_announce` (`id`) ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=2392 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_system_notify`
--

LOCK TABLES `doracms_system_notify` WRITE;
/*!40000 ALTER TABLE `doracms_system_notify` DISABLE KEYS */;
/*!40000 ALTER TABLE `doracms_system_notify` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_system_option_log`
--

DROP TABLE IF EXISTS `doracms_system_option_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_system_option_log` (
  `id` int NOT NULL AUTO_INCREMENT,
  `log_type` varchar(100) DEFAULT NULL,
  `logs` longtext,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_system_option_log`
--

LOCK TABLES `doracms_system_option_log` WRITE;
/*!40000 ALTER TABLE `doracms_system_option_log` DISABLE KEYS */;
INSERT INTO `doracms_system_option_log` VALUES (1,'login','doramart login，ip:127.0.0.1','2020-11-08 04:06:56','2020-11-08 04:06:56'),(2,'login','doramart login，ip:127.0.0.1','2020-11-09 13:59:04','2020-11-09 13:59:04');
/*!40000 ALTER TABLE `doracms_system_option_log` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_template_items`
--

DROP TABLE IF EXISTS `doracms_template_items`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_template_items` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `temp_id` int DEFAULT NULL,
  `forder` varchar(255) DEFAULT '2-stage-default',
  `cate_name` varchar(255) DEFAULT 'contentList',
  `detail_name` varchar(255) DEFAULT 'detail',
  `is_default` tinyint(1) DEFAULT '0',
  `comments` varchar(255) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_template_items`
--

LOCK TABLES `doracms_template_items` WRITE;
/*!40000 ALTER TABLE `doracms_template_items` DISABLE KEYS */;
INSERT INTO `doracms_template_items` VALUES (1,'模板二',1,'2-stage-1','contentList','detail',0,NULL,'2020-08-16 04:16:12','2020-08-16 04:16:12'),(2,'实验室',NULL,'2-stage-1','contentList','detail',0,NULL,'2020-08-16 04:16:12','2020-08-16 04:16:12'),(3,'默认模板',NULL,'2-stage-default','contentList','detail',1,NULL,'2020-08-16 04:16:12','2020-08-16 04:16:12'),(4,'whousing',NULL,'1-stage-1','contentList','detail',0,NULL,'2020-08-16 04:16:12','2020-08-16 04:16:12'),(5,'帮助',2,'1-stage-1','contentList','detail',0,NULL,'2020-08-16 04:16:12','2020-08-16 04:16:12'),(6,'服务',1,'1-stage-1','contentList','detail',0,NULL,'2020-08-16 04:16:12','2020-08-16 04:16:12'),(7,'默认模板',1,'2-stage-default','contentList','detail',1,NULL,'2020-08-16 04:16:12','2020-08-16 04:16:12'),(8,'关于我',NULL,'1-stage-default','contentList','detail',0,NULL,'2020-08-16 04:16:12','2020-08-16 04:16:12'),(9,'案例',2,'1-stage-default','contentList','detail',0,NULL,'2020-08-16 04:16:12','2020-08-16 04:16:12'),(10,'默认模板',2,'2-stage-default','contentList','detail',1,NULL,'2020-08-16 04:16:12','2020-08-16 04:16:12'),(11,'广告模板',1,'1-stage-default','contentList','detail',0,NULL,'2020-08-16 04:16:12','2020-08-16 04:16:12'),(12,'默认模板',NULL,'2-stage-default','contentList','detail',1,NULL,'2020-10-24 07:04:03','2020-10-24 07:04:03'),(13,'关于我们',3,'1-stage-1','contentList','detail',0,'关于我们单页模板','2020-10-25 09:37:24','2020-10-25 09:37:24'),(15,'案例',3,'1-stage-default','contentList','detail',0,'案例模板','2020-10-25 10:23:07','2020-10-25 10:23:07'),(25,'Default',12,'2-stage-default','contentList','detail',1,NULL,'2020-11-07 06:41:58','2020-11-07 06:41:58'),(26,'案例',12,'1-stage-default','contentList','detail',0,'案例模板单元','2020-11-07 15:33:23','2020-11-07 15:33:23'),(27,'关于我们',12,'1-stage-1','contentList','detail',0,'关于我们模板单元','2020-11-07 15:33:44','2020-11-07 15:33:44');
/*!40000 ALTER TABLE `doracms_template_items` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_upload_file`
--

DROP TABLE IF EXISTS `doracms_upload_file`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_upload_file` (
  `id` int NOT NULL,
  `upload_type` enum('local','qn','oss') DEFAULT NULL,
  `upload_path` varchar(500) DEFAULT NULL,
  `qn_bucket` varchar(500) DEFAULT NULL,
  `qn_access_key` varchar(500) DEFAULT NULL,
  `qn_secret_key` varchar(500) DEFAULT NULL,
  `qn_zone` varchar(500) DEFAULT NULL,
  `qn_end_point` varchar(500) DEFAULT NULL,
  `oss_bucket` varchar(500) DEFAULT NULL,
  `oss_access_key` varchar(500) DEFAULT NULL,
  `oss_secret_key` varchar(500) DEFAULT NULL,
  `oss_region` varchar(500) DEFAULT NULL,
  `oss_end_point` varchar(500) DEFAULT NULL,
  `oss_api_version` varchar(500) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_upload_file`
--

LOCK TABLES `doracms_upload_file` WRITE;
/*!40000 ALTER TABLE `doracms_upload_file` DISABLE KEYS */;
INSERT INTO `doracms_upload_file` VALUES (1,'local',NULL,'','','','','',NULL,NULL,NULL,NULL,NULL,NULL,'2020-08-15 02:10:57','2020-11-07 16:10:33');
/*!40000 ALTER TABLE `doracms_upload_file` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_user`
--

DROP TABLE IF EXISTS `doracms_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_user` (
  `id` int NOT NULL AUTO_INCREMENT,
  `enable` tinyint(1) NOT NULL DEFAULT '1',
  `name` varchar(255) DEFAULT NULL,
  `user_name` varchar(255) DEFAULT NULL,
  `password` varchar(100) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `qq` int DEFAULT NULL,
  `phone_num` varchar(255) DEFAULT NULL,
  `country_code` varchar(255) DEFAULT NULL,
  `id_no` int DEFAULT NULL,
  `id_type` varchar(255) DEFAULT '1',
  `comments` varchar(255) DEFAULT '',
  `introduction` varchar(255) DEFAULT '',
  `position` varchar(255) DEFAULT NULL,
  `profession` varchar(255) DEFAULT NULL,
  `industry` varchar(255) DEFAULT NULL,
  `experience` varchar(255) DEFAULT NULL,
  `company` varchar(255) DEFAULT NULL,
  `website` varchar(255) DEFAULT NULL,
  `logo` varchar(500) DEFAULT '/static/upload/images/defaultlogo.png',
  `group` varchar(255) DEFAULT '0',
  `province` varchar(255) DEFAULT NULL,
  `city` varchar(255) DEFAULT NULL,
  `gender` varchar(255) DEFAULT '0',
  `state` varchar(255) DEFAULT '1',
  `retrieve_time` bigint DEFAULT NULL,
  `login_active` tinyint(1) DEFAULT '0',
  `device_id` varchar(255) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=807 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_user`
--

LOCK TABLES `doracms_user` WRITE;
/*!40000 ALTER TABLE `doracms_user` DISABLE KEYS */;
INSERT INTO `doracms_user` VALUES (10,1,NULL,'grpower','U2FsdGVkX1+W3ht52R2KypsL7MatQakA/4dCd4xTjwF7gmyNiCn/1pazhqZRtx932AA3YlpVwfFWkWZAH6IP9Q==','67008078@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-08-18 05:37:12','2020-08-20 04:45:38'),(11,1,NULL,'tian137','U2FsdGVkX18HV1iYNfTF00RuY4jULyldp8c0QsxHOaTNTViR3nzCN447PTm+SwwGkKbiKhnOQPozsQ1t4C0iXQ==','137194128@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-08-05 03:53:45','2020-08-20 04:45:38'),(12,1,NULL,'xujingqian','U2FsdGVkX1/hLSmzByDYUlI6NEiDDVYTMkTzYJ55jONa6BWzGlGWtyOn27wZFETfkMJfUuij6FBAf0NkD7SDYg==','806687302@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-07-30 04:36:22','2020-08-20 04:45:38'),(13,1,NULL,'seomaster','U2FsdGVkX1/Xy6egNUQU+2PhZpoD2NTeYbZk8g8SiCAwHUHnmAnVzXEXJnhU8qEBuJZ+hSvunCZxGGbOS3qryQ==','seomaster@126.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-07-28 02:16:02','2020-08-20 04:45:38'),(14,1,NULL,'josekongng','U2FsdGVkX19+HYDzyY2px5mNaRtrnFKEQLEnp6nhv6+xI8whDpvtw488wD9J7crezbRCaIlFIqC967h8uq+kgQ==','wujiang_job@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-07-25 06:51:20','2020-08-20 04:45:38'),(15,1,NULL,'xiaosa','U2FsdGVkX18+8ASfQLcOwWAz5EgrpfoV5q/ZAVSO3O3IH/3aoTAHdle7lwc/MZASLl8aUn6HOa5xJ2TF5Vft7A==','1512894498@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-07-18 13:36:13','2020-08-20 04:45:38'),(16,1,NULL,'kfcccc','U2FsdGVkX1/Hgu1DGM6mrjp54XveBNu9+in7RB0GMN9/qp5pR2IBUf7QVOMTs8NzZpmlL0I5btkoGSl7wDxAkA==','294468242@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-07-03 08:00:51','2020-08-20 04:45:38'),(17,1,NULL,'songbo','U2FsdGVkX1+hF49Vpp3Udmu9FofJO9uuX3o4ytfhBadJHA5XTxMpp5l24f/z5DZLGxFHGIw4Olrwnn7g47XjwQ==','18910338836@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-06-29 16:47:58','2020-08-20 04:45:38'),(18,1,NULL,'ccfung','U2FsdGVkX18RtYyLLHfki+aa8BgCi5q9B24ynMIrFj2uBqm6JqnW5abhFlVpSisNsff0aC2UnPVAHUM+z6GK/Q==','chanfungchen@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',1593272146501,0,NULL,'2020-06-27 15:35:17','2020-08-20 04:45:38'),(19,1,NULL,'tomdwan','U2FsdGVkX1+F9C3O6zI/+ODcNRy0be8aR5cgjsme4QB5XPIpkVfWzcOzuLpmZOhtIw17sVvj2wkPdX/kBFFGOA==','429062670@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-06-23 06:21:50','2020-08-20 04:45:38'),(20,1,NULL,'jimliu','U2FsdGVkX1/46gnhyPXfMIAjybf7XskLSAGb+xQ+WiK1LtazuQ7S5FkyfbThDT1Na0T/fwJn9D6lSay/b6liFA==','1124779242@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-06-15 11:17:26','2020-08-20 04:45:38'),(21,1,NULL,'ceshi','U2FsdGVkX195+vbTskQUrodUZax0QnSwmXNdbAXQ3R791zXc1dE4kYjEQs0EAaQ2QAQ77Z5LrQavCi/jqPp5lw==','669476900@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-05-30 08:11:17','2020-08-20 04:45:38'),(22,1,NULL,'test123','U2FsdGVkX1+Av0Pwq/wkErebWt2DJz6frfBncbJbxL6UoCKsRwPLNi9I/B75NdofkhiJX/ielr5KHaZyt372sg==','admin@3389.eu',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2020-05-22 07:00:31','2020-08-20 04:45:38'),(23,1,NULL,'a4662014','U2FsdGVkX1+kpxnH2If/UL7LRsQF4a9iaoIxyXoKEjGELv7qY6lkpGTd9lgW9+Qhyz5dnBV0Q1R1nbZyGAtL8Q==','4662014@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-05-21 05:10:38','2020-08-20 04:45:38'),(24,1,NULL,'qp1781','U2FsdGVkX1/i/1ZCY3Q3knIlOCS1Sdi9dPBdO0PA40HZPLmrX+57+9Uw8TmJdxZPrLfRIHNd2DtgHGJpIQ9iqA==','qp1781@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-05-08 22:43:20','2020-08-20 04:45:38'),(25,1,NULL,'sunscheung','U2FsdGVkX1/ihtHaeQaCCkX73NcDlz1zQwSkY2A3snFOuD6lrwJVWGPX1tb4LHE0bqzev/uswDsgCbzJy5e/dg==','1259135417@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-05-07 07:13:25','2020-08-20 04:45:38'),(26,1,NULL,'thl9090','U2FsdGVkX19cf3Ac1F4tOxlBcIn/D4hfLawWaBYne/leD8V6PLVqaBZ7hH8mPRluKiXQdtXoidgL5ZjcqUeXNw==','thl9090@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-05-02 06:27:52','2020-08-20 04:45:38'),(27,1,NULL,'catndog','U2FsdGVkX1+u3bjU3A+R/YH2iiRRxseIFNJqyYAOBVBUOGRGc4SaZwVLpVOQMu1ubHMelPAxcfwggQmH1rDaXg==','qgzzz@126.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-05-01 13:47:33','2020-08-20 04:45:38'),(28,1,NULL,'julyeve','U2FsdGVkX19bwOrM2Ky6T02BbTQ/1O/PsYxZDfYFOtSRHewMvl5+YT7DAozUJEJPIKhO+qY1KR86K1cXd/OM6Q==','1985245638@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-05-01 13:27:37','2020-08-20 04:45:38'),(29,1,NULL,'chenhang','U2FsdGVkX19XsSViIBQSGp1rJv+HFUGVNSWL4Dfhz8I32uOo4uuUaYCQdRUIhVSzjpUmpewHw3dfcBCL+Gmu5Q==','m18574929495@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-04-27 08:01:14','2020-08-20 04:45:38'),(30,1,NULL,'ruxiao','U2FsdGVkX19+HXN9GBN0GR0XzZPABVEWawv6BMamq/6tBQ+ojXX5UMrf8YRwOfpzM6PMGuWkskpjmCD3aaTxCw==','seez@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-04-21 02:37:48','2020-08-20 04:45:38'),(31,1,NULL,'qwe123','U2FsdGVkX19By/+7S411GtKx81jOWuyAj4TJSR0uydOgpX06Dq9Hqfn27Go/EQlrPr/cZ1oaLuHm46+5cNOEig==','8695450@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-04-11 05:41:15','2020-08-20 04:45:38'),(32,1,NULL,'aaaaa','U2FsdGVkX18R45HsfEiLj9Tx/ylVjUsi/HIPoi0T8uSj+WhFQBR6bPx4ESnq82ODCcbBqPhnIJMaganC0vIyBQ==','2389251200@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-02-29 06:31:19','2020-08-20 04:45:38'),(33,1,NULL,'daoke','U2FsdGVkX19zTjlZuNarCr6aHoCWlzxI4DZGyHVngPpQxx/+qouh3Cpm/ReJYtiKpDzRcMjK/8mGPGHpiQdHSA==','305403550@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-02-27 08:42:03','2020-08-20 04:45:38'),(34,1,NULL,'jking','U2FsdGVkX1/Pi1gixgpFeIX4ICQdmQW1KWzNnQOE157o7DGkfQrLgqITnBDGhCdvANkQmN8R7PQHn9yB81x9vg==','2310523057@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-02-27 04:45:18','2020-08-20 04:45:39'),(35,1,NULL,'hecanaf982','U2FsdGVkX1+10PfY7AVn1Lps2suY6676LV/aFx4Ap91XNSYWvlcjwaW2UoNX1RK0cjZIcefS8NKOCdrGyVg5FQ==','hecanaf982@edusamail.net',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-02-26 11:42:00','2020-08-20 04:45:39'),(36,1,NULL,'Reversis','U2FsdGVkX19b6L+r8k1NZnZye2h5k1nHyqIh/xrFpW45dwOKNTBMZv5H9/jF32yUuVWou/ehOPKnzLrAaQtvXA==','cc.katala@gmail.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-02-02 18:49:43','2020-08-20 04:45:39'),(37,1,NULL,'handy','U2FsdGVkX1/hRvBLjiWqpnHjTvdhDUNKU2/VFC4XIgbNUYv77MVK1CtCN6UBA9tQQtbGaPuhEkqtCHBKULxZvA==','470190032@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-02-02 08:25:39','2020-08-20 04:45:40'),(38,1,'liangshao','liangshao','U2FsdGVkX1/hdknQMfV2naty7pQgOGEkUpitJ3IZWEUl1Ogg9NNduIlYs+WDjjL1EM6F4ME+/o9tivli4k4Tew==','877942720@qq.com',NULL,'111111',NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-01-20 02:25:28','2020-08-20 04:45:40'),(39,1,NULL,'doracms','U2FsdGVkX185VOXNesQg4Gc/uIKqkV7zXVjqjTbJwHOFqKFbuLaSj8i+OfTEqFkn8Rm3twsEng1FsdPqZS5tYQ==','690932627@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-01-14 03:25:02','2020-08-20 04:45:40'),(40,1,NULL,'jeson','U2FsdGVkX1/GmIgeklTbJJmuNe3Ysbd55qHmX8DiwZbiOzRw1zssa4svkolI6JB7JKzSEE474An3M0ZEGmKnWQ==','limits123@126.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2020-01-12 10:44:51','2020-08-20 04:45:40'),(41,1,NULL,'tanxi','U2FsdGVkX1/V9nAQfw2D3k9CYdhsMH1zJYCOea6XgmbSujDN4ziRnwv9iSHOfxTeMCbXtnmNiWCvG4hlbaQ5XA==','1832355298@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2019-11-14 05:41:45','2020-08-20 04:45:40'),(42,1,NULL,'yclqs','U2FsdGVkX1/aKXaEZ0C0SumaNdxEf16Tj1N4OoXGR2XQs9WACCPJiublCoqinHXhFqz095Op1vuRCBUvrX4Sdw==','yclqs@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2019-11-04 15:34:42','2020-08-20 04:45:40'),(43,1,NULL,'debuggor','U2FsdGVkX1++bzHvC3RSHObouQm6D93ZKT0lkLa/BR052dTrlxhZeToocsPbxPTZkoz9TSH1y9nb1JoExcI1pw==','luckdebuggor@gmail.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2019-09-21 07:51:41','2020-08-20 04:45:40'),(44,1,NULL,'tangchi695','U2FsdGVkX1+PTcFw7JrGVXf8GoICzBOHXXB1idLUiawR/Nog9qbUnQatKfQdcCh6lkDmqXCWGt8vg7WAx4P7+A==','695627951@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2019-09-19 02:41:44','2020-08-20 04:45:40'),(45,1,NULL,'ashe123','U2FsdGVkX19PjrPf/Lh6lnIvJjRjwdSftGZP01CQyuUJA3dNl0bRyTNm6Sw+IWPkVbLxiNqD3oXEAo4cqGl8RA==','1198249798@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2019-09-12 07:09:03','2020-08-20 04:45:40'),(46,1,NULL,'yhavrey','U2FsdGVkX1+NkmVDI2K815+J5fdlxxyyInBIdO6NIBxsxDtB9ij4GBlPE2cc4XE8sILCfad+heP8F4l4Wt+T1w==','1452732835@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2019-09-12 06:29:39','2020-08-20 04:45:40'),(47,1,NULL,'qsmoon','U2FsdGVkX1/8JFbeSVpEbgTQ93HRDvWgvofmpy+aekFBfK1hWe1w1zgwjxqJzY7zLPaVHFmtWqQmviIMkPaz0g==','154884138@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2019-08-31 03:15:59','2020-08-20 04:45:42'),(48,1,NULL,'ye450319497','U2FsdGVkX1/wf4+oQ6QX9nvdVMS9s7JixRtsw2sFz1jmog1WWleXAYwTkUrXyu+6jtQBVrIW5xM95IIvo0QvwA==','1098816988@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2019-08-27 02:58:49','2020-08-20 04:45:42'),(49,1,NULL,'dragon','U2FsdGVkX18xgXtr2JDrA28KcDVOI+qRhSolUKEiGpoTfeEviUsd8YNkkPe8uVtaqn/YQyHEl9GdoMer0kFDOw==','494588788@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2019-08-26 06:23:52','2020-08-20 04:45:42'),(50,1,NULL,'hujiaxian','U2FsdGVkX19AE1OlcfXoK1OoyAAY5BZI4eADBeCJIiJqydysc00NiiD26QJa0b9VM09UkwOtX3dewgXDJkE7PQ==','547897176@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-08-23 07:18:54','2020-08-20 04:45:42'),(51,1,NULL,'leochien','U2FsdGVkX19nm2v8uVyT4bGrQTKSzUkoDNtAkCz2/M5Zm6akpO0CX0e79DTvkRxnhznkZh1IUwXVLheVrqK2bQ==','m123321@yopmail.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2019-08-21 01:29:58','2020-08-20 04:45:42'),(52,1,NULL,'rockchao','U2FsdGVkX18GC4jPS4ve6MDZaGL1Nd15A164rw6pT1jnIIalhjnjl9K+oGmfvZHyaOZBM8vNJMLA6U7wfYDgIw==','10290568@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2019-08-13 08:57:40','2020-08-20 04:45:42'),(53,1,NULL,'ssccc','U2FsdGVkX1+Hnf4YEYFNvAvd/dYTrgfiXOKNfUeYJ5bL/6PkyDlST132AVc2Rq6ii8TSaaCs36WpWJn3MBT3Mw==','doramart@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2019-08-12 04:10:21','2020-08-20 04:45:42'),(54,1,NULL,'wangshu','U2FsdGVkX19ZresVOwD9xWtAmr+meQGZiIkWbnupabvt/+yPnY80mv/wPgXyUEZVDqPRyRZ55RgozGqKzisHkw==','ahwangshu@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-07-17 06:29:03','2020-08-20 04:45:42'),(55,1,NULL,'mychyfn','U2FsdGVkX1+GG9heFoE5xyYx5KDvQBlPqxbf/xOJX0zeEd3ylq/x+A1QZsV9A3w4aa+WzUQoC29Bo6S05wDizA==','931117355@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-07-12 11:04:51','2020-08-20 04:45:42'),(56,1,NULL,'yangzhijie','U2FsdGVkX1+t46uD2VUJwI6L0SjpR0n/wnNcIdsyPCvp3IyRj8tbX6Cj9TZm7nsJqU/i0Be8nqCuHnjO56Zipw==','yangzhijie1488@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-07-12 04:24:51','2020-08-20 04:45:42'),(57,1,NULL,'monster','U2FsdGVkX1947GA+epXGKGz/We7aA22/prINkPFEox7i2z6Fzv6wEQP1e9E38PT1omaZg01Mbr/7n56682JgGw==','chenwei_zq@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2019-07-10 10:53:55','2020-08-20 04:45:43'),(58,1,NULL,'Jordonwang','U2FsdGVkX1+fm5D5x7mQPOfeMj51vgQILVmkOO/UJJyNE+ARtSxt1HEsmGWR6eDHgOWiaBnHXXe76rIyeN3e9g==','jordonwang@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-07-09 05:46:54','2020-08-20 04:45:43'),(59,1,NULL,'guansaichuan','U2FsdGVkX1+fTU+DpbtDPSnZ5MIZ3I3XOeXOpqLEB9mZVdMAY39Ah1P4+rkLvpGIVSvvNK3FrqErW3RWj1JqZg==','gameips@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-07-03 10:08:27','2020-08-20 04:45:43'),(60,1,NULL,'spikedingo','U2FsdGVkX195wmX0HY0Mxkp0eKQrtirLgxldJwZeQXd7MhSqaGOXPtjmV90XFvrABMAFAZsUr1u8oIG3dPqXLA==','naruto4364@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2019-07-03 01:25:02','2020-08-20 04:45:43'),(61,1,NULL,'amir2090','U2FsdGVkX18i5HGr7rhNIbSReF33sI3kPXmHXMDbaYLgGxetV+WQTrnQstQDdbgU/eiZRt42FmzctQTZknSA6Q==','amirarabi1362@gmail.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-07-01 10:10:16','2020-08-20 04:45:43'),(62,1,NULL,'daodao','U2FsdGVkX19pRKHoOA8jeto1ILVt2flu9I5rYbUrQkWc4XlAdWbhaFYMPs2DvISLi4Q15PREHdTWWaBa8rIv9A==','540823527@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2019-06-30 14:21:11','2020-08-20 04:45:43'),(63,1,NULL,'fancc','U2FsdGVkX1/c0BIFPNu/uQ6BJwYDm/oSpaFS14X1jI4cIZw1I7KVX7lgyFsmloDPgmplkZoQO3WJMvpf4svHpg==','277126967@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-06-25 01:48:30','2020-08-20 04:45:43'),(64,1,NULL,'Ryzen','U2FsdGVkX1/PdaNeA7nV1/3dzi+g28PhkuGZff6pCJBBNbJvO+hNcxeeL7SCx4b0WmRQYNx5Qeq6/R0oGn0F2Q==','762876528@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-06-16 02:51:30','2020-08-20 04:45:43'),(65,1,NULL,'ss','U2FsdGVkX18qDXUn9E54rgowOcgFdPYfe11s/e6ktMjqnfWBK2ksRFsBM9HdFtMCC20ImP3mmjlBzKyXHub7Pw==',NULL,NULL,NULL,NULL,NULL,'1','这个家伙很懒，什么都没有留下','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,'ss','2019-05-05 09:20:31','2020-08-20 04:45:43'),(66,1,NULL,'doramart@qq.com','U2FsdGVkX19zL02M0yQW289TkK3IwkZztno9CE9WMMQ=','doramart@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2019-04-25 08:22:40','2020-10-02 15:53:35'),(67,1,NULL,'lucky','U2FsdGVkX1/C8n4IPwXfHFVa54hc8L+fWjPnU7AQ5ABf5dRj00DktlLT6ubvPGSGxArXe5ZQzrgLTQERS6g+Ow==','201553588@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-04-23 02:23:35','2020-08-20 04:45:43'),(68,1,NULL,'qqwangzheqq','U2FsdGVkX19SHa1KWc6IfRbX0RoLKLdFi/40k5CULxKZ7Lt+sD9N7kiX/oAojmDoCpQCo55BJrbAv2jQfhWaiw==','qqwangzheqq@126.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-04-22 12:17:15','2020-08-20 04:45:43'),(69,1,NULL,'wuhanlee','U2FsdGVkX187tx9Xqw2Ewls+XLpqwEJn1RFvwpyO9214xMDM1ND9dmhtJ715KhDkHPIs3Dxv2YhABpgt6unzKg==','lee@163.com.cn',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-04-22 03:01:36','2020-08-20 04:45:43'),(70,1,NULL,'z123123','U2FsdGVkX19tPYIFv9DS+udtdS1pTSgCmFXgPt0UDuX+t03y+JOtkmE2Z203XgIA9e/DrvUqmFLRJZG5CyH7BA==','1250198256@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-04-21 06:10:35','2020-08-20 04:45:43'),(71,1,NULL,'chase0010','U2FsdGVkX18ClqQthwR0CI4unhTbGWwRhWrA4x5bQ+DuLW06vtBIMagUssNiqLX4ngk0WVVj0eb8PiHaRarzaw==','chase0010@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-04-16 06:34:53','2020-08-20 04:45:43'),(72,1,NULL,'doracms1112','U2FsdGVkX1/aYhS2LtXvL5NMWAe6rRbNK9fJiWq+yklS4GrES4wDhWeNJu+T2yay71LHS4KTKfgH6e8UEuGLsw==','85934305@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-04-11 15:06:34','2020-08-20 04:45:43'),(73,1,NULL,'user2019','U2FsdGVkX18WVR3H7lApmGPuDcQRnl2HotVGDW9MGKC9ZFKvn/eaRg5/gQr5yQnotAO6cKrNoe9G6RKaaR8AOQ==','1424912435@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-04-09 11:48:10','2020-08-20 04:45:43'),(74,1,NULL,'pigrange','U2FsdGVkX1/gBLdeNe14BdvMgKuAfBXraEcJo7bbMkknun+9hSPRvvZIFh+dNBtQzHQp5cL1/rHv1jJIaenY+w==','jaingpigcheng@gmail.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-04-09 07:09:57','2020-08-20 04:45:43'),(75,1,NULL,'wqffsdf','U2FsdGVkX1/LJOC3NMJBPJfPh8m3GbDuM+gtTRJvohHGUEExoydHumfm7FKkyj2utXQfNOmrbCtSMRJHLldmaw==','asdf123@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-04-09 06:32:11','2020-08-20 04:45:43'),(76,1,NULL,'promise','U2FsdGVkX18/ce6Q1wInqZgmUxdNNeCL1esd5M35lXK5hEP9XFMQeKm6HQtHRWkSn3zBYN9yUwl+gXZY/ZXGXw==','15110403757@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-04-08 10:23:32','2020-08-20 04:45:43'),(77,1,NULL,'mgh001','U2FsdGVkX1/LtHU4q3PWq1mVNKPzej7ej1xoq/LKA2YWdTsu6JBw1YDbSGUe1CnonOjVu7g1CiDvVYpdFr3MiQ==','muguohua@aiyunxiao.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-04-08 02:45:07','2020-08-20 04:45:43'),(78,1,NULL,'ad11min1','U2FsdGVkX1/QHd7Zj71U4UjBaZl2LpfIbKNyqKLbcPxMhzmoha5+x+5MfCoShhOS8Q07MD+0//bdzIHiy9fYlw==','1112807687@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-04-08 02:25:22','2020-08-20 04:45:43'),(79,1,NULL,'dashen724','U2FsdGVkX18DzNjqi6I6uG1MssGMDV+rJR+JzIMV/KgJRsPR8WPSghgxIPGWhdf8knOZ2RmfpoVDaFyV6hWUtw==','6995089@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-04-06 14:53:03','2020-08-20 04:45:43'),(80,1,NULL,'yushihang','U2FsdGVkX1/Ah8SOvrFhFGTqQzTjttVWE63Nj8Pl8w/58xfdW/ps7vSN+XESENlHQuINZpHEp+XIfMgYL+80Sw==','yushihang@gmail.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-04-04 09:18:39','2020-08-20 04:45:43'),(81,1,NULL,'mystic_yuan','U2FsdGVkX1+RXXagPAnzQpHTiyx3bIAIkZ+V4bPJSulgVE2HAcDVv0Rl7+OQcSRqUmFk1xuzY+Jgs8WGmxYFpQ==','673270171@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-03-30 09:05:15','2020-08-20 04:45:43'),(82,1,NULL,'mystic','U2FsdGVkX191NZO9Dy5aD1x/7EFvUKu6dI1rocZ9NX7OftNA4D8JQDOhzA2zJ1mP0sVUNdxzALtGJqi74769MQ==','yyp673270171@sina.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-03-30 09:03:20','2020-08-20 04:45:43'),(83,1,NULL,'kugua','U2FsdGVkX1+vJUT63KbiAsF8D40iY7xjb5aicRdCCsWyVNxkTxTjC3EfjjSO+GTLuFG90vauKJoU86fsfHxFpQ==','1522307870@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-03-29 01:34:54','2020-08-20 04:45:43'),(84,1,NULL,'doracmsTim','U2FsdGVkX190MhV7dwT4Otiv/7/fbFm6uGz7g1/ztoKUBBA64lOVnhOKpyvHqhmtdd+GSLz4onYDKr1PsL6fEA==','123456@QQ.COM',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-03-28 12:15:40','2020-08-20 04:45:43'),(85,1,NULL,'kkk123456','U2FsdGVkX1+9MYpaGiZngUuyr2wOikjbQB3MWVBOJpua8WBQ1njP0MHh9dTQ7Nx5HkrdNV/rejj7u5RG9PEeUw==','1@gmail.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-03-28 09:56:38','2020-08-20 04:45:43'),(86,1,NULL,'iloseall','U2FsdGVkX18CTyzvVqUs9cK4lsuvyUH0JE2fSdgYCJULeOZIjv3CVzy4PPZM/DefRMl3XbMUVtSpKQjoMRJTfw==','iloseall@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-03-27 13:02:25','2020-08-20 04:45:43'),(87,1,NULL,'test666','U2FsdGVkX1/RhEPSHGgYRcXgpluCXlMmkHMs564RHatbZ7/j86Kd4mrt+ArttzrnPBCSaz943l/QDw593ZnWrA==','test666@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-03-21 05:48:56','2020-08-20 04:45:43'),(88,1,NULL,'doracms2','U2FsdGVkX19irEdhwk9TSgAI+52IOptbH+/yEoKlRCVm1kNo/5LyYpy7QPqvXHUk1ePTDN4ia8Cy+CgOWQTqLQ==','afdasfa@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-03-20 08:22:43','2020-08-20 04:45:43'),(89,1,NULL,'sxq123','U2FsdGVkX1/1l8ToF+qMhUGhhUkY52VhhEm8IdJnsLVOej8gNUIF3n9WsxZbiY3LOsHOLiOlnjQzzSpvekQ+aw==','508049890@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-03-14 13:07:30','2020-08-20 04:45:43'),(90,1,NULL,'Brace','U2FsdGVkX1+O9evS0FgmSJx22fkRa6PZAszYJHFEDD1HwH+Ss+9ZDm4OkhX0OP8ppQ95LgaraxJkB/taediZrA==','cyonleu@126.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-03-11 07:59:13','2020-08-20 04:45:43'),(91,1,NULL,'s4444444','U2FsdGVkX18eIj8hM3T+XCkaQMYVA6UymUKqDv1o2sed43PMUuz1e1v+hwbhDV/R+f6amgFkEkyqJJq0GKdWeA==','123@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-03-08 08:22:05','2020-08-20 04:45:43'),(92,1,NULL,'qweasd','U2FsdGVkX18OygVWMeIdoLm+WiSW1z22dbobnTPseUoTRVL4e0nc8ifxesTjNIKkZDHYUAk17vc6zdCjjqU5GQ==','admin@admin.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-03-08 06:05:59','2020-08-20 04:45:43'),(93,1,NULL,'lindy','U2FsdGVkX1+Rmupy1srI0UrMq8/4q+2CaUnf1NeJsRHD5+gZcQ+jmssRZ5DoeoKYi2F5bBErOsg400OXSWYoFQ==','12345@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-03-08 02:10:55','2020-08-20 04:45:43'),(94,1,NULL,'logprie','U2FsdGVkX18hsM3UFdq9vXlBjGFQXeTBI6pl1mZws1QpktoUve0Hp1aVdGP1secL9s/i5nrPpdazxYH47WwEpg==','logprie@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-03-04 09:47:17','2020-08-20 04:45:43'),(95,1,NULL,'tsingpan','U2FsdGVkX18zj9aQc4K8ogS9cWZntkJIcLKqIU51Wno1jDRk+0w94tIamcbJfPEEyoKbPDM0E8aGtOcx3hJtEA==','tsingpan@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-03-04 05:31:06','2020-08-20 04:45:43'),(96,1,NULL,'pchuanjin','U2FsdGVkX1/hUjQLJBS7+F74zFzLPmz9MkgAy5/Ldsg84bjC/WFXoRUIBqzQ/FnOokSuKbHkme48OQ5SEL9Tnw==','pchuanjin2008@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-03-03 06:12:48','2020-08-20 04:45:43'),(97,1,NULL,'ylin123','U2FsdGVkX19NJrqpfONHH+9zRqcELFdduGMOpF4XaQKE6OtKwc5jCWj0iMRfpfTxHvoI+JGrQSoF/QtsomGxlA==','y0love@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-03-03 05:28:12','2020-08-20 04:45:43'),(98,1,NULL,'xiaohuan','U2FsdGVkX1+oXH4F7zCmRaG/ShGSXLotfMhLFDR+I2p9cnojoMm490yOx3iLGoGHhjTukIk0/iVuvRFyxe3tew==','762902674@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-03-02 12:29:05','2020-08-20 04:45:43'),(99,1,NULL,'qqbao','U2FsdGVkX1/BxRaLMV9yM4e4w9gnfzH39fgA8S+/y1syYHyWQpcAMKyebzDxEPn4cWyRuciDhwKBKKVXqAJGOg==','qqbao@fiberhome.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-03-01 09:00:00','2020-08-20 04:45:43'),(100,1,NULL,'Mckmaster','U2FsdGVkX18qCmd/6FdcnrX+z5Rt9p5EeaKhSmAhq0jUZajgj4rTZubQp/5SSSwyJbiePHWn2p7maeHrsC5QYw==','644027014@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',1551775906652,0,NULL,'2019-02-27 06:14:27','2020-08-20 04:45:43'),(101,1,NULL,'xueguoqing1','U2FsdGVkX18WOUzHC67908JfDQFHxQ/rikmX3tV1RcTfG2wT3puympZTzxgpAvWrfx4NayGUk8Y3/AH1+wsXNg==','1531303507@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-02-27 01:07:00','2020-08-20 04:45:43'),(102,1,NULL,'muxiv','U2FsdGVkX1/RbelSmsvwn9pV+gmUbeqg7QLx0CEIMGptnPI95duxROjy18OQAOEvV6hF+RP4mKTfkU0aF4a9nQ==','i@muxiv.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-02-26 16:32:42','2020-08-20 04:45:43'),(103,1,NULL,'xueguoqing','U2FsdGVkX1+Xg6ASRlyQqIR3PRu69G03SwP3w1iVDajrzdaDQixXtRMPDuDzMlUTVuHvzZ8rgK1t5F5p6DjMnA==','37136812@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-02-26 09:51:49','2020-08-20 04:45:43'),(104,1,NULL,'Tm1111','U2FsdGVkX183EAf7gA6c5rOPDh3zf7R6Qb2eqf1r33Qitk4VqmWwcsH1t9IehkZHQNFzoRSmW9aain1pIDVo0g==','1222@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-02-26 09:39:47','2020-08-20 04:45:43'),(105,1,NULL,'demo_z','U2FsdGVkX1+9fmGddw86makPUzysmXJkp9o6QJQntihZgnUZTzMRvJ8HjOQ9Zri/dF7jaRhHDeaVUBR2yIrTDg==','894164071@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-02-25 07:08:18','2020-08-20 04:45:43'),(106,1,NULL,'demodemo','U2FsdGVkX1+uPiVgYsScdEym4maV8iF2kbXKUJjcIsQfq65kcDDCypP4HIBGrNu/6bKL0xAVj3IeoGzL7v5ytA==','demo@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-02-25 05:00:41','2020-08-20 04:45:43'),(107,1,NULL,'loaden','U2FsdGVkX19jmw2IEuNIH68bjUu6P3/bKF850UEDW1YWjJPbejZP7LX3kSPJcc1pOkGgipwOo/aB17NZTfnabQ==','inbz@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-02-23 03:03:46','2020-08-20 04:45:43'),(108,1,NULL,'herculeshu','U2FsdGVkX1/Arm8NyasspqAYiscZsXqxKtj5IQSwucabCo0LZi3Pwglb7iU6QGSeClQnY3ncEemFAE2cchqzbQ==','1743027186@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-02-22 07:19:27','2020-08-20 04:45:43'),(109,1,NULL,'flywang0801','U2FsdGVkX1/9ZaUYdbAlO45XSFaq8GPF6eRLo1Q8ytwNPCFPqNZ0cDeJfTIFYy/ltqThqp8xHjQMJOTo70PE9Q==','flywang0801@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2019-02-20 03:53:22','2020-08-20 04:45:43'),(110,1,NULL,'doramart1','U2FsdGVkX19pRtH6P+2D+Cr4Tc7ucILSQZpxe4TqMXg1Y5yzW0eRWMjVFNFuoI9yHD0YHuyNfsopYZdwLHTwbQ==','adminxx@html-js.cn',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-02-15 09:15:18','2020-08-20 04:45:43'),(111,1,NULL,'tuzhou','U2FsdGVkX1+OqJTdDYC6u7+GQECxoIqAc5DH8zqc52nkFiumSgFEZYKnWuTeURT4YT5HKERYp6ftAts3EYvcjA==','1257702737@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-02-15 06:46:11','2020-08-20 04:45:43'),(112,1,NULL,'fdhnihrie','U2FsdGVkX18s1PJkr8mQpusBoIKNL0pdWhIbAILdDOO+2LlDL1BaFHangR3T+bkD6y3tnZ3GnQBLDo+7SihWjA==','fhdj@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-02-14 06:45:18','2020-08-20 04:45:43'),(113,1,NULL,'alphb','U2FsdGVkX186vMox/YE5CGdpZx1mfRGOvoL0jyULPZibnyXXUVUPqy8VU0TH1izImEraqAmPETGOlFoc2qO2Ug==','a@tok7.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-02-07 08:25:58','2020-08-20 04:45:43'),(114,1,NULL,'houbin','U2FsdGVkX1/EJBMR11a/jlJ6CiUTOPHFoJ4AxIiFJuGIWI6SZOdYiJdcmRyYrYdV0G8AnvCGdmsNro/AiuzLtQ==','474151949@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-02-02 14:26:03','2020-08-20 04:45:43'),(115,1,NULL,'nealke','U2FsdGVkX19g8q+Wji3uyLPkIg3ZWkXDfe7DGi1jzk/pnPOWzvp4UhPN6o2L7exjhSiDgti8hkDqHfWXodK2qA==','kewy126@126.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-02-02 08:19:16','2020-08-20 04:45:43'),(116,1,NULL,'itshao','U2FsdGVkX18Zm8tSmUgSj/46q5M2WnLMRMr3CJK3tPCMNt+QbkipiE537oQFlGoBNa9N59R31ldtPPrzWBC4nw==','itshao@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-02-01 05:55:02','2020-08-20 04:45:43'),(117,1,NULL,'lyz940419','U2FsdGVkX1/bPNWLYXNtvqZwlAB3iXCKDpWy87Cry/XTdoBTcQhx+2SamiR4kgCzAtzNJKAqEI+40slWxH207w==','804373780@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-01-31 07:32:37','2020-08-20 04:45:43'),(118,1,NULL,'hacker','U2FsdGVkX18rqkJHuyAMpoORtf6zkq2SUcH6AKuH9pNwbwEdfZedqJo5TyOQmPrcKDs+e2cVV0a0Pl8hjQtXSw==','hack@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-01-28 12:30:29','2020-08-20 04:45:43'),(119,1,NULL,'testtest11','U2FsdGVkX1/jQjgEuB/zEFm/SzKNlFsgtntEJ0mWefQfaTkaOHzPridQjbyAG0gtq1oWlNHitZOv3xthsJwy8Q==','tessdsada11t@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-01-28 12:29:38','2020-08-20 04:45:43'),(120,1,NULL,'fdyufeng','U2FsdGVkX197CmioEkqqOM5e/6Ym+o3W0IQXdoLK+NYTlDORVhep312ux3mp6u77GTE8LvHFFr/HR+iOf+6gUA==','fdyufeng@gmail.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-01-28 08:34:35','2020-08-20 04:45:43'),(121,1,NULL,'flood','U2FsdGVkX1/hrl29a8UG1eDQRoWiOwdNuLRQWAfqRJ/r1Gp3/tgqHL4SWh7ZN7IoPz5NhBK9Untlxtu5omGOtg==','4352769@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-01-28 06:57:57','2020-08-20 04:45:43'),(122,1,NULL,'wmuiwmui','U2FsdGVkX19YC6MRttmdfh5xRYpqu1qoJlryo8Cjz7vLc12URgsJNqezQSBieNG//1iIqo7SHtdmb/KwHSO28g==','22337383@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-01-26 14:28:40','2020-08-20 04:45:43'),(123,1,NULL,'heyyok','U2FsdGVkX19xRuzCfl/wJSdMjhZjuctABTXeDahTUSDn4T8VxKlESr+6bF7n0n/WG1hW6UTDk0heNB5crsef3A==','heyyok@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-01-19 05:20:23','2020-08-20 04:45:43'),(124,1,NULL,'q986171791','U2FsdGVkX198eVusz70ADeQdcj+Gn9rJs/jwKxZc73EtUc7Oat/n1LxYEatsbBjjaES7+MWYa1hyp2gnh2dy7Q==','986171791@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-01-18 04:33:10','2020-08-20 04:45:43'),(125,1,NULL,'doggou','U2FsdGVkX18mRE4szNyMLKoVz8Amqu9JSpPel1j9PYutkmNz2lYlJGTxDkCc+M3rHWA81QlL9Jn9aEjejJSkBQ==','3206471755@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-01-16 10:34:44','2020-08-20 04:45:43'),(126,1,NULL,'dogdog','U2FsdGVkX1/udJAoNCrgUNBfvGSTp96wc/ORELdk4LZCxFJl/l1IlkJhjOTpfmmm1jxps7Itv+xXMcmsu3026w==','437399538@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-01-16 10:32:10','2020-08-20 04:45:43'),(127,1,NULL,'jinge','U2FsdGVkX19j55ZLEOJs9Uas7gjlijdVaZU7C0f067o0lvgh89RdIjeWe+3bSerUwsrdJ529BIFO4aj2bhlxFA==','2961120116@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-01-16 10:31:26','2020-08-20 04:45:43'),(128,1,NULL,'tester1234','U2FsdGVkX1/++jccn1+nt4pNa2NRj/cplo28zDG28eP4R9P76r26ZaRHX5dgalRpmBgTARi5bwQ5OH/85cU40A==','tester1234@demo.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-01-16 09:24:37','2020-08-20 04:45:43'),(129,1,NULL,'jonnie','U2FsdGVkX1/E1xfddaFt+040RUt1bZQ6DQlYD/UHIIb77DHZzjdxVOfEV3aQmmheiixd34vDWp0OvQlD2A19XQ==','jonnie@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-01-15 21:56:44','2020-08-20 04:45:43'),(130,1,NULL,'lixiang','U2FsdGVkX1/nvOvBV+WmGmvk4kIZr6ANiODsGUprEt0tGI+CI0MYUAnVKUkNT5Fdvp7gCqEfBSbfiDn2EJbJJQ==','1968741479@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-01-15 06:24:16','2020-08-20 04:45:43'),(131,1,NULL,'jack00144','U2FsdGVkX18q5IgAFepbn9aX23NK1YZbmRJj1REAzV57MAxeIP7iA0ebF18nIqRTmbaMvdfmIhh0dUaHvBnqWw==','jack@21zv.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2019-01-14 11:37:35','2020-08-20 04:45:43'),(132,1,NULL,'sweet','U2FsdGVkX1+UKcrS0saFsDdt3za3HEVArLJNWO/MLKmvZe4ALVe+Uqgi2l1y0VtUBd74ADZxAr6FbltXTg8q2Q==','john123951@126.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-01-12 08:28:08','2020-08-20 04:45:43'),(133,1,NULL,'wuzitu','U2FsdGVkX18pGSfZDswRNIIlpI9OPpap2OWybBzbNhZZJflgcugEm6200+cx8QE+2L+sLrvWsoyea2+PYp6nog==','947798834@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-01-09 00:36:41','2020-08-20 04:45:43'),(134,1,NULL,'penggensheng','U2FsdGVkX1/uy9kn6pqYvQ47qP5GaQ4al3TkxX9LQj+P45u9Yoa1kyEQbdZYtFxajmCzJZ1cbjnHclhyYcVxlQ==','pegeset@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-01-05 16:49:05','2020-08-20 04:45:43'),(135,1,NULL,'TMcccc','U2FsdGVkX19LK6EAzVQc0/E28ZWEVrKrPqpurf6wUCayhrh+rh019EiKbBgFlHfwW+0LRqsH3Pku+rWRWWyv+g==','273802005@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-01-04 13:41:49','2020-08-20 04:45:43'),(136,1,NULL,'chorylee','U2FsdGVkX18/N6PJa7TyPj0NqVMLbDh653mZrrSk4kjUEMTOKDCpphNrqgbWfJzklBt4wo7aSS2CSJlMl4NuRg==','chorylee@gmail.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-01-04 00:28:03','2020-08-20 04:45:43'),(137,1,NULL,'rwl123','U2FsdGVkX18qS/s47DMGdFuQmEN6pdb2fs0HRDOMlc7I0+lKJTBhBaifumW5AJp11uB/Xs9y05RXBR0a8R1iWQ==','rwl123@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-01-03 09:10:47','2020-08-20 04:45:43'),(138,1,NULL,'gvi80705','U2FsdGVkX19Nkp7MtFcR5buZt3lMdiER0fQtMPXJi04rrpSX7Vl6M8IE+Uc+eGV2bNN+0Lo5raqC9HChv0ROhA==','18201137@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2019-01-02 07:27:46','2020-08-20 04:45:43'),(139,1,NULL,'mabyelover','U2FsdGVkX19ssEvs0rI1LhhYzXXEAqwH3Bp20m5U7/gkCH8LUo3ALYhHhiSFPUi6G7+xRy5zoQW88x4tU1iMMA==','94277388@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-12-29 15:51:03','2020-08-20 04:45:43'),(140,1,NULL,'sam97','U2FsdGVkX19jlL7ClCgF5dutoYbLJAGo/ca7M1+qSbXHH58yutiNkkcb+ZNekShKmvJim1bHZ8dWBv9IBD+GzQ==','sam97820@gmail.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-12-28 07:40:56','2020-08-20 04:45:43'),(141,1,NULL,'ant001','U2FsdGVkX1+sDaGTIhathPW10n6gkzsdia88X42/i/DKjvzPpX1Ynuktiq0th4i7VWbJQbr4ady1gplicHF9Xw==','ant.cn@outlook.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-12-26 07:28:34','2020-08-20 04:45:43'),(142,1,NULL,'cjy123456','U2FsdGVkX18Advqq+Wgufdv2+I6vWgJrJzGnxdEWCoW8Cz8zuohtFtoCeAUJIb3zpZznGtpLv9K1Rg7i3RugjQ==','1137534522@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-12-21 06:27:48','2020-08-20 04:45:43'),(143,1,NULL,'seeingcn','U2FsdGVkX1/CiQRUpHiMbn1wQpoMkI+ldAzK/iNG9ExsODo/+c/eqI/qMlZ9bhFIIzz9g8KZWdB0wZU+lmoSkg==','978718@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-12-20 08:19:50','2020-08-20 04:45:44'),(144,1,NULL,'leoman','U2FsdGVkX1+P6bdV3iiCjsXZXkLU+/Q8TG11NNhxwHQC+3kOtEpYKZiGkDVcttEtISj1jA5yZvRh8SYSnyWhxw==','manyi_988@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-12-19 05:30:03','2020-08-20 04:45:44'),(145,1,NULL,'cococo','U2FsdGVkX1+vHlhgtia5NPMBT8A63PyJ2rVesk0b4csR6enfXfw6D6wj04cm2odSt15IqhTm1iQggCdI1cLbNg==','793664261@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-12-16 03:02:36','2020-08-20 04:45:44'),(146,1,NULL,'GG_Jas','U2FsdGVkX1/TaztePjNyVin+4RR5iHywPr4ULVMMu1EQlSwcQM14C85BXiOBKuNNRWkWHH62SWb0cSuKpbwmog==','1300341068@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-12-14 06:44:04','2020-08-20 04:45:44'),(147,1,NULL,'littlebuzi','U2FsdGVkX1/SiyVZSeDsnLOV+XSbCfp7vQUZ/+owzZoFpW+iGysceoT6dorfrVjWj7GyYpIt3DOEFPoOnVv5xQ==','501596098@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-12-13 07:14:54','2020-08-20 04:45:44'),(148,1,NULL,'wangzf','U2FsdGVkX1/RFQmt83W0n9t9SCBeBVQw4IGEA96HhhA9Q+sd6dcNgifQLTECEQ2p6JY3V6XEz7ISqzasppZI0g==','wangzf_no1@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-12-09 00:19:23','2020-08-20 04:45:44'),(149,1,NULL,'PandaTsui','U2FsdGVkX1+wqq/wJmvFZXwNjhhnQ8nQ8QuuT6D7RY4LSV34wctTMgVvAD4lOGO28BbcQipvb0FuVw7HAxmyVg==','mr_xuxiaoxiang@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-12-08 13:57:53','2020-08-20 04:45:44'),(150,1,NULL,'software','U2FsdGVkX19+4hA06EFugImBzRC50ej2K+bHiLU64mY6sT77qAULr/wJvrbpFnUVSwrUjbPyqSYgEv6X78MX5Q==','lskinc@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-12-07 05:05:33','2020-08-20 04:45:44'),(151,1,NULL,'chaochao','U2FsdGVkX19lq4pBtlqLNP/Zmf2/UmSVd1p5jDEyZysLkAlxf4zipPYNok3Xqa9bolLtZZR4c0Kd+viah9N2HA==','2160196182@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-12-06 08:19:35','2020-08-20 04:45:44'),(152,1,NULL,'wys_liaofan','U2FsdGVkX1+HBm089RvQTXRzns8Ivk0kPAYWswbsC1YBzfBewuMSCSIOtzevTUkLZFal4JRnHPeKMWp8RFcALQ==','wys@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-12-04 07:52:29','2020-08-20 04:45:44'),(153,1,NULL,'lmr2015','U2FsdGVkX1+r2jbuts3oieBN28R8PbfM0q9n5nkONH6pDTJCLX9tqGeTHRBJqB621SNiSoQNYg/+uTQISKzV6A==','lmr2015@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-12-03 06:11:00','2020-08-20 04:45:44'),(154,1,NULL,'t123456','U2FsdGVkX1/bkPBzsYLEvpMoFrmSjuf745pfHGoEuyd7JZPzDFyt0WwkN5ult+DbFo/BukMkKjg74/kJD4xwCQ==','t123456@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-12-03 03:56:52','2020-08-20 04:45:44'),(155,1,NULL,'admin1234','U2FsdGVkX1+CSRvyor8FAiOn8EBlttoLlv0nsbkkwcSjLXg3AAq0kCkRiFpTvnGuDd9QwHkb+CEbrEh1BxGBvA==','doramart@admin.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-12-01 15:22:35','2020-08-20 04:45:44'),(156,1,NULL,'a123456','U2FsdGVkX18dewSMpKH1hb8/kXGfwtLY2EdP8FTKkECYagT3xPCciUXcw0csZ5eTI3kAfMnNi2IsRodjuL5UZQ==','1054949000@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-11-28 09:02:56','2020-08-20 04:45:44'),(157,1,NULL,'test002','U2FsdGVkX18yI6bBYTcSUl/idPY1/pVVTy8jkICqueerR4xvv2tIRGI6j3ii20AvCrGLd/vviYQMj/3t7ckSRQ==','glzxm2000@aliyun.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-11-27 09:20:53','2020-08-20 04:45:44'),(158,1,NULL,'liaofan','U2FsdGVkX18e0PTduCRJcki1J+XPGFg5F3v2rBwM7CCpswALER5is6zVwT01MDz3l1V63NY/w7uUJ9KC7SJlMQ==','liaofan@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',1543909877180,0,NULL,'2018-11-27 08:21:48','2020-08-20 04:45:44'),(159,1,NULL,'doracms111','U2FsdGVkX1+1WPVAeAjrcgyG9BFVOO6i2UDjlrzNpv2+4z9sg1INVcSftszgRWttGG16u5Pj/gbkeir+0ryAJA==','sq@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-11-24 05:19:17','2020-08-20 04:45:44'),(160,1,NULL,'w40911273','U2FsdGVkX1/cDN3XaY6612xRrOqM7fPT9BciLDlT6hDA8mI8p1+qUJYhAq6UHz5vjW9jlC1cwVxPB59qiT2iMg==','40911273@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-11-23 14:26:39','2020-08-20 04:45:44'),(161,1,NULL,'ancjf','U2FsdGVkX18bA8RjUfDAh7uGfpG4MukG7lwmc7dT2zmn3mKdqY5JkB661W3ErCydsuNgJYKuf9u4tDNs5JhfAg==','ancjf@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2018-11-21 07:46:39','2020-08-20 04:45:44'),(162,1,NULL,'user_100','U2FsdGVkX18cse/rydFRk5DciQBxUj9TeqHHuO2NsYuS3VQgTY2ITq25NMg0SM4tufQKPUBpUh0W5JXun+bCQw==','huaquanqinghao@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-11-20 09:10:36','2020-08-20 04:45:44'),(163,1,NULL,'wys_lf','U2FsdGVkX18VJnRDEHYEuX6kTEeBpJR0cq/D2L9k97flK/+J304gg9/ffPFjBRr1hCm9vktHU+ypEBd02BSGow==','wys@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-11-20 08:28:27','2020-08-20 04:45:44'),(164,1,NULL,'sugar','U2FsdGVkX1+fQ1Ej6vYlH0teRdDbKEdF3r5hib5zzzljMrlWJTjehTRE9k259QqXshif1G7LNA3zbG71VNiGwg==','154806826@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-11-19 03:56:49','2020-08-20 04:45:44'),(165,1,NULL,'voezy','U2FsdGVkX187/I2vSygQCKzgTBitl67zO2A/fO+37J5fqF7mJC9DmP8yTjnb69Bd3nJSAiOW/rsnO1kI64UpFw==','voezyy@gmail.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-11-16 03:49:36','2020-08-20 04:45:44'),(166,1,NULL,'fgreberb','U2FsdGVkX18KsfIO7crheI6hdr/Lci58Rso9M/4dGbSJ7DQHHXQQqH45VoHlGS1FZsEoYPW1NJVfF2NUtZqRCw==','qqaass@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-11-15 09:54:05','2020-08-20 04:45:44'),(167,1,NULL,'SniperXu','U2FsdGVkX1+cE8EMcS5K0XaF4cUINAe6fyT7e8K6r7sMVkWYBYqOGRYhAVf7bq8exBpnlBFf0V0CegLKTLc0uw==','398622064@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-11-13 14:32:20','2020-08-20 04:45:44'),(168,1,NULL,'succpeking','U2FsdGVkX1+s0waRjwZAKzN3SN/z5h6FoqAzm1UXXxCh5HOrEjVtV/j3kmjGLMTTDmzUPC7q2+v9osuq41OGIw==','succpeking@foxmail.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-11-13 14:05:15','2020-08-20 04:45:44'),(169,1,NULL,'yang141','U2FsdGVkX1+OTnpaP+UFzdUI1X4TumPcu4rw07teganKQDNgLMszLN/DoOC9zDt5X8cvm04C5lM9CWditYCK/A==','yang_141@126.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-11-09 06:36:14','2020-08-20 04:45:44'),(170,1,NULL,'wyslf','U2FsdGVkX196A10P6QZLWlBAx0i+aU7H09wUXAXh+iSraJnLxUwhbnp2a6mURnw871VuK5olklhKS+wbS5KR7Q==','wyslf@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-11-07 05:24:29','2020-08-20 04:45:44'),(171,1,NULL,'longlong','U2FsdGVkX18lHEFTcoYpJWT14N3JDeMjWPzKLaNwwZjtqM5Trl7/XNxPfL3VKNlNMfpfCJnueDlzC0hdaDToLg==','1301242852@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-11-06 14:52:50','2020-08-20 04:45:44'),(172,1,NULL,'xusss','U2FsdGVkX183dPrVqQLACU43k/GLt3qchy8cz/6gkQTknSN3Muwrq4tjqS6RjqH7B2LzEg5effDEl3rdJNiUnQ==','382225685@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-11-06 02:23:56','2020-08-20 04:45:44'),(173,1,NULL,'zy6666','U2FsdGVkX1/ZBUoa5EnSIAlcnEc8IvL6MMLq/RFZi1d/Z0XS7iSZQKY854G/EwFvuKW9K0jnun8ftUnhnEaKag==','27020886@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-11-06 00:36:46','2020-08-20 04:45:44'),(174,1,NULL,'luofan','U2FsdGVkX1+FbjXE8pIsE3omhBsrWNNRn/8Lgfee2pH1zRGKH2UH2PRzKRusfESGVqS/7fS3BKaq955+Lr0ZHw==','luoxiao492@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-11-05 06:59:46','2020-08-20 04:45:44'),(175,1,NULL,'yyyccc','U2FsdGVkX19XoY7biMrbe1reEMFFTi+fQV8ca2jdPNY3N+E4nNRdnUFhQjQxQHiI91NClSxGAox04sKe9TA1cA==','397165051@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-11-05 06:28:40','2020-08-20 04:45:44'),(176,1,NULL,'doracms','U2FsdGVkX19rJMVdQjQwyNhPCL1Aq3A/6ChuceRtF/UJF/fFn+foBy3SnkqFsP/84pexwGD0GsC60stRY2ndYQ==','510754059@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-11-05 06:25:52','2020-08-20 04:45:44'),(177,1,NULL,'quinn','U2FsdGVkX1+Wgfr66dcOUsXKujkmEmJhzp5rW8yUSFLUgHinRVUBBM+ivCN9SQ22Mx7gvEbwWLrqmDdvxdDS9w==','445635121@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-11-02 03:04:32','2020-08-20 04:45:44'),(178,1,NULL,'qw123456','U2FsdGVkX1/kb/kGTwOB66QeId/M9MicJGfhOGOeSb5pv+XS80iTVMxYTEvQkiOLuzeN7STduXAmgGdMiANxHA==','111111@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-10-31 14:05:32','2020-08-20 04:45:44'),(179,1,NULL,'goooon','U2FsdGVkX1961nRiRa5nBIm+AeGvZOK4sUExobAH+3Nv4yGKg0p/7nzZ+H8twQREe+9KiVtRedxnR0i6sGNLuQ==','goooon@126.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',1540956344150,0,NULL,'2018-10-31 03:25:30','2020-08-20 04:45:44'),(180,1,NULL,'zx122248006','U2FsdGVkX1/XpPEvGSdHXENISeyShEprbFTnqY8wRn66sH6VApcu+Hm4K++HTZUoa7t9riSiWVMHKPge4+bNqQ==','zx122248006@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-10-30 03:06:18','2020-08-20 04:45:44'),(181,1,NULL,'fddddd','U2FsdGVkX19XcM9F9qtmECvJzAJF+1Pk/LKkUud+bOtE69whHSkdv7HrsPkp9ptgdqmCaEf+noxrfyiDGBBYRw==','772853078@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-10-23 08:39:26','2020-08-20 04:45:44'),(182,1,NULL,'konger','U2FsdGVkX18Ac9sEeztAVqrmvASMAapfwQBIgJLqPOpoBSFmtvANARuRIlQlf8HFVNKb4k2Ab6dgpWQSDBt+ew==','liuliming@xinnet.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-10-23 05:24:36','2020-08-20 04:45:44'),(183,1,NULL,'yqfntse','U2FsdGVkX18t5BFLP+aMw4VH2DplKOeZ/QCZDtLO3BXieeJ5Uk2C+Tf4mObmrX2vpWIq0E8AlkQ5rZGSAmhoeQ==','yqfntse@vmediax.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-10-22 16:54:47','2020-08-20 04:45:44'),(184,1,NULL,'da7123','U2FsdGVkX1/uYRiOgBuRN+eHRjnFzNF/kjEM6fhxY2mEiWLwzdPc5J7nthdY1F8FWxOKNWlXxYP8bQleMMvcgA==','111@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-10-21 05:53:44','2020-08-20 04:45:44'),(185,1,NULL,'Test1','U2FsdGVkX18sgUnHm9399RQQkFjJAd1APHA3iVLCrr1ed+lfr0rYalyVZ5cfqqU1ETRRpp72EoXrSgtl0XKwgA==','24559098@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-10-17 14:25:05','2020-08-20 04:45:44'),(186,1,NULL,'myciey','U2FsdGVkX1/NTiWYUe0p0ZVF5rdK6hHRfBOm1dArmj6Q+3pm3ZeAkjBBpWKubcs0XPUGYRRVnHw+mSEPmbbnOQ==','myciey@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-10-16 08:04:26','2020-08-20 04:45:44'),(187,1,NULL,'woshi','U2FsdGVkX195GvisuELlrh7xuU04ixDGuBJ2ck9Q0JeItJO4QXhLIomFZmCqcE1+xRFBOxQ/srbN4tohAP7b/g==','woshi@woshi.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-10-15 02:36:01','2020-08-20 04:45:44'),(188,1,NULL,'ookk8','U2FsdGVkX18yFc0ZxaEXl30IBdzgEH4VrRJb7tyd9esWgfz5tqb/4sqphKsOkg8bQpKpFRQ09rrqWk4fdtmzCA==','kaifa@kaifa.cca',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-10-15 02:35:05','2020-08-20 04:45:44'),(189,1,NULL,'ccvvv','U2FsdGVkX18CLeIeBTNzoIZOYB/a+aHzKDsc9BZrEmSNSVsLbe2mR/PDOdQyNjtaEOWeeowvpsd60wIhmY+BdQ==','ccvv@cv.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-10-10 16:06:49','2020-08-20 04:45:44'),(190,1,NULL,'zdsss','U2FsdGVkX1+yzKfw01ISM+YF7gQJ66qteovMQYToR4jBk5jjWoV3YmDxlHvI0xnxfwHrwNgwf3jk4R6PBhjOog==','285085215@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-10-10 05:54:32','2020-08-20 04:45:44'),(191,1,NULL,'comegogo3','U2FsdGVkX18tu1zrGZt+tYuPOSx1xWWv9S/FpUQJ5gIyoSM/Amv+XLBVFL8p/Pf7ll7+QI6ID/d0mC1LfuS2JQ==','562700475@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-10-10 01:16:02','2020-08-20 04:45:44'),(192,1,NULL,'octopuswww','U2FsdGVkX191qqAxcQtL4zI32K6NscYuRqtdU966DqLQTjc5FlRDPEc6L1AdSljSz3oqClA5aaKjlvUjm71C/A==','octopus_mia@126.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-09-25 09:36:11','2020-08-20 04:45:44'),(193,1,NULL,'yefyu','U2FsdGVkX1/UVABuV5liHcZjhUfxVH162tGxrQ6fmEYPsfYMLWgubDdtIs77yoJZu1QV6+6cWYDqbweyvvoKtQ==','yefengyu.314@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-09-25 07:21:22','2020-08-20 04:45:44'),(194,1,NULL,'wudihaha','U2FsdGVkX19Y0vEohiAsYIPXdxa/DltrWLFPU1vplfsLzpcHj89/Hmf/ACAmgaMyqs7GXMwpmBe+M0cpX4hrMA==','937104606@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-09-21 10:14:06','2020-08-20 04:45:44'),(195,1,NULL,'wangzhe18','U2FsdGVkX18Efjfk+dnha8SSOEc2UHb7q1A6IAsvDgxOgqibD248P8PfgfvHASDntc8GgDd7YCwjFhQKgq/N0A==','wangzhe18@chacuo.net',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-09-21 03:09:36','2020-08-20 04:45:44'),(196,1,NULL,'uebary31528','U2FsdGVkX19q8VZItpeaxfEC2lNRpmQNZmfc71k64q4YtAAQF9s1DFXBGtCGpflJ8i83JVDSQh+cBOVtBI8IXA==','uebary31528@chacuo.net',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-09-18 10:10:46','2020-08-20 04:45:44'),(197,1,NULL,'test1234567','U2FsdGVkX18V8s2pPmuKIwMCU3FBfa1BbCtBURS3hCyYjI+E8nU1ZRnANBqeT+bnOeHJMZm/ujHk2T4asSQ48A==','test1234567@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-09-18 09:51:16','2020-08-20 04:45:44'),(198,1,NULL,'test222','U2FsdGVkX1+wTsYg9w1B4doB72cz9GfCRu/h5EnJu95KT9wUqzGmLGoTkJpUe/GXzNf8vO6+1+6ZdmxdMMyx9g==','1341758023@139.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-09-18 09:43:18','2020-08-20 04:45:44'),(199,1,NULL,'test111','U2FsdGVkX1+33Y1bJcnWurK0sOkTYly1k9FCJoJtrWU1fJFTh4Yqbe+p35l+fnDh0YCs4sKTmjJV+kXFBOsZbA==','13414689023@139.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-09-18 09:42:01','2020-08-20 04:45:44'),(200,1,NULL,'uuuuuu','U2FsdGVkX18hO+O+bZ7IUbFea7zqlwsNKKdVVOcOpQkjp0pdv7A4DPGhv1+r/X6CMPm0PIRXMFkqH2kSBImOJg==','uuuuuu@uuuuuu.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-09-17 20:57:34','2020-08-20 04:45:44'),(201,1,NULL,'budelei','U2FsdGVkX1/mul06szlcMVMAXOAkudrhN4GqiKT5F/ORxc9gdYfAl2ToCH+Mgd2lPxn758qiGHB+LvonH3vI4A==','budelei@126.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-09-15 08:35:01','2020-08-20 04:45:44'),(202,1,NULL,'stokis','U2FsdGVkX19FNMrsgoQaWTsdLrTA62hWcvu6gt6HCOoLABJN4wok3tiH/ygumF3oTSw+WnNiCHpqT+WLmwkCSA==','265565@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-09-14 12:20:24','2020-08-20 04:45:44'),(203,1,NULL,'oy_grape','U2FsdGVkX19eK1N3fS0upaZlawF49HQm6J+lpZso+KmsTpuZctdmuZhHZ13hIZ7zbEX7MYzlv+c9DqbFG3f1WA==','819291756@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-09-12 15:24:17','2020-08-20 04:45:44'),(204,1,NULL,'IT_haohao','U2FsdGVkX1+4Iyx0Bj1ACpzZ6TjMedoxelZ6OYxSUIVqlJjNbfOUDMXEpmGAxCcXzQVmtlqHwMrmHUkZiF2E5A==','137717070@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-09-12 06:34:17','2020-08-20 04:45:44'),(205,1,NULL,'liruiruili','U2FsdGVkX18YAjI3w6vvOps0y9Cy0+kfYrACu7uTYbBCywLObiAnO0ZzA/UIciJXG9N63Y7Dd+UKLqAH70xzAQ==','2417307363@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',1536630969867,0,NULL,'2018-09-11 01:55:48','2020-08-20 04:45:44'),(206,1,NULL,'lsy123','U2FsdGVkX1863xUT4ZxpdkmnA3U0gvBygF/6n0h9kATxlIZSjq2Bak366GOnyFZifZoSZVqz3H7NQu2A7Tku0g==','a7372321@gmail.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-09-07 16:43:19','2020-08-20 04:45:44'),(207,1,NULL,'ontest','U2FsdGVkX1/pLFE06Y4oLgILp+rrxDFpruKmzC8PQuyZg+g7FIfW3UxGE34UOTTvlBoIxroSvnfl4Kotl95gpw==','ontest@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-09-04 02:42:36','2020-08-20 04:45:44'),(208,1,NULL,'z22412946','U2FsdGVkX185xQnHMsD+O9+fl09X4Ur/Bn6f92O28AOz69QTPj4ULs414ZpafsxZx/PuKINQmvfaaczKYpD9lA==','1376774822@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-09-03 14:18:16','2020-08-20 04:45:44'),(209,1,NULL,'maxrouxi','U2FsdGVkX19KM1BQ7GYCvRwihC18Pb1bClx/++mlbEl4bFFXgNDJBy+AfcDkZG411MIQncBMQOgyoVY1alvNSw==','fwjtt@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-08-31 06:44:44','2020-08-20 04:45:44'),(210,1,NULL,'zhengchongq','U2FsdGVkX1/HSWdTZEV6TKY6csiIZvX2Uw7MNO64vkJ+XZBuJtVS7+gb0Zk/MptDfH9Wa11NcYoPkJ5RjPIsZg==','zhengchong@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-08-31 05:49:12','2020-08-20 04:45:44'),(211,1,NULL,'zhengchong','U2FsdGVkX1/VUcR471S3k1s+lDuDRwhAlsvVKml+8W3LQGXAiMlgdMRcx80h0211JWNkDnyDdblM2A0aKptNHg==','zhengchong@globalegrow.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-08-31 05:48:24','2020-08-20 04:45:44'),(212,1,NULL,'jakdosen','U2FsdGVkX1++EEzj8J/dwI5HL2t+a/voHo+E6Q01EdbiNLjJ567YR0pObV1cJPRn8snonPMPoJc25L4hV3A13w==','jakdosen@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-08-30 10:09:25','2020-08-20 04:45:44'),(213,1,NULL,'edward','U2FsdGVkX1/8VGDe2dV4u4qVu8jktG3JMZQcjFd4F4drwEhrcbRKBn7hYN6Wz4j+nr5F0M6AJFIhMiGNjzgUSg==','edward@leyoai.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-08-30 07:01:10','2020-08-20 04:45:44'),(214,1,NULL,'qwe532','U2FsdGVkX193LbtrD+3RoQZq9NJEcfFrhpd0qOnnkQx5TYBxglLKw8sFOm3JVUp9uNAmSR76zD26KMxvuezW3A==','qwe123@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-08-29 08:36:16','2020-08-20 04:45:44'),(215,1,NULL,'maimai','U2FsdGVkX18hau9IzRLDDuPAoossJ07UGj8N/2hDcNRFscezlBjwA+iYOgOz395STbKXc2CIdUA4kva1Q5BP9Q==','qizhang1@newbanker.cn',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-08-23 01:37:37','2020-08-20 04:45:44'),(216,1,NULL,'dou123456','U2FsdGVkX1+HyyNUS8W1vpkfubkveGQ9CLQvqUBv7bKJjdaMaxLTRuWSQwfK8Z3a3DQbg1qn981CgxjWj/yRnw==','995301135@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-08-21 09:55:24','2020-08-20 04:45:44'),(217,1,NULL,'guest123','U2FsdGVkX1+ABktT6rcNqPrO3cdn1PfzmYPfY1dDlMug9UmsJU1ZaH/hwj+eXRFSdN0HVYQ7Qszd5QLh2n8Utw==','guest123@126.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-08-20 11:55:19','2020-08-20 04:45:44'),(218,1,NULL,'lunhuimeng','U2FsdGVkX1+TadOKmXqT4etMZnCSOOOAWrKf/Xikbm0Ru2MxBKPxsaHdfe2d7b4Z74i7+qcD7bOouG6NkuPW4g==','lunhuimeng@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-08-19 01:11:35','2020-08-20 04:45:44'),(219,1,NULL,'sdongjie','U2FsdGVkX1/js56bbBF7S6i77uU8JEs1xRyKt/CSCvr9PI0trYE5RAL05uG98O7uuBGlCdI9D2oJ2kuWHPcpqg==','sdongjie@126.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-08-17 09:13:48','2020-08-20 04:45:44'),(220,1,NULL,'zzzzzz','U2FsdGVkX1+F03wYoFQuDaK+BifrxmUIDdY65CBn2Wy1bg9re3U7RZbtI0C34L2vxSSXgOXNGj3PPyzLXeHprg==','447324534@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-08-16 04:36:22','2020-08-20 04:45:44'),(221,1,NULL,'chenfenqan','U2FsdGVkX19OIlhGArplEbMs+S5W9GlHayS46DWsB6Q65X5qtdvJ7MUa3M+2MQBUIIFnh/ObV4PZFgeKZUF/Ag==','fenqianchen@newbanker.cn',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-08-16 02:12:57','2020-08-20 04:45:44'),(222,1,NULL,'yzb_you','U2FsdGVkX1+qb+R97/UeqkujDRsofktMvIS8aVdfvW5gpjSSzeEiItH9VUwn3t3gO2kCVc1ty0XyBokAO3p2uA==','595485548@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-08-09 17:16:49','2020-08-20 04:45:44'),(223,1,NULL,'gtx980','U2FsdGVkX18ceHXvWboWyOLiChqVzTu/ubaFm9r80xRC9cFZ7mOPVpoNSEnGgk5dfUaxQb3ohUif9kkBOlezkw==','1345221959@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-08-08 15:18:07','2020-08-20 04:45:44'),(224,1,NULL,'ylh76114','U2FsdGVkX18JCN58zfnmWMMSgiY/obIpm8ahTqlfhD71dhRkINwYnSb6AmtQL3+6FUdWHxVHTWlN7lfqrShRuA==','1773110609@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-08-08 09:52:08','2020-08-20 04:45:44'),(225,1,NULL,'meng123','U2FsdGVkX1+1UOOro06JqbOtkI4NgELCce7Dm9XDCCzAj1wjMGVX8lE95rACEJ7rxV0vlwfWwIBReVXA3uqHlw==','123@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-08-07 04:01:46','2020-08-20 04:45:44'),(226,1,NULL,'wpengw','U2FsdGVkX1/xL9XuMxVW+y/rm/kODS6TZnhn404MO0/V0OF8VpWFnNuxlWkCRonvlcQ9/CRXOmNGQuHm8Z8jpw==','1126490254@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-08-03 05:49:16','2020-08-20 04:45:44'),(227,1,NULL,'lysslyd','U2FsdGVkX19gDkEB1AHwZ+MWVLmz75rqTE86dVvlKAve0+TSNtYdgSiEJRUvKol/SP2Q0BQCyk3c1LzddnSCPg==','lysslyd@sina.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-07-29 09:31:23','2020-08-20 04:45:44'),(228,1,NULL,'zhangxuewen','U2FsdGVkX1+512m2GZyiriF63spBijOJ4VCdC9dlhZbOFN1dBrISjZf9z9mpa2c+pXw8X8U4qP7rDmKPlzXcSw==','zhangxuewen8868@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-07-28 09:23:00','2020-08-20 04:45:44'),(229,1,NULL,'sunner','U2FsdGVkX1+fe2NISro34iDqsiDgrPh9uVYI4mFh2t2pVRR+wpZkDkf7k52xK4hnmQIX4isskyh9Z8U0VGGqqw==','87491889@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-07-24 01:54:26','2020-08-20 04:45:44'),(230,1,NULL,'yves0000001','U2FsdGVkX1+2eDSNGqPU6r5hqnGTB1+yDgftPQ7HsEvd3CBWR0SpKsOd5tLnpvK87e2cytjrABbAhQRPATtAlg==','12345678945@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-07-23 10:53:11','2020-08-20 04:45:44'),(231,1,NULL,'mclovin','U2FsdGVkX19mkEk0sNssPSIZqywofjZObs/eUUBlBsUjrXz0XHBpkPJxCwYUfuFBCwuodd0Fg2dW2m4KjYt1QQ==','516911890@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-07-21 11:47:15','2020-08-20 04:45:44'),(232,1,NULL,'dyl445852732','U2FsdGVkX1/FAOJ4resD2zlowQgVsGYB+Omtuwgiv98t2WaqbUdJlHyfnpkNLOmvtofbtTCdbbpLcIwLjnZwIg==','445852732@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-07-15 17:58:40','2020-08-20 04:45:44'),(233,1,NULL,'cccccccc','U2FsdGVkX1+DIWZ6b0LEdwL6BL26z0kShDjJKgcvRKDBrWi7MOP6L89vl0id8DXti9PLb8p/rr7S2dZJm4aDBw==','1@1.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-07-15 05:59:07','2020-08-20 04:45:44'),(234,1,NULL,'chdyjy','U2FsdGVkX19V97gaS+BTYHFBl88OgZtcejN6QL6gu5yJGcONMNHao1XyhPLIHPHDH4KK1027Tjc+tSFgBIJ9Kg==','chdyjy@gmail.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-07-13 12:09:12','2020-08-20 04:45:44'),(235,1,NULL,'dettac','U2FsdGVkX18mYgtEZeFmKwbNDIDvzNQlyjDmBb4QVNATUV7yYNPOpDsPKYLFFJsh4s9yCsoeICufsE81+3c9tQ==','chdyanng@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-07-13 12:07:36','2020-08-20 04:45:44'),(236,1,NULL,'WinChance','U2FsdGVkX1/wrGNPF2sP+ksCsZYbUn4pG2TkbCM5Ywka2tYwn6S04Od059DpuYw4KEnDOUg6JOgX2FVRUddhDQ==','1025256834@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-07-13 01:13:10','2020-08-20 04:45:44'),(237,1,NULL,'fengwei','U2FsdGVkX18K5SrgReqLP+iITaI8xukUBEwf8olKDDo5ffLRuBqD6CCWf2znRUiHtpORjQbMTYKH3wxk/bjn8w==','479123584@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-07-04 08:47:56','2020-08-20 04:45:44'),(238,1,NULL,'w3223eee','U2FsdGVkX1/s+3D+fAYFGKDfXHrI+lti+bh2bTC3gt00RZ9GfcIruoyWfCmwKEBbgr0jFk3J8edTQPQNCQUeAg==','121231231233@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-07-03 06:56:41','2020-08-20 04:45:44'),(239,1,NULL,'doracms66','U2FsdGVkX19w6h5HmhH0ww95OlE35reOULEe8y4aSsPfqFDUOkZL7nyY2FSR9M4vSz+/lPLaCbKocXbKgoDJEQ==','doracms66@doracms66.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-07-03 02:45:49','2020-08-20 04:45:44'),(240,1,NULL,'gpower543','U2FsdGVkX1+Gpp9cDh4HU4ZUrJBddy6yP1M8/lh56VKhNCUc0BSSCzHh1iRH+HIPUae0d2EEBs2hZ3wzS56VQw==','gpower543@gmail.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-07-02 16:32:32','2020-08-20 04:45:44'),(241,1,NULL,'liaoyinan','U2FsdGVkX18j9lesv9zoGG7jsa+GXdsnnvXkpY5bZLqkFFUSYLaysHYQx2rJ6vK59V0ADczP2kG09va8md1/Zg==','woliaoyinan@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-06-29 03:32:06','2020-08-20 04:45:44'),(242,1,NULL,'monkeyliu','U2FsdGVkX19h1HGldx5J8Er96kqtwsRp1Rbon3TYvCsI2Sfu1ByAzA6A0OFonBDerA+igwecA8uFhmhMESr8cw==','mrlmj@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-06-26 14:51:55','2020-08-20 04:45:44'),(243,1,NULL,'zchuhyy','U2FsdGVkX1+m/QbraHSFBRVMyXzaR9SJUdEXyEIty29GeBdshUfcNtTq1I9WvDpbRXwEpDg2LCM4VXb7ay3uFA==','2242347823@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-06-26 07:31:23','2020-08-20 04:45:44'),(244,1,NULL,'test001','U2FsdGVkX19SRyIEgmkAS2APtoa2465VjUAyQOCMdyrpCC3EE0mrzmvv3gmU2/x0G2maasp3WB3fKG7OMbRUVA==','1234567@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-06-25 06:52:19','2020-08-20 04:45:45'),(245,1,NULL,'dony1988','U2FsdGVkX1+ltrrAEyYiYuKXtY1L2e7q7opqOo7pcUgrOkSxslmkeJRHk7qPXvYXCRbgANV8/ejwNI9MVBzvPg==','1004315189@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-06-23 05:33:09','2020-08-20 04:45:45'),(246,1,NULL,'chenliw','U2FsdGVkX1+lxrb0i5yvf1jhytPFwK+J0No4z4d6PWRjI4mzKel2G2Ly5joYmWKLU1T613q+5DsF1vlw/YC45w==','23423@126.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-06-19 13:34:16','2020-08-20 04:45:45'),(247,1,NULL,'sfsdf3324','U2FsdGVkX18RFDiOwaWtMwW3HdO1WdzIp4u7sQpyqAcSkeztyzMfMLTRa6o5cYmtNV/2mgktyJbar5l59MwUqg==','sfsdf3324@126.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-06-18 10:04:21','2020-08-20 04:45:45'),(248,1,NULL,'csxcsx','U2FsdGVkX19TbAqAR81U1mx+B2OcEdRWU4r9YsoAHHxWvSvyv2WBN/xHjJYihzqJQHhDuCjRPookDGn6Wj5xcA==','csq999@tom.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-06-13 09:20:24','2020-08-20 04:45:45'),(249,1,NULL,'houngtze','U2FsdGVkX1/2H2ZS9lqO2XF2OAz8DX39t9PhZrB/5g6acSNx6oOsoe7asoCY5E0XBVwt6ATLnAwO8db84Zf9sw==','725554672@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-06-13 09:18:58','2020-08-20 04:45:45'),(250,1,NULL,'yb7553','U2FsdGVkX1+JsRu1efOX5n437uc8DZyS9ruK4bOSHXByT5RCiUgOuRap01kipNbouhbsEEuBBv5E0RcZaFkVkw==','23218371@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-06-07 01:20:03','2020-08-20 04:45:45'),(251,1,NULL,'decadehew','U2FsdGVkX1/uxHcZy++P+9vql8a4zPIOE/qQWr2xNFD4IdCUUjbPp0gX1FGZavYOhiDgT4F+kihPWyll+FG0Og==','yong@wnjsoft.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-06-06 05:18:28','2020-08-20 04:45:45'),(252,1,NULL,'bigStone','U2FsdGVkX1/0pxG476F536621omvWRBpj+bKUii6kh8gkkiRWg6Zgsh8sz0WE4QoBxTDsHYorExbi9s5DMIE5Q==','1841019004@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-06-05 07:55:10','2020-08-20 04:45:45'),(253,1,NULL,'as626040875','U2FsdGVkX1/M2OhQ9d8p2jWZzdZs0rPdgVh3kQDLDQCtAzzn+vq40Lq3KaVEUr+dx38j/il/W60ATpttkXYQJQ==','626040875@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-06-05 07:44:13','2020-08-20 04:45:45'),(254,1,NULL,'lastSeries','U2FsdGVkX188arJbFySaYkYLqBwVMqMiFinj7ZNBFza0nz73ckXBY7MPpD6/B1hcffs9ed0JSLQJJZPnI3nN2A==','593993039@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-06-04 12:14:22','2020-08-20 04:45:45'),(255,1,NULL,'peterniu','U2FsdGVkX1/u4kStZqfHoiyCAfLAYRj0/hnT85ykbhu+gw076zKb5SL2alDHkrDaKlEsFe013/LlB3Gzz8zm9w==','newclear010@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-06-04 09:55:18','2020-08-20 04:45:45'),(256,1,NULL,'mitoxys','U2FsdGVkX19tJSabm356SZpXfkMYebZZ6BnhDQJfMA4CaWdjwxxdPVrZ26XImQOZCjhJaw3yxriR8HVHkfQ6Fw==','raylee.bio@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-06-02 14:45:11','2020-08-20 04:45:45'),(257,1,NULL,'testt1','U2FsdGVkX1/MS3h94/+l1h2YVH3hf0Z91/YhINxH3+LvcxKD8+vmTI2kBAJn0tDa0mI1Y5+/TQyiGmVoc3iqKg==','xqqyouxiang@foxmail.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-06-01 01:11:07','2020-08-20 04:45:45'),(258,1,NULL,'strdemo','U2FsdGVkX18eloxXqMeQ6/9YlBbS3CG0t0ChI24Xitw1pOZyWSssKcjITLMj7aGhtJpd3X9tGGm7sbgxVa//Tw==','strdemo@gmail.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-31 16:07:12','2020-08-20 04:45:45'),(259,1,NULL,'cheneyliu','U2FsdGVkX1/Hvu5kuLK0u4h+UpCj8b1PM6oe2IKcVOFMo23O0psjAJbvNqi1SmqcNFQRltgr6IWIxrbxE7VAOA==','lhy6551@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-30 16:39:32','2020-08-20 04:45:45'),(260,1,NULL,'max_123','U2FsdGVkX18vferZp9N1CV6TkhMHpoJtxxEcOPvpWVkobBG8ODOnTGcIkthcbAmEakmQm6tqX7MtZwsU/wkHWw==','8888888@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-30 01:27:48','2020-08-20 04:45:45'),(261,1,NULL,'hanxuan','U2FsdGVkX1+U8/RgYwvFqeZeJl+6TOaCC0E05i0f35gLKceBDsPYZklb6Ch/OIw/6uXv4+2ybUqTtfqtdEPlGQ==','208812538@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-28 06:26:50','2020-08-20 04:45:45'),(262,1,NULL,'qdjlb','U2FsdGVkX1+QkTMEIie1q353Ce+UfUhiKBjNvOYzUfAJYWTOTrA2Y9ARZyBNJdROdeE9k70s84meE8abwdsyAg==','qdjlb@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-27 09:02:55','2020-08-20 04:45:45'),(263,1,NULL,'wjy4124','U2FsdGVkX1/cpahhmE7tonGrMLlmv41aEy1/L3nM/Hlc3ECqSpqH3u5jsPeNdvnbqiof80QFDcfsk1WVWgTXIg==','wjy4124@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-25 08:46:08','2020-08-20 04:45:45'),(264,1,NULL,'sdian','U2FsdGVkX18+aTC8JzI/5RGThoOpeLi0Z24uCw0XeAZYsjCZh1k5LhiSZYVJDC/N++x5ZARDBZCU1U4SfugAIQ==','790067138@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-24 14:20:49','2020-08-20 04:45:45'),(265,1,NULL,'asdf31dga','U2FsdGVkX18KEbRSpqbTCCctVUEgjezb6BIKFcWahTG6+z5QSMYKoiuSzYK7qvCJTNGB7MEG/4SsZj5WHvuHZQ==','asdfasdf@adsf.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-24 09:58:46','2020-08-20 04:45:45'),(266,1,NULL,'asfdasdfgas','U2FsdGVkX1+22ANiNEbsuJbqNxSOe7w36+YY195qLbOACxbt5/zGV9DKolz32TNm7Hdi85JNv2MU8aRz9SrcQw==','asdf2g@asdf.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-24 09:57:49','2020-08-20 04:45:45'),(267,1,NULL,'caoyu','U2FsdGVkX1+E6rSbo3CFhapm7X6YM5wFYVqNZNiIG9E2qmyi6gAKZOHABPj0arl67J3Q/K7L4qme2ju0dp6vPA==','280196641@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-24 06:38:29','2020-08-20 04:45:45'),(268,1,NULL,'xuan100','U2FsdGVkX19mfEXMxOSyqSxMLAfeDCIlmgamBG3cCVxYLbQOxeNgbu2nsY8iWPMd2ahvYWJEas9NDvg37ujEpA==','xuan100@live.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-24 01:05:53','2020-08-20 04:45:45'),(269,1,NULL,'q515220999','U2FsdGVkX1/asJ5xRO+xrPgyKvYq6Fc74nxWdf6o32JLV7lBrQqYgJdHvf8KC/dgprzwLt9n5s+nyAWwYa6sTQ==','515220999@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-23 10:50:03','2020-08-20 04:45:45'),(270,1,NULL,'boern','U2FsdGVkX19Zw4O/oL0k390cXt724cA1/bdL52jr2cFRB1w67uWvM7sVzW0pK4n0O5DvQEPQH4nJj2glImu3HA==','18660406026@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-23 02:30:08','2020-08-20 04:45:45'),(271,1,NULL,'King_J','U2FsdGVkX1+nEXZonqvPqivYblpPoVZv17e23bRcI4duAdy6mn+D2bQyysFLDviI4HdQnJ+AIl64EawRvAXiyA==','1129105266@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-22 14:50:47','2020-08-20 04:45:45'),(272,1,NULL,'admins123','U2FsdGVkX19/hT94JIn+w+9lBoLwY3wQQ0V+A7jJUhlbUC97Py7m2Gj0b+5ewJaId8J1sNId7bg10npCi5RMgw==','qq@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-22 03:46:14','2020-08-20 04:45:45'),(273,1,NULL,'zgx321','U2FsdGVkX1/z2yq+EoghLGZBdnEMy0/9FDu2VE3dKgWE0kBP3onCDzzpuZVE6bXm+npCocOKsYvWAm8QfIrB8g==','1486899711@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-21 10:19:59','2020-08-20 04:45:45'),(274,1,NULL,'gabry','U2FsdGVkX19Nw5hXqL26oft+AL+WpQQftNH20s9/870XJ9rGmkvECZewj/y/61v9rF2E9fXGyiYMO07pz3nwRw==','gabry@bigniu.cn',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-21 05:47:45','2020-08-20 04:45:45'),(275,1,NULL,'xing__','U2FsdGVkX19RcJ19gi/AHxThuqdINhw53av/y3PIQZt9hXDsudmp/4cynYsp6fWkKqM9Pz3zee1GriDjyvRXoQ==','743517718@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',1540365978673,0,NULL,'2018-05-18 02:36:29','2020-08-20 04:45:45'),(276,1,NULL,'zhu111','U2FsdGVkX1/OD4/8Fr4Wa+CUiVtXTBm/f9gV5D5PDecoOwoOx3Yyku9mpR0dD/vN/uXsEW6CHMwvnrl/7s53jw==','522941939@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-15 07:01:14','2020-08-20 04:45:45'),(277,1,NULL,'test121','U2FsdGVkX1/mWuSUR5xQp9xxwtjw7UaVc/7k6RyTu2wU0oz6d5RtZeUh9+2PdVyTJv1B/1CpDIdx884hjvFl2A==','test121@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-15 06:58:58','2020-08-20 04:45:45'),(278,1,NULL,'tbfungeek','U2FsdGVkX1+XVICyYfvDzx67aGwnuFEOojsoa99Qu3CeLvvCuvU0R9CXVQ7QuckMKIlj1+wprPt/pC3CDkhLKg==','tbfungeek@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-11 13:42:32','2020-08-20 04:45:45'),(279,1,NULL,'admintest','U2FsdGVkX193KSbP7dbD/6JDa/5EWPplFZFy54CPGBC0FEhPw2waUw0P3/5URbPi2z+EXHU/P71Sx1hH4uCZxg==','306484328@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-11 08:18:14','2020-08-20 04:45:45'),(280,1,NULL,'walleyenet01','U2FsdGVkX18wY2I9W8aUyIVLOl6m/ZFNqfTtyUAb7R5Y/Q8z1h7+qaHJP3MwulGGjC4lvLbEUtyTx1/kvAB+cA==','walleyenet01@gmail.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-11 00:58:33','2020-08-20 04:45:45'),(281,1,NULL,'Jason588','U2FsdGVkX18MPYZl/FiKDR3L2cjcnl0/gHjde4RnTEPDsXNlilTLslak4TdnxwPQwlcIfoXEp1MFhesQXDsLNA==','beyondgm5@me.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-08 14:49:59','2020-08-20 04:45:45'),(282,1,NULL,'willerhe','U2FsdGVkX19syTcGO3+MyfeLEBBczTEP2/YFHZtSNEgheRZgUitmVYEPFU3snRKHSNLEdmV8XFyTcm6906845g==','willerhe@126.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-06 03:59:53','2020-08-20 04:45:45'),(283,1,NULL,'weiwenze','U2FsdGVkX1+bJv1Qzg4d9YfDSjidgrr4RfQoZ06fjeJisYNpFZdxcdWZ9LGDB8vAShex5joDvQ1w5DJsse5SVg==','weiwenze@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-06 00:13:32','2020-08-20 04:45:45'),(284,1,NULL,'y001j','U2FsdGVkX19u28NM1jWdHe+/ip6NCxpeDHh8uVGoebxSasTovawYtq0iW3PHQkmB5cNS6rSCchZ3RTAy9BJlNA==','y001j@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-05 17:26:42','2020-08-20 04:45:45'),(285,1,NULL,'m1234567892','U2FsdGVkX19B2El6kwAS89C00XdfeJmih3MLRdukxFKZlfMTisAUhxqPl4YgCy93Gczy/bUy3qCOHz4Eb/k5YA==','m123456789@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-03 10:13:14','2020-08-20 04:45:45'),(286,1,NULL,'m123456789','U2FsdGVkX1/DseNBPQIdRV4lKAZkl6gd7uawuMtpkW1v7DAzbSI6xuAK0av9Dg4TbiNidKrT3n//Qkbd5mVdbg==','m123@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-05-03 10:12:53','2020-08-20 04:45:45'),(287,1,'谷淼','HikamaiC','U2FsdGVkX19mtRPrn7KKeDUH7kSSKeaYVfNkjPsOoxpoeN7VqSoaVwqbXMo7gvzsyIoJjxkWEzo/NXV46YWP0g==','1450206741@qq.com',NULL,NULL,NULL,NULL,'1','no','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2018-05-02 07:33:21','2020-08-20 04:45:45'),(288,1,NULL,'hmzhmz','U2FsdGVkX18h+rQ7U392VfIlCJHBWoVk4lJEnJZZq4/ZLr1r/WIth/D/6Fg6e+CqmAx20vJfKePDP4yykp1Hqw==','651734877@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',1525063309368,0,NULL,'2018-04-30 04:41:39','2020-08-20 04:45:45'),(289,1,NULL,'liudinglong','U2FsdGVkX1+6SHTG24pFv9hz4bNC4rd4nwF4Ms0U7Kbt3EEOvBSVp/7GV4mfegvlrBKgMZ0cA9mCwUx+1c+oDg==','21209183@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-28 05:48:41','2020-08-20 04:45:45'),(290,1,NULL,'tttettt','U2FsdGVkX19u+bk9LY4SDSMzcZxhWMe5mbxUAH47/OUsISGfZUEx8etQbq1loJ/Exx3nNqZV62gjHnwWdRMCow==','tttettt@tttettt.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-28 02:17:55','2020-08-20 04:45:45'),(291,1,NULL,'ivoyan','U2FsdGVkX18z3vYEkxZYcl+clVVro/tTQ9pm51I7k48XoErsO3v5r7LdIM2cxZHwjYMy1NEAjlrT0i9OJ12n7g==','annivan@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-27 10:35:18','2020-08-20 04:45:45'),(292,1,NULL,'wennjie','U2FsdGVkX19AtjcRT2Bw3Tl3qChG3xckJbDHRI2QPvVngL4jhg/t/P5a4aUnVVXBBfY+LpKXd732QguV+zgrYQ==','jetwen@vip.qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-27 10:19:14','2020-08-20 04:45:45'),(293,1,NULL,'superhsr','U2FsdGVkX1+aMRs+L6SAaw7j0pIgK+NKIqb1psiAeY0PAA6ekYribIyN0jm2M+lC6eRddagg9zBzp7P8LleiSQ==','863613209@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-25 08:37:35','2020-08-20 04:45:45'),(294,1,NULL,'df123456','U2FsdGVkX18hO6zRs3fNk78uHFPv//SylPbPwPbD0XEfbSVJsAOh8Jwvk06JOIrLt48htDagH1oG4SKjlkz4pA==','835014331@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-25 06:45:35','2020-08-20 04:45:45'),(295,1,NULL,'kenyx','U2FsdGVkX19W5H/o97SQ0y5Nrh9x07KcKvsVjotsoKil4k+UOuvw3MvX8RsM2UTCn5G31jERNT+SLQWCRnexDA==','kenyx.my@outlook.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-24 05:17:54','2020-08-20 04:45:45'),(296,1,NULL,'yanwei','U2FsdGVkX18abxpq0DBXGfQ+kdfYjp0kInE4agiDUeGI9dvXc9VMvtdxjviNl0MdVs3IObOQ5ECnXA2DHaUpAw==','715645233@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-20 05:29:55','2020-08-20 04:45:45'),(297,1,NULL,'wangziyi','U2FsdGVkX1/apyZ1ZwkuoF9T4nqJ1ykbbowJmnZ9BhN8zjc9/JINFHn1Nlb7Lt3d6dwd/ue7RzWp2DhQAEAmxQ==','zoe@wangziyi.org',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-20 04:44:00','2020-08-20 04:45:45'),(298,1,NULL,'jensen5201','U2FsdGVkX1/Cfe5R0TrNbgYngy22pXWOuZ+L0kj61L9ge9WiwbNyAsxXzQJroetmLXm8DeFn+zsZiWa+I10NIA==','jensen5201@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-18 08:03:01','2020-08-20 04:45:45'),(299,1,NULL,'wang5','U2FsdGVkX19lH7GFRXNfdVeXebWJgv5CvEjtKYPNBOtUF5u+KoFNmzPerNWOkM31JAu4K/t6hq7QxzFWrGogaw==','wang5@chacuo.net',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-17 02:56:50','2020-08-20 04:45:45'),(300,1,NULL,'zhang3','U2FsdGVkX19zSbhBv35GFqQ2SRMrm6phjZ6Hu3dh77HbeZaQI0z6YfDUNrB6KHYlRCstjIIITAe7zC83KtnhSA==','zhang3@chacuo.net',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-17 02:54:15','2020-08-20 04:45:45'),(301,1,NULL,'justkidding','U2FsdGVkX18yqVapMIUi/kn2GwoGIakFzaNMzy0ZU6KMzsGS4UFrgy65HLsCYBAfApEaMoO2c6bnwkOa3Efb+w==','justkidding@163.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-17 02:47:41','2020-08-20 04:45:45'),(302,1,NULL,'lveven','U2FsdGVkX1+CoDtvuKb4JJR/r9SX7ggGGCzGuJ42F/DznBeX+4RhpIMOQf7uwFPENXjgYSISm7M30gIAK1hHlg==','798077009@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-13 16:32:47','2020-08-20 04:45:45'),(303,1,NULL,'recoly','U2FsdGVkX1/IFmZPst9KvqcIOCsnhi+L+icd6tNQ+aZuP1xycwQZKs94789+ce2cps2Drho5727A2d3bR1dJ1Q==','zilongjob@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-13 14:21:18','2020-08-20 04:45:45'),(304,1,NULL,'Barry','U2FsdGVkX1/zhvBc7y2GlYwNbwm+THUjRAZ4qQD9GXQ83FsiQpjbWYx27wVRhKW5wX+RYRUG+EapmjkxIvi3Rw==','1334101793@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-12 08:10:15','2020-08-20 04:45:45'),(305,1,NULL,'abcd91898105','U2FsdGVkX1+XjP65bjxwHNxAmk2WdxLNt6PaObOBUxiPUW3ZgQPt6u3piwYSEm1NIb4bzGAL0b3c+5wxHMuhOg==','supergalaxygithub@gmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-11 16:44:55','2020-08-20 04:45:45'),(306,1,NULL,'thinkuncle','U2FsdGVkX1+r4uEfyFKPvutCXG0c2iWciiTBczDKt6c4V3T1owLPC/JhORgz3wEOHpWiH0dbRQbBBxEnARZbow==','thinkuncle@gmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-11 09:21:06','2020-08-20 04:45:45'),(307,1,NULL,'cq171','U2FsdGVkX1+3CsgTdwqwUinl9h2bT9GtjiYRNvp7yaLVL5u3GKlGrZSqZ8CJ2OicZvMRXfbkupJxX6hWEREq9A==','cq171@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-10 14:31:28','2020-08-20 04:45:45'),(308,1,NULL,'dione2000','U2FsdGVkX1/aggpA8lr1NUdQg2Z7gxrPQJxu5Pj/nWq2fMuLTpJmf8c0o+rhn7+TjgBTryemmv4u0NML6I+Vzg==','fsj930210@gmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-10 07:56:30','2020-08-20 04:45:45'),(309,1,NULL,'fengwei88','U2FsdGVkX18BVyNbZD6mo8ubiSvnfdAu2IOjmjiIzgg65+8XwUr3fC8N9jRPN0kwAqCM+VDqM2twtREkJKkT+A==','fengwei9801@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-10 01:51:23','2020-08-20 04:45:45'),(310,1,NULL,'lllll','U2FsdGVkX1+TcI1R3eaI0Lq3VL544EOpq09P/7ETFh2hhTNVyUBy9IHO5h1+008ZpM+t5bC6P/riHqumNCCBIA==','555@q.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-09 12:31:52','2020-08-20 04:45:45'),(311,1,NULL,'wanghuan','U2FsdGVkX1+ZfjwcPcRCo3whQU5D6QYQVMI/BIzXaPoCxx/AX4nTw1H5tLDl0yIfom2Jdt/Sdlt6XNIZI5sJDg==','whpersonaly@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-08 05:29:34','2020-08-20 04:45:45'),(312,1,NULL,'yukai','U2FsdGVkX18QrzyrxWQqYm6Fj7BFMd/6YTL4us1WLVif+CTQohUT0gpRngXX4Je5a7j/VF8yRaXxETcFuC2a/w==','528014707@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-08 02:19:54','2020-08-20 04:45:45'),(313,1,NULL,'xyb851','U2FsdGVkX1/26JK4ma5INY+7x//cQxll0w0vHQAhOYcq50bMX5KonMtkPdwOym46YFaguPaiN4yt5kIMiThNEw==','xyb851@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-06 23:48:47','2020-08-20 04:45:45'),(314,1,NULL,'nmm555mmm','U2FsdGVkX1+escxqAnBdJahGHOTVY16+9EbxQt3O33D/fT9DSYKmneLHbHjIsmVsMO0ixDdJ7J98o6fRoZ2Jsg==','1323388764@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-05 13:08:48','2020-08-20 04:45:45'),(315,1,NULL,'frank','U2FsdGVkX1+dRj3DhHxQpfHpAL0+1QxdSfZ7oFLWVoyVc5u7swfwyB/KpcYDnTenXzAtFZuODHGJcjWEA3Qwwg==','frank543123@gmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-05 01:49:27','2020-08-20 04:45:45'),(316,1,NULL,'liutao','U2FsdGVkX1+v6QL/V2GM4oTxbxQUyXbml6xH7YDWBFLymnI8hCXxD1Erhl04cSqN3yHX7QJt9i5E0iLd3f7YeQ==','abcd498936590@gmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-03 07:57:33','2020-08-20 04:45:45'),(317,1,NULL,'adas8','U2FsdGVkX19AnGOsao4Meu5pLj8dGB/A/HDDCJrxQzF/9JL+fPHFUAZPmDOeJTmQLbjmfdNEK1NI/ZQ1WTTpsg==','654321@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-03 06:14:08','2020-08-20 04:45:45'),(318,1,'','dzc314','U2FsdGVkX181eKRU2tqMo/bOasiHt2OPqdl5FYb9sZzs4ROZSv+BVonEN265OyKxFa+5X+8X0MLveqaZBJRu5w==','dzc314@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cnhttps://cdn.html-js.cn/cms/upload/images/img20180402110827.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-02 02:44:45','2020-08-20 04:45:45'),(319,1,NULL,'xing008598','U2FsdGVkX18rr4pq+F6Yk8UhkVbHUvifVhWecEJuPyENAS5d6A/6cSiOhL77uUxxAziPA4a/SHZ5dsy+5gLy2A==','308106832@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-04-01 02:27:16','2020-08-20 04:45:45'),(320,1,NULL,'monkey_c','U2FsdGVkX1/ExMWNaiKgpfwYGgTeH8C7te2arCF1iFGVGiEmQ/wEEc3SvHG7Hfp9+CbpU0/d0Og1APUGJvKebw==','595628846@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-03-30 10:17:36','2020-08-20 04:45:45'),(321,1,NULL,'zyuan','U2FsdGVkX196RswxljAzd4uDwLOq6MFOif2G9sJvHatwCkNKDdkiIoEl5cqA91Sd+CePfwqmtWYBJZA9aWLWKA==','569630163@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-03-28 08:56:20','2020-08-20 04:45:45'),(322,1,NULL,'testuser','U2FsdGVkX18THzYP3uj31fw0VMms6/5JpooLX2CBYUq7XP2oEzs30hXj3bdnocni3+ExwQ2f+IoUdNpLmPD50Q==','test@tt.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-03-27 09:51:31','2020-08-20 04:45:45'),(323,1,NULL,'dora1','U2FsdGVkX18kTuYt09u3O2nvkEvh4K4N9fE5lIgJkZiIolqv8ubj5vmFVD+cp0nhP9G3av3huuKCZAlE5xlkjA==','dora1@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-03-24 09:53:09','2020-08-20 04:45:45'),(324,1,NULL,'zhu123','U2FsdGVkX199J0XRvBC5jUhHJb5L7o5VA3f/XoOnG0rdgHqf4iMAtb7uLoXkNAeBzu8sw63SATjZDcbwPNC7oQ==','zhu123@123.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-03-23 08:40:23','2020-08-20 04:45:45'),(325,1,NULL,'lrhonker','U2FsdGVkX1/8jZvTn/1iDklVgRmeo9Rxrx0qrXSAyxu++yKTNypYR+0K3ZkHOBYClcJTK0GSZfibO3VM76ht7w==','379298777@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-03-23 02:58:46','2020-08-20 04:45:45'),(326,1,NULL,'dccall','U2FsdGVkX1+VGevammo1/r0U90G+GSpWWd8XVewEmC4aNBJKFVSzjWDDldbbnAAMRYddnk1ugVGbANQ8+dMW0A==','18955880168@189.cn',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-03-22 05:36:19','2020-08-20 04:45:45'),(327,1,NULL,'qweqwe','U2FsdGVkX1/OA3yH5KC7YoiyWlZNrYYznlmFOdbLPSO0N677AZLAdugIG9qwqgypHnjkCzxtn+O0CIAW9bqICQ==','1353250703@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-03-21 13:32:00','2020-08-20 04:45:45'),(328,1,'','Scott1657292','U2FsdGVkX19SIqMmtpYWydvWzLOFplQh+idPWdkISNtkNXIOIZABZuMrX6eXcYxKs2n3JqWPNDeUe4q/ReSaWQ==','asacdsacds@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-03-18 03:14:14','2020-08-20 04:45:45'),(329,1,NULL,'test999','U2FsdGVkX19yYM0ihiBkP7xINHj7vGjEAaZRk4+4CZbB9HoAiTSjwqYXlhDqlqszD10ZLgMTNQzTCnLx+46Q4Q==','test999@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-03-17 14:05:43','2020-08-20 04:45:45'),(330,1,NULL,'kakamimi6','U2FsdGVkX1+TM1AWMF8qR3iYP+qbD9jrQsAoiMq1GLHJGqBGRHkWxklzu9D10XYyWuIFylGNxxzrCSsE2B/cXw==','kaka@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-03-15 02:33:28','2020-08-20 04:45:45'),(331,1,NULL,'scott','U2FsdGVkX1+JLu6sFicIWdEInqvWO3AR4WuC/jeHFwsjY2SKcykEpFcKGuwVllIupIAu501ZQY3jomOcgaFhZg==','1657292627@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-03-14 17:34:02','2020-08-20 04:45:45'),(332,1,NULL,'huan123','U2FsdGVkX19oLcNY2ATO0aAB6UjbeQry69+nVGbMbPjsWm89/ES1tFGf3CzVTdO8olonUWCGeDYZQ6+RRaBzKQ==','397130730@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-03-14 07:57:50','2020-08-20 04:45:45'),(333,1,NULL,'keinmir','U2FsdGVkX1/WpgEQDudGC99TsvKv+gfw7rd+9oMNgo/7Nz5lzzTgmc3iYm7LeFmaHnvOyCEr5/5qOYRWBtLQtw==','841570@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-03-14 07:47:03','2020-08-20 04:45:45'),(334,1,NULL,'keiew','U2FsdGVkX1/FEXFGnJg6HBO9R/8kxtpuqLIOrNqxzoK9bYrCEkketdJIuKx2djGVptCwIY6MyG+FNIVMPzrW7w==','412512@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-03-14 07:46:06','2020-08-20 04:45:45'),(335,1,NULL,'admin888','U2FsdGVkX196YTIPzJPrDY7FqkbLLGwYyX+GoNJyaG3/ujN3c5l99rE7Lw2qrnENc0+Hjw/RwdapWMGHZdf1Cg==','admin888@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-03-14 01:52:18','2020-08-20 04:45:45'),(336,1,NULL,'gs183900','U2FsdGVkX19v3pkxR5aitkvjQpV4Rkg4c58wm2DU2Y+YL/lwzMR9qHNsfEcTL9XGoAe5X1PCDAqiReeqHwl7pQ==','232875889@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-03-06 13:09:50','2020-08-20 04:45:45'),(337,1,NULL,'wagnbh','U2FsdGVkX1/7IKpjn+5MukzKAwpGVRyBD7PxoB0/lTGxdguRFPw3QbIgydj0yMV8o17tyY+e/7YnjY/qnp9aZg==','965165180@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-03-06 06:38:53','2020-08-20 04:45:45'),(338,1,NULL,'vbdog','U2FsdGVkX1+rtVpY3faIBRepQGMIEBlqePNDLVRCfPHl82cDeqZDkFsl4XLhQl1LyMVyOVu/TunOPx3tKHkqzQ==','vbdog@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-02-27 13:56:08','2020-08-20 04:45:45'),(339,1,NULL,'sukechris','U2FsdGVkX19qh9nlxC/iIjCCyUsMAxiGGGoYUwWMkPvW3tJiHhXrODjCDK89cdYXtaWCGKerHoIFE5n+jL/Amw==','sukechris@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-02-20 14:51:06','2020-08-20 04:45:45'),(340,1,'','panyunyi','U2FsdGVkX1+mniw3S3NYeDDKi10QkRJy4zYOSyaXoSRDNIKXnHsXSHMlmGZ6ucf3sWMENvUiOSGMvX210F0Xhg==','panyunyi@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cnhttps://cdn.html-js.cn/cms/upload/images/img20180302191755.jpg','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-02-17 08:01:27','2020-08-20 04:45:45'),(341,1,NULL,'testtest3210','U2FsdGVkX18z9+1pL+eY/TNuVp2SJaSsCAUZbv+epCXvmlGW2sg9QC9JH06XcbG0ZYUGKnO5DSehKj9KSzSxcA==','test321@test321.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-02-14 21:18:46','2020-08-20 04:45:45'),(342,1,NULL,'testtest321','U2FsdGVkX186BTGxiUGOICLvlRMTbo6dySt2gB6nnVa8upQDmh7WpassrWyBovVEwFHdPLGevBKB5e1styTsWw==','test321321@test.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-02-14 21:17:56','2020-08-20 04:45:45'),(343,1,NULL,'xdxxm','U2FsdGVkX18+PFHkJoZkeNAFB0+856wELH2KTyc+k8fbFOGZF++h6gYdyNJo6FY+A9xp+EjaLwCi4mQiJP4+4Q==','494901316@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-02-10 14:47:28','2020-08-20 04:45:45'),(344,1,NULL,'qwerty111','U2FsdGVkX195XvcZf+8pSCXQyojGLlhWwY0p/tVXYKbJZKWQ2nZPgl0yKP0QhEzSR4K1notVZzhGqxGSO7ZZew==','sskatala@ya.ru',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-02-08 06:17:05','2020-08-20 04:45:46'),(345,1,NULL,'yidan','U2FsdGVkX19fHwNl8IR7Jz/EywoMK6hAg84qTqI1K5IhpUilzIKGGEeGpmCLamfM+pRf/3ZxNbQrk6tBADxhQw==','1558163701@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-02-06 02:47:25','2020-08-20 04:45:46'),(346,1,NULL,'nanijser','U2FsdGVkX1+GPbLwvKe+t2MAIeI2wsZhrzOyc2O3MABZ32MRcE5qkqcTbwMqgfoWdHJPk3mnw5OhLOJ/F9jF2w==','254892179@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-02-05 05:45:01','2020-08-20 04:45:46'),(347,1,NULL,'joylin','U2FsdGVkX1/C2svNBFQkkvh9iEjY2w6qOW/hSwGJ2v/+IXRusP/b2sd4gENCJz2zOVuIc+WaXlKp3IaJOQ5ldw==','heianwuming@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-02-01 08:17:19','2020-08-20 04:45:46'),(348,1,NULL,'frank123','U2FsdGVkX182wSEhZr6JP30PyNd0+r/tmi1poM4JRWW1o3QQCrGS4cTos88ZYcOerzuQ+6svn0XXcMgneK/Y8g==','804926879@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-31 10:21:03','2020-08-20 04:45:46'),(349,1,NULL,'nickliufc','U2FsdGVkX18UQsym/fEuEn6aYh0BDRNPJ7PRw28e6N0eSpMmHWlKVYgjeoq8R6wteiH50Sifw9oOuZtanqLrGw==','nick.liufc@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-31 09:00:25','2020-08-20 04:45:46'),(350,1,NULL,'tigercool','U2FsdGVkX1+OA6fZiqVSIlZ+JItrdHi2Pmyap1D7EfKKJfAbfIOQrW4rzClZhMqVh1CVb0TVp7Mjm1UPIwurMg==','tigercool@gmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-31 02:01:16','2020-08-20 04:45:46'),(351,1,NULL,'toboos','U2FsdGVkX184TCsKz+9qUBbICXUephr1YKKp7iA63b8APyLHPFWcre0c+GoPM62/N85ae0Q4jUK8+4WhkgowTg==','toboos@sina.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-29 11:05:22','2020-08-20 04:45:46'),(352,1,NULL,'xmmyangel','U2FsdGVkX1/0vvKU1Pp8xQfVx8PpVG7PwT+trj2n92plM6THS+HZ358Jr+KAm7VHlqjyBn0faMejoZX3gdACIw==','2856938880@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-29 05:01:53','2020-08-20 04:45:46'),(353,1,NULL,'ktvmetest','U2FsdGVkX18x/uqyyHX/X5ebk9Vkwwd7WTi3C10SzlWUvBxnoMRrMyb3t43XJj3xOcYSlI/t+5KWYF3t6XsUXg==','xiongjinfei@star-net.cn',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2018-01-27 15:44:54','2020-08-20 04:45:46'),(354,1,NULL,'dadadada','U2FsdGVkX1/kC4cBZsg3kzVN8snHZ1HD9mI1LaI9YmNBQo2Wa0GCicYBVbAglisrnN7wHzCxjnI2b921dlIwWw==','807471163@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-26 05:38:28','2020-08-20 04:45:46'),(355,1,NULL,'fghgh','U2FsdGVkX18efqmgX39j5cOxrl2eAelh5czG+/wNPEaQ7P0oOH0FrHO2cV0YbmcVjDzkPnoVNWNDPvsIPoDhew==','fghgh@sf.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-26 05:26:06','2020-08-20 04:45:46'),(356,1,NULL,'aaaaaa','U2FsdGVkX1/m+goDlGEF86kvFtUXS7JteubzKhYsErD6bzijzyuqkfS4jFNfbSPbdnTbwG68FVAk/nVsgLi9mg==','aaa@aaa.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-23 09:39:00','2020-08-20 04:45:46'),(357,1,NULL,'zhhasdh','U2FsdGVkX18uryFpV8rOdgcdxki5wlNBkBwWC5CK6rd0DVsuA8Kp7MIMh6E8blWZW8ZsFUIdmxGmANofgZWu7w==','zhhasdh@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-23 06:43:29','2020-08-20 04:45:46'),(358,1,NULL,'afeifqh','U2FsdGVkX1/5pNU8Re5VYqt3y1P8VgUjsQogkGwKBB1oWx4ZQWMi4Es0I+AYsxqCRtO5c1eQJ4djlC3mQXGGfg==','afeifqh@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-23 04:12:09','2020-08-20 04:45:46'),(359,1,NULL,'vinyjia','U2FsdGVkX1/bLaJHcDhK+H5bpY0G0HbXslmPGfs8i6/bm5eZF+iNdqKCiyoPs8XJfpMWoKLLe28p1dsa33eeRw==','vincentyzhj@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-22 07:31:37','2020-08-20 04:45:46'),(360,1,NULL,'dunye','U2FsdGVkX1+aCRL9Jn3W/Y5QTvOL5kn5hNtotx0hxZxMM+E+n7x8qAO4iwQB6GK1bTeZMcQHL7g512OnObkaJQ==','758186328@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',1543672141134,0,NULL,'2018-01-22 03:31:59','2020-08-20 04:45:46'),(361,1,NULL,'ziming','U2FsdGVkX1+S2J8MFOFVIMEhOCkfZCNc2Kf5DAOzg253B7HEPWMFjYv4yquocz+vBqkRfnL8+XeXKqcKTbHlVA==','ziming2018@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-20 00:32:12','2020-08-20 04:45:46'),(362,1,NULL,'panjing','U2FsdGVkX18S2gkePlpOHVRWMgmDbU0VPKXPmiOORRLeIGVDt1/CgmNAe7HplXjzX8DrBu/3Ka3wbfqrxrq7wg==','599194993@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-17 02:34:03','2020-08-20 04:45:46'),(363,1,NULL,'hozoree','U2FsdGVkX1/HOfQYIlxdaVHnqBokN/90RmTQG9ucBOaw78VCady3q83Zyi0EHyCzhaN9oEM29c3JOAzDWttUMw==','598468402@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-16 06:23:04','2020-08-20 04:45:46'),(364,1,NULL,'Zing123456','U2FsdGVkX1+Qy1ifxwMBSRcmkyaQxV8lKM5wOi6VeY0mdoUUZdEIPiUKVyWJI0OGrfSfoINvI0zQM7H3nWFF+g==','8589561@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-16 04:33:39','2020-08-20 04:45:46'),(365,1,NULL,'hester','U2FsdGVkX18JCp3hZXD8Z6rHReMvRM3/Bps5VAifuTIrc2/xfChZAKmRPauPZgWLZ+38WG+72Oxtn87r7zI40w==','15111823732@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-14 16:19:10','2020-08-20 04:45:46'),(366,1,NULL,'dingding','U2FsdGVkX19MRqU/piedjWEpu06VAxCDWNpPc9jq8VkPXPhJsvyYdasZVtaXtjkBbtwtUwz2cNViHlIdolFSUg==','704888282@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-12 07:47:16','2020-08-20 04:45:46'),(367,1,NULL,'deviltest','U2FsdGVkX18EILv/KgDFxMWhDNgQxOQ310Ue27tQ38Ooji5MQaVprsAJvRhgLLIJprBJcpjwk5zT3PDD828XXw==','1918831771@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-12 04:21:34','2020-08-20 04:45:46'),(368,1,NULL,'german','U2FsdGVkX19x5gsQAetQ/xmVvbKmkmZMQQFEXAkJ3T5iOyVJTY6j9B1nxFaMzr5C/A9fO/ozlVpncAdFL8AxCA==','germanvd@gmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-10 17:17:14','2020-08-20 04:45:46'),(369,1,NULL,'a251243021','U2FsdGVkX1+iiDaW/YAXzHZysqgt1yEq8vLVCGOFK/8kkUPTsfQcAiSwwhNEVU++5jCypEGwMS3zT0RDgpkgVA==','251243021@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-09 06:27:18','2020-08-20 04:45:46'),(370,1,NULL,'xiaoqian','U2FsdGVkX19uKchmwlAUa+uy/8ZeUvUQ+iFnQsCu2mNajXxj8RxxD+fGBGVo3OxiTnjlooUTJNbG7tyZd6ZQJA==','94032005@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-04 10:15:08','2020-08-20 04:45:46'),(371,1,NULL,'magapeng','U2FsdGVkX19p1clTqZR7qHirLsVc742e2iCrQvYZv1aeN7gGf+Jpj17oxNx8tFbwkhThQHFal0vyFhxYVeEncw==','773944051@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-04 05:36:33','2020-08-20 04:45:46'),(372,1,NULL,'zhongshuo','U2FsdGVkX18o5Yq5rfdc7tz2ch5jdrMDs6Xdwy3e3mE4pIC/AXYZFtmkii+Zy/prOosVwqBLA5VIm5kjrgSt0w==','282352334@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-03 15:03:30','2020-08-20 04:45:46'),(373,1,NULL,'zhangsxin','U2FsdGVkX18R8LTwIzLpwLUiay5qAXOXzMtfznQPJCaWh0ApvX/h3WNfLWFwfdXb16JUk2DHgFWrDi2vNCjP+g==','1500746602@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-03 03:53:07','2020-08-20 04:45:46'),(374,1,NULL,'xuanxuan','U2FsdGVkX1/gvIuoLRH271jnBLYBb9DJbPyU0TbdRuRrwzigSngbLOjCwAWCwBTji29vS9hjmOPZg1GN//fOhQ==','375149069@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',1564130109527,0,NULL,'2018-01-03 02:59:43','2020-08-20 04:45:46'),(375,1,NULL,'bszxxx','U2FsdGVkX19UTWNS0EYJiUK+HSJ8LAbO9do781by84Fdn3Ff8CVUDJ2W1uele5n1Ta2PDpcx/1ez9Udratop0g==','bszxxx@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2018-01-02 03:14:33','2020-08-20 04:45:46'),(376,1,NULL,'haidishayu','U2FsdGVkX1+l6j7qP7j9dAIOAlv3qcGngVPSKqDBY8fpl+inFTW7KgP34iIpVW8ZTgHSFQeR2LSXnmaiChOEFw==','67114@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-30 16:29:54','2020-08-20 04:45:46'),(377,1,NULL,'jhaso119','U2FsdGVkX18qDlcSMHBBsluA9bID6Da05MBfc2E1R7ZBz0Ual/70W6diVfMOZuAJy/QgAyWNCUpg0K9uoKh90Q==','jhaso1988@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-28 06:26:25','2020-08-20 04:45:46'),(378,1,NULL,'shield','U2FsdGVkX18dVezdxhlvVpGJFZl8ukG54bPh59w5kxq2asNhO8gTpQDlaWE+Bjpz56G57KQth59mJr1ctohSgQ==','739337479@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-27 07:15:03','2020-08-20 04:45:46'),(379,1,NULL,'xsw2001','U2FsdGVkX18CnMmaBgTVIb56mql2Pjm7ny5RPst1Zgs3le9Jmx+S8Kr4DVVyBKY+QeTCQ0ZLa8baBwh3SEOC4g==','550706052@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-27 07:04:18','2020-08-20 04:45:46'),(380,1,NULL,'cuihp','U2FsdGVkX1/NdUuHpz9HUlRKVGw2xN4c0goxDXRVn/sZKZB4xyIjOUQ+6Kmva/vCOv+1bn1wyv01LS4UY6mQYw==','xianrenqiu90@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-26 08:48:33','2020-08-20 04:45:46'),(381,1,NULL,'lchch','U2FsdGVkX18gXVlJnIFjNurUlubIUBFJ2poghzs4Sc+nYOUc99OG2qPXOo/38UL0e3tdpL8WSHj185OZov5JLw==','622002143@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-26 08:34:51','2020-08-20 04:45:46'),(382,1,NULL,'eqweqeq','U2FsdGVkX19ZPRTk/mZqx3v1IPGFCMtUhZzYTLuhZnfU7NJxBWQVHCbzXLd6LCuVkw/CSlVUZSZonHzgYglSZQ==','1111111@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-26 08:25:27','2020-08-20 04:45:46'),(383,1,NULL,'wurining','U2FsdGVkX1/HvwTiRl+zsCRM09pIqd1tUkQhBQi9C3yKt1Rav6bK/VDMpTCJlNhCcOARe3RVqeKwaF+tcD7IMg==','wurining@gmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-25 15:12:25','2020-08-20 04:45:46'),(384,1,NULL,'iyaq1222','U2FsdGVkX1+Xgf9tkjHmL6K3/9PbsC91Xmnquhz9XsQ4N9aS1rXVfZ7YJba0RL2U0OqMalwmQvkAEdLAN7LX0w==','1060502732@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-21 02:47:29','2020-08-20 04:45:46'),(385,1,NULL,'liudonghua','U2FsdGVkX1/p9LBGanRcrTsSEJtaNEpZc0XrmPlHvdwIyOZcWuqFT59FSSC2yR2r9TtPnpvNWIQA85SN1SE3Gg==','liudonghua123@gmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-20 14:25:33','2020-08-20 04:45:46'),(386,1,NULL,'yangheng','U2FsdGVkX19Mdw+vYJZhJreM/PKQtvTmgopddd/iXc2DQ0oa+1A2ZSoE0FLvQs97iL8zzZNGuj1yxtfHpXOs4A==','492238647@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-20 10:15:07','2020-08-20 04:45:46'),(387,1,NULL,'a6762424','U2FsdGVkX189A0H9/P4n2mDjtF8tbwlLK3CtTvvrn4Ikuk0sIg8zLgXjNZ/ty+QKqrQnMwqAUp1p2yb1HUr51A==','522296700@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-19 08:49:23','2020-08-20 04:45:46'),(388,1,NULL,'mengfei0053','U2FsdGVkX1/R3MuJ/FqbD73VAdL5f60F0EtXT+6edVb3Pa7n1VlcnY9dikRN87nOPjagUhWDEHEisGmOq34rFA==','mengfei0053@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-18 10:26:48','2020-08-20 04:45:46'),(389,1,NULL,'qqsdf','U2FsdGVkX18vaOGdh1k6LNY+yLtC0YOdFFAVAe7uy3EOUSQ7gyKnE7VcoLXmSYq8OktDhcVnPBxW7M85TJ8nWw==','cc_@live.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-16 08:13:28','2020-08-20 04:45:46'),(390,1,NULL,'simple11','U2FsdGVkX18PIsRIyRm3i+25ezwVVMpaRsU0ZLFH1ArkBpKbnagG2zs2XKF606S3efMF8D9SIC6SrskQvA0qSg==','11@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-15 02:12:22','2020-08-20 04:45:46'),(391,1,NULL,'ch_nirvana','U2FsdGVkX19tI/kcASIxQPgNrkp5ErMXxPW4dD0kcNKDfVaKk7gHz6c9s7zeRFQ5ahQg4cEppzQUEwbEVEQsvw==','ch_nirvana@sina.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-14 11:15:03','2020-08-20 04:45:46'),(392,1,NULL,'sarkerdo','U2FsdGVkX18ipWzSaUhNs5fmz2t2Sa8BevcQY8TlRl6hO3EIXJV9eeC2Y4heKUA3vSPGNv4JjbndFtPaoUo6Lg==','lanfex@bk.ru',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-11 20:36:17','2020-08-20 04:45:46'),(393,1,NULL,'testetst','U2FsdGVkX187l0nQJ4Xws2s5eZ3iJa49zh/bQllfu+0trpS+hVFXs/hJc55YpuRRU9VSPyLNDgwji4FTp2yLDg==','23332@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-08 09:43:10','2020-08-20 04:45:46'),(394,1,NULL,'test234','U2FsdGVkX18UGvtEmGPlqG5rqhkFJYRQEn8yREvitpybWIdq7/4znfGi6+ALB/C4jDhKUC0Kp9cMYr3oj94Nug==','test@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-08 09:42:12','2020-08-20 04:45:46'),(395,1,NULL,'wxs1127','U2FsdGVkX1+UWHNEjUJ4ygJfUfF6D+3OvIQS54NWFrZGzvhVbihyztZWXFErFRU/8JXtzYMdtpvswjl/dliH8Q==','wxs.goal@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-06 09:04:27','2020-08-20 04:45:46'),(396,1,NULL,'WoHoHo','U2FsdGVkX18n1VKqCtuh0EtS9wifs/u6A79ut/7iMbpX9DEuk5/I7r+5X5hmg/bnzuiDs+I/wxp+Tg4kYH8AUg==','461329896@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-06 03:33:41','2020-08-20 04:45:46'),(397,1,NULL,'josephxia','U2FsdGVkX18psbovyilQOLw747NLtcUr4+KH+i7MWuTPgJG6wgRL0k1xQmClD0JftgztBlak3bEm0EQF5F+pVQ==','15906475@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-05 08:24:34','2020-08-20 04:45:46'),(398,1,NULL,'netwboy','U2FsdGVkX1+Qvf4BL5QAnp7LKJ17HKn0KUEYKLSmnPoGhqBPFp92INMm73E7nEG1boJgEcUG20Z5lPT1JY3MmQ==','ankang@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-03 18:04:39','2020-08-20 04:45:46'),(399,1,NULL,'wudedi2000','U2FsdGVkX1+7KO3fLMwQWE6SsVHo9RVD0ivHLGtW7zlxcm9jF7DOoR17l+SaYgGHmuEJnPGivueh28KGscvDiw==','wudedi2000@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-12-03 03:41:46','2020-08-20 04:45:46'),(400,1,NULL,'gaollou','U2FsdGVkX1/a7K+cqIKyvpd5WReiDQNjq+aL43Ub+eI6p3PgEldQwg73bkcka+2m+aiem3Hjxn2fCjA/Cax29g==','1037091775@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-30 05:54:17','2020-08-20 04:45:46'),(401,1,NULL,'jwg666','U2FsdGVkX1+//zIgjSPQxVfhTqbxh4E8O3+zB2y0ywSanNiZB/o7Cw4opF0tWE++TooLW9lo7dDOabJUIr2d2Q==','123jwg@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-29 06:02:06','2020-08-20 04:45:46'),(402,1,'','zesheng','U2FsdGVkX19uUEHvM4rS6iJ3rEw1JQAd6mj/OKm0X+pZPEOEUx5svOdA8Qy0F/1+NrvxCIh38V6fTvvjZ2liVA==','zesheng@gmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cnhttps://cdn.html-js.cn/cms/upload/images/img20171129131254.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-29 05:11:22','2020-08-20 04:45:46'),(403,1,NULL,'hello','U2FsdGVkX18Puh/lVWZmAdF3otRf+pkX3IIXpZaCKn8vW7+yoq2I7B6rfJKwkR+KSDLWl2yFBC2cY9gOS/liFg==','hello@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-28 08:16:48','2020-08-20 04:45:46'),(404,1,NULL,'test444','U2FsdGVkX18DzLmqLJi/BpWw60XBznodhMmO4Ss5pnr92yhd83afB7ksrxgkRji512UGDZDxyP48vicLnp4VsQ==','test444@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-28 06:26:09','2020-08-20 04:45:46'),(405,1,NULL,'ningbo','U2FsdGVkX186gXAeHcPKEv2nazaol5MtSpChxg4wUT0GrGGNhWizmLkLcp4a98vQmDUzqQRr3nRqYneII4pB3w==','ningbo@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-28 06:22:34','2020-08-20 04:45:46'),(406,1,NULL,'starsoft','U2FsdGVkX1+OpiQvJzLAu7aXjKpAy/W3UhDjgmwswx2wAZpPVRR9imdwSRCadYAbkF3B4TuutEDk9gnCOZ+oSQ==','sfa@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-28 06:21:13','2020-08-20 04:45:46'),(407,1,NULL,'test2333','U2FsdGVkX1+LgbLOO2nqGKaJ9JtLleqIaHcw3OR6FgLMaKfT13hgUPJ1fBY/erjQzNvuK2HrfM1TR1S2/jU1AQ==','test2333@test.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-28 04:10:34','2020-08-20 04:45:46'),(408,1,NULL,'huyunwei','U2FsdGVkX1/L35Y4iKuQPCGJ8lZgTfSzpjRP7pL91IfhhaTzUdOuRvajaAJGRBy2fn+MGRFFy3Wzg49BfLDG5Q==','1525827264@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-26 11:45:36','2020-08-20 04:45:46'),(409,1,NULL,'ezhengping','U2FsdGVkX18vauBqptzsxHYO4u+IVDsMPxnPOdWqpaxroZwfjC8eNfTYbrZMmy4BFQVRNd/nqt+PjDfJZU7PIA==','ezhengping@outlook.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-25 09:23:11','2020-08-20 04:45:46'),(410,1,NULL,'ancestor','U2FsdGVkX1+cj4rByvzTCvgqPXG63MpfBdhV9kuvvGPn5qvVa12dmplsHyDA4BZ/dr3QhSCWIffhoruLC4r6Ug==','ancestor_duyi@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-24 05:30:46','2020-08-20 04:45:46'),(411,1,NULL,'helloWorld','U2FsdGVkX1/PiiOmBuX7xbdaX/j+eBrh5EMWpBGM0U4MlQQjFtkll1VrtsjkoecGfc0rZVAYNeO2Dmm6NHSmnQ==','m18577363440@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-23 02:52:46','2020-08-20 04:45:46'),(412,1,'','MaxwellHuang','U2FsdGVkX1/DZhtUk+vnrG4GigM8RFHcfcbt9wvKsMn7XW/PraW9MyuWdIt9qUwmCSTKvSf2ZpvAx4Q3R2yTQA==','410116635@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/img20171122180810.jpg','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-22 10:07:41','2020-08-20 04:45:46'),(413,1,NULL,'test123456','U2FsdGVkX18gZjl/cwvIWduR/FxK8xdM3EWfPw//IJDzDCpJd3ygteDSGKFWi1XiZZWVrh46qlBC2vs5ycYrlQ==','test@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-22 02:16:46','2020-08-20 04:45:46'),(414,1,NULL,'Steven','U2FsdGVkX19BFliFi6NLt0qK8LXXFy9eiP1aoenSzZKhVS56qO2m/3kG5JR+D+SSxmvECoDCUtkzFHTZzD/vxw==','1145390845@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-21 16:13:07','2020-08-20 04:45:46'),(415,1,NULL,'test233','U2FsdGVkX18XskUkEMHQq1xomKJ2/02UjVksGgAwgigQUgC9VuH2oX2It77DxNXmm7RLaFxYjWk2AqUpEzm6BQ==','test233@test.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-19 15:20:49','2020-08-20 04:45:46'),(416,1,NULL,'slvador','U2FsdGVkX1/8LuAXHBFfd4wWTHFUpIpiWJ6eTnKEqeXKbCTRijQPgHVg9Zw7vgjuWGR4O4WVMX0F+IhmMy5w/w==','luohuasz@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2017-11-16 02:45:52','2020-08-20 04:45:46'),(417,1,'','god_code_top','U2FsdGVkX19kqACREdE5eaLyJh9KyTzMRDK8RFlQbN9TwwLoT60aezcjccEL/I3EALz2t/lTietdqVqbj5PQVQ==','17865745655@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-14 08:47:52','2020-08-20 04:45:46'),(418,1,NULL,'asdfasdf','U2FsdGVkX1/8U4a5Gw13Vi6+I3y/4JYLtD7ujG679ygNViw7qxGWDNx6lvl+kVGf57G1GWtKtz/3Mjq/brcvkw==','asdf@asdf.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-13 07:25:16','2020-08-20 04:45:46'),(419,1,NULL,'erwerwe','U2FsdGVkX1/4h+KAMDNdSl8BPV55iGVoqnPaXmUa8hTuBIzm7lTzasK749x5CP4aBT7K9PrECDdnsHrolQvveA==','1@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-10 07:44:31','2020-08-20 04:45:46'),(420,1,NULL,'Kevin','U2FsdGVkX181pgPE5mC96ZqiPBs/IdgPiamOOQKvnK8ed3yfxeidqHDOxjPwLfx/utvTyk/wlsaTOE3+awkYng==','609521691@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-08 14:28:13','2020-08-20 04:45:46'),(421,1,NULL,'cloudy2046','U2FsdGVkX1/ZuKomw0wYMUVr6WFxCGpSqga/48Az0g4idKAkxh6OnwjhCjYpVTV5vr+q7OZMUXSfZgCWvLeiyg==','28206560@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-08 03:10:19','2020-08-20 04:45:46'),(422,1,NULL,'yuwenbin','U2FsdGVkX1+L1n5j7QnSUKDg978GhOfLHKByqTfhmLEJuhnJhAh4D/0Nuafwrm8djDFxY3SwIscz7MZt9d3hbw==','460268358@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-08 00:40:20','2020-08-20 04:45:46'),(423,1,NULL,'qianyaozu','U2FsdGVkX18FHyH92WFR6+HmixJkCjhsEB0GNbbwujVB3ce2rQ1gkV/smHeYq+PC99R28WxqRgUqP10RM9dZIQ==','262236468@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-07 09:18:23','2020-08-20 04:45:46'),(424,1,NULL,'xinql','U2FsdGVkX1+fT555TRBWaSGALbl/40V4ZZw+goEMYLiJgDyDDfGVks2VkvCK2DzwIHBA3+ycnkrnc5L2F24Pig==','47911793@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-07 06:51:17','2020-08-20 04:45:46'),(425,1,NULL,'coconut','U2FsdGVkX19mqlmElNDfYyyWgYnqxwyz9GPnfqYPjEHwqaDv6ng8yeZT4FD+2+mjq0XPQukpvXvKDVcn5TvjuA==','835572267@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-07 01:45:35','2020-08-20 04:45:46'),(426,1,NULL,'doramart0','U2FsdGVkX198VmI2lWUbsW4vc62MExtxqdCw5nfqT37qROUTkon2qVphwpekMOibwGFB4aTGLcO9FMJzuLboPA==','doramart@doramart.doramart',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-07 01:29:07','2020-08-20 04:45:46'),(427,1,NULL,'zhangshan','U2FsdGVkX19PUR5Z9ZHH0E3LkTVSqA+Qk1anBKoTtjnqiRnZoUSQEiCd0qZ3LjfDKhiDd488X0EpnbKfSmeF7Q==','abc@kjlkjsdlkf.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-07 01:28:22','2020-08-20 04:45:46'),(428,1,NULL,'thunder','U2FsdGVkX1/HK7lX3hSiY8QcWJ3TbSKmrEQjVyoB9kxRbldumS3353Z+EmtlAfa4viguWj3E+0X2Am2No0WB8A==','joseph1211@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-07 01:21:51','2020-08-20 04:45:46'),(429,1,NULL,'testtest1','U2FsdGVkX1/M0ZP27J6qOL4/aFchlH1UpXzamSqSTGcvAOp2NUSe0ReQRazj1QtcLUoiTOcwRZy+aioR7e1c8g==','test@test.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-06 07:25:04','2020-08-20 04:45:46'),(430,1,NULL,'xiaoming','U2FsdGVkX188uAPBHev1WQU1UfdmW35fN1mqn/wRwM5j/+Oz7SV7vsY1RwEjeGwQ6Sc2nUEwUltx+OnzOjLisw==','182204896@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-03 05:49:00','2020-08-20 04:45:46'),(431,1,NULL,'tammeny','U2FsdGVkX1+SHJxVDhOlsTpO/eSGvND/wuE1AT/n+vYclo0IQIiLlEhFoFKdGOPbsJsqrONGoHpO6vK3LsRTcQ==','tammeny@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-01 09:34:27','2020-08-20 04:45:46'),(432,1,NULL,'MeetUGo','U2FsdGVkX1/pgvhrZj52m6tygNTmHCFSl06pHCZmZLdFfP1Xk+e3qXeSBoF2bcQOTmhWTgo19MD1uSGUxm0hxQ==','huanryhuang@yeah.net',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-11-01 04:38:34','2020-08-20 04:45:46'),(433,1,NULL,'PirateD','U2FsdGVkX19jPyjYGLy5MzJKcJZoZhgPmG70xq22gck1kPDHO8wLIbCgEvkNED/KJYmDkQzxMJaCa3H0reLujQ==','851652491@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-10-29 14:53:20','2020-08-20 04:45:46'),(434,1,NULL,'mizoutianshi','U2FsdGVkX18mRALGGn+OBVeANgwfCzrvur+0rGKvc72y5LtXIONTkJ1yuAkr+o+YoFBL/vAshHeQC7WG1EsZDQ==','895096770@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-10-27 08:30:49','2020-08-20 04:45:46'),(435,1,NULL,'huangbaojun','U2FsdGVkX1/Yz+13NerIkHwBvOACJ3IHRKxJJ4iwvsmZx/8oczl71KeCZmUr/RSnz/bew6O0I7np8B3PxL/lOA==','13241016587@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-10-26 18:01:52','2020-08-20 04:45:46'),(436,1,'问我','asdfghjkl','U2FsdGVkX18sshNqcAL7WBlYSpE+K+/NxHaEPzRjGXeLdq4aKA06zmASmfpuKaVBJhPjILsHjPTHLpZ+wYRpfA==','609404018@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-10-25 08:20:37','2020-08-20 04:45:46'),(437,1,NULL,'chenmeng','U2FsdGVkX199MwQajSOmPE9gkb1TK/jN+PiYvF4thERn97jWc1ab2JS3JuXWkOExqgoW27z5oJS6lBBRZUe0gg==','cm1090137187@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-10-25 08:06:27','2020-08-20 04:45:46'),(438,1,NULL,'oo000','U2FsdGVkX19RdZAPaVLK90G5OeSYluGLfBh3jufZ47H6wyK4sHFEitqtAlSJccT495XshJJrGLuD1jKIP8/T/Q==','891523286@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-10-23 10:37:05','2020-08-20 04:45:46'),(439,1,NULL,'weston','U2FsdGVkX1+vfk5pba2no8y2gfowFykqbdKVP96kFPnyqtvC+eDnugDFLHu919NtElFpbWniqWQVTrgMiw+b4A==','3249454306@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-10-20 04:25:03','2020-08-20 04:45:46'),(440,1,NULL,'shw33','U2FsdGVkX19Qex7rjU5t1NCPPyhYiBx30tMY7F79uqwTfYbGf8uLdfY3ANBl5g57T3ezYraiesAemGlNqRJpog==','shw33@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-10-18 06:07:13','2020-08-20 04:45:46'),(441,1,NULL,'tests','U2FsdGVkX19PmvZFgc7LWkQNZKl0MkghhcTJ1SR+0uNW18Z2GI3eGbNhrfM6871ta79JjCsxkJlA4X/7QIjgEw==','10467122934@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-10-12 06:03:08','2020-08-20 04:45:46'),(442,1,NULL,'a1234','U2FsdGVkX1/Cat2dUkPEdFR6VxBSSAKJGd5eScreiTvVA0pY3uXOGHTWi3xK8MUZ2q/6eNJ7Xxtx7PX3mFABEQ==','a@1.cn',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-10-11 03:08:43','2020-08-20 04:45:46'),(443,1,NULL,'qqqqq','U2FsdGVkX19sYZIC6+KqDRe353y7ovfr6HY/+wHtf+X/Et8xh0EwpneBK3q75YMEhZEweYYl9yBVpl1I46FL4Q==','one@one.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-10-10 07:30:43','2020-08-20 04:45:46'),(444,1,NULL,'jjjjj','U2FsdGVkX19EYspnBuwP02lsMpjTh7sZ0A1rGgtPdLeIcuLZQeTghtQHk2vI9O7wmI6W9g66YOySEP57G7pgKw==','0ine@111.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-10-10 07:29:08','2020-08-20 04:45:46'),(445,1,NULL,'bozoyan','U2FsdGVkX1/D0IOLrX7zkYctiSEAVaEWo3t15Ksi2HPSV3w+jYjDdvxzGpneFavpQdWKk299nE1+pIsI3X2Kig==','yanbo@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-10-10 01:59:19','2020-08-20 04:45:46'),(446,1,NULL,'waterman','U2FsdGVkX1/SnNmqwDzipFMUYyuA9+gOZCGN0J4pck5r2mEujzkiDyAdC1xoEHq3+oYp8OUnfhT2vPxI0O2trg==','waterbbs@sina.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-10-09 15:00:53','2020-08-20 04:45:46'),(447,1,NULL,'tryer','U2FsdGVkX1+l7z1YvNeXw3KYyl5M9WqAHhMw6w+swbDdjqLV38WZOwRgYLGXhBiOeEIDfYDxls6vGUdBnoqn1A==','75303307@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-10-09 13:58:52','2020-08-20 04:45:46'),(448,1,NULL,'hhqqyy','U2FsdGVkX1/rWpxlB4CRWjp+td9iH1Z1Kdfo/4itF46UYWaWSTqAs+wbshmS9gvKMyRZfirpTxU/NGlIW07JDQ==','1015815279@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-10-06 03:37:35','2020-08-20 04:45:46'),(449,1,NULL,'yegaogao','U2FsdGVkX1+YRNhuJakv/0H5NOEqYxLH1Eo9qYpgG1tfAgMX82Wdf4PCHvF5KgC1i4jFdtTM/A3ThG6iUrCxPA==','792142550@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-10-05 01:01:10','2020-08-20 04:45:46'),(450,1,NULL,'munegg','U2FsdGVkX1+zWXzGM8VA1DbqNDXLSF8AIj1dxSXcu8DPj4vIAM5usv8azUleFI2NcO/kIr3WQUkD3k1tod5KIw==','1592061336@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-29 06:04:28','2020-08-20 04:45:46'),(451,1,NULL,'kerner','U2FsdGVkX1+X2wK3hpZXFRcEciSWXEXkTzQurgKXeH0sHNKqliOVozlS4tbv+AnpighUwO4/dS1oGLETF31eyw==','wufei608@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-28 01:45:31','2020-08-20 04:45:47'),(452,1,NULL,'spinach','U2FsdGVkX1/B2INNO4jSDoIZ74XYum5sbHav7uCnn9ZNIY8ED7dgMY6n78ifF+i0IVh031Er62l0Fi4k0QfqJg==','l_spinach@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-27 07:22:07','2020-08-20 04:45:47'),(453,1,NULL,'hxyoo1990','U2FsdGVkX19rOsW/0SQPU+yybYLwrQCHyCUh/lKjB0Vp/F0hQ+EPWc4lwiVuutuix2hLzmA+u58fp9hPFdV5fQ==','971062861@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-26 09:46:33','2020-08-20 04:45:47'),(454,1,NULL,'kamaws','U2FsdGVkX18TMLq+rMhqVgycifGig5DeOmYTY7N9DPowkyG/fxQ13EhJsIVfksYHeqOojM1JFM8r2WseaXrifQ==','kamaws@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-23 09:27:47','2020-08-20 04:45:47'),(455,1,NULL,'ddddjdjj','U2FsdGVkX1+ZD2DGVVPZMRxV5dLkaOKO4j1dg0xsa0whjW8Qdy2vxEMdbLlCVRVIYDEwSWVjRl/OT+QlQJgsfw==','ddddjdjj@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-22 09:44:13','2020-08-20 04:45:47'),(456,1,NULL,'tester','U2FsdGVkX19pQwORC8E0hNPr6NUQRLboC1ldRtN5yMZ3yM08jqLuUT7Rju1Fmx3x80RnAjAt6MGE1Mvm203fQw==','nomadlibra@gmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-22 06:18:15','2020-08-20 04:45:47'),(457,1,NULL,'jack1','U2FsdGVkX1/SptcP0bhu3PMMgNAeYuG5c8ciGnU0sK+UfC49hyXWmTJ1i9lXLsRJdZbv8MEmBeJ8R7iVj6/Swg==','phoinixtech@139.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-21 14:15:00','2020-08-20 04:45:47'),(458,1,NULL,'user456','U2FsdGVkX18xhQgeyBO3UPeuSt2EikYiF6CR1OJ53zQW5A5i7xS1gdBnMI/7/kx4DCq2a611EijEH3EMcgqdiQ==','1443975646@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-21 03:43:56','2020-08-20 04:45:47'),(459,1,NULL,'user123','U2FsdGVkX19hpuyaMAVjnnwuFedPqYcC8Kw8VqVAZVZBVxPaSlqAcLxiQZeO3G6O/TGMZgd9mVwGg7HEqDDyQA==','1443975363@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-21 03:42:08','2020-08-20 04:45:47'),(460,1,NULL,'wangdengbin','U2FsdGVkX1+Ub5Iy45RJWVdaEsPwFDwfktRCif7m26Src+mTqmejB85ud2+DsXO3z3wLVGC2Syn9Xf91eaGRyA==','wangdengbin@live.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-20 02:54:56','2020-08-20 04:45:47'),(461,1,NULL,'testtest','U2FsdGVkX1/ZKkEjzQygPQcuXDEMxQ6bxa2otxu+qD44543/Y/l7RXnzQhJyoH1JxEPfp96nLzwY02C3/PhLOw==','testtest@msn.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-17 14:46:12','2020-08-20 04:45:47'),(462,1,NULL,'google','U2FsdGVkX19TiaiQN+FaJggTZwsN4s7e0cCpkZtrak2E1hKTsKduGxFxZtYtxb/EItnYRq5R0k9lbt9/Xy6yJQ==','google404@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-14 09:39:54','2020-08-20 04:45:47'),(463,1,NULL,'helos','U2FsdGVkX19iw0FEYeHeGLuwwbTgWqaKtW0oRajzVgcOCKnzfz0Eh7js00HvJD4KbcfDuyb8BejUL81s3AKc7w==','helos@gmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-14 02:32:57','2020-08-20 04:45:47'),(464,1,NULL,'unuai','U2FsdGVkX1/ynhk1JWwfjxnvwktwhXYkGqJ5BzZX08mJtcFitIgov8P3XV6CZfXQkCyTRIUSZDnwecr21OPAqg==','920573625@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-13 13:36:15','2020-08-20 04:45:47'),(465,1,NULL,'test112233','U2FsdGVkX1/B2a5msiyiWMgHOlIoiB8xXalnncje6htxRPX26fG4MfTWE0ekz19/0AKBgifk7ZdHiuEq7DOfPQ==','test112233@test.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-13 10:47:55','2020-08-20 04:45:47'),(466,1,NULL,'xilihuala','U2FsdGVkX1/V2q1Uv40Rw3Cv2Movq7JCvAzQnIhrfPjNxfK5VjInKBbaEOOCz0zo1qXeldUMLFHRdRrRuVWrlA==','244106302@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-11 08:06:15','2020-08-20 04:45:47'),(467,1,NULL,'raymond','U2FsdGVkX18YP75xziSz/f+isdt6YJI62fByfFJt1GOTnuMm9xpX3DZ54TvnDSsq5APQGMMKV4Zk8KPOCFlMWQ==','27915802@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-10 09:35:08','2020-08-20 04:45:47'),(468,1,NULL,'reboy','U2FsdGVkX19351EHpmzDNmFLIhlx+mZyVYiKeScHh4k53H5GOmBhO9nnsLafK9AV72v0M3NyJ/zv0M27axRJvA==','1052993999@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-09 08:58:14','2020-08-20 04:45:47'),(469,1,NULL,'silencesky','U2FsdGVkX1/p3s7DzIcoVGg9ZQTQK3nYtWtb1KGipqZ5f4caCICMaJe5narIFwMxTZqljNAxgiMzKOmu5NbWUQ==','silencesky_xx@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-08 03:55:47','2020-08-20 04:45:47'),(470,1,NULL,'Jeff_Tsui','U2FsdGVkX1/07WcMvR53dGNwr0u57UQSOeVqJ+x48ZpzXaWra5JV6mHcTq9ALMfMRTUPSmdsCQQMaSZ39jDqSA==','345071686@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-08 02:50:07','2020-08-20 04:45:47'),(471,1,NULL,'silenceky','U2FsdGVkX1/m7Zarj5hK0W6Yy2CXfPRFEPk4V1WSA+iM/bK/NTBx2FuEXuKBoX50ny3Iuk+XiLMCeYBMyse7Gg==','silenceky_xx@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-07 03:48:15','2020-08-20 04:45:47'),(472,1,NULL,'xmf483','U2FsdGVkX18YXdUYlJq7lBueUo8Pd0r5/wDrB7dcE/vYeAiId1DJpLuG4izTLgqPm5fjofk6bASfff4Pct1Zcw==','693559916@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-06 07:54:31','2020-08-20 04:45:47'),(473,1,NULL,'longo','U2FsdGVkX19S9FBiHeZXHjsq3f+HtOnpTTdauyErCUm4gRCARcv6vaC5mt+im4f3YYEDjhEhwR4KnWXAI+iA8w==','ffdysd@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-09-04 05:20:37','2020-08-20 04:45:47'),(474,1,NULL,'Sunlight','U2FsdGVkX19tW1Ke8oJftBX2Qu+Q2EYTjSaSaFNrcLk+NXcp6RkJBAxPT3WDv153Vxq/7o4aohSA7iEOH5KiKg==','929746887@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-08-27 15:10:55','2020-08-20 04:45:47'),(475,1,NULL,'adminadmin','U2FsdGVkX1/KPTK1jBj6AjecYCbMqBnPMKhyCIEfJ2ONhHeADeEmqIy75Walh4FscnPQiWEuQM/LbGZOP3/tlw==','yilikun@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-05-29 09:35:44','2020-08-20 04:45:47'),(476,1,NULL,'tissy','U2FsdGVkX18laRdiYlX1BRxvj4T3yfaRuN3FfUtRSFuX2k2ivx5MpW42w+KrLkLnU9IoLwK0AfNGR2d34yPkHw==','85432570@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-05-25 04:13:16','2020-08-20 04:45:47'),(477,1,NULL,'yytoday','U2FsdGVkX1/I4hj7RMpiwkL7YMEHTZSEwkQQIa0UVL4QU2B9bap12fF4wP2DWJEL/GCBEF0Peuc3i1x+kZd+fg==','329402423@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-05-24 08:21:04','2020-08-20 04:45:47'),(478,1,NULL,'zhangyan','U2FsdGVkX1/ItE2rl0s124Op56ufdIhDniAd0w2M9fwrgXsL7CMCwerrnAO0ZCNIQmERjJX+utvK+ZX6tM7Kcw==','zhangyan@qiyoukeji.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-05-24 06:57:05','2020-08-20 04:45:47'),(479,1,NULL,'tales007','U2FsdGVkX1/dDNEB9X+Hl0XNyAGxc8dGgk3NK1eIGei45KzH7V9CzKA553CAwRwUm8uY1eraeIS8gUhCFq3NLg==','borenwu@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-05-22 05:51:58','2020-08-20 04:45:47'),(480,1,NULL,'tales','U2FsdGVkX1+kWVqSqhvR9gRdevudeFo3BzngFv+vvv2FDOnbhXxYWwEOCd7rR4G7fCN8wNSQ+WTaum6gs5Ir0Q==','missweike2017@borenwu.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-05-22 05:51:21','2020-08-20 04:45:47'),(481,1,NULL,'aaaaaqqq','U2FsdGVkX1+QF1HWPH9RBaPW3pylPkvZtCyEHdAKULQk36EJnLiw68v51fi/FOMHmPAplY7VY1whG+jHQNMd7A==','aaaa@ssss.bb',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-05-18 15:19:42','2020-08-20 04:45:47'),(482,1,NULL,'aaaaaaa','U2FsdGVkX19FcO4h9gaVJOxOd7e0s6CoYkLrtXlIGzosyFc5N7Dl+EHuCyy/0wsUZkhP0/iuWddfJlv227OIBA==','825681860@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-05-18 07:20:12','2020-08-20 04:45:47'),(483,1,NULL,'fanys0806','U2FsdGVkX1/mUOGGTVyvMaQEybFxKCcxg+3EXBMYspfcHWqBr5De7+G6K2inxAFEgIziyNF5cvEonMik2rzyEQ==','fanys0806@gmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-05-18 03:27:35','2020-08-20 04:45:47'),(484,1,NULL,'dandanfox','U2FsdGVkX1+GkMvAYkYsWnwOTQbpK43YRtqxcl2R6/2wrjhKd+PV4mrIsDm5cy5jD/bkcZqG7L4FK/S1RSxpIw==','dandanfox@foxmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-05-16 22:39:49','2020-08-20 04:45:47'),(485,1,NULL,'bzm121','U2FsdGVkX18TJimoC3CZEtNxoNU96qcHKCOgyQY3tv1c/DssToQfKunCYUXnfsrrBscinHSUXTg4Ao4s4VwEVA==','2442101@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-05-15 07:14:32','2020-08-20 04:45:47'),(486,1,NULL,'test1234','U2FsdGVkX19sbRFYnpfzWxRVmDWWMjMuu3T+77hcVGYkYYvl27eZevUnq6vwJ7nEp5htpXkq1A0z8ttcPJdJ/w==','chenzxok@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-05-15 04:49:15','2020-08-20 04:45:47'),(487,1,NULL,'master','U2FsdGVkX19xax6BkJ4Si5ntzi161HHh3rbIc1OB7lTl9J0+a0/bRo3+NYlPCIP9DlrgGCdzJAJzJr60oV4opg==','afterninety@gmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-05-13 09:56:12','2020-08-20 04:45:47'),(488,1,NULL,'lining','U2FsdGVkX1+kFy9GTk9/iL+VRuW6jsuH0Bh02Wd3uQmPt2NhpkFQ/vDK8ihY20W0YmIxQUAMfgK+GkeLZVfJAQ==','Ezrealining@outlook.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-05-10 02:38:58','2020-08-20 04:45:47'),(489,1,NULL,'icenyhy','U2FsdGVkX19iY1Q64LH0EWqZq2DCT4UiPD00UV5GBWacbD7xDxdaztog8SiTZo/pFJVd3R37mdrcbLdOd+JxqQ==','75011577@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-05-08 16:07:41','2020-08-20 04:45:47'),(490,1,NULL,'czn0623','U2FsdGVkX18pI0XDpJkDzLg6IDImr1kq/U534VNE5rctPKPYhicyTjvFyFXxSAISERr3Wb7+gBgbAqy7AhuSMQ==','869710179@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-05-07 13:15:06','2020-08-20 04:45:47'),(491,1,NULL,'pl0912','U2FsdGVkX19Nau3AL39EiMBWu4rGSaklQSWKp4G6iC29+ASD0QefNByG2LSv1OIVbQL6OvY6HtnAIXWvRZU9cg==','peasonlee@sina.cn',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-05-04 11:09:17','2020-08-20 04:45:47'),(492,1,NULL,'zxt111','U2FsdGVkX190YazIkcyWo9yCVQ47h+XyDgt9Ck0j1G968FBu9phYI6eKCf2e6ExC3aIxYsB/jzj4sKYF2nqUrw==','zxytycs@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-05-04 01:30:30','2020-08-20 04:45:47'),(493,1,NULL,'gggggg','U2FsdGVkX19+AlsWPsSKRC81nVQG+KQ+LiQ7oxT33y9XSBVeVtpBrJsjzPro4Zz09nTW9P1buk5fSxr6RfCsAQ==','ggrh@me.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-04-27 08:23:42','2020-08-20 04:45:47'),(494,1,NULL,'test123','U2FsdGVkX1/12UgORiu2DYcwee+deHg9zP8Ab0L0fg4HvREj9k4RTzfO6gnnF/8b8RN7pBMpOgG4obiyCHyX7Q==','test123@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-04-27 06:04:00','2020-08-20 04:45:47'),(495,1,NULL,'betterman123','U2FsdGVkX1/JgH9olU5qPu7v6Kk1O4DuCiL+6OHcvu211/Pjnwmns/N/VJbIJmQLD3Bh9j/slLI7WdstdU3buQ==','3137340738@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-04-17 03:13:52','2020-08-20 04:45:47'),(496,1,NULL,'kankekan','U2FsdGVkX18wTYkMydUQMAKDGcB5FKEPBCzTSCUpTQtXG0MikHvCSykX92VcedrFSMtkSRcHpcREq8KQUo3wfA==','kankekan@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-04-12 12:28:16','2020-08-20 04:45:47'),(497,1,NULL,'limos','U2FsdGVkX18SIISCsApaTOFSU6n+hLzpEGro6AO29UIlz7vcsxsg/eg5im8PwX4YxUQvi48SS1DbcS41F4eXFA==','18829012013@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-04-12 02:42:35','2020-08-20 04:45:47'),(498,1,NULL,'serveryang','U2FsdGVkX18fxIL//ihne/cMUUo2+a3gHGfFtBRFYb/yJKnOctq5K7pcoDH7t3CbhyNU9GqaGzXgh8N9Ttk8gQ==','serveryang@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-04-11 12:50:19','2020-08-20 04:45:47'),(499,1,NULL,'hcying','U2FsdGVkX1/AHHUBfrO/BI+ECBv/rHm5Apm7hnrKNDG/g9AZeca2qqCzH0rLnZo1KYY0wWfMewbwxJaiYETyKQ==','960696163@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-04-06 09:55:10','2020-08-20 04:45:47'),(500,1,NULL,'ccfwwm','U2FsdGVkX1/do7TXIe/YM1oSQQZQIac+7SiaR6X6sdMWdjgYelDES5EpoQYt7wGt/ENOzSc3UZ1XOdKzo3W0WQ==','ccfwwm@gmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-04-03 06:00:16','2020-08-20 04:45:47'),(501,1,NULL,'moocsk','U2FsdGVkX18zM8Xqle/lAdqPSAVZmqYsfP2TFkCcpjQ8gXfxEejKyFL8NolgyLoOEnrYAxHipC9ZLD9Liw0URw==','moocsk@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-03-28 16:39:44','2020-08-20 04:45:47'),(502,1,NULL,'skateorrap','U2FsdGVkX19Cb7jwUl08EgFlw2dOUdqrN/6GjDxeeJBo5jAzYv7/eI8E/7fsVQx923ljRWIFyZtA8bu5RGtmRA==','chao8244104@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-03-20 03:07:19','2020-08-20 04:45:47'),(503,1,NULL,'XiaoBingBit','U2FsdGVkX19gIK3uLx1pM10f5M8KHrS56TASFi+qGnTDaydN7JcOW321ebHJgY4njcqx7lyPi8Sruxzzz2GayA==','XiaoBingBit@q.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-03-17 06:31:16','2020-08-20 04:45:47'),(504,1,NULL,'snowspace','U2FsdGVkX197O6ZD+ljNP2tpjjXKfHUVdbjQSMcqPwysoG/hNjNvVKEozulGa7/pvz1nyYmce6aOTEpM+gv1DA==','snowspace@live.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-03-11 16:56:57','2020-08-20 04:45:47'),(505,1,NULL,'ANTbaobao','U2FsdGVkX19QAAA0yyMlSlt5yUxWJCH31iW/SrCq2/w0do1HgvzCY7Z+xVk1ZhNDNJ9hzWfAyp8dYkuxrb8AJA==','2929712050@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-03-10 10:32:53','2020-08-20 04:45:47'),(506,1,'胡威','huwei','U2FsdGVkX19Rr3+DsAH/TIqKb0Ps6JBVkMSJbLfXwbTV2yoEk96m2Gl6e7y6y/cMuKFzfq22BoPmoUGc1YP0YA==','253195057@qq.com',253195057,NULL,NULL,NULL,'1','程序猿','',NULL,NULL,NULL,NULL,'',NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,'湖北仙桃','0','1',NULL,0,NULL,'2017-03-08 11:40:20','2020-08-20 04:45:47'),(507,1,NULL,'moueimei','U2FsdGVkX1+e4m/MwsKwf6P1M9lRSmIvuce5/AtkMVzNYIeXlGHBrRkaMRlXrULRj9whIlULVfmt9zluBmP9xA==','moueimei933@gmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-03-08 09:02:18','2020-08-20 04:45:47'),(508,1,NULL,'victorcq','U2FsdGVkX18W8Ty2rHv69Bu2628X2PkZ5SMG5PzFNSI5BaykUdlKQ7qR01KbQS9Pd6ilVl5f6G4BChbV/YJppw==','714900@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-03-06 14:16:46','2020-08-20 04:45:47'),(509,1,NULL,'Robert','U2FsdGVkX18bAdsh4UhFIMqfaBBZrXYcC0yU/tkvDx+kfvPGXgpVIgNNKP/IMvyIIaVzQ+BufIsPFzehYUtNxw==','administrator@crobads.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-02-28 12:10:04','2020-08-20 04:45:47'),(510,1,NULL,'Robert','U2FsdGVkX19Yms0y7aoPeOsGyPX+N/YHnosloFMsToyyZUdJ2xcKB4zXbdJZPzN/04JjCA2ayzhSpzHB3l8/ZQ==','administrator@crobads.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-02-28 12:10:03','2020-08-20 04:45:47'),(511,1,NULL,'denys','U2FsdGVkX1/G+9fgvY1PDH1As7l1JiyYDF8AOUZl9q/+9yb257LuFPrJyPpk3RXpisPB9Zhr9A0wJIMU4hnf7Q==','me@denys.cn',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-02-28 08:12:33','2020-08-20 04:45:47'),(512,1,NULL,'root123456','U2FsdGVkX18RJJwEwfm1vPOfrgdfWhR5sZdymsERO/2MSfC0y/1zmJ7VLiN1O81RE3xabySPhCgQNBiQRJyYoA==','3035342354@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-02-24 13:19:05','2020-08-20 04:45:47'),(513,1,NULL,'heart','U2FsdGVkX19y+1kw7H9bRL0Q2KGepANPar50VACXJn9s6Z1gRhtpJM+OJ/TX2EM/cwwzcH/AQVXDJ6JI4XRjug==','1208434930@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20170228163607.jpg','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-02-24 08:46:06','2020-08-20 04:45:47'),(514,1,NULL,'cmaple','U2FsdGVkX1/ElduxnMJRQyvWaEOets7nEwB/I/LMZ7jCMPkkdvERg5pe77EnT9NkWHE/EsQokAEPWph9KRtE/A==','chenlunlong@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-02-13 07:40:51','2020-08-20 04:45:47'),(515,1,NULL,'angerpeanut','U2FsdGVkX1/fbeJ0ykqTdAWEXh0OKzqfn9UG9BLW231Da7MwyNllMJQLaIl4BSvzqPtXbJ892SkH0eDEMb21yQ==','2290791526@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-02-10 12:01:47','2020-08-20 04:45:47'),(516,1,NULL,'zhangyanjun','U2FsdGVkX18f+WNfQSElB8qx4JPQeCzh+zcZSxZK4CJX7nQUiFhT2sbpT3OjJvghgATshFKR88IW9A5CVz9Yvg==','632308388@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-02-10 01:56:15','2020-08-20 04:45:47'),(517,1,NULL,'Sigma','U2FsdGVkX18Ro+513FzJwMeTETHUQFQV73DW/rj7Hcy0YxCUZ/ZJeHrz2QhhbsgZyysNhCj5OztoRnPYQyQcWw==','ecoceo@qq.com',NULL,NULL,NULL,NULL,'1','http://getcrx.cn','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20170209235540.jpg','0',NULL,'北京','0','1',NULL,0,NULL,'2017-02-09 15:48:02','2020-08-20 04:45:47'),(518,1,NULL,'faace','U2FsdGVkX1+gLlJ5o3tfKycGPqbDGFxnBv7yneNE3LDSM81cZ0UIax+LSsb6eM/1ti9+BmPiC2mRaB0dsvoKUQ==','faace@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-02-07 06:02:53','2020-08-20 04:45:47'),(519,1,NULL,'noname','U2FsdGVkX19rsGae8BNGSrmzYDwYmi9uWpBM5WRyNjcrwwLjUR8M9bH5kMsRmE109Q3iAHZXQZqePnGDq0V72A==','djyotm@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-01-23 01:27:29','2020-08-20 04:45:47'),(520,1,NULL,'qdotm','U2FsdGVkX1873n2h20yvFTtPjrirLzJhmgjGiW9yVab7YVKga48OwmR/amPKegWGVRtEt/ngG0WbjniueC1+PA==','4sd5f64sda@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-01-23 01:26:14','2020-08-20 04:45:47'),(521,1,NULL,'testuser1','U2FsdGVkX1+/oBa+1+M0Dz0HSsLQZ3U57wnER9HWnhNzmHAJBIooLtWKAOLvJAQQkQYuCFuqsJkMHVutAxv1Iw==','czj237622800@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-01-15 10:16:08','2020-08-20 04:45:47'),(522,1,NULL,'baobeisuper','U2FsdGVkX1+Jlc92XfvCF22G8rI3voWR7ZJT9gCP0F4y20I2tSYfcRqzAdMEmAz73yEzHZBDTGLG80NR8FWlUA==','baobeisuper@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-01-14 02:22:34','2020-08-20 04:45:47'),(523,1,NULL,'test01','U2FsdGVkX18lytUSDEiBSrSPMbpIEc2N7Xx/36QE2iltf/2kUnwpUEhBAEUjcp9MD2IahWVvZtG1J0Nn/fRaiw==','qtbjis62019@chacuo.net',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-01-11 01:02:18','2020-08-20 04:45:47'),(524,1,NULL,'kinganeng','U2FsdGVkX1/JLBvP4fx7IYRq0Spu0X9U3L/lJCM1bLcCW3PFN8zwnONC9Qb2nRy4IgmKWXmQ9bdhSjKxiVFFDw==','258033591@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-01-05 10:26:31','2020-08-20 04:45:47'),(525,1,NULL,'qun120342833','U2FsdGVkX1+gCfIxRUV7G1obahf7vbj3wp/rzpaGQLGTHJouQHGj2XybEauVIHPRNelkyVz+1XKu9aPDojft0A==','928623230@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2017-01-03 05:21:36','2020-08-20 04:45:47'),(526,1,NULL,'gaopan','U2FsdGVkX1/BuEEcw1lQ4CJjVUazEF3CMBIGRvI8zsJjf3A5hq5QQu2oHFcXO94uDrrUFrChgNv2miAUw0wiHA==','gaopandyx@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-12-27 12:43:40','2020-08-20 04:45:47'),(527,1,NULL,'chen0512','U2FsdGVkX1/DmkvApnhF0qZdN/4Uwed4+UBTwB6mxZeVlkp3eLNuNZTxbNLPJL27MYBW4m8U0IWIrf8++rGUmg==','930292008@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-12-27 08:02:55','2020-08-20 04:45:47'),(528,1,NULL,'aaabbb','U2FsdGVkX1/2oPqLnHPkckTh1olUL4ox/joWjN1zhLWxZWF+kqN1NO7MwkmTSEcH2MPFkt6R9TJ4zdKTE9/OlQ==','aaabbb@a.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-12-26 03:55:59','2020-08-20 04:45:47'),(529,1,NULL,'enjoy','U2FsdGVkX1/PcTBeChUX+XxnINyNYSFH/Rp7lMmWcSOGRgmhW9QhhGRM7xfrikN54CcqyISDw40aPjAIf4wnHA==','179952271@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-12-21 08:35:15','2020-08-20 04:45:47'),(530,1,NULL,'qqfelix','U2FsdGVkX1/21cHZm5Og1WfEpopYzBagfHDWZBeqZNnvNZvT2wNhuuUgy+3Tj4IICCKExFV1tJhhheTmnbv9gw==','1514165175@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-12-21 01:12:12','2020-08-20 04:45:47'),(531,1,NULL,'yy249357','U2FsdGVkX180x2/ZQgwFbYsUshKvBHvVkHQEEwvhC8MlMzoX9Q6eCoSdl3+TbcB0+lVIaUDIkG7MKP+0Cl/pIQ==','1120888354@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-12-19 10:01:21','2020-08-20 04:45:47'),(532,1,NULL,'kuse2001','U2FsdGVkX19cCdIwKrPx+3dl8eaq4IxAGJlSLF2GICfYmBvQqXWvtXMCaN58LtL8RCPptvTLvfx0tD49jDyVMA==','kuse2001@hotmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-12-15 01:54:35','2020-08-20 04:45:47'),(533,1,NULL,'Archie','U2FsdGVkX18xhwkhUSLWFAG7c2dUsaj1OVYB9W2gc9IOkgLXCEIZCr2uZGSp0/YJCwrQVIU2qNaN4LQ7AZkZSw==','912293097@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20161213234830.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-12-13 15:47:07','2020-08-20 04:45:47'),(534,1,NULL,'lalala','U2FsdGVkX19UYX0MyNSJ+F1r5X/hhF0GAc9hdZnvwns8h4LLDzDCQ4Mz3to9xMTnTd9Y6BPrHDkQ+GcwQLugOw==','976639215@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-12-09 08:36:08','2020-08-20 04:45:47'),(535,1,NULL,'cccc1111','U2FsdGVkX1/SwaqybBEVfX4CxgFgY21jjL6SEw8B1lxOV/66i6zBmIlL4EZIs9REIfrdQmocj/croGat/CcPlg==','1053127642@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-12-08 09:00:11','2020-08-20 04:45:47'),(536,1,'','youdelu','U2FsdGVkX18X+i2KqdM6mPevV8SZsOOhxGOzgE/38nJjrmIYD3ZlC13RVFHrjAd3hK7w0GrYZWl5mxaEkpgD0w==','762283780@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20161208155100.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-12-08 07:50:12','2020-08-20 04:45:47'),(537,1,NULL,'cjz9032','U2FsdGVkX1+eIwVIp7MBMgf3lVLNDThJZhSe9Cf539oZm8l7B2xFkA51evjSRcyLap2i4wn+sggN9/fBNjaxCA==','402821051@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-12-08 03:13:41','2020-08-20 04:45:47'),(538,1,NULL,'Michael','U2FsdGVkX19zXvdfa+ubZyid6Caz1UsrS9hXnJdCb39MRnUXLF+kNleEAA8kqQMBT4JvD25H2JWR5Ip99yYarA==','274388511@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-12-07 16:52:43','2020-08-20 04:45:47'),(539,1,'天马行空','a168189878','U2FsdGVkX18+7o6BgPtnxw4i5y1metfUdpnBA8Z0qd1d7z373J0p1Qn4RNZxUUsI7Lovjo3i68JllmMhwMFFuA==','168189878@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-12-06 11:41:29','2020-08-20 04:45:47'),(540,1,NULL,'Mrlijin','U2FsdGVkX1+f4lNWuJoBeHztpOaW2Lku7lr4TokoyCUTFihHR6LZBZEzj+Bo0LbPr/5j2VCav8BGwfGH9rQYEw==','446358087@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-12-06 07:13:00','2020-08-20 04:45:47'),(541,1,NULL,'web_5','U2FsdGVkX1/LhojPagWl5iYnzLoNTeBdBX0NIwozCJuAdDM9AvQkjCoAZwbaVzqu4ThPcLtI3tTG5aRbRbaWfQ==','wenzhui5@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-11-25 17:49:46','2020-08-20 04:45:47'),(542,1,NULL,'leexy','U2FsdGVkX1/Bxb/nBYrdUp33EWYrrd1KKzzVM0OpubryK7/VafZdciX55FNv1VMLf4DtRTxO7+5VL7FPW5Ei2Q==','564311857@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-11-21 15:41:50','2020-08-20 04:45:47'),(543,1,NULL,'swq778629322','U2FsdGVkX19OGp5lyqzqp8DLBraW3wmUe614YSxQswDsRkh6ZvqICykYYdg2TcGqCm3ZmrBYsUjwWEnPmVrLJw==','778629322@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-11-17 23:56:38','2020-08-20 04:45:47'),(544,1,NULL,'cai88133225','U2FsdGVkX18IJZfCtcE4n7asWFwFhs8IcqwrwintKwMqwz6whZSo4D69FYT/Q2RPwYbFQDMGrGnfvlfRH0Tx8g==','cai88133225@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-11-14 08:42:03','2020-08-20 04:45:47'),(545,1,NULL,'honeysLeo','U2FsdGVkX18TfLNY2wzBnpYs3ffpy9u4BjYXGIMf5p6zR0jJjlGOFazTkjDNy5VENG1m3F8AnanGZfaA4Afepw==','tusthubing@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-11-10 03:14:08','2020-08-20 04:45:47'),(546,1,NULL,'coffeeslove','U2FsdGVkX19BvBAB0m4ta5nlfzhAyOBXpM05E01FV8RVBScXcW9u1JETeXATL+rThNmrnaDvb19XkyTxE7fORg==','coffeeslove@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-11-09 06:39:41','2020-08-20 04:45:47'),(547,1,NULL,'newyige','U2FsdGVkX1//qAg80l+KDguyR8BXIaVJV9NtYJbHPIRGXrTMne0WidHFU23Y5KPGUUDpAINxUHTwcqOy+Qycew==','1570457334@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-11-04 20:22:25','2020-08-20 04:45:47'),(548,1,NULL,'thorliu2016','U2FsdGVkX1/aQEVPRf2vEHxuk2InKjoDKHGoe0EeDcAqMo+Ty2XhCr3CVWe8W9fQVwtiVmE5i30seB4558aj8A==','thor.liu@outlook.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-11-04 11:29:17','2020-08-20 04:45:47'),(549,1,NULL,'fangxu622','U2FsdGVkX1+ybg8c4aViGx6eGNFtk6BQe/hAulOIfS0iBvWNs/hdGN/4mIEqMkVKxcYqxKSOa/tJoqoNFyqsvQ==','fangxu622@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-11-02 09:41:17','2020-08-20 04:45:47'),(550,1,NULL,'alexfc','U2FsdGVkX1+m2lswle+hMwVOkO/tykI3h+xtAvJXqkrxzgPIXg9nLjCk7b8MBShvqcDDcv3pyF2hdHBiX1SD4w==','fengchao8627@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-11-01 09:27:29','2020-08-20 04:45:47'),(551,1,NULL,'alexfc','U2FsdGVkX1+2f7vL5jA/T8UePwgyz+icnLzRPhlbscwy2UJYV+6JH0JAZAOKITiN47kgjjjpukfJFs2LVbnD1Q==','fengchao8627@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-11-01 09:27:29','2020-08-20 04:45:47'),(552,1,NULL,'zxg411628','U2FsdGVkX1+y82G5rlwvHhFkXFrz8/xmKqnp3H+MlI3c+RFzpLGqKWN17MgkGSq8mnfvLF6o14Qn3iW0d1MGLQ==','15003717520@139.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-10-24 12:40:16','2020-08-20 04:45:47'),(553,1,NULL,'callemcool','U2FsdGVkX1/Do5MvVvuTm5YHB7AdTIE7xKpaDSeR19bfyKs39SXJZuZIIF3cMzXRBWca2SeSIt66MA3bFJNU+w==','119584725@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-10-21 06:45:17','2020-08-20 04:45:47'),(554,1,NULL,'armoon','U2FsdGVkX1+1XaYgDnlChmM4odWNmDh1+HDPDjPefVtfn2FmffkXOe8t9uxstrik50PD58I5z73L4zr/FgWZ7A==','vcrm@sina.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-10-20 02:52:38','2020-08-20 04:45:47'),(555,1,NULL,'test9527','U2FsdGVkX1/kwT0p9VjrIJyXneJ2tBSRI5TDizCYY4M1R3XAMEyN/8fTnOHdYLj1q0szQuM60jbk47BompbgCw==','test9527@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-10-18 07:14:50','2020-08-20 04:45:47'),(556,1,NULL,'sunshine','U2FsdGVkX1/uGj/+RInzyaFtnHSSMCf61/GDcsqbT/RgtglCP1dP9O/o8DHp5dTxM5vv4wvUXtwvIsgl5kOfeQ==','1543709714@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,1,NULL,'2016-10-17 06:40:40','2020-08-20 04:45:48'),(557,1,NULL,'luohe','U2FsdGVkX18YFd33tp62FZEy4S4ECiZU+uWZyAuom9IGNkKksF91qyCHyw7Rt/ybbzkGec+BT4G/+znAt4xuzw==','crazy_zhiqiang@sina.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-10-13 05:31:46','2020-08-20 04:45:48'),(558,1,NULL,'maochenhui','U2FsdGVkX19anA1kRTGORo0UeYZ7KcQYQKs555EsLN/H5RIozvOL+AyyTxPOW3h2hhyoRbO7LVTZ5fOwMqK59A==','damao100@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-10-11 13:25:41','2020-08-20 04:45:48'),(559,1,NULL,'zfzfzf','U2FsdGVkX18dpKY5ftXim9tLv2EYdQjcbowRkQjwKy3JFYR+jB0bWyPv1yR15G1mZVSmjcYY6s/5g0t2mAwT7A==','1225148482@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-10-11 07:37:19','2020-08-20 04:45:48'),(560,1,NULL,'mkui2016','U2FsdGVkX1/+XwVaw3bDNJBClBFFS3aYNgp+2CuVEd+zJ/0aBo2Ei5xGYOThpbOs4Czs0W3Du9Hnb4MWKOKkTg==','867528315@qq.com',867528315,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-10-10 09:02:38','2020-08-20 04:45:48'),(561,1,NULL,'mosha','U2FsdGVkX1/l1qR1lLvB37r/8KBv8CoNiLaQFtEjBdYI3LF6Amd6xyMeitSc12giOEM1Q9qo3SbfmG2aflxLeA==','2765516396@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-10-10 08:14:21','2020-08-20 04:45:48'),(562,1,NULL,'anyang','U2FsdGVkX1/2S8aQaWSiar+R/nlErjEkzPrwVHOJ2mVf/eCdRLWll0PRbW5RhTE9rjcwHzNfSmE9dP3r1iafzg==','504006463@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-10-07 15:07:54','2020-08-20 04:45:48'),(563,1,NULL,'fantasy','U2FsdGVkX19EAMGVa3yD523r+TtaoqCVHa8BHcPIgbVDCPumiTIF7DLAYFD+1Na/bIo1ACHmP6H7NxEJVtbXkg==','tanquan87@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-10-07 05:16:16','2020-08-20 04:45:48'),(564,1,NULL,'flyying2003','U2FsdGVkX19itSWIvU1ay9eT4WxlaUTjtg1XV8zwVDOHffGeiuqs64q4yQ+fJ6wJywpCIMDeB0CsDFTELSqX7w==','flyying2003@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-10-05 06:56:59','2020-08-20 04:45:48'),(565,1,NULL,'kaqiinono','U2FsdGVkX19N88Edg3zesoE2eZQD7fBBrx4kI36J/83HXRIqY7Ge4m1AzArStKHORB9MltUa/J/zfvZFY7umxg==','nononononor@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-09-29 03:34:56','2020-08-20 04:45:48'),(566,1,NULL,'holiday21','U2FsdGVkX19dCg6+sj9RFTNm5Pc+TG5xJJITFnRVWgB3Uo6qp2nBH7B5HADVFTUiY1rHcqiNb9ipSOSrGCOAQQ==','36061439@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-09-29 03:15:48','2020-08-20 04:45:48'),(567,1,NULL,'Rainboy','U2FsdGVkX1+tcMxOz1o5SCWGhIyQm67lvU+63XP4lIPCns9qxhHVf1yxq1FgHLVxY3BiKXfwp5f4K2utUsktFg==','597872644@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-09-25 07:14:59','2020-08-20 04:45:48'),(568,1,NULL,'asdasd12345','U2FsdGVkX1+kQxPbgnihj84iITYQGx0Dre1SZUHCr72xfT3hfk/RIa1OBTajbwFZrHEO7reNPCSDIpuoH4KFRA==','asd@asd.asd',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-09-23 04:16:43','2020-08-20 04:45:48'),(569,1,NULL,'asdasd1234','U2FsdGVkX18G/ygixJiC+Ro1YghOW1m+Yo+kZKLp62vCU4cEl+x+fAb3CH/3c8gnYLDxzcDuJJIOJn3lyMyk2g==','123213@123.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-09-23 04:16:06','2020-08-20 04:45:48'),(570,1,NULL,'adsas12321','U2FsdGVkX1/THaVsGPzQZpz0c2N3kV2Xmlhbn3TTYHDCG5rFpZcEptmyZOyOP40WJ7p6vAQYX1T89/emHCT+jQ==','12321321@asd.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-09-23 04:15:14','2020-08-20 04:45:48'),(571,1,NULL,'joneco','U2FsdGVkX1/pVjn0xA7wkmP/33bCrRHEEbbGI1xrzEzw4eNglIMb2Vm4JPpOXJm8c78pyOhkGY/xESsYG2aXgw==','cq201445@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-09-22 08:00:06','2020-08-20 04:45:48'),(572,1,NULL,'lyln_1992','U2FsdGVkX193kIUaryG0g5XTF62pRtjmsXicY17y2STDsL2Rq9wXI37tzg3/5SoCZBK13OYJqBWtxIOfiMxPew==','1197664652@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-09-20 12:07:32','2020-08-20 04:45:48'),(573,1,NULL,'kaixuan888','U2FsdGVkX19W3LqmN5+VXh1P5y2epmsl2AN8y1AlY3yJqAeJHLialCdebAs5wndcao2flDYDvlK0Gw5Hd6pjtQ==','643721001@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-09-19 01:31:12','2020-08-20 04:45:48'),(574,1,NULL,'hjz940929','U2FsdGVkX1/ZHZVqLSxO15hWdnnirYNulLlXtVnjDjKN87/Xf99YaqOJ7XUrCR/dzqAJQmmLWdTxxnA2AhAEMg==','644237193@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-09-18 09:44:07','2020-08-20 04:45:48'),(575,1,NULL,'LC0052','U2FsdGVkX19E8PS7Eug2U9PeKQH/jQ62icK6kxOTvvDWG4FKr8unAsR6gWn3Cl//a+AQ8I2Rpi4PsFx37f1FLg==','lichao_19891003@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-09-17 09:38:14','2020-08-20 04:45:48'),(576,1,NULL,'Yunin','U2FsdGVkX1+0RoJGrGpIvOmD+fYHjYu7XIBz0hyZ6HM3V9y0ozSygtDAjhktxOuV4tEQoYi412Xjx2tPw021zg==','18321775001@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-09-17 08:22:13','2020-08-20 04:45:48'),(577,1,NULL,'sixStone','U2FsdGVkX18Fp7Q/OKNxRrC+9ULohHiCTipEhEDSlt2JDCv+z1yLZxzJXFUjz7iOkn0W8apOO3lLdUo3kaZpIQ==','zhaoleilei2015@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-09-14 07:07:57','2020-08-20 04:45:48'),(578,1,NULL,'qdliuxy','U2FsdGVkX1/xfzsyvf4Q3yknmYZY1lNUPUjS/OlGKmB1MgtcoomBpN7CEwQvEl6SmxYTwfZ0oTx5uPntW/nnAw==','1444724683@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-09-11 13:35:17','2020-08-20 04:45:48'),(579,1,NULL,'d9008710','U2FsdGVkX1/2p3sjKGkGVDTROG8ZJGUAXTtc8mFxzBm4iK/3xS4vzLzSOiZbg530hSSWjJ5/bZURIf8d6w0Aaw==','136062660@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-09-07 05:44:09','2020-08-20 04:45:48'),(580,1,NULL,'taijics','U2FsdGVkX1+qY4xs8ygzemECtdEJIgf/ragqfLUN32iQgupZjtZ2uYPpe7q5yAO6g5gS0iTLDNQIox856A7oOw==','728971035@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-09-06 10:43:25','2020-08-20 04:45:48'),(581,1,NULL,'xhety','U2FsdGVkX18GlToBanC9pczJ+Vlo33c8HrdTX4jmg6xf0AfMIUJ27SYiajvRKIZNjtlLnPbtBa31Vls4uLL2rA==','xhety@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-09-04 06:42:24','2020-08-20 04:45:48'),(582,1,NULL,'w178191520','U2FsdGVkX1/IdH308hT/vejmvEB/s1s//pNXFHolTD327pe7xGKasfEy+J7dPKainiHQaWHP1w8N7kd0zTk/dQ==','178191520@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-09-03 14:01:33','2020-08-20 04:45:48'),(583,1,NULL,'anuny','U2FsdGVkX1/ZR13ZOvRCQvVRnk8APB02fUGfWLp7MRzmkUpuVcvUWJDYETWaaNQMDx3geMMb/gK4Yq087g0Q4w==','365102722@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-08-31 10:11:50','2020-08-20 04:45:48'),(584,1,NULL,'Andy007','U2FsdGVkX1/OWh2kJd9V5CDtlTsWJGt+TfrpjZr1yz2xlnueTvZhNz/vkqeHENliK5t/RVmf3XQGDfEDMkIgKA==','fujianzff@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-08-30 15:40:39','2020-08-20 04:45:48'),(585,1,NULL,'ravechan','U2FsdGVkX1/oMi0/ajDr3jloCXEnmxSU4nF+UHvIZRQHxwj1xjciml9/t6pAL4JcNX6QmGruhPfQDCzsQ36JYw==','ravechan@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-08-29 03:48:50','2020-08-20 04:45:48'),(586,1,NULL,'tb3816517','U2FsdGVkX1+Mq4eq2HBBY7KTz5hVe4bQ/txNzYMUNfyuSHwGKZ2gBCkyFgntu8KsbBnRKNxL1QDqjJIXz9w0aA==','702101541@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-08-26 11:38:25','2020-08-20 04:45:48'),(587,1,NULL,'hengwujun','U2FsdGVkX1/34AXFQf/i2Rtcxz/XJ4Kvnf2GB0NuB4wz6pDbhX1SRx5JIeQ41M2ixdiNDIsvX1sp8mPECG4/ZA==','hengwujun128@gmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-08-25 06:40:12','2020-08-20 04:45:48'),(588,1,NULL,'Balder','U2FsdGVkX1+eeZ1XeDays48OJ8sKbYi3oyOprax8i1Df49O+1aYFaoC2H6/eTB2OwbTNnqtpXGkKslTUVFAr/Q==','z.first@live.cn',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-08-25 01:25:45','2020-08-20 04:45:48'),(589,1,NULL,'ccccc','U2FsdGVkX1/N17krxD3cu7KNyYk9z42ANr8I/nKQF5lasg0HriTsQWIW+NzT0OGmzQaklN0Cz8RWnzXfF8Rt7w==','c@c.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-08-23 09:24:31','2020-08-20 04:45:48'),(590,1,NULL,'bbbbb','U2FsdGVkX183SJOatNl01MCR21EQgVl/KzCksex/WaVYPWkcZ0tQCRVnP8+mHIBBuIq4rqlLydqV3UIhLGcj6A==','b@b.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-08-23 09:23:49','2020-08-20 04:45:48'),(591,1,NULL,'aaaaa','U2FsdGVkX1/hP2PoreHjR7y2+dUofeiDv/3n5DEzJ+jz1XpX0cV3N/zqnR/v718YzJNCC5MuGf85AmLMOvoPcQ==','a@a.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-08-23 09:22:30','2020-08-20 04:45:48'),(592,1,NULL,'eminem1234','U2FsdGVkX18RI9kBSq28AjhJm0Cgdr8kK2iAfN4EVcN0baIQZUwtw2rBRgHx8XsJWDoDffVjbmWA6APhBLOwBw==','136915514@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-08-22 03:33:41','2020-08-20 04:45:48'),(593,1,NULL,'stones','U2FsdGVkX1+dOM/dEkc3BdNcMN8gUG1SeSMQ3B7J0H+IVA4zC+DUK7uyDCPYxwCcX6KHFOvFTL4D9V124ygcKQ==','895360475@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-08-20 02:49:40','2020-08-20 04:45:48'),(594,1,NULL,'hpu88','U2FsdGVkX199tMI8t48N0J/VZq9R8TOipwKwk861bxvq8IsJzhk71MX70TxJ06uatMaxnDrIorFAEfXIN8KHuw==','903099968@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么复古风格都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-08-19 16:55:56','2020-08-20 04:45:48'),(595,1,NULL,'aleckhao','U2FsdGVkX18SC5BWOv+sSD+DctgaD6WdgZ3BQ8bxGaqXh0G0I2uM5QeEXo4xBZdzhEAq2DruqnDFMyxmQnmtSQ==','aleckhao@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-08-18 01:49:25','2020-08-20 04:45:48'),(596,1,NULL,'liulangseu','U2FsdGVkX1+5AmNo5IO8sJ3GRulmutTjwrTySm0D1qoIWogmDmxktYmlvA0/UIyqBwblcci7DqiawDSpNL09dA==','liulangseu@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-08-17 08:41:33','2020-08-20 04:45:48'),(597,1,NULL,'admin1','U2FsdGVkX18FSfeb58ZP42z1lD1DJF1QCZPgbtZYQgQFJXdyr4gsFpU2v35amEk5gOJf6+mR3L4lrvIiNeLCrw==','ameool@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20160817144603.jpg','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-08-17 06:37:06','2020-08-20 04:45:48'),(598,1,NULL,'fengweiqi','U2FsdGVkX18Z3p3ZXXuxbJuIlTHUyjOn8bAaHfc+YU1LvRTyBrbhgaqOdqsCzxCCGBJic/cFicVHyr7aTMDn1A==','1012996878@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-08-10 07:07:31','2020-08-20 04:45:48'),(599,1,NULL,'misser92001','U2FsdGVkX1+HmgDsKvRy9ny435cauRVLgQtixzZS74n1kXhpjdu+wqhwwikdDyF62E7Jf8iUsvDnZg/lHq55fw==','misser92001@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-08-10 02:14:44','2020-08-20 04:45:48'),(600,1,NULL,'yuzhishuang','U2FsdGVkX193z3tCFU5Cf6Xa89RqAmww6BXRiGfYFa1B/XBTMHPJ/dkfHkIClysEczuyJCcx/WzhCmQhrNchHw==','yzsysu@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-08-08 04:11:53','2020-08-20 04:45:48'),(601,1,NULL,'xiaojia','U2FsdGVkX192f6sq5Y2UfLulI9hZuaFl5CqbHAlTQvSGS8s1XZTbFOkVLOOwcWfeSd1qr81XRd2e6teoQBKIiA==','374231123@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-08-04 03:30:19','2020-08-20 04:45:48'),(602,1,NULL,'kingjava','U2FsdGVkX19DMWEUZPW7RHVsQbDKcyM015u5RAwvgniVa5XjtdGmT1jydWKeWH7kP6Bqt7irUwmG+QPKzXwt6w==','138962816@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-08-03 09:00:51','2020-08-20 04:45:48'),(603,1,NULL,'sunny','U2FsdGVkX18cq5gZaq2Hwn4u4jTLHOkid7KUMYY0pFRplOUv9UXdWbybg2b5on7miGFz8rPAf1Y1yXbN3WjGmw==','260851801@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-08-03 02:57:50','2020-08-20 04:45:48'),(604,1,NULL,'kk_123','U2FsdGVkX19HM4DMur+co0H+ZzADKlQawNWsXBHU5RQ1FNRiVp1cwqAWTra0XfoQeLjmTQjmP269DCSyozB59w==','2844355199@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-07-31 08:49:47','2020-08-20 04:45:48'),(605,1,NULL,'jues117','U2FsdGVkX1+DIin39IPSZa3wKnjApoU9RDvuZ3QQJVRuc2e+uR30OOOf+JzkcG6V96hp91/Oc5MJtz+tMfafDg==','jues@sina.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-07-30 02:12:52','2020-08-20 04:45:48'),(606,1,NULL,'livisky','U2FsdGVkX19pAVYPDW+S7lUdFfmQsV0Lssgwk/HsaN0mw76HQJQHNv3LEMVTpQmHChdy9Tt2H+bRZQvZD1r7Nw==','262248861@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-07-28 06:08:58','2020-08-20 04:45:48'),(607,1,NULL,'jason588','U2FsdGVkX1/FM1aLCuQg0PMO0Co+N+y1sFOFNaZXOHy5c8gg59oo0b8IpJGJg8Uf5gUNV0bKHSCQjG4JjPUq5Q==','beyondgm5@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-07-28 01:42:40','2020-08-20 04:45:48'),(608,1,NULL,'lufeiopera','U2FsdGVkX197YHx9mxCEM3o5hcKP3djwhtBNHmuLqgX/sA7rEe6r72Zwf09zA/Wz64sI2/gCF2TyjWsDYwLupQ==','181427718@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-07-26 15:38:48','2020-08-20 04:45:48'),(609,1,NULL,'dtdxrk','U2FsdGVkX18g7YQhLXbQIk+Ac0QXjuZT1mTJUTv8X357htUsLjhyL9YsROWPKcWS9Ym5+W9VZNBDSj7ekwQNGw==','dtdxrk@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-07-20 10:46:19','2020-08-20 04:45:48'),(610,1,NULL,'wss610','U2FsdGVkX1+B0k3GkOGw4yNPyq76SJZjL1geC7Q2nlM+OKup8LHq8vJFH2MH8yfTx76U+U20FLuI7tQdYrDOsQ==','wss610@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-07-17 15:06:14','2020-08-20 04:45:48'),(611,1,NULL,'qq3021263466','U2FsdGVkX1/LjbCDRv8OHM/g0Ch5D5nE8uK+mE/3qXU8NWcoxMyv4gQt2uRllg5696eUpdoznMRflWVEzkEWAA==','3021263466@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-07-13 11:35:14','2020-08-20 04:45:48'),(612,1,NULL,'nodejs','U2FsdGVkX1/0K2gahHvvq0Q1KCKCWt9bTxYR1CsL7wRKcmZC0UB4fDMXZkoPQCCfGQ4ImXJBX1sIl+U+IY7u/Q==','1012526057@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-07-10 16:15:00','2020-08-20 04:45:48'),(613,1,NULL,'shaffer','U2FsdGVkX187IqOVVXGXXnbzGMbo4xgZVzHPSAqhDAa2Ok3QmiOOhTwzraP9FrfDqvq75a1m85pQ8YI44Qirvw==','823114339@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-07-10 05:48:59','2020-08-20 04:45:48'),(614,1,NULL,'ansonliang55','U2FsdGVkX19o9cXrV1X9gxYbj16ziPlpQfoNrgpg53NEGbX0p8n/7SoGnOB76UnOzeX3lcZUPIAJqiAdUmlp8g==','ansonliang55@gmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-07-07 22:46:35','2020-08-20 04:45:48'),(615,1,NULL,'wjcccc','U2FsdGVkX18x7BoXrv1VzeIbhu47py6Oeph+f4TP6cP258uu4sCWOuCzxDn3voMo/Mf2ewNuEl133wavl09QvQ==','wjc_1147@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-07-03 11:18:23','2020-08-20 04:45:48'),(616,1,NULL,'Rapheal','U2FsdGVkX18XfrOC3wznSNBhZeqdUvosvcuFnj1yVjib7AnOIo0z+yQgYQqFyqkeJpHI1Nt2alItaWSP9/FeLA==','337605876@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-06-30 09:29:40','2020-08-20 04:45:48'),(617,1,NULL,'hq294874781','U2FsdGVkX19PV0kY3/wJGbaW0JmmZOvEbN7u/0pkF+/L9Q/3CfhgRWK5DWnnR49oftQAYFzxnHnOgh+iaLoIrQ==','294874781@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20160629145801.jpg','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-06-29 06:56:58','2020-08-20 04:45:48'),(618,1,NULL,'zql123','U2FsdGVkX1+l8OD1bpQXf36Uchd4PeKiVS2pcklIEmlLo/BDmyUtDn2ha6MzQB1PSCv1HtUSbw9SNtMMvuIoGA==','zql@yea.net',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20160626155710.gif','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-06-26 07:52:45','2020-08-20 04:45:48'),(619,1,NULL,'haoxiaopang','U2FsdGVkX193su7j+pUNw03quc+mEuenThuWBjk4yzqMOLUMGmWA77BNXKxYNkMP+85srXF7c5bwLkxujoMbUQ==','345021679@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-06-22 06:43:19','2020-08-20 04:45:48'),(620,1,NULL,'mrtangxt','U2FsdGVkX18mmQvgEMPpw8m0zoLhYvRGdVFHF/ZPPb4CI00CMz1hicc3i7q1ZWu7tEdXfPgffL7RsswDfed17w==','228911272@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-06-18 17:09:02','2020-08-20 04:45:48'),(621,1,NULL,'kitlee','U2FsdGVkX1/5wrdzA0exymfOj+L7J2Xk8qwVm+sf21jCE33nJYb7NHXQYdYcIm9lxyZ4X16zUIFZsm+ohh8UFA==','1010803363@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-06-16 10:08:47','2020-08-20 04:45:48'),(622,1,NULL,'zhongzefeng','U2FsdGVkX19+3j40Zrf/LZsjbh324XLSm1xjbOZJBlfEHDOEAs2C66GVSbztLjumAv3k2gQszHF/2sGVR6sgjw==','zhongzefeng2014@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-06-15 08:45:08','2020-08-20 04:45:48'),(623,1,NULL,'qiqi252700','U2FsdGVkX19uWduMaRPKymDCuajG5LhzNt4K9IGaBgybbKXXtADuow/+Y4u9h/+Su79ZjwzDdigz1lNrOgERzQ==','qiqi25270@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-06-13 22:09:40','2020-08-20 04:45:48'),(624,1,NULL,'boween','U2FsdGVkX18KuwiCtbmAyMDACFNeIvNLa44r278NZ9Nq3z6VVWcjWE5amzGJoRn9TF9NU9CHfENYSpWl+IrkBg==','boween@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-06-13 06:09:57','2020-08-20 04:45:48'),(625,1,NULL,'io1444554ty','U2FsdGVkX1/whpVdRvDOPUVIjRsyRjQ3k5rd+gmKt3g5CrhJTPub7ON0iSrMGF8dLkivKhY/Noyr6iHejnQOzw==','deppo@ds.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-06-10 21:02:04','2020-08-20 04:45:48'),(626,1,NULL,'io1444554ty','U2FsdGVkX185fQyxYwRncXYySaYdjWclEQKtm+6mDFrK7LebUmdzjQf9JdAwOFc6TU6YC12mf7uA5lY8QABWHA==','deppo@ds.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-06-10 21:02:03','2020-08-20 04:45:48'),(627,1,NULL,'ShadowfaxGHH','U2FsdGVkX1/gdLxuPWokCYgkkG0zg7gl1YfTJd4J9IG5w2R+BbRfV9+bmMaSu+T/1XXaFQ7hUBwUfllY1dLh+Q==','853407702@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-06-07 04:40:50','2020-08-20 04:45:48'),(628,1,NULL,'chenl365','U2FsdGVkX19277XUmyHrcr/U1PsywQ1EBNSgng7BfYLP+rMWQcB5xE+FPLpm0eZYuLH4eTJGJSN/fWeMZrT4Rw==','chenl365@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-06-01 06:50:20','2020-08-20 04:45:48'),(629,1,NULL,'dark22','U2FsdGVkX1/7VbSdUNL+VomrEMxGxdJnKE7TusNkL4FM7XGHTIXTAKWrNAEPTyQdlI0pO3S2wFTmbwXCiShXNA==','1789937447@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-05-31 09:42:20','2020-08-20 04:45:48'),(630,1,NULL,'cosgbg','U2FsdGVkX1+4xPkcnpu0wktPgGOu3P0dWj3+bWFwGhqk2U72VgIK1clE+/Lm/3998UjMWH8HxdkV6cZfN3cdHw==','cosgbg@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-05-31 08:30:15','2020-08-20 04:45:48'),(631,1,NULL,'q614530112','U2FsdGVkX1+JTX+IWiQC6WYnuDCfwxmN2x8hxgjcypETz2qcx3KgvBGIuCjnFJ/SVBYVt+4sY+JGcbmQQx8Olw==','614530113@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-05-30 03:07:12','2020-08-20 04:45:48'),(632,1,NULL,'zhaohg','U2FsdGVkX195ERPInuf3rrmtvfBHVvTPKuneD/RZXFkfVbkSLgSpo8sRUf+DsAdcobWsHUrUh6iefqIecYoFLw==','373973619@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-05-30 01:48:10','2020-08-20 04:45:48'),(633,1,NULL,'cyclect','U2FsdGVkX1/i51Md1oLQVzJqRryVt2MPpwHzjh+FMKnkbTZcQ0QXglRBFSwERnf2G10EPdunb1xn3lST9p8i0A==','13223@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-05-29 16:52:03','2020-08-20 04:45:48'),(634,1,NULL,'warden','U2FsdGVkX18OTQboEOLp207Y5VzLcUtj5adxIwWD6K2Mqiwjccigab3aeg/n5GTpDQ1O/YiOzWAj1eg60y545Q==','anmianpian@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-05-28 09:18:48','2020-08-20 04:45:48'),(635,1,NULL,'a614530112','U2FsdGVkX1/AfORaOqgGaPZA1Ie/L2kWcU4Xrd7QLqBtNNYcOWaaTrsn1A7XPGsT614J1xMXFREUjNZZWGNAWw==','614530112@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-05-27 09:36:38','2020-08-20 04:45:48'),(636,1,NULL,'mfkjinbo','U2FsdGVkX19MzsrONxm5YyoP93FoTETMX6UXTjvi8+X6PvLNlnJBU0xBf+ICvyB0b98jmKOMvx4wsXtXJRUj+g==','326157581@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-05-26 23:57:28','2020-08-20 04:45:48'),(637,1,NULL,'zhgsky','U2FsdGVkX190xQwLdxv0f4Scfy2Mz7/5eb7oNaiLYOiwvxtLCK6yW0e54exufJOYXr/HDJx6FlB6eRL2DD9xQA==','zhgsky@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-05-24 12:50:14','2020-08-20 04:45:48'),(638,1,NULL,'puying','U2FsdGVkX1883YBzYWjnW37+O00u2pCDxDdhx6QFNx3+Lq4H7R6YywFgKpfJm+Jm5lLGreby/NKzZYqPfaOtLA==','puyi2008@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-05-24 08:05:32','2020-08-20 04:45:48'),(639,1,NULL,'rock0j','U2FsdGVkX196WVvxhrfghlcNNidpqHtRZH6TVk1Qz53LLNcwZ60zW58cD5wJ116TaDNd/lrKghKu1aL7DMGxwA==','rock0j@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-05-18 02:28:43','2020-08-20 04:45:48'),(640,1,NULL,'ch888168930','U2FsdGVkX18bOqWNEDVQ/ZO0O7V8iXLgGhpxKIM0UUehKag82w/op+Dcsq3YYUEInQjKONjwNZ6niH0BkWYMVQ==','403886821@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-05-17 10:25:27','2020-08-20 04:45:48'),(641,1,NULL,'bhava','U2FsdGVkX18V+bbuVWAMzqfg0/GBhnQA/XO3YZmKU3FBkaCYFNBbxbNM9Dy0jWeTpVqPKWYcWkfFnoFWkfEflg==','909678168@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-05-16 03:59:53','2020-08-20 04:45:48'),(642,1,NULL,'sdan521','U2FsdGVkX1+KPiAPJjP8Vc9v6NGuwvpU4wRLeAWaN0OQ+nkepFgLimX3gkyviArGyipPUr/f0rmRllnsZJe1gg==','cherishsdan@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-05-14 12:08:55','2020-08-20 04:45:48'),(643,1,NULL,'nbanike','U2FsdGVkX18pi4abJ+fAWz3ELrkajVxx+e0EerGNWjHwKs1SA9uLdcNkITGIM5De23wR6gaiTCv+q0lYeeRs6w==','qianchongchenyu@sina.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-05-13 03:18:36','2020-08-20 04:45:48'),(644,1,NULL,'contiki1','U2FsdGVkX181KF4WD3Mh5dK7paxy6F21IzfXHly+pf3AH7waLnM3013Q7h9X24alCUypY/AoeiON6mDImjp8Ng==','contiki1@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-05-13 02:10:52','2020-08-20 04:45:48'),(645,1,NULL,'s403933','U2FsdGVkX1+jzx2hw7YR73QVIxUkV1AYDhLljnfa9Ty9FDTO5xcRDzRNou4C8e8H9LGY1qym1mu6eqKgov8TnQ==','403933766@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-05-11 13:50:51','2020-08-20 04:45:48'),(646,1,NULL,'qiqiyo','U2FsdGVkX19gVdB4ZTZ7F0rPbENiUrCNig3/2/wAuQvn11UE8WLMNuPrf5kIh5xHSMCeFNaaQAWx2pDE9ld3XA==','qiqi25270@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-05-11 07:56:00','2020-08-20 04:45:48'),(647,1,NULL,'ivesbai','U2FsdGVkX1+KF23vV+//IAOLDp+gbGKADp7LYYiR5BIrLr7XzrPKBiCGMECzEFIreTCYBr0XVt13Zc+4p6h96A==','ives.bai@yanqiubai.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-05-05 02:21:18','2020-08-20 04:45:48'),(648,1,NULL,'gdhzkk','U2FsdGVkX1/aaDO13OkROVUZ/883X488Ide6rwH+AB5EV/y0wv2xVCkWeK1V9O+lrhYAshyVjoIiqdahPKuBdQ==','gdhzkk@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-05-04 07:31:13','2020-08-20 04:45:48'),(649,1,NULL,'w13485871724','U2FsdGVkX19upSQwbxG0xCcShJTbw1L0ExQrlxQwgFXfQpXXDuUQsWn7mi/xVGL79vp6kSVF9p68qXbtqe9Vrg==','635136497@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-04-30 09:29:19','2020-08-20 04:45:48'),(650,1,NULL,'davidchau','U2FsdGVkX19fmtIjwN8Y4OjfVB6tvwFj+NZafPb69tWM7yN7iHNFh7PJ0+89XDSmeSvIjVNnmSMxx7w6BX79bg==','david@proshopfishing.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-04-29 21:43:10','2020-08-20 04:45:48'),(651,1,NULL,'Moonkin','U2FsdGVkX1+Q2xC5DXi35a9X2Oira1+vJXalX+MdQ5KtDULCGgyMoH1DZ1dvp/FwcBN3Gb7/bNI2lRWVsD4BGw==','498385753@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-04-29 03:22:33','2020-08-20 04:45:48'),(652,1,NULL,'jl89757','U2FsdGVkX19LsfQmklcbvZnlgciVy7lwh6VkkPg9WS1jeJvwIN0gMa3FmJuJmVY0kDxY39EPON4S+EGV+Gc9/A==','851362779@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-04-25 12:29:52','2020-08-20 04:45:48'),(653,1,NULL,'kfai167','U2FsdGVkX1+iRsYiyAIuCtL3QE8ffm6UVFpkwj8QaGtcqFwfPzins5M4pwrrrdWt/9kUM6bxLSzxbU8FTNSIOw==','kfai167@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-04-25 08:25:02','2020-08-20 04:45:48'),(654,1,NULL,'itlangren','U2FsdGVkX1/ebrzPQaHsCveDQxMk5s36Zp20pYB7Wod8ZNP/F2m1zUUD4QzWORIccYIpbcqTqYume9F93U+pVQ==','shallway.xu@gmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-04-23 22:10:20','2020-08-20 04:45:48'),(655,1,NULL,'achen101','U2FsdGVkX18Dny/muleybFin+qEoFH/hHDKULlp6wSqVV+dyebpn7S45wA53jL71GQ8lYHgZo5rZRzegA+7eGg==','324449516@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-04-23 13:03:17','2020-08-20 04:45:48'),(656,1,NULL,'zyy258963','U2FsdGVkX19Uc0a/OPRpAFKBt/qFT8NOrr9/+jzx/uU7nApPr7cPktx4CnB+GWsi1QgL2W3DKEUtrsy5L+Y6zA==','zyy258963@sina.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-04-22 13:21:20','2020-08-20 04:45:48'),(657,1,NULL,'hongy','U2FsdGVkX1/iN+tkYFJHEYVTE57WSqPpfF6opyPdHrOv+b4w8NOXKaN5/HA124z2HqdPHN+47SwXrouhEKxmcg==','981201457@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-04-21 12:49:19','2020-08-20 04:45:48'),(658,1,NULL,'testapp','U2FsdGVkX18fvhwWyopiZFYDl1numn4wRTvfTQJa+5QvIhAc/EbiX5Dktt4zc7jBxGb7xpl7f97wLXL+M5ONnQ==','testap3p@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-04-20 17:52:12','2020-08-20 04:45:48'),(659,1,NULL,'chengchi','U2FsdGVkX1/M5moL0ORYSv8NBexOmJUmfYAp1F3fGT3rmorJV+eTsiGin4YNaE+zccvRlb9xheGLQ/Kz2FkPNg==','chengchi_cc@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-04-20 10:58:51','2020-08-20 04:45:48'),(660,1,NULL,'GraceMr','U2FsdGVkX1/z+XsxpgE945hOesaOssgvdwKMiEFWDawmHq8eU98CEsdF+MaOHVzip6oxX9/i29JQ5sYw9aN6UQ==','jianmo_o@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-04-18 05:28:42','2020-08-20 04:45:48'),(661,1,NULL,'idorothy','U2FsdGVkX18mxcUX1TnKs3rn28WoDuWRYKY60YmWCk2BaGr7GQkNXmkJqMFXhmrc3nwMIiQrKWH4o7meErbD5Q==','idorothy@hotmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-04-16 13:22:12','2020-08-20 04:45:48'),(662,1,NULL,'yaojaa','U2FsdGVkX1/oxp58rrZwhA1HPiQrfGOSLlbZ+7lafpRIBPP0mPiHRyLBa4PSyogOOBx5FlMgPY0EVIlBiAPAlg==','264406@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-04-13 12:21:27','2020-08-20 04:45:48'),(663,1,NULL,'AmorZhang','U2FsdGVkX1+vTCITyi/VB0LqT8ffyjWY1b15kyfrSi6vUhkLVILwTlASod/7jOwZghGWM8zepLRC26CJYwcXRA==','amor_zhang@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-04-11 02:49:43','2020-08-20 04:45:48'),(664,1,NULL,'sdsdh','U2FsdGVkX1+jqS99xCdFtUrpGe4DL6ctz1eyI+J8gH2A2MCfrftiRdcrVJE1xk5pMDKH7Y2/+THowk2Xs3P5dw==','123456@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-04-07 06:51:20','2020-08-20 04:45:48'),(665,1,NULL,'rangu','U2FsdGVkX1/J3fTK9rdGjfRAogKbpofcZIlRwpcfoDQ0dSxGv9tQOLvmSy0XoqVcgXN3LF/rTQP7BmpfrNAgYQ==','785673456@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-04-03 13:38:18','2020-08-20 04:45:48'),(666,1,NULL,'baitongda','U2FsdGVkX1+vUZC9dd7qjW/MdvZPqOUcKFJUL29G0qCoVAh1aEl6UbkAxvHHy461X/2NJFWcjL+GG44gHquzqQ==','99026866@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-04-01 23:35:09','2020-08-20 04:45:49'),(667,1,NULL,'jesse_2134','U2FsdGVkX1/gxlB6FYMYo3gsjJ1kzT4N92XqEo985ZQXLCZhCbG56YBL3lmKLEAhPimXTRGrKqosAE3O0jNSYw==','jesse_2134@qq.com',NULL,NULL,NULL,NULL,'1','默认的吗?我很懒,在写代码...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,'上海','0','1',NULL,0,NULL,'2016-04-01 07:21:28','2020-08-20 04:45:49'),(668,1,NULL,'bm112358','U2FsdGVkX18TU4U2EgTGtwR90hhwdmf+URLyYxLtvL7maG+0oFu0kDVEeZiFVzn44jCSrYs42EfsjXtkYxl+2Q==','571436925@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-04-01 06:24:12','2020-08-20 04:45:49'),(669,1,NULL,'wq6255169','U2FsdGVkX1/H9NnAUeBJHtbcfCEimYZEWqmxyyvcDp9Wx50o2um3bTWOaLoX0R9OeDt1ghPnlj4Z+im17E7WzA==','327250924@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-03-31 10:29:01','2020-08-20 04:45:49'),(670,1,NULL,'gjkoni','U2FsdGVkX1/juGQC5cj0Mxwsun5RvWw+8DPTcrfc2ww9NAosbvi4bLQxd09aN/XYeVpmU5XpqIehp+A9aurdHA==','gj_koni@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-03-29 04:07:48','2020-08-20 04:45:49'),(671,1,NULL,'huwenhua','U2FsdGVkX18M03u5jYHTGDfh99m/srpk0F3IZZP4INhiK+jlykwRCzNgZJVDTCuAmPXgV8n5u9bSWNsX5LQiVA==','794160291@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20160329112828.jpg','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-03-29 03:27:49','2020-08-20 04:45:49'),(672,1,NULL,'newboy6890','U2FsdGVkX18yXpaWmd0pVM5NA0UiR5IdrUIwyDLgjr6mtIRhTzZI6FxwhcE2R9v58W86/hEUvAEOSmXn6Vfo8Q==','412253375@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-03-27 14:12:33','2020-08-20 04:45:49'),(673,1,NULL,'xiangfp','U2FsdGVkX19ZaBvXVi8fxEmVljcHL4rsQoBOdrYS4xIC1DyrK0reyAgv6Fa9jCDUB/hxSyKi31yWNcmRx8VnSg==','457813584@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-03-27 13:51:53','2020-08-20 04:45:49'),(674,1,NULL,'falcon_dl','U2FsdGVkX1/SVgIsxmvFOFC0ssJZgemSPvFxMy0kYGorjwV0tLS8fsP3A6TuyuQWMl0CnkyGe/Rm5ZT9Jf/fvw==','falcon_dl@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-03-24 15:36:34','2020-08-20 04:45:49'),(675,1,NULL,'xxx000www','U2FsdGVkX1+9WqNHuWrSo3Q8nxosxjxE0cKFD13/sGUU1t9TW35p051627q+UzRsJk9u1c98ADN1iHVOganlvA==','842434555@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-03-23 06:49:57','2020-08-20 04:45:49'),(676,1,NULL,'nihao123','U2FsdGVkX18DuxySeiGqVrId9rUkZ1rV0PzTwNn45v+Wo0xzjq+UxghEffje63De7IG+hNw6T6kahnr6gzqYPw==','ideal_sea@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-03-22 05:52:58','2020-08-20 04:45:49'),(677,1,NULL,'yangyang0507','U2FsdGVkX1+U5myi0tXMKdzlB1OAgHxLdWTWS2B5MUpbQ1vi42RlwB4MZzKhXeb14CNEjf8ufwy1b/tK2Y4MRg==','yangyang_9282@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-03-21 14:02:12','2020-08-20 04:45:49'),(678,1,NULL,'aaron9320','U2FsdGVkX1/GupzTlg1AdNo0zrlYE9DVjlwFeCmdzIAQReQxxezeqphUFxz6ZrStIf2oO/24XTEpB0ftQcXAsw==','aaron_chan_520@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20160321121110.jpg','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-03-21 04:09:45','2020-08-20 04:45:49'),(679,1,NULL,'jier945','U2FsdGVkX1+Pba6T53UN/g5+ZdWy+ALBYk50N7oFqmm0kr5U85wgPZgPgzt9qL+1dTbJgm4WUz3NSfOtancNQQ==','guangmangyuxiwang@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-03-20 13:01:24','2020-08-20 04:45:49'),(680,1,NULL,'forever','U2FsdGVkX1+5a0ZTEZleRkGi/6eVRXiD2KzSPZYaPdsazW6PoPa8o41nYOTra4gK0DN9KRZaJKASIJQF3hfV7w==','1293812879@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-03-19 07:56:22','2020-08-20 04:45:49'),(681,1,NULL,'test1_','U2FsdGVkX1/BXZtd1cVppGIw28Pln1SoV41arvG2PhsDuU9M7CQqKJJRR+bL1AF0BJBzMxtlEJ4XBe4cg2MMlA==','ajunflying@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-03-17 03:58:28','2020-08-20 04:45:49'),(682,1,NULL,'bb415453941','U2FsdGVkX1/AqLyujf4DIz8Zc5/FgdJpZBKbcwr+vI7QXcc65V9tRdOUx8lteH0dhbI4bu+zzHVn04WF3eM39w==','415453941@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-03-14 02:14:27','2020-08-20 04:45:49'),(683,1,NULL,'nodebue','U2FsdGVkX1/HFx9xYvg0V2OpDAxKB7vnP2l/z9CYnZMNuT+oem1VyW82gMl4xvSC6z4oJXDzUgNZOL1PsFhs3Q==','sun.yi@zte.com.cn',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-03-11 11:31:19','2020-08-20 04:45:49'),(684,1,NULL,'whm_abc','U2FsdGVkX1+7ugYutNT4D7TLlqtqzWOfM7zl+EHJjthkpgHwv+fOa6ia9RsUD5SPvwyr/gGTN9Io8lC7A55ElA==','w38029@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-03-09 15:37:05','2020-08-20 04:45:49'),(685,1,NULL,'zhong812432','U2FsdGVkX1/zdjyYwwxSYVtnfcIZ8kJ6UJM4rpQA84VT52byOiK6pceNkK4XbYT9XUCeCVG2MNyNOWAdfKlnNA==','81243232@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',1457529248669,0,NULL,'2016-03-09 13:12:12','2020-08-20 04:45:49'),(686,1,NULL,'ruder','U2FsdGVkX18QabkU7tz7Ap10NkR0uB4QHvGQSZJJOou2PBe1l2wCJ58V6ahyRruzeXDFnfy8Dfb0nQH+yDQV/g==','rudermail@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-03-09 03:37:36','2020-08-20 04:45:49'),(687,1,NULL,'zyh199294','U2FsdGVkX18TaPGvmaw83twy4MdEGN0z+5RtDx+sQ+vcbIgmmH0WTqei5UTbOUfZarPskN2qQnDmoFcOKO1PlA==','53359492@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-03-03 10:17:24','2020-08-20 04:45:49'),(688,1,NULL,'hank2015','U2FsdGVkX18CkfDEiARvRtmOcJvmdgFvE1GXuWxdyg1sFyCo6mbhlVTR4Xw3LNlwAh8yYc5yRBIswtDqq+FmUQ==','312657743@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',1459590707720,0,NULL,'2016-03-03 05:58:57','2020-08-20 04:45:49'),(689,1,NULL,'xlyasdasd2','U2FsdGVkX1+s7bFlvmAWr8+p/VljSLYCeg6zYE2SI99KeBDU5NbhATxHncZea8SHqnXns3ecBPLtHUKZbLmiDQ==','527395880@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-03-03 04:10:43','2020-08-20 04:45:49'),(690,1,NULL,'zhm8932','U2FsdGVkX18s2GMKema0EWoZ2xBg8pBWNpN8TNRVysYKeJz46kM23w7mHoaiuuxL9XLwUkeCY3gzS5GP3uHx9A==','1458766296@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-02-29 08:30:57','2020-08-20 04:45:49'),(691,1,NULL,'Ttvvi','U2FsdGVkX1+MPqN1WvE7Io1H2GBkSZmoK6Ctc1ZOmySf5cl3TDDDwmj7lULtvQDUYah8ip98Qvq6KIwMlgYqgw==','635189253@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-02-27 09:36:35','2020-08-20 04:45:49'),(692,1,NULL,'sialvsic','U2FsdGVkX18nHToOUanffD6bIbwRpOW3iJDZoLzS8LD6E6naNHFprn7IzktT2bRgNHHsOjVEAU4gQ/HvAwDK7A==','sialvsic@outlook.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-02-27 04:31:30','2020-08-20 04:45:49'),(693,1,NULL,'longphui','U2FsdGVkX19/5A4/tVue1WpkvgUo62qPxZ8rLaypLEsSksL5oGgqMQTq1FP9PjLoQB3sob2mw/8HDbYWRxx0qA==','502647115@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-02-25 02:31:52','2020-08-20 04:45:49'),(694,1,NULL,'huangxinhui','U2FsdGVkX1+zAdMseI5gP06BgtdYFXz7wV7LXd8x5SZ6P/jGz59vbJ8463l9OkMXEJBZl5Nt4VqgAh9TuBa0xg==','772627494@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-02-23 06:33:17','2020-08-20 04:45:49'),(695,1,NULL,'morindaz','U2FsdGVkX19+uTyqZoZd4bwtUjMiQCryOrV0djB7Z6dKkk35aDL+ECVKi7P/5/70JnFiiB+oiwSkaqND/xZacQ==','690596131@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-02-22 12:46:19','2020-08-20 04:45:49'),(696,1,NULL,'coolsi','U2FsdGVkX1+Isw4JbalAF5rlaqP4xAsdrhDGkc8CNl4S8ZrS/bpaZQxkJopFFJs/5d1fWy4kVN3oTeWoEzyh3g==','struggler88@aliyun.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-02-19 06:17:20','2020-08-20 04:45:49'),(697,1,NULL,'chaoimei','U2FsdGVkX19s2z1T3qyJHdQ8v4Ry/xs0rrxB0UZCacWZp1ec7C1nZHPYfidskVb/jUzvDVcymhqJxlv5HFOPqw==','cc.chenchao@outlook.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-02-19 05:33:05','2020-08-20 04:45:49'),(698,1,NULL,'xinshang1215','U2FsdGVkX1/3xYycPO6GMFpiyRDpQ4FgeNNcZra1IhLE7c+04dK0JsEfm2MzxZ0RzqCm+QcfAr7MmMc7u8tqog==','94335897@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-02-18 09:39:53','2020-08-20 04:45:49'),(699,1,NULL,'madiss','U2FsdGVkX18GtLIudwnMbofJDSKOvq8C17FxXD4HVAD/mHz0UFUsntpwsfavqeJB93G0rgXvAcaaUD33lvpEVA==','madiss@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-02-17 09:18:31','2020-08-20 04:45:49'),(700,1,NULL,'normal','U2FsdGVkX18Ak8L6NsPcE49Hm99fouIFouU6nMkALV7wydp+PX2kE/9g6hMZOcNDqTga31S+pBWUDSTY8RaKlw==','normal@abc.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-02-16 09:09:43','2020-08-20 04:45:49'),(701,1,NULL,'remixhua','U2FsdGVkX18qwngjGljVJww6sCgaiysN/DuGwYyW/7Q962RWU2HTJRDjgL3rX8H4kntasllpJTKiqRX+ZAb0NQ==','berlinbai@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-02-14 07:49:32','2020-08-20 04:45:49'),(702,1,NULL,'waini1110','U2FsdGVkX1+bfIAkkacYmLc3DqoDA9ilxSvt9Y+4DxMCoL41gviF31HxLpLyBruvn6iCN/2an65m9TDYFNWCCg==','waini1110@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-02-09 07:35:31','2020-08-20 04:45:49'),(703,1,NULL,'hzh791','U2FsdGVkX19gah3Szw7AM0mOFxPxJRVo8iSla47T6BnbrzcBhSVf46WXNRB9/YxIun+cK9h8S39VBtGplZYK1w==','hzh791@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-02-01 09:26:02','2020-08-20 04:45:49'),(704,1,NULL,'jinceon','U2FsdGVkX1/1tyYvWFwci/ox2IJsJp3eoC7KIEeNlUIiGXDV1ufJ/hBXTcGKaelncBQ/t/yP+lusXY+prwDiUw==','jinceon@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-02-01 03:02:40','2020-08-20 04:45:49'),(705,1,NULL,'northec','U2FsdGVkX1/mdvZm42KI9EAve2v8c+ETDMtkPCAYHD1c705YE+xAaoA001PliGime+fFFKepu5z6xpjg7/7wuA==','northec@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-01-30 04:25:29','2020-08-20 04:45:49'),(706,1,NULL,'kevin','U2FsdGVkX1/xSbonjXzHl5/iAmn/sEfw8ltZJDQvS4eeAr4cDOJsuI/oQzomqmDrDjS1e1O06BvG2piHEJbF+g==','hi-bai-du@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-01-29 08:45:21','2020-08-20 04:45:49'),(707,1,NULL,'zlflff','U2FsdGVkX1//FpOgdwwTK/c4mi/oBiNd1S2ANHjahOcqdW1iWY1D38B6/0voBBji81dbSMVwRgbC+w/1cbMwbg==','zlflff@hotmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-01-28 07:48:06','2020-08-20 04:45:49'),(708,1,NULL,'xforgchen','U2FsdGVkX193DEcp6TYnYMH0lNTf+Kye3nMqB67pmtDZ0ecKIlP6gYhs5pVTOnsO/Eij2I743zTauLAfVCQSKQ==','xforgchen@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-01-28 05:44:20','2020-08-20 04:45:49'),(709,1,NULL,'sgbtmy','U2FsdGVkX1/xFgaCggJRUjf2pbI6YhwFca981vLBw/3FXv4/6f8ThjG4xLm9RUtLFdvBCYf1s0AAT0beEFJNNw==','sgbtmykkk@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-01-26 14:18:40','2020-08-20 04:45:49'),(710,1,NULL,'dolare','U2FsdGVkX19ziGLgJRiPNu0wYll6SL2n5dWPLHxM5oSW1aJvae85JqGjLWL75g9JcBOeXpCbBFlKFcaQxtkPmw==','dolareberave@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-01-23 23:02:41','2020-08-20 04:45:49'),(711,1,NULL,'yansile','U2FsdGVkX18J2HxUisODTwzsDY7QVs3VuzS8USviNjkLe00e7WUSGHdAw8PMVuCCbH6dJVTNob6SqZYS9eb5JA==','1297700744@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-01-22 03:46:20','2020-08-20 04:45:49'),(712,1,NULL,'xiaohn2013','U2FsdGVkX18HnZK/hvNkgPHV4bjYAxzwE4sgI4uypP9hgeRqqOG0eAWhgcHxcErA3q7vshcEZvQPjEhttG+0Gg==','xiaohn2013@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',1453726841150,0,NULL,'2016-01-22 01:13:16','2020-08-20 04:45:49'),(713,1,NULL,'xie435058448','U2FsdGVkX1/4yaWl4WDapziO4l6gqX60E7+YbFPZrSqeDT8Qz6mmnSisSx3GpooaMTZntmHrG8KP26EiFfqQ2Q==','435058448@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-01-19 09:50:09','2020-08-20 04:45:49'),(714,1,NULL,'cyjxtt','U2FsdGVkX18ihl7MG14G+mQAoaj73s2eQstSEevMLi7npBcdrGxk1dwy0+sonmh3hkuOxApBUuIN9zZi0pTJag==','cuiyongjian@outlook.como',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-01-18 02:02:06','2020-08-20 04:45:49'),(715,1,NULL,'qqqqqq','U2FsdGVkX19UhhlEXRsKReNFPuwABCO83298v/MdrvHXtSd0TuOT8Vkpmu+CBKOTvOY0Ep5v/sl2nzZNcuY56A==','qqqqqq@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-01-17 05:43:35','2020-08-20 04:45:49'),(716,1,'飒沓','admin','U2FsdGVkX18MAF1asS81/ibheoENHMtKw1hkBjG+XFcCuvvqPK+5kfutsFjWbQrRp7KnP8yiu48UYiLQmFaU1A==','2424535858@qq.com',123123,NULL,NULL,NULL,'1','sss.<script>alert(1)</script>','',NULL,NULL,NULL,NULL,'阿大使',NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img20160115145047.jpg','0',NULL,'撒旦','0','1',NULL,0,NULL,'2016-01-15 05:36:22','2020-08-20 04:45:49'),(717,1,NULL,'r23dxhl','U2FsdGVkX1/KUerZ+o2UPjEVT1Ij+gcGgj7KhkDx9qepV04vQWxfsqJWJSIAxzEaBqd+jCRNd50sc9hwPgTclQ==','dxyqq@sina.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-01-14 01:47:46','2020-08-20 04:45:49'),(718,1,NULL,'ccna1','U2FsdGVkX1877PqDCJHeqT6qgvTPcuifxsTntSFFKx0sX8/2WGpSe/m6OegaIGI88jp1AjzBEmkpDsteZ4lhbg==','astonish@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-01-13 21:06:37','2020-08-20 04:45:49'),(719,1,NULL,'liaoshiwei','U2FsdGVkX1+4V5M6/4UWj9vRelosIqVbT538AJp4OSK6oG5mUGUs0HEc8WCspad5YZHEKiYat8YrAerPfq77ww==','1144986842@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-01-12 11:19:26','2020-08-20 04:45:49'),(720,1,NULL,'yf880525','U2FsdGVkX18djtDqLh4qKHocOVpU2Lh9x2P/9Vut0wh0i1FK18bnQLUkQUC6tkIz5nbjjJHTsbf4WhEs8DH+pg==','astonish1@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-01-12 05:53:39','2020-08-20 04:45:49'),(721,1,NULL,'compacq','U2FsdGVkX1/5KFNVifQmA1nHSWmHA0uEnvkGQEJHMIFGPHEMiJCXdpxNpKA3gosyA++1Rfq4dYW+EakDFiCaNw==','compacq@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-01-11 07:06:16','2020-08-20 04:45:49'),(722,1,NULL,'sulin','U2FsdGVkX1/p2qwQuHUZFzoSz1N3w9lGbyPesYZPTJpv8B/HdsSCoKy6Io/+GNoggFrBrxZxGg8EFfaIdiba0w==','377201479@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-01-10 10:29:31','2020-08-20 04:45:49'),(723,1,NULL,'qwe123','U2FsdGVkX185V/S2iffxGvf14PvIbuYwk6lZ3TQMeJOneGv8he0wxsw/donu6NIi2+IQLN8eF63g2j3sLoApXA==','qwe123@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-01-09 21:20:30','2020-08-20 04:45:49'),(724,1,NULL,'test1','U2FsdGVkX1+UuHJhLC+vMPnnUUgEXPkfAQ/X4zMjmPbbtW5/v6dx9sk77pnvQrp/hGDCfsfqyrIZjKOOHtjlUQ==','123456789@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-01-07 09:09:21','2020-08-20 04:45:49'),(725,1,NULL,'kavon','U2FsdGVkX18p6oTPuOH8db5CmsMLrYhMShiiSfXLKe40kwKCz+EeOJcfvCFu49A7RYjid8TAE2T3Tj1ZIJR6Cw==','chenmc@txtws.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-01-06 09:57:58','2020-08-20 04:45:49'),(726,1,NULL,'ro87630872','U2FsdGVkX1+fIS83wkGa3xwL0nshsHoMG8aO+it2cDiLU0od5Iek1pOHewXqxfpNaudH9wUa/pTblhf0vIjfFw==','ro87630872@gmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-01-06 09:56:33','2020-08-20 04:45:49'),(727,1,NULL,'steven','U2FsdGVkX1/oqoBIsfCsjfgMSKWdqjTAmy1A9jQMvibKhUZkzt+Mj+CIokSky+IJMUnTjsmIZhg+AeCgGoEKyg==','rocodl@hotmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-01-05 08:43:48','2020-08-20 04:45:49'),(728,1,NULL,'yulin724','U2FsdGVkX18+TeyNRBibzrQa7rZC+WTTQdpyzeZ4+7o9ECFYGImVPLTpi5UYU8Ng4f6M0TwyebrXuLtFYCTg0w==','yulin724@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',1554562286194,0,NULL,'2016-01-04 02:22:02','2020-08-20 04:45:49'),(729,1,NULL,'bigpyer','U2FsdGVkX1/cowo33haRKkcJxlPJ8LLUk6ZcF5azXNq5Yz722u41h4kSvzl3X6U7rP+4d4jdUwpHTLzIEMn6nA==','bigpyer@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2016-01-03 11:05:59','2020-08-20 04:45:49'),(730,1,NULL,'shijin','U2FsdGVkX19tnbmMGQe/AKOEgiL+Auut2s9YHiekiFsT3rUhtnVHDCdkNGJoKS6WhaA22le9DaG+ahcxscGz+g==','719045032@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-12-29 05:48:05','2020-08-20 04:45:49'),(731,1,NULL,'cysqll','U2FsdGVkX1/tua4HL5lOUFLqO3A7TVxWxrYa2L+16IiM943O97dSPKBJcqqpAZhS5dQVdJub+gn3VHUvYiXAxQ==','461836324@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-12-25 11:16:19','2020-08-20 04:45:49'),(732,1,NULL,'chentian','U2FsdGVkX18khlp4DmqYbiVPVBb5RID0aEd5oz8uUdiLQPy2HS3/PEi38jq24qMDwJ69w9Holt55kvgfxwAx5Q==','chentian83@sina.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-12-23 03:06:19','2020-08-20 04:45:49'),(733,1,NULL,'lordwan','U2FsdGVkX1+N0O+mh9R7TuvKv2zEPzqihfMHyZO5Ytfin8HqLbmTBUNlNZrxkGuolxLA2IhvPY9jm7Z7Cf4inA==','116526964@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-12-22 07:19:59','2020-08-20 04:45:49'),(734,1,NULL,'npmbing','U2FsdGVkX1/3kryNiYc+R+xi5FZut2qzz9oKEEytE/LIQkvnoZMRaewsuRksvQP6NhlBJKBISlsOt2QUJwNZzg==','a454254159@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-12-19 07:29:58','2020-08-20 04:45:49'),(735,1,NULL,'aaron','U2FsdGVkX1+C30F3WvfZujyDauTRH8uLbrv5tegHYWYq35e9KMsNLFLiaR7gDCeUuQPf1Rf2hVLXTsflMI6iGA==','626786864@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-12-17 06:47:27','2020-08-20 04:45:49'),(736,1,NULL,'fuwu1245','U2FsdGVkX1+0+N8wDGhRTR5rh8IY2bSJqu/cR89Ov3OwWRoWhv/t1IxPHM665BYNjTo+UA5TvzyWteX7jJzEFw==','fuwu1245@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-12-16 07:22:04','2020-08-20 04:45:49'),(737,1,NULL,'z12096322','U2FsdGVkX19cwaEa7VQjO/VtqNKn5S0LeN55Pc2u/tAXHdL4QxgugboVpt+7D84AbA8QqZCPjUsI4/SVRceLFw==','zhaoqingpeng@vip.qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-12-11 07:21:20','2020-08-20 04:45:49'),(738,1,NULL,'tonwe','U2FsdGVkX1+Y4aVfuo0fQ1+dJjIsF22nbaCp0Bgrhl7yD+cNJmvEEA0lAGjBzUXrgIQJAFAJGE2plXP+rLRHsQ==','tonwe@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-12-07 10:30:05','2020-08-20 04:45:49'),(739,1,NULL,'cuixb','U2FsdGVkX18EloHap0AyM+16w03zH29m1+LvvbugRp3aV3o9y9VyyVuDYOhaGbMdCGty3wb8hSaPpLqdEHhNNQ==','343631985@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-12-07 06:48:24','2020-08-20 04:45:49'),(740,1,NULL,'AaronLeong','U2FsdGVkX1+eDoAapPljs+EzAV0f8z3z0kVteCOded9XR1vC07bOXptZ2AHShHVf3i38q3WgDCKuA3eMfaXGPg==','626786864@qq.cim',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-12-06 17:13:04','2020-08-20 04:45:49'),(741,1,NULL,'grant','U2FsdGVkX19fGeHwgBxFu3h+xxC+g61z4oxDZKowROvHK839pSq+BQ6kxk9TDfBk8uZwo8s2Gqdb71G0+/htrQ==','grantdgm@foxmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-12-05 08:35:31','2020-08-20 04:45:49'),(742,1,NULL,'bastjiang','U2FsdGVkX18uLFl1B0TKAjAaM9unNXWi1p4AICGNgcdGDqTt/ZkscyLmJ9BPghc23D0x81Np4lB1/pz/tGlp1A==','2711383892@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-12-04 08:29:44','2020-08-20 04:45:49'),(743,1,NULL,'SAHX66','U2FsdGVkX18Isj97Jz6cKVU96vLSoDLVa0sOHvSudbY17oF+OtEDeqImmuBgEEpPhxuy2cuywVSzAIYZaIim5g==','tongjiong69@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-12-02 09:31:00','2020-08-20 04:45:49'),(744,1,NULL,'pengjian','U2FsdGVkX1+ylf6GrLzBYGBdV7SpqUMTBkP+p4g2vFmyYRxg5gYYt50wRrFmHjVOhZhgX2BcOpajoSl7huf2nw==','894057870@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-12-02 07:56:10','2020-08-20 04:45:49'),(745,1,NULL,'admin123','U2FsdGVkX1/pKVt0ZEYCFdJ27xm5CMDvYVxoJThU4J5h7Bxwfa1YGeNHYy8YH2BSjnVa1udnLlAGqIYBLFGRBA==','lbq.001@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',1449030035697,0,NULL,'2015-12-02 04:20:02','2020-08-20 04:45:49'),(746,1,NULL,'admin','U2FsdGVkX1/BhDuvsGb35bgQh1r9CkPzrnDri43NR5gdwQHrg+tdWS5adPUAuGzyN89htYWyDobPn6b75YSRiQ==','lbq.001@163.coom',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-12-02 04:18:51','2020-08-20 04:45:49'),(747,1,NULL,'banbu','U2FsdGVkX1+gxo18A0TR3ieGwODV4cXWPY1gomJqmK6scYzl8LOAs5GKdXJY54MmRyM5So2+4Y/f475DpCFCZA==','369344889@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-12-01 02:42:48','2020-08-20 04:45:49'),(748,1,NULL,'zyp_tfy','U2FsdGVkX1+DXteNIQTxqG3T56xMjrKxechlhTQtuLeO4AnJUTfNWVXVPn7ePLJLzvvKUwL5pHOoWbB/9wW7/g==','zyp_tfy@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-11-30 15:17:28','2020-08-20 04:45:49'),(749,1,NULL,'huiping520','U2FsdGVkX1/IqiFiWSlX4rv+rH8Kt9nAjE70S93/HzB9acxosqWhiaNg6jICYnWGguDM3LgnALqVy+tSMXfoJA==','512552389@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1448693596000.jpg','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-11-28 06:52:41','2020-08-20 04:45:49'),(750,1,NULL,'Ronnie','U2FsdGVkX1/HW2cQp8PEAoimxTTRdxyk8WZOh+tWtBIpJXQkeIJeuweiGoDCw3iK62UEQa2lotWG7VSwUY6SWA==','wangliuzhan163@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-11-27 05:18:51','2020-08-20 04:45:49'),(751,1,NULL,'ckyy1993','U2FsdGVkX18uLWLsqgXXU0UlwYVm4o48ulk6nOXzF8fvekGEC+z/PajJYAXZp5aNtAh2NdXY4ZOuww/HtOHinQ==','543513066@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-11-27 02:20:22','2020-08-20 04:45:49'),(752,1,NULL,'asdfhjkj','U2FsdGVkX1/UB0q9sz0Pi6SKg4bkAR+lYv8MUt5Ce/odAkkmAyMxU2IBudi0RhoDXsHj+1qcHuczsO6p2uMLTw==','5564@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-11-25 12:04:48','2020-08-20 04:45:49'),(753,1,NULL,'asdsaa','U2FsdGVkX1/pstDqs/L+zBez9Fa1eBKfmIW145tiDLX6JuV+kq0P7R2CNzTpEeD7mwsHZrREhonWNU9TlIppZQ==','asd@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-11-25 12:04:17','2020-08-20 04:45:49'),(754,1,NULL,'sdlkfj','U2FsdGVkX1/+gdPVYM0Q+m58Vb5af/1vl3qoxE3u6/nwb9CeQoesOP+IsykhY+Oy2zFHzXI6HSPeCR3o33R99g==','768976627@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-11-25 12:01:32','2020-08-20 04:45:49'),(755,1,NULL,'liujunxiang','U2FsdGVkX18iNmsrTbFVLHbbrCqG8AwHPegVJ1Vkb1H+BpxHQSshIy0maq6WknL4REpEiRPuzXNj0x/qCpj3lA==','xiang_jl@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-11-24 15:34:29','2020-08-20 04:45:49'),(756,1,NULL,'jhhdoctor','U2FsdGVkX18WUH02VshAycHg8s43hPw3jX86NeRHKdbYJ77slOZAZix4RB9RiSXSwKxv3A5nsmWRv6mn3GsO1w==','343166255@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-11-23 12:42:47','2020-08-20 04:45:49'),(757,1,NULL,'tttuuu90','U2FsdGVkX1/AzNn3V0GA/QYPj1zBXzxI9SzmXw1nCrdYLtMf9q9RnoEtl0a47wV8EmCTyxVwpkM4SHm9XUNiqg==','356179724@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-11-23 11:25:06','2020-08-20 04:45:49'),(758,1,NULL,'Erle_1986','U2FsdGVkX18h5tQPtFjr6HELv18vtmh3GcwOaqgTji68/xrmjX1Rl/8R4569zEFQsqMDPmUd8dmICVi1P6ccZw==','chengtao.liu@yahoo.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-11-23 08:58:55','2020-08-20 04:45:49'),(759,1,NULL,'fastyou','U2FsdGVkX18lq/ABMpxlc6LQ2wqB1YktutQirrwD2Ag0NvVBm34FhmJDfQhpboQVElFAGW8bXRaSgrM5ZWd4FA==','fejohepgx@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-11-21 11:59:41','2020-08-20 04:45:49'),(760,1,NULL,'yd6019136','U2FsdGVkX1/x/6hxZ4Gt7uc1z9n9tFJYVlhzcHqPEz9aXUv3zi5e+aaSQV0KHTr1Duz+zurX3dQWKg4eGgD8yQ==','1028480636@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-11-21 08:53:28','2020-08-20 04:45:49'),(761,1,NULL,'lukaikai1989','U2FsdGVkX19RagVd5u6LkskFMAGM+Mkz3+ligu4wiO4leMDIDQeJ/Brk2eDxZHFxxFatyKXFlxwLx0OghvSaMw==','819720864@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-11-19 06:07:40','2020-08-20 04:45:49'),(762,1,'生哥','doramart','U2FsdGVkX1+ZM79wbwXIFECHDkv4kVDYppTINLnnrhY=','doramart@foxmail.com',NULL,'15220064294',NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1447739082000.jpg','0',NULL,NULL,'0','1',1449573403524,1,NULL,'2015-11-17 05:44:10','2020-10-02 05:46:38'),(763,1,NULL,'lmk1992','U2FsdGVkX18Cr6+wGvhahI56mTpdjKRRWLe23Fn+iyW9soDqONkuXZXSVqGiKFgzXSFCNCgAhb+X4z8bn8C/2Q==','1035542106@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-11-17 05:43:56','2020-08-20 04:45:49'),(764,1,NULL,'UnbrellaFish','U2FsdGVkX18SY0Q1T/wB8WN+/2iuHsl4qIyJObFXlbnFtaOC2Jhjc9WHqSbUZox0gorc0oDmG+0xF29eHGqP3A==','caoxiahe0312@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-11-17 03:34:22','2020-08-20 04:45:49'),(765,1,NULL,'konfkof1','U2FsdGVkX1/9L5U0yorVHc7nm4eywRdCE9WK5EOdKtVyr/J4uB57eU+ZD1pKAN73O5/S5A6IlbdlCAEydNtLIw==','dskds@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-11-15 12:14:21','2020-08-20 04:45:49'),(766,1,NULL,'konfkof','U2FsdGVkX1/EngkqdIN9tV9oUXtROQBHa41HhWzTONJz6RVrRFTRHf8eH3sFLxWDwBeZrHKXGkYJyQqGf/Kpew==','konfkof@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-11-15 12:12:36','2020-08-20 04:45:49'),(767,1,NULL,'mezongzi','U2FsdGVkX1/BMvGZUnLvm5ZCNnjZRv9Er+X19hCqBDsFMyZPr5XRilOm32BTb6BS+QfGIupdFzY3OwhAHwt6oA==','mezongzi@gmail.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-11-13 05:50:12','2020-08-20 04:45:49'),(768,1,NULL,'virtualboyjs','U2FsdGVkX1+mjO2JnEBL2ki7svgjoiuT1mnlkq1zKad4m5fciuxgxK8IwSLbMgeeviMPLB7jKa2eNcQU1VWm/Q==','745894491@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/smallimgs/img1448179436000.jpg','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-11-06 12:38:49','2020-08-20 04:45:49'),(769,1,NULL,'eimhee','U2FsdGVkX18rxE8z8TXcxCXi3NJqjLPE2Kldj2K/palpE1sq0FsfSlSb5iLCJIgzqDzJVVis39R9fneP9lVE8A==','ebookl@outlook.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-11-01 13:33:41','2020-08-20 04:45:49'),(770,1,NULL,'shshk83','U2FsdGVkX1/PRS6y1BhliCrpfkgjbAn6SNIuhbnGbgD7ziqn8ugnmPkmTkKiYcXwOHhxepvdEmQF8qRMG5Giow==','shshk_84@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-10-27 06:15:22','2020-08-20 04:45:49'),(771,1,NULL,'bigtotoro','U2FsdGVkX18WpkFYjWSGVMEgRDW/HJzLkkc0q38BbNQpa899ByXXzcfCZ4VlvuldI1XXIHGQ7pRoNqbrr70R9g==','1158857256@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-10-26 12:50:42','2020-08-20 04:45:49'),(772,1,NULL,'hahaha','U2FsdGVkX1/Ml0VP2uR5t1BZ4Iuj9W3xf4JpWxec9RK4oYF6iVT4izlBLTrupM36v08Vzr875+Ab/Z3Hetp0Mw==','abc@abc.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-10-26 10:49:45','2020-08-20 04:45:49'),(773,1,NULL,'huanhuan','U2FsdGVkX18K6HqAnjrKnGXvhclFt0+1uuiuV5hS5ej4NCGfgrKJjaqG9RpXQaxIpDUMUxn/RZe7hjO5CoRFhw==','huanxiaoyu1985@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-10-24 18:59:56','2020-08-20 04:45:49'),(774,1,NULL,'cclgogo','U2FsdGVkX19nQljOCB2Rb/6hn0WShfFHMPJpPzVT42Vk9trjPXvScqUOcjoSQBYLAxKyUdu8xsM6CNC6JGPW0w==','18859230330@139.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-10-24 08:00:59','2020-08-20 04:45:49'),(775,1,NULL,'alofiyin','U2FsdGVkX1+4hqu5npZBHR3/9aVnIHq2n/gFcLnbyiw2TiakICpFj3PfVXHhRewbhU1lL7pz2XLVqkBLr3j5qA==','16806349@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-10-23 17:24:32','2020-08-20 04:45:50'),(776,1,NULL,'zkxw2008','U2FsdGVkX1+0A3wUS7PqwugE30PDf6l7s47q62o6JKVLl3AL0DSMN//6YfzGzIFdiRuEYLBWcSrjjOXJFF/9yw==','641870431@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-10-22 08:28:39','2020-08-20 04:45:50'),(777,1,NULL,'vonaa','U2FsdGVkX19IAJL1qyzt2HGkHJeeJu3ywdsBPWHhMuHpWI875XkGaziTuhGUr365TWDngTCkijOQ7QZjdKLFcA==','vonaa@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-10-21 03:07:31','2020-08-20 04:45:50'),(778,1,NULL,'a2ngAlan','U2FsdGVkX1+hG1GuYbEoAzke+jlktcHPjqvpZPi58pSdvffljIXaJZPw+R8ud+2Bx3wHXhCElCDQRSYColESQA==','comalan@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-10-20 03:01:37','2020-08-20 04:45:50'),(779,1,NULL,'shufou','U2FsdGVkX19WlKwoSKErktrdzZvr7xwZaw4yCUaQgLvwMVFiA7ntg8Y481olz5jLN26AqwKbeQskN3DR0daNcg==','240985492@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-10-17 06:27:10','2020-08-20 04:45:50'),(780,1,NULL,'kuikui','U2FsdGVkX1+N/7FDJ/6w9mgRNli/yiPkAjJ7LNB/JUzAd8J0RC4EM2aupn0zDgBQRr/EzyUaDywGIDduoX7COQ==','1164715254@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-10-14 02:43:13','2020-08-20 04:45:50'),(781,1,NULL,'jankerli','U2FsdGVkX195DQmrotGCfFW1qcPNFUGH6WsRflOPpNgrfzIEOvhslr/VlwI0BlJW2zlmL62yw3+ti8tixMu7Ug==','jankerli@me.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-10-12 09:26:59','2020-08-20 04:45:50'),(782,1,NULL,'zcy0929','U2FsdGVkX18uq4neiiJWlVNmqrIL6bR6ghi22/SJlau0JavqkbcQkua7Unak+1GGR1JDoxfI8+yHD4aujNEdYA==','zcy-0929@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-09-29 03:46:53','2020-08-20 04:45:50'),(783,1,NULL,'miller','U2FsdGVkX1+v1esOpUI2TJCQ3jdVA03mloKpLx0dLztRsWwXsm4J4A3BDNg36pTYV65il0T/rT/S+8FK1No+nQ==','562638230@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-09-26 23:03:56','2020-08-20 04:45:50'),(784,1,NULL,'zybaa','U2FsdGVkX1+j7rENooB01QuzagnLTpDz2gaDmt2JdVRv+w1sv4b4Muop1F2PWfLvVMVdvlnhPB5gkjLTGLW2Qg==','zybbyzaa@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-09-24 12:42:07','2020-08-20 04:45:50'),(785,1,NULL,'prink','U2FsdGVkX19qGOJlIhwj7jfDaw5Ypu2lZiVITpNL4N7y7UhNiK/qEjLTOlSF506qTHE/Ohx+hVRpbLr2dAlMUg==','2230243@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-09-23 10:25:20','2020-08-20 04:45:50'),(786,1,NULL,'bingyang','U2FsdGVkX1+vVho9uVFFaMzC+Lki/bVSMY3M4ptqYa8wFwzxB1ddvWb+ei2tnoKqDv402KjyZQBLcl83f7/hZw==','924403966@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-09-23 08:03:32','2020-08-20 04:45:50'),(787,1,NULL,'min945','U2FsdGVkX1+fhln95IYrJ/vVRamIPoVJIL0GOIXZocRDNAOyGN9I09WbwvXvj3Nsql0B/zEQU9mLXgOrieHM7g==','min945@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-09-14 06:33:31','2020-08-20 04:45:50'),(788,1,NULL,'ddddddd','U2FsdGVkX1+WKL600ULy5kCgF5lFvciEjssZ/qmEtdEnr0GZ2wQdBxTW0Gqmc8Icg1SzC29mO1bbf4A8SV0Wzg==','qweq@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-09-10 07:07:26','2020-08-20 04:45:50'),(789,1,NULL,'sssssssssss','U2FsdGVkX1/GkeWecslKiG9DBkZSHxhCCS1swPLzmS/ZPqsKMWGcp4j3dJ0LJEdaaesHoT3dqvcJkBDuu1HLtw==','sssssssssss@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-09-07 04:19:57','2020-08-20 04:45:50'),(790,1,NULL,'holyselina','U2FsdGVkX18kul0vB2/95coWGVVL7mWlL4J0h+D9qAQZt7BD8RZNR9aRXiwFdl1WwNP6xj+/mp0hGdQmF9ez+A==','holyselina@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-09-06 08:56:54','2020-08-20 04:45:50'),(791,1,NULL,'damon','U2FsdGVkX18yWVJhANXo4/A3KqFELy3rEeWzRHIkz1zhomIYkQkero+gsLdas4dTnksDR3nVit0KJRhdPXAm2g==','linkenc@126.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-09-06 08:37:29','2020-08-20 04:45:50'),(792,1,NULL,'ggame','U2FsdGVkX1/JaoGHZK9SieNmCTr0xhzSd7AgKFhwDLViKdRxwlDmJU1P6v8ezzOnGqiTZq2SVBwj+NSf4xqjvA==','greengame@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-09-06 06:09:17','2020-08-20 04:45:50'),(793,1,NULL,'foreverpx','U2FsdGVkX1/8mVG9/n89eKR+IAB6XoM5BE8K3AJs0Dva3X4Apn+lKhojMpQNqYXxcmWTP2zLSjv3Sfd0TtvrmQ==','1315592944@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-09-06 01:10:36','2020-08-20 04:45:50'),(794,1,NULL,'luoyjx','U2FsdGVkX19WazSu5pux7mBIaETW+7x4hf5Y72xYBc8+hHAnAdwKr0WFmhn66WIpsIQg37DiF5fNYGil3f4A4g==','yjk99@qq.com',NULL,NULL,NULL,NULL,'1','谁说这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',1458785350189,0,NULL,'2015-09-05 23:47:16','2020-08-20 04:45:50'),(795,1,NULL,'markway','U2FsdGVkX19gzWmzqfgAN66q346DKrC/8BDX5q4mH46iUOVcbDM2BggQy72/Gl9/rpKdYHOGEzOQLVAgs+iPGw==','123778139@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-09-02 09:12:15','2020-08-20 04:45:50'),(796,1,NULL,'hihihi','U2FsdGVkX18nrA2bVhbH3WKTeixLeCEKqpke3K8Ay04bTnVpl4aMIMbQBijlRdgRpkQIf9B2sUhEOiBQCcEfvQ==','hihihi@wee.com.cn',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-09-01 06:55:39','2020-08-20 04:45:50'),(797,1,NULL,'xm6677889900','U2FsdGVkX19tZv7wsPyNKR+v/qpXbMd5wO3nFgyGWUoKScmYoAEM2qllu+hxirupx90VB70J42KgZigYPvdS/A==','xm6677889900@163.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2015-08-31 12:57:46','2020-08-20 04:45:50'),(798,1,NULL,'jackkang','U2FsdGVkX1/JxmfvyCB9rfoQnDUefIHAyZgwlmswRMBDEcL8wqji413KPCeQ6qzH13h6yLkjRjju/qVlrRgbsQ==',NULL,NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'http://qzapp.qlogo.cn/qzapp/101238712/DB32942C6D27E840D7471EAA64DCC829/100','0','','','男','1',NULL,0,NULL,'2015-08-19 04:41:07','2020-08-20 04:45:50'),(799,1,NULL,'天气多雨','U2FsdGVkX1+Wb1LuGESewLJl2+u4Nbpv84nHhYXVImEgeXc54wyXumgsQtJhP2jjMWQD2F3Wkmtn9AGdXJ3beg==',NULL,NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'http://7xkrk4.com1.z0.glb.clouddn.com/FmcIh3shwbJBs7nztKxcohP748TQ','0','北京','朝阳','男','1',NULL,0,NULL,'2015-08-19 01:26:08','2020-08-20 04:45:50'),(800,1,NULL,'F  xb','U2FsdGVkX194f9+cr/Y3UsLlcZiJSvbpRUh2JTLUQ4Rk7E9G3APhHmX+/sETUzX/vj8YEmt5HqDxloYJw+bZsA==',NULL,NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'http://qzapp.qlogo.cn/qzapp/101238712/233226E1206A448958EF6FFF77625172/100','0','广东','广州','男','1',NULL,0,NULL,'2015-08-18 16:03:32','2020-08-20 04:45:50'),(801,1,NULL,'李亮','U2FsdGVkX182Y7Op5WUOErhaN4uH/gwKB2T2RAPjU4StHAPrb5pMUfCbU4njxEoeCWPNZ6BZFk9nLHM+adkJVw==',NULL,NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'http://qzapp.qlogo.cn/qzapp/101238712/708E3D8AA16B07AE078A523FD21E3CAA/100','0','湖北','仙桃','男','1',NULL,0,NULL,'2015-08-18 04:38:49','2020-08-20 04:45:50'),(802,1,'','yoooyu','U2FsdGVkX1+NGbALuIL9Tnqo0E1uppnmXPXFiAFuETM=','8721407@qq.com',NULL,NULL,NULL,NULL,'1','这个人很懒，什么都没有留下...','',NULL,NULL,NULL,NULL,NULL,NULL,'https://cdn.html-js.cn/cms/upload/images/img20171231151325.jpg','0','江苏','南京','男','1',NULL,1,NULL,'2015-07-30 10:18:27','2020-08-20 04:45:50'),(803,1,NULL,'doramart5','U2FsdGVkX191EsasdyTtr5283wEizmb+zk0xrx0bgTM=','doramart5@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2020-10-02 14:58:29','2020-10-02 14:58:29'),(804,1,NULL,'cmsme','U2FsdGVkX1+Zaa+IKDS0EXOuctIx+Fuz9lkzSf6iQuA=','87214076@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2020-10-02 15:00:07','2020-10-02 15:00:07'),(805,1,NULL,'cmsme2','U2FsdGVkX1+bqCiBtL4tThmPZyT2mQtVbZ/aBylnG+s=','doramart7@qq.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2020-10-02 15:02:31','2020-10-02 15:02:31'),(806,1,NULL,'doracms6','U2FsdGVkX18FT/HhwKjafHc7nVBtSZYa2aqXCtHv6eM=','doramarts@foxmail.com',NULL,NULL,NULL,NULL,'1','','',NULL,NULL,NULL,NULL,NULL,NULL,'/static/upload/images/defaultlogo.png','0',NULL,NULL,'0','1',NULL,0,NULL,'2020-10-02 15:03:39','2020-10-02 15:03:39');
/*!40000 ALTER TABLE `doracms_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_user_despise_content`
--

DROP TABLE IF EXISTS `doracms_user_despise_content`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_user_despise_content` (
  `content_id` int NOT NULL,
  `user_id` int NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`content_id`,`user_id`),
  UNIQUE KEY `doracms_user_despise_content_content_id_user_id_unique` (`content_id`,`user_id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `doracms_user_despise_content_ibfk_1` FOREIGN KEY (`content_id`) REFERENCES `doracms_content` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `doracms_user_despise_content_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `doracms_user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_user_despise_content`
--

LOCK TABLES `doracms_user_despise_content` WRITE;
/*!40000 ALTER TABLE `doracms_user_despise_content` DISABLE KEYS */;
INSERT INTO `doracms_user_despise_content` VALUES (170,762,'2020-10-02 17:00:20','2020-10-02 17:00:20');
/*!40000 ALTER TABLE `doracms_user_despise_content` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_user_favorite_content`
--

DROP TABLE IF EXISTS `doracms_user_favorite_content`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_user_favorite_content` (
  `content_id` int NOT NULL,
  `user_id` int NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`content_id`,`user_id`),
  UNIQUE KEY `doracms_user_favorite_content_content_id_user_id_unique` (`content_id`,`user_id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `doracms_user_favorite_content_ibfk_1` FOREIGN KEY (`content_id`) REFERENCES `doracms_content` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `doracms_user_favorite_content_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `doracms_user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_user_favorite_content`
--

LOCK TABLES `doracms_user_favorite_content` WRITE;
/*!40000 ALTER TABLE `doracms_user_favorite_content` DISABLE KEYS */;
INSERT INTO `doracms_user_favorite_content` VALUES (170,762,'2020-10-02 16:59:47','2020-10-02 16:59:47');
/*!40000 ALTER TABLE `doracms_user_favorite_content` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_user_message_content`
--

DROP TABLE IF EXISTS `doracms_user_message_content`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_user_message_content` (
  `content_id` int NOT NULL,
  `user_id` int NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`content_id`,`user_id`),
  UNIQUE KEY `doracms_user_message_content_content_id_user_id_unique` (`content_id`,`user_id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `doracms_user_message_content_ibfk_1` FOREIGN KEY (`content_id`) REFERENCES `doracms_content` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `doracms_user_message_content_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `doracms_user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_user_message_content`
--

LOCK TABLES `doracms_user_message_content` WRITE;
/*!40000 ALTER TABLE `doracms_user_message_content` DISABLE KEYS */;
/*!40000 ALTER TABLE `doracms_user_message_content` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_user_praise_content`
--

DROP TABLE IF EXISTS `doracms_user_praise_content`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_user_praise_content` (
  `content_id` int NOT NULL,
  `user_id` int NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`content_id`,`user_id`),
  UNIQUE KEY `doracms_user_praise_content_content_id_user_id_unique` (`content_id`,`user_id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `doracms_user_praise_content_ibfk_1` FOREIGN KEY (`content_id`) REFERENCES `doracms_content` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `doracms_user_praise_content_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `doracms_user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_user_praise_content`
--

LOCK TABLES `doracms_user_praise_content` WRITE;
/*!40000 ALTER TABLE `doracms_user_praise_content` DISABLE KEYS */;
INSERT INTO `doracms_user_praise_content` VALUES (172,762,'2020-10-02 17:00:37','2020-10-02 17:00:37');
/*!40000 ALTER TABLE `doracms_user_praise_content` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_version_manage`
--

DROP TABLE IF EXISTS `doracms_version_manage`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_version_manage` (
  `id` int DEFAULT NULL,
  `title` varchar(500) DEFAULT NULL,
  `client` varchar(500) DEFAULT NULL,
  `description` varchar(500) DEFAULT NULL,
  `version` varchar(500) DEFAULT NULL,
  `version_name` varchar(500) DEFAULT NULL,
  `forcibly` tinyint(1) DEFAULT '0',
  `url` varchar(500) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_version_manage`
--

LOCK TABLES `doracms_version_manage` WRITE;
/*!40000 ALTER TABLE `doracms_version_manage` DISABLE KEYS */;
INSERT INTO `doracms_version_manage` VALUES (0,'有更新啦1','0','新增自动更新','1','1.0',0,'','2020-08-15 03:42:00','2020-08-15 03:42:00');
/*!40000 ALTER TABLE `doracms_version_manage` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `doracms_watch_follow`
--

DROP TABLE IF EXISTS `doracms_watch_follow`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `doracms_watch_follow` (
  `watcher` int NOT NULL,
  `follower` int NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`watcher`,`follower`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `doracms_watch_follow`
--

LOCK TABLES `doracms_watch_follow` WRITE;
/*!40000 ALTER TABLE `doracms_watch_follow` DISABLE KEYS */;
/*!40000 ALTER TABLE `doracms_watch_follow` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2020-11-09 23:03:30
